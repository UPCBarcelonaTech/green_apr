{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Math-91",
    "Time": {
        "mean": 50.24950933456421,
        "median": 50.24950933456421,
        "std": 0,
        "max": 50.24950933456421,
        "min": 50.24950933456421,
        "count": 1
    },
    "Joules": {
        "mean": 7077.666452026367,
        "median": 7077.666452026367,
        "std": 0,
        "max": 7077.666452026367,
        "min": 7077.666452026367,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 2887.5512198567394,
        "median": 2887.5512198567394,
        "std": 0,
        "max": 2887.5512198567394,
        "min": 2887.5512198567394,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        8.489872455596924,
        15.449811935424805,
        22.409751415252686,
        29.369690895080566,
        36.32963037490845,
        43.28956985473633,
        50.24950933456421
    ],
    "Joules_Per_PatchMedian": [
        2194.73390891552,
        3008.5559994339947,
        3822.378089952469,
        4636.200180470943,
        5450.022270989418,
        6263.844361507892,
        7077.666452026367
    ],
    "JoulesNormalized_Per_PatchMedian": [
        588.7501312851907,
        971.8836460471155,
        1355.0171608090402,
        1738.150675570965,
        2121.28419033289,
        2504.4177050948147,
        2887.5512198567394
    ],
    "Inf_ExecutionTime": {
        "mean": 1.6477725982666016,
        "median": 1.529932975769043,
        "std": 0.22776919971690007,
        "max": 1.9100868701934814,
        "min": 1.440047025680542,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 1474.190324127674,
        "median": 1380.9118183970452,
        "std": 180.81538484801183,
        "max": 1682.4957845568658,
        "min": 1306.6291410446167,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 206.23393088340762,
        "median": 205.61661652326598,
        "std": 8.547171558760173,
        "max": 215.97656620740895,
        "min": 197.5049218654633,
        "count": 5
    },
    "Val_ExecutionTime": [
        6.959939479827881,
        13.919878959655762,
        20.879818439483643,
        27.839757919311523,
        34.799697399139404,
        41.759636878967285,
        48.719576358795166
    ],
    "Val_Joules": [
        813.8220905184746,
        1627.6441810369495,
        2441.466271555424,
        3255.2883620738985,
        4069.110452592373,
        4882.932543110847,
        5696.754633629322
    ],
    "Val_JoulesNormalized": [
        383.13351476192474,
        766.2670295238495,
        1149.4005442857742,
        1532.534059047699,
        1915.667573809624,
        2298.8010885715485,
        2681.934603333473
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "I",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "uncompilable",
        "wrong",
        "wrong",
        "uncompilable"
    ],
    "patches": [
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       double nOd = this.doubleValue();\n        double dOn = object.doubleValue();\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       double nOd = numerator / denominator;\n        double dOn = object.numerator / object.denominator;\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       final double nOd = doubleValue();\n        final double dOn = object.doubleValue();\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       double nOd = doubleValue().doubleValue();\n        double dOn = object.doubleValue().doubleValue();\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       double nOd = numerator * object.denominator;\n        double dOn = denominator * object.numerator;\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       double nOd = numerator.doubleValue();\n        double dOn = object.numerator.doubleValue();\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       double nOd = getNumerator();\n        double dOn = object.getDenominator();\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n",
        "    public int compareTo(Fraction object) {\n// buggy code\n//         double nOd = doubleValue();\n//         double dOn = object.doubleValue();\n       double nOd = numerator * object.denominator;\n        double dOn = denominator * object.denominator;\n        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n    }\n"
    ]
}