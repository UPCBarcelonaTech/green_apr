{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Math-28",
    "Time": {
        "mean": 165.76491260528564,
        "median": 165.76491260528564,
        "std": 0,
        "max": 165.76491260528564,
        "min": 165.76491260528564,
        "count": 1
    },
    "Joules": {
        "mean": 19940.466435992716,
        "median": 19940.466435992716,
        "std": 0,
        "max": 19940.466435992716,
        "min": 19940.466435992716,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 8143.606962752345,
        "median": 8143.606962752345,
        "std": 0,
        "max": 8143.606962752345,
        "min": 8143.606962752345,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        42.94794583320618,
        83.88693475723267,
        124.82592368125916,
        165.76491260528564
    ],
    "Joules_Per_PatchMedian": [
        6436.953877866268,
        10938.124730575084,
        15439.2955832839,
        19940.466435992716
    ],
    "JoulesNormalized_Per_PatchMedian": [
        2326.8634658515457,
        4265.777964818479,
        6204.692463785412,
        8143.606962752345
    ],
    "Inf_ExecutionTime": {
        "mean": 2.0057701587677004,
        "median": 2.0089569091796875,
        "std": 0.011414179834282492,
        "max": 2.0201239585876465,
        "min": 1.9897961616516113,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 1941.6740629696847,
        "median": 1935.7830251574514,
        "std": 16.406454798416597,
        "max": 1970.6563976287841,
        "min": 1931.7127324342728,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 386.71100187301624,
        "median": 387.9489668846129,
        "std": 8.291775997386662,
        "max": 394.9597099304199,
        "min": 374.2753608703615,
        "count": 5
    },
    "Val_ExecutionTime": [
        40.93898892402649,
        81.87797784805298,
        122.81696677207947,
        163.75595569610596
    ],
    "Val_Joules": [
        4501.170852708817,
        9002.341705417632,
        13503.512558126447,
        18004.683410835263
    ],
    "Val_JoulesNormalized": [
        1938.9144989669328,
        3877.828997933866,
        5816.743496900799,
        7755.657995867732
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "I",
        "W",
        "W",
        "W",
        "W",
        "I",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "uncompilable",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "uncompilable",
        "uncompilable",
        "wrong",
        "wrong",
        "uncompilable"
    ],
    "patches": [
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n           for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, column);\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        return row;\n                    }\n                }\n            }\n            Integer minRow = null;\n            int minIndex = tableau.getWidth();\n            for (Integer row : minRatioPositions) {\n                int i = tableau.getNumObjectiveFunctions();\n                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                    if (row == tableau.getBasicRow(i)) {\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                    }\n                }        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n           Integer minRow = null;\n            int minIndex = tableau.getWidth();\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, column);\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        return row;\n                    }\n                }\n                int i = tableau.getNumObjectiveFunctions();\n                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                    if (row == tableau.getBasicRow(i)) {\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                    }\n                }\n            }\n            return minRow;\n        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n           Integer minRow = null;\n            int minIndex = tableau.getWidth();\n            for (Integer row : minRatioPositions) {\n                int i = tableau.getNumObjectiveFunctions();\n                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                    if (row == tableau.getBasicRow(i)) {\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                    }\n                }\n            }\n            return minRow;\n        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n           Integer minRow = null;\n            int minIndex = tableau.getWidth();\n            for (Integer row : minRatioPositions) {\n                int i = tableau.getNumObjectiveFunctions();\n                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                    if (row == tableau.getBasicRow(i)) {\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                    }\n                }\n            }\n            if (minRow != null) {\n                return minRow;\n            }\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, column);\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.get        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n           Integer minRow = null;\n            int minIndex = tableau.getWidth();\n            for (Integer row : minRatioPositions) {\n                int i = tableau.getNumObjectiveFunctions();\n                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                    if (row == tableau.getBasicRow(i)) {\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                    }\n                }\n            }\n            if (minRow == null) {\n                for (Integer row : minRatioPositions) {\n                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                        int column = i + tableau.getArtificialVariableOffset();\n                        final double entry = tableau.getEntry(row, column);\n                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n               Integer minRow = null;\n                int minIndex = tableau.getWidth();\n                for (Integer row : minRatioPositions) {\n                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                        int column = i + tableau.getArtificialVariableOffset();\n                        final double entry = tableau.getEntry(row, column);\n                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                            return row;\n                        }\n                    }\n                    int i = tableau.getNumObjectiveFunctions();\n                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                        if (row == tableau.getBasicRow(i)) {\n                            if (i < minIndex) {\n                                minIndex = i;\n                                minRow = row;\n                            }\n                        }\n                    }\n                }\n                return minRow;\n        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n               for (int i = 0; i < minRatioPositions.size(); i++) {\n                    Integer row = minRatioPositions.get(i);\n                    for (int j = 0; j < tableau.getNumArtificialVariables(); j++) {\n                        int column = j + tableau.getArtificialVariableOffset();\n                        final double entry = tableau.getEntry(row, column);\n                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                            return row;\n                        }\n                    }\n                }\n                Integer minRow = null;\n                int minIndex = tableau.getWidth();\n                for (int i = 0; i < minRatioPositions.size(); i++) {\n                    Integer row = minRatioPositions.get(i);\n                    for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth() - 1 && minRow != row; j++) {\n                        if (        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n           Integer minRow = null;\n            int minIndex = tableau.getWidth();\n            for (Integer row : minRatioPositions) {\n                int i = tableau.getNumObjectiveFunctions();\n                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                    if (row == tableau.getBasicRow(i)) {\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                    }\n                }\n            }\n            return minRow;\n        } else {\n        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n           Integer minRow = null;\n            int minIndex = tableau.getWidth();\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, column);\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        return row;\n                    }\n                }\n                int i = tableau.getNumObjectiveFunctions();\n                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                    if (row == tableau.getBasicRow(i)) {\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                    }\n                }\n            }\n            if (minRow != null) {\n                return min        }\n        return minRatioPositions.get(0);\n    }\n",
        "    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n// buggy code\n//                 for (Integer row : minRatioPositions) {\n//                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n//                         int column = i + tableau.getArtificialVariableOffset();\n//                         final double entry = tableau.getEntry(row, column);\n//                         if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n//                             return row;\n//                         }\n//                     }\n//                 }\n//                 Integer minRow = null;\n//                 int minIndex = tableau.getWidth();\n//                 for (Integer row : minRatioPositions) {\n//                     int i = tableau.getNumObjectiveFunctions();\n//                     for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n//                         if (row == tableau.getBasicRow(i)) {\n//                             if (i < minIndex) {\n//                                 minIndex = i;\n//                                 minRow = row;\n//                             }\n//                         }\n//                     }\n//                 }\n//                 return minRow;\n               Integer minRow = null;\n                int minIndex = tableau.getWidth();\n                for (Integer row : minRatioPositions) {\n                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                        int column = i + tableau.getArtificialVariableOffset();\n                        final double entry = tableau.getEntry(row, column);\n                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                            return row;\n                        }\n                    }\n                    int i = tableau.getNumObjectiveFunctions();\n                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n                        if (row == tableau.getBasicRow(i)) {\n                            if (i < minIndex) {\n                                minIndex = i;\n                                minRow = row;\n                            }\n                        }\n                    }\n                }\n                return minRow;\n            }        }\n        return minRatioPositions.get(0);\n    }\n"
    ]
}