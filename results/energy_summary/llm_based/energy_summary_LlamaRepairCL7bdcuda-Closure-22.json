{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Closure-22",
    "Time": {
        "mean": 234.75770330429077,
        "median": 234.75770330429077,
        "std": 0,
        "max": 234.75770330429077,
        "min": 234.75770330429077,
        "count": 1
    },
    "Joules": {
        "mean": 39829.96515334845,
        "median": 39829.96515334845,
        "std": 0,
        "max": 39829.96515334845,
        "min": 39829.96515334845,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 15192.891702246669,
        "median": 15192.891702246669,
        "std": 0,
        "max": 15192.891702246669,
        "min": 15192.891702246669,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        68.53025007247925,
        123.93940114974976,
        179.34855222702026,
        234.75770330429077
    ],
    "Joules_Per_PatchMedian": [
        19746.964397507905,
        26441.297982788084,
        33135.63156806827,
        39829.96515334845
    ],
    "JoulesNormalized_Per_PatchMedian": [
        5827.942505890132,
        8949.592238008978,
        12071.241970127823,
        15192.891702246669
    ],
    "Inf_ExecutionTime": {
        "mean": 13.138195753097534,
        "median": 13.12109899520874,
        "std": 0.06076698580342696,
        "max": 13.228116989135742,
        "min": 13.078910112380981,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 12991.983589451313,
        "median": 13052.630812227726,
        "std": 112.33174320620738,
        "max": 13100.102640080453,
        "min": 12841.8655736804,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 2729.5428932929035,
        "median": 2706.292773771287,
        "std": 59.91127961266824,
        "max": 2821.5032869815823,
        "min": 2673.8415070176125,
        "count": 5
    },
    "Val_ExecutionTime": [
        55.40915107727051,
        110.81830215454102,
        166.22745323181152,
        221.63660430908203
    ],
    "Val_Joules": [
        6694.333585280179,
        13388.667170560358,
        20083.00075584054,
        26777.334341120724
    ],
    "Val_JoulesNormalized": [
        3121.6497321188453,
        6243.299464237691,
        9364.949196356536,
        12486.598928475381
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "uncompilable",
        "wrong",
        "wrong",
        "uncompilable",
        "wrong",
        "wrong",
        "uncompilable",
        "wrong",
        "wrong",
        "uncompilable"
    ],
    "patches": [
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR && parent.getChildCount()      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n        return;\n        }\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   Node gramps = parent.getParent();\n    if (gramps.isCall() && parent == gramps.getFirstChild()) {\n      if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA)\n          continue;\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n          return;\n        else\n          break;\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n           n == parent      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n        return;\n        }\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.FOR && parent.getChildCount()      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   int parentType = parent.getType();\n    if (parentType == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parentType != Token.EXPR_RESULT && parentType != Token.BLOCK) {\n      if (parentType == Token.FOR && parent.getChildCount() ==      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n      return;\n        }\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (parent.getType() == Token.COMMA) {\n//       Node gramps = parent.getParent();\n//       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n//         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n//       return;\n//         }\n//     }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA)\n//             continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n//             return;\n//           else\n//             break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n//            n == parent.getFirstChild().getNext().getNext())) {\n//       } else {\n//       return;\n//       }\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (!isResultUsed &&\n//         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n//       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//         return;\n//       } else if (n.isExprResult()) {\n//         return;\n//       }\n   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n      } else if (n.isExprResult()) {\n        return;\n      }\n    }\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n"
    ]
}