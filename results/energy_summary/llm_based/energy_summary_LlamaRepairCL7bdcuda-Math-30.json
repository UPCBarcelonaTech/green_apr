{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Math-30",
    "Time": {
        "mean": 319.7485374212265,
        "median": 319.7485374212265,
        "std": 0,
        "max": 319.7485374212265,
        "min": 319.7485374212265,
        "count": 1
    },
    "Joules": {
        "mean": 36839.23186889291,
        "median": 36839.23186889291,
        "std": 0,
        "max": 36839.23186889291,
        "min": 36839.23186889291,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 15307.812330186369,
        "median": 15307.812330186369,
        "std": 0,
        "max": 15307.812330186369,
        "min": 15307.812330186369,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        37.34967744350433,
        72.6495349407196,
        107.94939243793488,
        143.24924993515015,
        178.54910743236542,
        213.8489649295807,
        249.14882242679596,
        284.44867992401123,
        319.7485374212265
    ],
    "Joules_Per_PatchMedian": [
        5809.80058336854,
        9688.479494059085,
        13567.15840474963,
        17445.837315440178,
        21324.516226130723,
        25203.19513682127,
        29081.874047511814,
        32960.55295820236,
        36839.23186889291
    ],
    "JoulesNormalized_Per_PatchMedian": [
        1980.7285057425497,
        3646.6139837980268,
        5312.499461853504,
        6978.384939908981,
        8644.270417964459,
        10310.155896019936,
        11976.041374075414,
        13641.926852130891,
        15307.812330186369
    ],
    "Inf_ExecutionTime": {
        "mean": 2.249674367904663,
        "median": 2.0498199462890625,
        "std": 0.29775444453378647,
        "max": 2.579176902770996,
        "min": 1.9993610382080078,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 2092.904562523365,
        "median": 1931.121672677994,
        "std": 239.35266235043053,
        "max": 2355.5358700037,
        "min": 1896.8435913681983,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 307.58937098264687,
        "median": 314.84302768707266,
        "std": 36.84060460626559,
        "max": 339.1414065003396,
        "min": 244.67173547744756,
        "count": 5
    },
    "Val_ExecutionTime": [
        35.29985749721527,
        70.59971499443054,
        105.89957249164581,
        141.19942998886108,
        176.49928748607635,
        211.79914498329163,
        247.0990024805069,
        282.39885997772217,
        317.69871747493744
    ],
    "Val_Joules": [
        3878.678910690546,
        7757.3578213810915,
        11636.036732071636,
        15514.715642762185,
        19393.39455345273,
        23272.073464143275,
        27150.75237483382,
        31029.431285524366,
        34908.11019621491
    ],
    "Val_JoulesNormalized": [
        1665.885478055477,
        3331.770956110954,
        4997.656434166431,
        6663.541912221908,
        8329.427390277386,
        9995.312868332863,
        11661.19834638834,
        13327.083824443818,
        14992.969302499296
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "C",
        "W",
        "I",
        "I",
        "I",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "correct",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final int n1n2prod = n1 + n2;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final double n1n2prod = n1 * n2;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final int n1n2prod = n1 * n2 + 1;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final double n1n2prod = (double) n1 * n2;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final long n1n2prod = (long) n1 * n2;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final long n1n2prod = (long) n1 * (long) n2;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final int n1n2prod = n1 * n2 - 1;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final int n1n2prod = n1 * n2 + n1 + n2;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n",
        "    private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n// buggy code\n//         final int n1n2prod = n1 * n2;\n       final int n1n2prod = (n1 + n2) * (n1 + n2 + 1);\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n        return 2 * standardNormal.cumulativeProbability(z);\n    }\n"
    ]
}