{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Lang-39",
    "Time": {
        "mean": 79.25543284416199,
        "median": 79.25543284416199,
        "std": 0,
        "max": 79.25543284416199,
        "min": 79.25543284416199,
        "count": 1
    },
    "Joules": {
        "mean": 10957.623788535591,
        "median": 10957.623788535591,
        "std": 0,
        "max": 10957.623788535591,
        "min": 10957.623788535591,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 2810.84179766178,
        "median": 2810.84179766178,
        "std": 0,
        "max": 2810.84179766178,
        "min": 2810.84179766178,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        11.939360499382019,
        19.41892409324646,
        26.8984876871109,
        34.37805128097534,
        41.85761487483978,
        49.337178468704224,
        56.816742062568665,
        64.2963056564331,
        71.77586925029755,
        79.25543284416199
    ],
    "Joules_Per_PatchMedian": [
        5057.348017567396,
        5712.93421434164,
        6368.520411115884,
        7024.106607890128,
        7679.692804664372,
        8335.279001438616,
        8990.86519821286,
        9646.451394987103,
        10302.037591761347,
        10957.623788535591
    ],
    "JoulesNormalized_Per_PatchMedian": [
        1163.091438102722,
        1346.1748113870617,
        1529.2581846714015,
        1712.3415579557413,
        1895.4249312400812,
        2078.508304524421,
        2261.591677808761,
        2444.6750510931006,
        2627.7584243774404,
        2810.84179766178
    ],
    "Inf_ExecutionTime": {
        "mean": 4.459692192077637,
        "median": 4.459796905517578,
        "std": 0.0011582769566416758,
        "max": 4.461173057556152,
        "min": 4.457918882369995,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 4403.782280168533,
        "median": 4401.761820793152,
        "std": 7.746825454244634,
        "max": 4417.35558193922,
        "min": 4398.170129489899,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 978.5156411123278,
        "median": 980.0080648183821,
        "std": 21.25815640802563,
        "max": 997.6860072731974,
        "min": 943.3474074721335,
        "count": 5
    },
    "Val_ExecutionTime": [
        7.479563593864441,
        14.959127187728882,
        22.438690781593323,
        29.918254375457764,
        37.397817969322205,
        44.877381563186646,
        52.356945157051086,
        59.83650875091553,
        67.31607234477997,
        74.79563593864441
    ],
    "Val_Joules": [
        655.586196774244,
        1311.172393548488,
        1966.7585903227318,
        2622.344787096976,
        3277.9309838712197,
        3933.5171806454637,
        4589.103377419708,
        5244.689574193952,
        5900.2757709681955,
        6555.861967742439
    ],
    "Val_JoulesNormalized": [
        183.0833732843398,
        366.1667465686796,
        549.2501198530194,
        732.3334931373593,
        915.4168664216991,
        1098.5002397060389,
        1281.5836129903787,
        1464.6669862747185,
        1647.7503595590583,
        1830.8337328433981
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "C",
        "I",
        "W",
        "W",
        "W",
        "C",
        "I",
        "I",
        "I"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "correct",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           if (searchList[i] == null || replacementList[i] == null) {\n                continue;\n            }\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           if (searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n                continue;\n            }\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           if (searchList[i] == null || searchList[i].length() == 0) {\n                continue;\n            }\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           increase += replacementList[i].length() - searchList[i].length();\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           if (searchList[i].length() == 0) {\n                continue;\n            }\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           if (searchList[i]==null || replacementList[i]==null) {\n                continue;\n            }\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           if (searchList[i] == null || replacementList[i] == null || searchList[i].length() == 0) {\n                continue;\n            }\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           if (replaceIndex != i) {\n                continue;\n            }\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n",
        "    private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                      boolean repeat, int timeToLive) \n    {\n        if (text == null || text.length() == 0 || searchList == null || \n            searchList.length == 0 || replacementList == null || replacementList.length == 0) \n        {\n            return text;\n        }\n        if (timeToLive < 0) {\n            throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n        }\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength\n                + \" vs \"\n                + replacementLength);\n        }\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        if (textIndex == -1) {\n            return text;\n        }\n        int start = 0;\n        int increase = 0;\n        for (int i = 0; i < searchList.length; i++) {\n// buggy code\n// \n           if (searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null)\n                continue;\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; \n            }\n        }\n        increase = Math.min(increase, text.length() / 5);\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (textIndex != -1) {\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n            start = textIndex + searchList[replaceIndex].length();\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                    searchList[i].length() == 0 || replacementList[i] == null) \n                {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n"
    ]
}