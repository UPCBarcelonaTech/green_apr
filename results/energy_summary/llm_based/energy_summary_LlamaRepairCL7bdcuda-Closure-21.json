{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Closure-21",
    "Time": {
        "mean": 13.573087215423584,
        "median": 13.573087215423584,
        "std": 0,
        "max": 13.573087215423584,
        "min": 13.573087215423584,
        "count": 1
    },
    "Joules": {
        "mean": 13387.34443190098,
        "median": 13387.34443190098,
        "std": 0,
        "max": 13387.34443190098,
        "min": 13387.34443190098,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 3217.6947775721546,
        "median": 3217.6947775721546,
        "std": 0,
        "max": 3217.6947775721546,
        "min": 3217.6947775721546,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [],
    "Joules_Per_PatchMedian": [],
    "JoulesNormalized_Per_PatchMedian": [],
    "Inf_ExecutionTime": {
        "mean": 14.380303621292114,
        "median": 13.573087215423584,
        "std": 1.1512589304002177,
        "max": 15.813832998275757,
        "min": 13.52616000175476,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 13931.90811103344,
        "median": 13387.34443190098,
        "std": 913.8241448953193,
        "max": 15129.92032700777,
        "min": 13151.528167533874,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 3169.4359252977374,
        "median": 3217.6947775721546,
        "std": 153.0157221303039,
        "max": 3364.4285762906075,
        "min": 2971.712755966186,
        "count": 5
    },
    "Val_ExecutionTime": [],
    "Val_Joules": [],
    "Val_JoulesNormalized": [],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable"
    ],
    "patches": [
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n             (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   boolean isExprResult = n.isExprResult();\n    if (isExprResult) {\n      return;\n    }\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.B        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   if (parent.isExprResult()) {\n      return;\n    }\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.get        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   if (parent.isExprResult()) {\n      return;\n    }\n    if (parent.isQualifiedName() && parent.getJSDocInfo() != null) {\n      return;\n    }\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.get        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   if (n.isExprResult()) {\n      return;\n    }\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.get        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   boolean isExprResult = n.isExprResult();\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   if (NodeUtil.isExpressionResultUsed(n)) {\n      return;\n    }\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n// buggy code\n//     if (n.isExprResult()) {\n//       return;\n//     }\n//     if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n//       return;\n//     }\n//     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n//     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n//     if (parent.getType() == Token.COMMA) {\n//       if (isResultUsed) {\n//         return;\n//       }\n//       if (n == parent.getLastChild()) {\n//         for (Node an : parent.getAncestors()) {\n//           int ancestorType = an.getType();\n//           if (ancestorType == Token.COMMA) continue;\n//           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n//           else break;\n//         }\n//       }\n//     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n//       if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n//         return;\n//       }\n//     }\n//     if (\n   if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n"
    ]
}