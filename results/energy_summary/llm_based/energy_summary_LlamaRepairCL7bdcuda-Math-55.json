{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Math-55",
    "Time": {
        "mean": 160.85686922073364,
        "median": 160.85686922073364,
        "std": 0,
        "max": 160.85686922073364,
        "min": 160.85686922073364,
        "count": 1
    },
    "Joules": {
        "mean": 21025.8342615366,
        "median": 21025.8342615366,
        "std": 0,
        "max": 21025.8342615366,
        "min": 21025.8342615366,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 8560.221857357028,
        "median": 8560.221857357028,
        "std": 0,
        "max": 8560.221857357028,
        "min": 8560.221857357028,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        23.38031315803528,
        43.01982116699219,
        62.6593291759491,
        82.298837184906,
        101.93834519386292,
        121.57785320281982,
        141.21736121177673,
        160.85686922073364
    ],
    "Joules_Per_PatchMedian": [
        5596.819273561239,
        7800.964271843433,
        10005.109270125628,
        12209.254268407822,
        14413.399266690016,
        16617.54426497221,
        18821.689263254404,
        21025.8342615366
    ],
    "JoulesNormalized_Per_PatchMedian": [
        1526.8497650682934,
        2531.617206823827,
        3536.3846485793606,
        4541.152090334894,
        5545.919532090427,
        6550.686973845961,
        7555.4544156014945,
        8560.221857357028
    ],
    "Inf_ExecutionTime": {
        "mean": 3.7401072502136232,
        "median": 3.740805149078369,
        "std": 0.09394216318439232,
        "max": 3.849311113357544,
        "min": 3.613085985183716,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 3390.476755683422,
        "median": 3392.674275279045,
        "std": 74.31322044125423,
        "max": 3480.2779139280324,
        "min": 3289.124220943451,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 518.071232662201,
        "median": 522.0823233127599,
        "std": 26.140954500858754,
        "max": 549.681099784374,
        "min": 485.00818784236935,
        "count": 5
    },
    "Val_ExecutionTime": [
        19.63950800895691,
        39.27901601791382,
        58.91852402687073,
        78.55803203582764,
        98.19754004478455,
        117.83704805374146,
        137.47655606269836,
        157.11606407165527
    ],
    "Val_Joules": [
        2204.144998282194,
        4408.289996564388,
        6612.434994846582,
        8816.579993128777,
        11020.72499141097,
        13224.869989693165,
        15429.014987975359,
        17633.159986257553
    ],
    "Val_JoulesNormalized": [
        1004.7674417555336,
        2009.5348835110672,
        3014.3023252666007,
        4019.069767022134,
        5023.837208777668,
        6028.6046505332015,
        7033.372092288735,
        8038.139534044269
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n     return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.y, v1.x * v2.y - v1.y * v2.x);\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n     return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n   return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n     return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.x * v2.y - v1.y * v2.x, v1.x * v2.z - v1.z * v2.x);\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n     return new Vector3D(v1.y * v2.z - v2.y * v1.z, v1.z * v2.x - v2.z * v1.x, v1.x * v2.y - v2.x * v1.y);\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n     return new Vector3D(v1.y * v2.z - v2.y * v1.z, v2.y * v1.x - v1.y * v2.x, v1.x * v2.y - v2.x * v1.y);\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n     return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.y - v1.y * v2.z, v1.x * v2.y - v1.y * v2.x);\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n     return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x).normalize();\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n  }\n",
        "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n// buggy code\n//       return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n     return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x, 0);\n  }\n"
    ]
}