{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Lang-53",
    "Time": {
        "mean": 85.9275631904602,
        "median": 85.9275631904602,
        "std": 0,
        "max": 85.9275631904602,
        "min": 85.9275631904602,
        "count": 1
    },
    "Joules": {
        "mean": 13417.098118090633,
        "median": 13417.098118090633,
        "std": 0,
        "max": 13417.098118090633,
        "min": 13417.098118090633,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 3345.7512093782443,
        "median": 3345.7512093782443,
        "std": 0,
        "max": 3345.7512093782443,
        "min": 3345.7512093782443,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        16.48957121372223,
        26.409284353256226,
        36.32899749279022,
        46.24871063232422,
        56.168423771858215,
        66.08813691139221,
        76.00785005092621,
        85.9275631904602
    ],
    "Joules_Per_PatchMedian": [
        7277.738898128271,
        8154.790215265751,
        9031.84153240323,
        9908.89284954071,
        10785.944166678191,
        11662.995483815672,
        12540.046800953152,
        13417.098118090633
    ],
    "JoulesNormalized_Per_PatchMedian": [
        1552.4799942851066,
        1808.661596441269,
        2064.843198597431,
        2321.024800753594,
        2577.2064029097564,
        2833.388005065919,
        3089.5696072220817,
        3345.7512093782443
    ],
    "Inf_ExecutionTime": {
        "mean": 6.577398633956909,
        "median": 6.569858074188232,
        "std": 0.025600490010262888,
        "max": 6.622038125991821,
        "min": 6.558029890060425,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 6416.313238170147,
        "median": 6400.6875809907915,
        "std": 52.93807412680225,
        "max": 6497.145079958438,
        "min": 6355.891256070137,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 1293.3888628005982,
        "median": 1296.2983921289442,
        "std": 26.429810098807764,
        "max": 1320.5910326361654,
        "min": 1250.2857564449314,
        "count": 5
    },
    "Val_ExecutionTime": [
        9.919713139533997,
        19.839426279067993,
        29.75913941860199,
        39.678852558135986,
        49.59856569766998,
        59.51827883720398,
        69.43799197673798,
        79.35770511627197
    ],
    "Val_Joules": [
        877.0513171374796,
        1754.1026342749592,
        2631.153951412439,
        3508.2052685499193,
        4385.2565856874,
        5262.30790282488,
        6139.359219962361,
        7016.410537099841
    ],
    "Val_JoulesNormalized": [
        256.1816021561624,
        512.3632043123248,
        768.544806468487,
        1024.7264086246496,
        1280.9080107808122,
        1537.0896129369748,
        1793.2712150931375,
        2049.4528172493
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "uncompilable",
        "wrong"
    ],
    "patches": [
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           done = true;\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            done = true;\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           done = true;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           done = true;\n        }\n        if (field == Calendar.SECOND) {\n            done = true;\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            done = true;\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n        if (field == Calendar.MINUTE) {\n            done = true;\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           done = true;\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            done = true;\n        }\n        if (!done) {\n            int minutes = val.get(Calendar.MINUTE);\n            time = time - (minutes * 60000L);\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           done = field == Calendar.SECOND;\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            done = field == Calendar.SECOND;\n        }\n        if (!done) {\n            done = field == Calendar.MINUTE;\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           if (field == Calendar.SECOND) {\n                done = true;\n                }\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        if (field == Calendar.MINUTE) {\n            done = true;\n            }\n        }\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
        "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n// buggy code\n//         if (field == Calendar.SECOND) {\n//             done = true;\n//             }\n//         }\n//         int seconds = val.get(Calendar.SECOND);\n//         if (!done && (!round || seconds < 30)) {\n//             time = time - (seconds * 1000L);\n//         if (field == Calendar.MINUTE) {\n//             done = true;\n//             }\n           if (field == Calendar.SECOND) {\n                done = true;\n                }\n        }\n        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n        if (field == Calendar.MINUTE) {\n            done = true;\n            }\n        }\n        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            int offset = 0;\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            if (offset != 0) {\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n"
    ]
}