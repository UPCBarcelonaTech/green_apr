{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Math-52",
    "Time": {
        "mean": 118.64971911907196,
        "median": 118.64971911907196,
        "std": 0,
        "max": 118.64971911907196,
        "min": 118.64971911907196,
        "count": 1
    },
    "Joules": {
        "mean": 26130.89347645641,
        "median": 26130.89347645641,
        "std": 0,
        "max": 26130.89347645641,
        "min": 26130.89347645641,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 8788.385575640206,
        "median": 8788.385575640206,
        "std": 0,
        "max": 8788.385575640206,
        "min": 8788.385575640206,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        35.250900626182556,
        56.10060524940491,
        76.95030987262726,
        97.80001449584961,
        118.64971911907196
    ],
    "Joules_Per_PatchMedian": [
        16809.732444995643,
        19140.022702860835,
        21470.312960726027,
        23800.60321859122,
        26130.89347645641
    ],
    "JoulesNormalized_Per_PatchMedian": [
        4544.4849539399165,
        5605.460109364989,
        6666.435264790061,
        7727.410420215134,
        8788.385575640206
    ],
    "Inf_ExecutionTime": {
        "mean": 14.418980026245118,
        "median": 14.401196002960205,
        "std": 0.042985481970530794,
        "max": 14.494317054748535,
        "min": 14.387063980102539,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 14456.483010802269,
        "median": 14479.442187130451,
        "std": 39.65546684514272,
        "max": 14489.637700450421,
        "min": 14397.15023239851,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 3480.323089985847,
        "median": 3483.509798514844,
        "std": 38.72413421848559,
        "max": 3519.7590149641037,
        "min": 3416.653420197963,
        "count": 5
    },
    "Val_ExecutionTime": [
        20.84970462322235,
        41.6994092464447,
        62.54911386966705,
        83.3988184928894,
        104.24852311611176
    ],
    "Val_Joules": [
        2330.290257865192,
        4660.580515730384,
        6990.870773595576,
        9321.161031460768,
        11651.45128932596
    ],
    "Val_JoulesNormalized": [
        1060.9751554250724,
        2121.950310850145,
        3182.9254662752173,
        4243.90062170029,
        5304.875777125362
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "uncompilable",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "uncompilable",
        "uncompilable",
        "wrong"
    ],
    "patches": [
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n if (c == 0.0) {\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n    if (c == 0.0) {\n      k = v2Su2.crossProduct(v3Su3);;\n      c = k.dotProduct(u2.crossProduct(u3));;\n      if (c == 0.0) {\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n if (c == 0) {\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n    if (c == 0) {\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(u2.crossProduct(u3));\n      if (c == 0) {\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n if (c == 0.0) {\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n    if (c == 0.0) {\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(u2.crossProduct(u3));\n      if (c == 0.0) {\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n else {\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n    if (c == 0) {\n      k = v2Su2.crossProduct(v3Su3);;\n      c = k.dotProduct(u2.crossProduct(u3));;\n      if (c == 0) {\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n if (c == 0) {\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n    if (c == 0) {\n      k = v2Su2.crossProduct(v3Su3);;\n      c = k.dotProduct(u2.crossProduct(u3));;\n      if (c == 0) {\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n c = FastMath.abs(c);\n  if (c == 0) {\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n    if (c == 0) {\n      k = v2Su2.crossProduct(v3Su3);;\n      c = k.dotProduct(u2.crossProduct(u3));;\n      if (c == 0) {\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n  k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                   uRef.getZ() * q1 - uRef.getX() * q3,\n                   uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n",
        "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n// buggy code\n//   if (c == 0) {\n//     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n//     Vector3D v3Su3 = v3.subtract(u3);\n//     k = v1Su1.crossProduct(v3Su3);\n//     Vector3D u2Prime = u1.crossProduct(u3);\n//     c = k.dotProduct(u2Prime);\n//     if (c == 0) {\n//       k = v2Su2.crossProduct(v3Su3);;\n//       c = k.dotProduct(u2.crossProduct(u3));;\n//       if (c == 0) {\n c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n      uRef = u2;\n      vRef = v2;\n    }\n  }\n  c = FastMath.sqrt(c);\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n  }\n"
    ]
}