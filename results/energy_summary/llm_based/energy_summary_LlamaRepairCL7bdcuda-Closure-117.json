{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Closure-117",
    "Time": {
        "mean": 1.5802040100097656,
        "median": 1.5802040100097656,
        "std": 0,
        "max": 1.5802040100097656,
        "min": 1.5802040100097656,
        "count": 1
    },
    "Joules": {
        "mean": 1446.35461217165,
        "median": 1446.35461217165,
        "std": 0,
        "max": 1446.35461217165,
        "min": 1446.35461217165,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 244.13540135622043,
        "median": 244.13540135622043,
        "std": 0,
        "max": 244.13540135622043,
        "min": 244.13540135622043,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [],
    "Joules_Per_PatchMedian": [],
    "JoulesNormalized_Per_PatchMedian": [],
    "Inf_ExecutionTime": {
        "mean": 1.6540982246398925,
        "median": 1.5802040100097656,
        "std": 0.189678242783853,
        "max": 1.9899911880493164,
        "min": 1.5400009155273438,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 1507.8885415029526,
        "median": 1446.35461217165,
        "std": 155.58899282062288,
        "max": 1783.8751910924911,
        "min": 1416.9348321199418,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 248.42924360752107,
        "median": 244.13540135622043,
        "std": 22.53272387671489,
        "max": 287.2028185606,
        "min": 230.98012707233443,
        "count": 5
    },
    "Val_ExecutionTime": [],
    "Val_Joules": [],
    "Val_JoulesNormalized": [],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable"
    ],
    "patches": [
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   JSType type = getJSType(n);\n    if (n.isGetProp()) {\n      ObjectType objectType = type.dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    if (n.isGetProp()) {\n      ObjectType objectType = type.dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n           String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (n.isGetProp()) {\n      ObjectType objectType = type.dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   JSType type = getJSType(n);\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (n.isGetProp()) {\n      ObjectType objectType = type.toObjectType();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n",
        "  String getReadableJSTypeName(Node n, boolean dereference) {\n// buggy code\n//     if (n.isGetProp()) {\n//       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n//       if (objectType != null) {\n//         String propName = n.getLastChild().getString();\n//         if (objectType.getConstructor() != null &&\n//             objectType.getConstructor().isInterface()) {\n//           objectType = FunctionType.getTopDefiningInterface(\n//               objectType, propName);\n//         } else {\n//           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n//             objectType = objectType.getImplicitPrototype();\n//           }\n//         }\n//         if (objectType != null &&\n//             (objectType.getConstructor() != null ||\n//              objectType.isFunctionPrototypeType())) {\n//           return objectType.toString() + \".\" + propName;\n//         }\n//       }\n//     }\n//     JSType type = getJSType(n);\n//     if (dereference) {\n//       ObjectType dereferenced = type.dereference();\n//       if (dereferenced != null) {\n//         type = dereferenced;\n//       }\n//     }\n//     if (type.isFunctionPrototypeType() ||\n//         (type.toObjectType() != null &&\n//          type.toObjectType().getConstructor() != null)) {\n//       return type.toString();\n//     }\n   JSType type = getJSType(n);\n    if (n.isGetProp()) {\n      ObjectType objectType = type.dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n    if (dereference) {\n      type = type.dereference();\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType()    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n"
    ]
}