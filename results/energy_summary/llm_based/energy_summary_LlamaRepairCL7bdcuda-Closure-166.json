{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Closure-166",
    "Time": {
        "mean": 1.1800498962402344,
        "median": 1.1800498962402344,
        "std": 0,
        "max": 1.1800498962402344,
        "min": 1.1800498962402344,
        "count": 1
    },
    "Joules": {
        "mean": 1081.9443794131278,
        "median": 1081.9443794131278,
        "std": 0,
        "max": 1081.9443794131278,
        "min": 1081.9443794131278,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 185.25616875886908,
        "median": 185.25616875886908,
        "std": 0,
        "max": 185.25616875886908,
        "min": 185.25616875886908,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [],
    "Joules_Per_PatchMedian": [],
    "JoulesNormalized_Per_PatchMedian": [],
    "Inf_ExecutionTime": {
        "mean": 1.314268445968628,
        "median": 1.1800498962402344,
        "std": 0.19304712844776176,
        "max": 1.530785083770752,
        "min": 1.1602511405944824,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 1184.601601498127,
        "median": 1081.9443794131278,
        "std": 152.25209920664773,
        "max": 1354.3855445742606,
        "min": 1059.0972503900527,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 187.98117184400553,
        "median": 185.25616875886908,
        "std": 13.300413909760062,
        "max": 203.08208307027803,
        "min": 174.82806597948058,
        "count": 5
    },
    "Val_ExecutionTime": [],
    "Val_Joules": [],
    "Val_JoulesNormalized": [],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "uncompilable",
        "wrong",
        "wrong",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable"
    ],
    "patches": [
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n   } else if (constraint.isFunctionType()) {\n      matchFunctionTypeConstraint(constraint.toFunctionType());\n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n   } else {\n      super.matchConstraint(constraint);\n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n   } else if (constraint.isObjectType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n   } else if (constraint.isObjectType()) {\n      matchObjectTypeConstraint(constraint.toObjectType());\n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n   } else {\n      matchNonRecordTypeConstraint(constraint);\n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n   } else {\n      matchObjectTypeConstraint(constraint);\n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n   } else if (constraint.isFunctionType()) {\n      matchFunctionTypeConstraint(constraint.toObjectType());\n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n   } else if (constraint.isFunctionType()) {\n      matchFunctionTypeConstraint(constraint);\n    }\n  }\n",
        "  public void matchConstraint(JSType constraint) {\n    if (hasReferenceName()) {\n      return;\n    }\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n// buggy code\n// \n}    }\n  }\n"
    ]
}