{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Math-102",
    "Time": {
        "mean": 65.9198009967804,
        "median": 65.9198009967804,
        "std": 0,
        "max": 65.9198009967804,
        "min": 65.9198009967804,
        "count": 1
    },
    "Joules": {
        "mean": 11409.429960024354,
        "median": 11409.429960024354,
        "std": 0,
        "max": 11409.429960024354,
        "min": 11409.429960024354,
        "count": 1
    },
    "JoulesNormalized": {
        "mean": 3702.857388013601,
        "median": 3702.857388013601,
        "std": 0,
        "max": 3702.857388013601,
        "min": 3702.857388013601,
        "count": 1
    },
    "NrExecutions": 1,
    "ExecutionsIds": [
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "ExecutionTime_Per_PatchMedian": [
        11.91974949836731,
        18.669755935668945,
        25.41976237297058,
        32.16976881027222,
        38.91977524757385,
        45.66978168487549,
        52.419788122177124,
        59.16979455947876,
        65.9198009967804
    ],
    "Joules_Per_PatchMedian": [
        5589.33371835947,
        6316.845748567581,
        7044.357778775691,
        7771.869808983802,
        8499.381839191912,
        9226.893869400023,
        9954.405899608133,
        10681.917929816243,
        11409.429960024354
    ],
    "JoulesNormalized_Per_PatchMedian": [
        1197.0633385121819,
        1510.2875946998593,
        1823.5118508875366,
        2136.736107075214,
        2449.9603632628914,
        2763.184619450569,
        3076.408875638246,
        3389.6331318259236,
        3702.857388013601
    ],
    "Inf_ExecutionTime": {
        "mean": 5.434101200103759,
        "median": 5.169743061065674,
        "std": 0.6389689293528724,
        "max": 6.56912088394165,
        "min": 5.051778078079224,
        "count": 5
    },
    "Inf_Joules": {
        "mean": 5079.553538026809,
        "median": 4861.82168815136,
        "std": 485.21791843708786,
        "max": 5946.00363548994,
        "min": 4824.930256676673,
        "count": 5
    },
    "Inf_JoulesNormalized": {
        "mean": 872.5132627916335,
        "median": 883.8390823245045,
        "std": 39.12712732875969,
        "max": 913.1829054832465,
        "min": 807.7118158102039,
        "count": 5
    },
    "Val_ExecutionTime": [
        6.750006437301636,
        13.500012874603271,
        20.250019311904907,
        27.000025749206543,
        33.75003218650818,
        40.500038623809814,
        47.25004506111145,
        54.000051498413086,
        60.75005793571472
    ],
    "Val_Joules": [
        727.5120302081104,
        1455.024060416221,
        2182.5360906243313,
        2910.048120832442,
        3637.5601510405522,
        4365.072181248663,
        5092.584211456773,
        5820.096241664884,
        6547.608271872994
    ],
    "Val_JoulesNormalized": [
        313.2242561876774,
        626.4485123753548,
        939.6727685630322,
        1252.8970247507095,
        1566.121280938387,
        1879.3455371260643,
        2192.5697933137417,
        2505.794049501419,
        2819.0183056890965
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                double dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            if (expected[i] > 0) {\n                double dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n            }\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]) / expected[i];\n                sumSq += dev * dev;\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0;\n        double dev = 0.0;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            double dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]) / expected[i];\n            sumSq += dev * dev;\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            if (expected[i] > 0) {\n                sumSq += dev * dev / expected[i];\n            }\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                if (expected[i] > 0) {\n                    sumSq += dev * dev / expected[i];\n                }\n        }\n        return sumSq;\n    }\n",
        "    public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n// buggy code\n//         double sumSq = 0.0d;\n//         double dev = 0.0d;\n//         for (int i = 0; i < observed.length; i++) {\n//                 dev = ((double) observed[i] - expected[i]);\n//                 sumSq += dev * dev / expected[i];\n       double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n                dev = ((double) observed[i] - expected[i]);\n                sumSq += dev * dev / (expected[i] + 1);\n        }\n        return sumSq;\n    }\n"
    ]
}