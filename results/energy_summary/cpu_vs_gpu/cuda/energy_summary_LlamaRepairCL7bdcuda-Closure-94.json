{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Closure-94",
    "Time": {
        "mean": 174.97682404518127,
        "median": 174.97682404518127,
        "std": 0.0,
        "max": 174.97682404518127,
        "min": 174.97682404518127,
        "count": 4
    },
    "Joules": {
        "mean": 21391.33088686466,
        "median": 21391.33088686466,
        "std": 0.0,
        "max": 21391.33088686466,
        "min": 21391.33088686466,
        "count": 4
    },
    "JoulesNormalized": {
        "mean": 9399.879342526197,
        "median": 9399.879342526197,
        "std": 0.0,
        "max": 9399.879342526197,
        "min": 9399.879342526197,
        "count": 4
    },
    "NrExecutions": 4,
    "ExecutionsIds": [
        "s1",
        "s2",
        "s3",
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n",
        "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n"
    ]
}