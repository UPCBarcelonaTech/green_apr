{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Closure-164",
    "Time": {
        "mean": 4.3389809131622314,
        "median": 4.3389809131622314,
        "std": 0.0,
        "max": 4.3389809131622314,
        "min": 4.3389809131622314,
        "count": 3
    },
    "Joules": {
        "mean": 4118.766308641434,
        "median": 4118.766308641434,
        "std": 0.0,
        "max": 4118.766308641434,
        "min": 4118.766308641434,
        "count": 3
    },
    "JoulesNormalized": {
        "mean": 843.5979136586188,
        "median": 843.5979136586188,
        "std": 0.0,
        "max": 843.5979136586188,
        "min": 843.5979136586188,
        "count": 3
    },
    "NrExecutions": 3,
    "ExecutionsIds": [
        "s1",
        "s2",
        "s3"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n",
        "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 4b9583778..1c900acd9 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -125,25 +125,13 @@ final class ArrowType extends JSType {\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)} and\n         // {function(...NoType)} to to indicate that arity should not be\n         // checked. Strictly speaking, this is not a correct formulation,\n         // because now a sub-function can required arguments that are var_args\n         // in the super-function. So we special-case this.\n-        boolean isTopFunction =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType() ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-          return false;\n-        }\n-      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@ final class ArrowType extends JSType {\n     }\n \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-    if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-        && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n   }\n"
    ]
}