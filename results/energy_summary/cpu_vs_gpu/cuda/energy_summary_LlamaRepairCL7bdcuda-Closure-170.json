{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Closure-170",
    "Time": {
        "mean": 2.6009647846221924,
        "median": 2.6009647846221924,
        "std": 0.0,
        "max": 2.6009647846221924,
        "min": 2.6009647846221924,
        "count": 4
    },
    "Joules": {
        "mean": 2402.4142381787296,
        "median": 2402.4142381787296,
        "std": 0.0,
        "max": 2402.4142381787296,
        "min": 2402.4142381787296,
        "count": 4
    },
    "JoulesNormalized": {
        "mean": 443.4245051741598,
        "median": 443.4245051741598,
        "std": 0.0,
        "max": 443.4245051741598,
        "min": 443.4245051741598,
        "count": 4
    },
    "NrExecutions": 4,
    "ExecutionsIds": [
        "s1",
        "s2",
        "s3",
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "uncompilable",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n",
        "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex d58f80cb..ecba09b1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -479,30 +479,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (n.isName() && n.getString().equals(varName)) {\n+          if (n.isName() && n.getString().equals(varName) &&\n             // We make a special exception when the entire cfgNode is a chain\n             // of assignments, since in that case the assignment statements\n             // will happen after the inlining of the right hand side.\n             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n             //   and remove this special case.\n-            if (parent.isAssign() && (parent.getFirstChild() == n)\n-                && isAssignChain(parent, cfgNode)) {\n+              !(parent.isAssign() &&\n+               (parent.getFirstChild() == n))) {\n               // Don't count lhs of top-level assignment chain\n-              return;\n-            } else {\n               numUsesWithinCfgNode++;\n-            }\n           }\n         }\n \n-        private boolean isAssignChain(Node child, Node ancestor) {\n-          for (Node n = child; n != ancestor; n = n.getParent()) {\n-            if (!n.isAssign()) {\n-              return false;\n-            }\n-          }\n-          return true;\n-        }\n       };\n \n       NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n"
    ]
}