{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcuda-Math-31",
    "Time": {
        "mean": 219.08466792106628,
        "median": 219.08466792106628,
        "std": 0.0,
        "max": 219.08466792106628,
        "min": 219.08466792106628,
        "count": 4
    },
    "Joules": {
        "mean": 26720.531543815134,
        "median": 26720.531543815134,
        "std": 0.0,
        "max": 26720.531543815134,
        "min": 26720.531543815134,
        "count": 4
    },
    "JoulesNormalized": {
        "mean": 10623.90657095909,
        "median": 10623.90657095909,
        "std": 0.0,
        "max": 10623.90657095909,
        "min": 10623.90657095909,
        "count": 4
    },
    "NrExecutions": 4,
    "ExecutionsIds": [
        "s1",
        "s2",
        "s3",
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cuda",
        "s2_cuda",
        "s3_cuda",
        "s4_cuda",
        "s5_cuda"
    ],
    "NrExecutionsInference": 5,
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "uncompilable",
        "wrong",
        "wrong",
        "uncompilable",
        "wrong",
        "wrong",
        "uncompilable",
        "uncompilable"
    ],
    "patches": [
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n",
        "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n"
    ]
}