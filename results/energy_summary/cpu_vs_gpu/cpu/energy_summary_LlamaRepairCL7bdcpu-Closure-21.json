{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcpu-Closure-21",
    "Time": {
        "mean": 293.12026250362396,
        "median": 293.12026250362396,
        "std": 0.0,
        "max": 293.12026250362396,
        "min": 293.12026250362396,
        "count": 4
    },
    "Joules": {
        "mean": 300718.68921375275,
        "median": 300718.68921375275,
        "std": 0.0,
        "max": 300718.68921375275,
        "min": 300718.68921375275,
        "count": 4
    },
    "JoulesNormalized": {
        "mean": 78629.01885701418,
        "median": 78629.01885701418,
        "std": 0.0,
        "max": 78629.01885701418,
        "min": 78629.01885701418,
        "count": 4
    },
    "NrExecutions": 4,
    "ExecutionsIds": [
        "s1",
        "s2",
        "s3",
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cpu",
        "s2_cpu",
        "s4_cpu",
        "s5_cpu"
    ],
    "NrExecutionsInference": 4,
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable"
    ],
    "patches": [
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n",
        "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n"
    ]
}