{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcpu-Closure-32",
    "Time": {
        "mean": 290.3101878166199,
        "median": 290.3101878166199,
        "std": 0.0,
        "max": 290.3101878166199,
        "min": 290.3101878166199,
        "count": 4
    },
    "Joules": {
        "mean": 299266.69791396265,
        "median": 299266.69791396265,
        "std": 0.0,
        "max": 299266.69791396265,
        "min": 299266.69791396265,
        "count": 4
    },
    "JoulesNormalized": {
        "mean": 79554.46237537266,
        "median": 79554.46237537266,
        "std": 0.0,
        "max": 79554.46237537266,
        "min": 79554.46237537266,
        "count": 4
    },
    "NrExecutions": 4,
    "ExecutionsIds": [
        "s1",
        "s2",
        "s3",
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cpu",
        "s2_cpu",
        "s4_cpu",
        "s5_cpu"
    ],
    "NrExecutionsInference": 4,
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable",
        "uncompilable"
    ],
    "patches": [
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n",
        "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n"
    ]
}