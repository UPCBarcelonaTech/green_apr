{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcpu-Lang-19",
    "Time": {
        "mean": 181.46969759464264,
        "median": 181.46969759464264,
        "std": 0.0,
        "max": 181.46969759464264,
        "min": 181.46969759464264,
        "count": 4
    },
    "Joules": {
        "mean": 101443.54877499343,
        "median": 101443.54877499343,
        "std": 0.0,
        "max": 101443.54877499343,
        "min": 101443.54877499343,
        "count": 4
    },
    "JoulesNormalized": {
        "mean": 26948.694549745327,
        "median": 26948.694549745327,
        "std": 0.0,
        "max": 26948.694549745327,
        "min": 26948.694549745327,
        "count": 4
    },
    "NrExecutions": 4,
    "ExecutionsIds": [
        "s1",
        "s2",
        "s3",
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cpu",
        "s2_cpu",
        "s4_cpu",
        "s5_cpu"
    ],
    "NrExecutionsInference": 4,
    "ExecutionTime_Per_PatchMedian": [
        99.9350528717041,
        108.9944578409195,
        118.05386281013489,
        127.11326777935028,
        136.17267274856567,
        145.23207771778107,
        154.29148268699646,
        163.35088765621185,
        172.41029262542725,
        181.46969759464264
    ],
    "Joules_Per_PatchMedian": [
        94087.52409804464,
        94904.86017326117,
        95722.1962484777,
        96539.53232369423,
        97356.86839891077,
        98174.2044741273,
        98991.54054934383,
        99808.87662456036,
        100626.2126997769,
        101443.54877499343
    ],
    "JoulesNormalized_Per_PatchMedian": [
        24767.784967190033,
        25010.10825414062,
        25252.43154109121,
        25494.754828041798,
        25737.078114992386,
        25979.401401942974,
        26221.724688893562,
        26464.04797584415,
        26706.37126279474,
        26948.694549745327
    ],
    "Inf_ExecutionTime": {
        "mean": 92.47217267751694,
        "median": 90.87564790248871,
        "std": 4.486064869836944,
        "max": 99.04886889457703,
        "min": 89.0885260105133,
        "count": 4
    },
    "Inf_Joules": {
        "mean": 94921.07431865335,
        "median": 93270.18802282811,
        "std": 4384.782315672159,
        "max": 101333.31442502736,
        "min": 91810.60680392981,
        "count": 4
    },
    "Inf_JoulesNormalized": {
        "mean": 24731.914476442344,
        "median": 24525.461680239445,
        "std": 1031.8934597860282,
        "max": 26075.983838927743,
        "min": 23800.75070636274,
        "count": 4
    },
    "Val_ExecutionTime": [
        9.059404969215393,
        18.118809938430786,
        27.17821490764618,
        36.23761987686157,
        45.297024846076965,
        54.35642981529236,
        63.41583478450775,
        72.47523975372314,
        81.53464472293854,
        90.59404969215393
    ],
    "Val_Joules": [
        817.3360752165318,
        1634.6721504330635,
        2452.0082256495953,
        3269.344300866127,
        4086.6803760826588,
        4904.0164512991905,
        5721.352526515722,
        6538.688601732254,
        7356.024676948786,
        8173.3607521653175
    ],
    "Val_JoulesNormalized": [
        242.32328695058823,
        484.64657390117645,
        726.9698608517647,
        969.2931478023529,
        1211.6164347529411,
        1453.9397217035294,
        1696.2630086541176,
        1938.5862956047058,
        2180.909582555294,
        2423.2328695058823
    ],
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n",
        "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n"
    ]
}