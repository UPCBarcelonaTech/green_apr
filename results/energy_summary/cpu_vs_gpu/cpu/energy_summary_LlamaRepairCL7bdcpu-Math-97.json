{
    "TOOL_BUG_ID": "LlamaRepairCL7bdcpu-Math-97",
    "Time": {
        "mean": 112.86556220054626,
        "median": 112.86556220054626,
        "std": 0.0,
        "max": 112.86556220054626,
        "min": 112.86556220054626,
        "count": 4
    },
    "Joules": {
        "mean": 65424.970235359695,
        "median": 65424.970235359695,
        "std": 0.0,
        "max": 65424.970235359695,
        "min": 65424.970235359695,
        "count": 4
    },
    "JoulesNormalized": {
        "mean": 18286.992482292666,
        "median": 18286.992482292666,
        "std": 0.0,
        "max": 18286.992482292666,
        "min": 18286.992482292666,
        "count": 4
    },
    "NrExecutions": 4,
    "ExecutionsIds": [
        "s1",
        "s2",
        "s3",
        "s4"
    ],
    "ExecutionsInferenceIds": [
        "s1_cpu",
        "s2_cpu",
        "s4_cpu",
        "s5_cpu"
    ],
    "NrExecutionsInference": 4,
    "NrPatches": {
        "median": 0,
        "std": 0.0,
        "max": 0,
        "min": 0
    },
    "Correctness_Per_Patch": [
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W",
        "W"
    ],
    "Correctness_Per_Patch_original": [
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong",
        "wrong"
    ],
    "patches": [
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n",
        "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n"
    ]
}