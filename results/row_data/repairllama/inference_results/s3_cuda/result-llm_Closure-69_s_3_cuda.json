{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728423912260",
  "GPR[ESLB]": "1728423932280",
  "id": "69",
  "project": "Closure",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728422896906",
  "GPR[ESLI]": "1728422926936",
  "GPR[SPS]": "1728423932315",
  "GPR[EPS]": "1728423942918",
  "time": 10603,
  "output": [
    "     visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n  }\n\n  private void visitNew(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;",
    "     visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n  }\n\n  private void visitNew(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_NEWABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;",
    "     visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n  }\n  private void visitNew(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;",
    "     visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n  }\n\n  private void visitNew(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child);\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;",
    "     visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else if (childType.isFunctionPrototypeType()) {\n      FunctionType functionType = childType.toMaybeFunctionType();",
    "     visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else if (childType instanceof ObjectType) {\n      ObjectType objectType = (ObjectType) childType;\n      FunctionType functionType = objectType.getConstructor();\n      if (functionType != null) {",
    "     if (functionType.isInterface()) {\n        report(t, n, INTERFACE_CALL, childType.toString());\n      }",
    "     ensureTyped(t, n, functionType.getReturnType());",
    "   }\n    if (childType instanceof FunctionType) {",
    "   }"
  ]
}