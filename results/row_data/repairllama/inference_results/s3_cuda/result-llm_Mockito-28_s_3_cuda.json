{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728427432259",
  "GPR[ESLB]": "1728427452279",
  "id": "28",
  "project": "Mockito",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728422896906",
  "GPR[ESLI]": "1728422926936",
  "GPR[SPS]": "1728427452315",
  "GPR[EPS]": "1728427456011",
  "time": 3696,
  "output": [
    "           if(field.getType().isAssignableFrom(fieldInstance.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, mocks.iterator().next());\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "           if(field.getType().isAssignableFrom(fieldInstance.getClass())) {\n                try {\n                    field.setAccessible(true);\n                    field.set(fieldInstance, mocks.iterator().next());\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "           if(field.getType().equals(fieldInstance.getClass())) {\n                try {\n                    field.setAccessible(true);\n                    field.set(awaitingInjectionClazz, fieldInstance);\n                    mocks.add(fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "           if(field.getType().isAssignableFrom(fieldInstance.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(awaitingInjectionClazz, fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n                mocks.add(fieldInstance);\n            }",
    "           if(field.getType().isAssignableFrom(fieldInstance.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(awaitingInjectionClazz, fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "           if(field.getType().isAssignableFrom(fieldInstance.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(awaitingInjectionClazz, fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n                mocks.remove(fieldInstance);\n            }",
    "           if(field.getType().isAssignableFrom(fieldInstance.getClass())) {\n                try {\n                    field.setAccessible(true);\n                    field.set(awaitingInjectionClazz, fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "           if(field.getType().equals(fieldInstance.getClass())) {\n                try {\n                    field.setAccessible(true);\n                    field.set(awaitingInjectionClazz, fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "           if(field.getType().equals(fieldInstance.getClass())) {\n                try {\n                    field.setAccessible(true);\n                    field.set(awaitingInjectionClazz, fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n                mocks.remove(fieldInstance);\n            }",
    "           if(field.getType().equals(fieldInstance.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(awaitingInjectionClazz, fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }"
  ]
}