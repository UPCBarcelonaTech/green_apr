{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728423396630",
  "GPR[ESLB]": "1728423416650",
  "id": "21",
  "project": "Closure",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728422896906",
  "GPR[ESLI]": "1728422926936",
  "GPR[SPS]": "1728423416685",
  "GPR[EPS]": "1728423430229",
  "time": 13544,
  "output": [
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n        isSimpleOp = true;\n        break;\n      default:\n        break;",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BIT_NOT:\n      case Token.POS:\n      case Token",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.POS:\n      case Token.NEG:\n      case Token.",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.NOT:\n      case Token.TYPEOF:\n      case Token.",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.POS:\n      case Token.NEG:\n        isSimpleOp",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.LE:\n      case Token.GE:\n      case Token.GT:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n        isSimpleOp = true;\n        break;\n      default:\n        break;",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n        isSimpleOp = true;\n        break;\n      case Token.NOT:\n",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n        isSimpleOp = true;\n        break;\n    }\n    if (Node",
    "   if (NodeUtil.isAssignmentOp(n) ||\n        NodeUtil.isCompoundAssignmentOp(n) ||\n        NodeUtil.isIncDecOp(n)) {\n      return;\n    }\n    boolean isSimpleOp = false;\n    switch (n.getType()) {\n      case Token.HOOK:\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n        isSimpleOp = true;\n        break;\n    }\n    if (!Node"
  ]
}