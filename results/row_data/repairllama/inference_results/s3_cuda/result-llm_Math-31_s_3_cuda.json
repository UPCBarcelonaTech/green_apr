{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728424956027",
  "GPR[ESLB]": "1728424976047",
  "id": "31",
  "project": "Math",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728422896906",
  "GPR[ESLI]": "1728422926936",
  "GPR[SPS]": "1728424976082",
  "GPR[EPS]": "1728424980030",
  "time": 3948,
  "output": [
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.abs(hN - dPrev) > epsilon) {\n            dPrev = hN;\n            hPrev = hN;\n            hN = getA(n + 1, x) / hN;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.abs(dPrev - hN) > epsilon) {\n            dPrev = hN;\n            hPrev = hN;\n            hN = getA(n + 1, x) / hN;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.abs(hN - dPrev) > epsilon) {\n            dPrev = hN;\n            hPrev = hN;\n            hN = getA(n, x) / hN;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.abs(dPrev - hN) > epsilon) {\n            dPrev = hN;\n            hPrev = hN;\n            hN = getA(n, x) / hN;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.abs(hN - dPrev) > epsilon) {\n            dPrev = hN;\n            hPrev = hN;\n            hN = getA(++n, x) / hN;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.abs(dPrev - hN) > epsilon) {\n            dPrev = hN;\n            hPrev = hN;\n            hN = getA(++n, x) / hN;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.abs(hN - dPrev) > epsilon) {\n            dPrev = hN;\n            hPrev = hN;\n            hN = getA(n + 1, x) / hPrev;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.abs(dPrev - hN) > epsilon) {\n            dPrev = hN;\n            hPrev = hN;\n            hN = getA(n + 1, x) / hPrev;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.equals(hN, 0.0, small) && n < maxIterations) {\n            dPrev = hPrev;\n            hPrev = hN;\n            hN = getA(++n, x) / dPrev;",
    "       double hN = getA(n, x) / hPrev;\n        while (Precision.equals(hN, 0.0, small) && n < maxIterations) {\n            dPrev = hPrev;\n            hPrev = hN;\n            hN = getA(++n, x) / hPrev;"
  ]
}