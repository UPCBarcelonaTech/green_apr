{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728435499437",
  "GPR[ESLB]": "1728435519457",
  "id": "44",
  "project": "Math",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728429523156",
  "GPR[ESLI]": "1728429553186",
  "GPR[SPS]": "1728435519493",
  "GPR[EPS]": "1728435535052",
  "time": 15559,
  "output": [
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT > currentT) {\n                    interpolator.setInterpolatedTime(eventT);\n                    final double[] eventY = interpolator.getInterpolatedState();\n                    for (final EventState state : eventsStates) {\n                        state.stepAccepted(eventT, eventY);\n                    }",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT > currentT) {\n                    interpolator.setInterpolatedTime(eventT);\n                    final double[] eventY = interpolator.getInterpolatedState();\n                    for (final EventState state : eventsStates) {\n                        state.eventOccurred(eventT, eventY, false);\n                    }",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT > currentT) {\n                    interpolator.setInterpolatedTime(eventT);\n                    final double[] eventY = interpolator.getInterpolatedState();\n                    for (final EventState state : eventsStates) {\n                        state.eventOccurred(eventT, eventY, currentT, currentY);\n                    }",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT <= previousT) {\n                    continue;\n                }\n                if (eventT >= currentT) {",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT > currentT) {\n                    interpolator.setInterpolatedTime(eventT);",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT >= tEnd) {\n                    return tEnd;\n                }\n                if (eventT <= previousT) {\n                    continue;\n                }\n                if (eventT > currentT) {\n                    interpolator.setInterpolatedTime(eventT);",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT <= previousT) {\n                    continue;\n                }\n                if (eventT >= currentT) {\n                    interpolator.setInterpolatedTime(eventT);",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT >= tEnd) {\n                    return tEnd;\n                }\n                if (eventT <= previousT) {",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT >= tEnd) {\n                    return tEnd;\n                }\n                if (eventT <= previousT) {\n                    continue;\n                }\n                if (eventT > currentT) {",
    "           interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState();\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            for (final Event currentEvent : events) {\n                final double eventT = currentEvent.g(interpolator);\n                if (eventT >= tEnd) {\n                    return tEnd;\n                }\n                if (eventT <= previousT) {\n                    continue;\n                }\n                if (eventT >= currentT) {"
  ]
}