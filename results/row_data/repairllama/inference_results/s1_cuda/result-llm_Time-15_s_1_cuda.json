{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728409683153",
  "GPR[ESLB]": "1728409703173",
  "id": "15",
  "project": "Time",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728409552582",
  "GPR[ESLI]": "1728409582613",
  "GPR[SPS]": "1728409703209",
  "GPR[EPS]": "1728409710903",
  "time": 7694,
  "output": [
    "               return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n    public static long safeMultiply(long val1, long val2) {\n        switch (val2) {\n            case -1:",
    "               return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n    public static long safeMultiply(int val1, long val2) {\n        switch (val1) {\n            case -1:",
    "               return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n    public static int safeMultiply(int val1, int val2) {\n        switch (val2) {\n            case -1:",
    "               return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }\n    \n    public static long safeMultiply(long val1, long val2) {\n        if (val2 == -1) {",
    "           case -2:\n            case -3:\n            case -4:\n            case -5:\n            case -6:\n            case -7:\n            case -8:\n            case -9:\n            case -10:",
    "               if (val1 == Long.MIN_VALUE) {\n                  throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }",
    "           case -2:\n            case -3:\n            case -4:\n            case -5:\n            case -6:\n            case -7:\n            case -8:\n            case -9:",
    "           case 2:\n            case 4:\n            case 8:",
    "",
    ""
  ]
}