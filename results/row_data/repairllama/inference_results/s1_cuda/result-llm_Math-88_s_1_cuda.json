{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728410743141",
  "GPR[ESLB]": "1728410763162",
  "id": "88",
  "project": "Math",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728409552582",
  "GPR[ESLI]": "1728409582613",
  "GPR[SPS]": "1728410763201",
  "GPR[EPS]": "1728410768890",
  "time": 5689,
  "output": [
    "       for (int i = getNumObjectiveFunctions(); i < getOriginalNumDecisionVariables(); i++) {\n            coefficients[i - getNumObjectiveFunctions()] = getEntry(i, getRhsOffset());\n            if (coefficients[i - getNumObjectiveFunctions()] < mostNegative) {\n                mostNegative = coefficients[i - getNumObjectiveFunctions()];",
    "       for (int i = getNumObjectiveFunctions(); i < getOriginalNumDecisionVariables(); i++) {\n            coefficients[i - getNumObjectiveFunctions()] = getEntry(i, getRhsOffset());\n            if (mostNegative > coefficients[i - getNumObjectiveFunctions()]) {\n                mostNegative = coefficients[i - getNumObjectiveFunctions()];",
    "       for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            Integer row = getBasicRow(i);\n            if (row != null) {\n                coefficients[i] = getEntry(row, getRhsOffset()) / getEntry(row, i);\n                if (coefficients[i] < mostNegative) {\n                    mostNegative = coefficients[i];\n                }",
    "       for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            coefficients[i] = getEntry(i, getRhsOffset());\n            if (coefficients[i] < mostNegative) {\n                mostNegative = coefficients[i];",
    "       for (int i = 0; i < coefficients.length; i++) {\n            coefficients[i] = getEntry(i, getRhsOffset());\n            if (coefficients[i] < mostNegative) {\n                mostNegative = coefficients[i];",
    "       for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            Integer row = getBasicRow(i);\n            if (row != null) {\n                coefficients[i] = getEntry(row, getRhsOffset()) / getEntry(row, i);\n                mostNegative = Math.min(mostNegative, coefficients[i]);",
    "       for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            Integer row = getBasicRow(i);\n            if (row == null) {\n                coefficients[i] = 0;\n            } else {\n                coefficients[i] = getEntry(row, getRhsOffset()) / getEntry(row, i);",
    "       for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {\n            Integer row = getBasicRow(i);\n            if (row == null) {\n                coefficients[i] = 0;\n            } else {\n                coefficients[i] = getEntry(row, getRhsOffset()) - mostNegative;",
    "       for (int i = 0; i < coefficients.length; i++) {\n            coefficients[i] = getEntry(i, getRhsOffset());\n            if (i == basicRow) {\n                coefficients[i] -= mostNegative;",
    "       for (int i = 0; i < coefficients.length; ++i) {\n            coefficients[i] = getEntry(i, getRhsOffset());\n            if (i == basicRow) {\n                coefficients[i] -= mostNegative;"
  ]
}