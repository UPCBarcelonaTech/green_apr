{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728441264458",
  "GPR[ESLB]": "1728441284479",
  "id": "58",
  "project": "Math",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728436251771",
  "GPR[ESLI]": "1728436281802",
  "GPR[SPS]": "1728441284512",
  "GPR[EPS]": "1728441289469",
  "time": 4957,
  "output": [
    "       final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        final LeastSquaresProblem problem = new LeastSquaresBuilder().start(guess).model(this).target(getObservations()).maxEvaluations(1000).maxIterations(1000).build();\n        final LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problem);\n        return optimum.getPoint().toArray();",
    "       final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        final LeastSquaresProblem problem = new LeastSquaresBuilder().start(guess).model(this).target(getObservations()).maxEvaluations(1000).maxIterations(1000).build();\n        final LeastSquaresOptimizer.Optimum result = optimizer.optimize(problem);\n        return result.getPoint().toArray();",
    "       final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        final LeastSquaresProblem problem = new LeastSquaresBuilder().start(guess).model(this).targets(getObservations()).build();\n        final LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problem);\n        return optimum.getPoint().toArray();",
    "       final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        final LeastSquaresProblem problem = new LeastSquaresBuilder().start(guess).model(this).targets(getObservations()).maxEvaluations(1000).maxIterations(1000).build();\n        final LeastSquaresOptimizer.Optimum result = optimizer.optimize(problem);\n        return result.getPoint().toArray();",
    "       final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        final LeastSquaresProblem problem = new LeastSquaresBuilder().start(guess).model(this).target(getObservations()).maxEvaluations(1000).maxIterations(1000).build();\n        final LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problem);",
    "       return fit(guess);",
    "       fit(guess);\n        return guess;",
    "       final double[] result = fit(guess);\n        return result;",
    "       fit(guess);",
    "       setParameters(guess);"
  ]
}