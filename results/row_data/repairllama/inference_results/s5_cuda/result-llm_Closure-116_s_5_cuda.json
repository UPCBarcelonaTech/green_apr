{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728442059327",
  "GPR[ESLB]": "1728442079328",
  "id": "116",
  "project": "Closure",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728436251771",
  "GPR[ESLI]": "1728436281802",
  "GPR[SPS]": "1728442079363",
  "GPR[EPS]": "1728442092341",
  "time": 12978,
  "output": [
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          if (NodeUtil.getNameReferenceCount(\n              block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else {\n          return CanInlineResult.NO;\n        }\n      } else {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam =",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          if (NodeUtil.getNameReferenceCount(\n              block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n      } else {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n      cArg = cArg.get",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      } else {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n      cArg = cArg.getNext();\n    }\n    if (fnParam != null || cArg != null) {\n      return CanInlineResult",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          if (NodeUtil.getNameReferenceCount(\n              block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else {\n          return CanInlineResult.NO;\n        }\n      } else {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n      if (fn",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"arguments\")) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"eval\")) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"caller\")) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"callee\")) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"this\")) {\n        return CanInlineResult.NO;\n     ",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          if (NodeUtil.getNameReferenceCount(\n              block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else {\n          return CanInlineResult.NO;\n        }\n      } else {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n      if (Node",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"arguments\")) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"eval\")) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"parseInt\")) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"parseFloat\")) {\n        return CanInlineResult.NO;\n      }\n      if (fnParam.getString().equals(\"isNaN\")) {\n        return CanInlineResult.NO;\n     ",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          if (NodeUtil.getNameReferenceCount(\n              block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n      }\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n        if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n          if (NodeUtil.getNameReferenceCount(\n              block, fnParam.getString())",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          if (NodeUtil.getNameReferenceCount(\n              block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n      }\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n        if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n          if (NodeUtil.getNameReferenceCount(\n              block, cArg.getString())",
    "   Node fnParam = block.getFirstChild();\n    Node cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null && cArg != null) {\n      if (!fnParam.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!cArg.isName()) {\n        return CanInlineResult.NO;\n      }\n      if (!fnParam.getString().equals(cArg.getString())) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(fnParam, compiler)) {\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      } else {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      }\n      fnParam = fnParam.getNext();\n      cArg = cArg.getNext();\n    }\n    return CanInlineResult.YES;\n  }\n\n  private CanInlineResult can"
  ]
}