{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728437899370",
  "GPR[ESLB]": "1728437919390",
  "id": "113",
  "project": "Closure",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728436251771",
  "GPR[ESLI]": "1728436281802",
  "GPR[SPS]": "1728437919426",
  "GPR[EPS]": "1728437934007",
  "time": 14581,
  "output": [
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processImportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(NodeTra",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(\n     ",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processImportCall(NodeTraversal",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, null));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(NodeTraversal t",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, null));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(\n      NodeTravers",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule(), true));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null) {\n        provided = new ProvidedName(ns);\n        providedNames.put(ns, provided);\n      } else if (provided.isExplicitlyProvided()) {\n        compiler.report(\n            t.makeError(n, MULTIPLE_PROVIDES_ERROR, ns));\n      }\n      provided.explicitModule = t.getModule();\n      provided.isExplicitlyProvided = true;\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(\n      NodeTraversal t, Node left, Node arg) {\n    if (",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(NodeTraversal t, Node",
    "   }\n  }\n\n  private void processProvideCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule()));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processExportCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      providedNames.put(ns, new ProvidedName(ns, t.getModule(), true));\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n    }\n  }\n\n  private void processImportCall(NodeTra"
  ]
}