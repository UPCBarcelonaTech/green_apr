{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728421227596",
  "GPR[ESLB]": "1728421247616",
  "id": "64",
  "project": "Math",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728416237101",
  "GPR[ESLI]": "1728416267131",
  "GPR[SPS]": "1728421247652",
  "GPR[EPS]": "1728421264047",
  "time": 16395,
  "output": [
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jacobian[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < solvedCols; ++j) {\n                diag[j] = 0;\n                for (k = 0; k < rows; ++k) {\n                    diag[j] += jacobian[k][i] * jacobian[k][j];\n                }\n            }\n            for (j = ",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jacobian[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < solvedCols; ++j) {\n                if (i == j) {\n                    diag[i] = jacNorm[i];\n                } else {\n                    diag[i] = 0;\n                }\n            }\n        }\n        for (i = 0; i < solvedCols; ++i)",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jacobian[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < cols; ++j) {\n                if (i == j) {\n                    diag[i] = jacNorm[i];\n                } else {\n                    diag[i] = 0;\n                }\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jac[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < rows; ++j) {\n                jac[j][i] /= jacNorm[i];\n            }\n        }\n        for (i = 0; i < cols; ++i) {\n            diag[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                diag",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jac[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < rows; ++j) {\n                jac[j][i] /= jacNorm[i];\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            diag[i] = 0;\n            for (j = 0; j < rows; ++j) {\n",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jacobian[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < rows; ++j) {\n                jacobian[j][i] /= jacNorm[i];\n            }\n        }\n        for (i = 0; i < cols; ++i) {\n            diag[i] = 0;\n            for (j = 0; j < rows; ++j)",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jacobian[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < solvedCols; ++j) {\n                if (i == j) {\n                    diag[i] = jacNorm[i];\n                } else {\n                    diag[i] = 0;\n                }\n            }\n        }\n        for (i = 0; i < cols; ++i) {\n",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jacobian[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < rows; ++j) {\n                jacobian[j][i] /= jacNorm[i];\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            diag[i] = 0;\n            for (j = 0; j < rows; ++",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jacobian[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < cols; ++j) {\n                if (i == j) {\n                    diag[i] = jacNorm[i];\n                } else {\n                    diag[i] = 0;\n                }\n            }\n        }\n        for (i = 0; i < cols; ++i) {\n            permut",
    "       double   preRed  = 0;\n        double   actRed  = 0;\n        double   ratio   = 0;\n        double   maxCosine = 0;\n        int      i       = 0;\n        int      j       = 0;\n        int      k       = 0;\n        for (i = 0; i < solvedCols; ++i) {\n            jacNorm[i] = 0;\n            for (j = 0; j < rows; ++j) {\n                jacNorm[i] += Math.abs(jacobian[j][i]);\n            }\n        }\n        for (i = 0; i < solvedCols; ++i) {\n            for (j = 0; j < solvedCols; ++j) {\n                diag[j] = 0;\n                for (k = 0; k < rows; ++k) {\n                    diag[j] += jacobian[k][i] * jacobian[k][j];\n                }\n            }\n            for (k = "
  ]
}