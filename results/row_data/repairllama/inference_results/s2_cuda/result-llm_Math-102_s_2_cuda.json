{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728421159296",
  "GPR[ESLB]": "1728421179316",
  "id": "102",
  "project": "Math",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728416237101",
  "GPR[ESLI]": "1728416267131",
  "GPR[SPS]": "1728421179351",
  "GPR[EPS]": "1728421184485",
  "time": 5134,
  "output": [
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += ((observed[i] - expected[i]) * (observed[i] - expected[i]) / expected[i]);",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += (observed[i] - expected[i]) * (observed[i] - expected[i])\n                    / expected[i];",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += (observed[i] - expected[i]) * (observed[i] - expected[i]) / expected[i];",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += ((observed[i] - expected[i]) * (observed[i] - expected[i])\n                    / expected[i]);",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += (observed[i] - expected[i]) * (observed[i] - expected[i])\n                / expected[i];",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += ((observed[i] - expected[i]) * (observed[i] - expected[i]) /\n                    expected[i]);",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += ((observed[i] - expected[i]) * (observed[i] - expected[i]) / expected[i]);\n            if (Double.isNaN(sumSq)) {\n                throw new IllegalArgumentException(\n                        \"observed counts must be non-negative and expected counts must be postive\");\n            }",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += (observed[i] - expected[i]) * (observed[i] - expected[i])\n                     / expected[i];",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            double e = expected[i];\n            long o = observed[i];\n            sumSq += ((e - o) * (e - o)) / e;",
    "       double sumSq = 0.0;\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += ((observed[i] - expected[i]) * (observed[i] - expected[i]) / expected[i]);\n        }\n        for (int i = 0; i < expected.length; i++) {\n            sumSq += (expected[i] * Math.log(expected[i]));"
  ]
}