{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728417062453",
  "GPR[ESLB]": "1728417082473",
  "id": "55",
  "project": "Closure",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728416237101",
  "GPR[ESLI]": "1728416267131",
  "GPR[SPS]": "1728417082508",
  "GPR[EPS]": "1728417087972",
  "time": 5464,
  "output": [
    "   if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null) {\n      return false;\n    }\n    if (parent.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent == null) {\n      return false;\n    }",
    "   if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null || parent.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent == null || grandparent.getType() != Token.GETPROP) {\n      return false;\n    }",
    "   if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null) {\n      return false;\n    }\n    if (parent.getType() != Token.CALL) {\n      return false;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent == null) {\n      return false;\n    }",
    "   if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent.getType() != Token.FUNCTION) {\n      return false;\n    }\n    return true;",
    "   if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null || parent.getType() != Token.CALL) {\n      return false;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent == null || grandparent.getType() != Token.ASSIGN) {\n      return false;\n    }",
    "   if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null) {\n      return false;\n    }\n    if (parent.getType() != Token.CALL) {\n      return false;\n    }\n    Node grandparent = parent.getParent();\n    if (grandparent == null) {\n      return false;",
    "   if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null) {\n      return false;\n    }\n    if (parent.getType() != Token.CALL) {\n      return false;\n    }",
    "   if (n.getType() != Token.GETPROP) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null || parent.getType() != Token.CALL) {\n      return false;\n    }",
    "   if (!(n instanceof FunctionExpression)) {\n      return false;\n    }\n    FunctionExpression fe = (FunctionExpression) n;\n    return fe.isReduceable();",
    "   if (n.getType() != Token.FUNCTION) {\n      return false;\n    }"
  ]
}