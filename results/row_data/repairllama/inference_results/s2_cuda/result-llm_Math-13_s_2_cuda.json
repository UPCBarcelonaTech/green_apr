{
  "hostname": "gemini-2.lyon.grid5000.fr",
  "GPR[SSLB]": "1728419203595",
  "GPR[ESLB]": "1728419223615",
  "id": "13",
  "project": "Math",
  "file": null,
  "input": null,
  "nvidea": null,
  "OAR_JOB_ID": "1711701",
  "GPR[SSLI]": "1728416237101",
  "GPR[ESLI]": "1728416267131",
  "GPR[SPS]": "1728419223651",
  "GPR[EPS]": "1728419234193",
  "time": 10542,
  "output": [
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(0, 1) * m.getEntry(0, 1) / (m.getEntry(0, 0) * m.getEntry(0, 0))) } });\n",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2.0 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2.0 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(0, 1) * m.getEntry(0, 1) / (m.getEntry(0, 0) * m.getEntry(0, 0",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(1, 0) * m.getEntry(1, 0) / (m.getEntry(0, 0) * m.getEntry(0, 0))) } });\n",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(0, 1) * m.getEntry(0, 1) / (m.getEntry(0, 0) * m.getEntry(1, 1))) } });\n",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2.0 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2.0 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(0, 1) * m.getEntry(0, 1) / (m.getEntry(0, 0) * m.getEntry(1, 1",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(0, 1) * m.getEntry(0, 1) / (4 * m.getEntry(0, 0))) } });\n        }\n        throw new IllegalArgument",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(1, 0) * m.getEntry(1, 0) / (4 * m.getEntry(0, 0))) } });\n        }\n        throw new IllegalArgument",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(0, 1) * m.getEntry(0, 1) / (4 * m.getEntry(0, 0))) } });\n        }\n        throw new UnsupportedOperation",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(1, 0) * m.getEntry(1, 0) / (4 * m.getEntry(0, 0))) } });\n        }\n        throw new UnsupportedOperation",
    "       if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new IllegalArgumentException(\"Matrix must be square\");\n        }\n        if (m.getRowDimension() == 1) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)) } });\n        }\n        if (m.getRowDimension() == 2) {\n            return new Array2DRowRealMatrix(new double[][] { { Math.sqrt(m.getEntry(0, 0)), m.getEntry(0, 1) / (2 * Math.sqrt(m.getEntry(0, 0))) }, { m.getEntry(1, 0) / (2 * Math.sqrt(m.getEntry(0, 0))), Math.sqrt(m.getEntry(1, 1) - m.getEntry(0, 1) * m.getEntry(0, 1) / (m.getEntry(0, 0) * m.getEntry(0, 0))) }, });\n"
  ]
}