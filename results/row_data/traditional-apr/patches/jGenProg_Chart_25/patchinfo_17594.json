{
  "VARIANT_ID": "17594",
  "VALIDATION": "|true|0|3243|[]|",
  "patchhunks": [
    {
      "LOCATION": "org.jfree.data.KeyedObjects2D",
      "PATH": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/source\\/org\\/jfree\\/data\\/KeyedObjects2D.java",
      "INGREDIENT_SCOPE": "PACKAGE",
      "SUSPICIOUNESS": "0.516",
      "INGREDIENT_PARENT": "if (this.equals(org.jfree.data.RangeType.POSITIVE)) {\\n\\treturn org.jfree.data.RangeType.POSITIVE;\\n} else \\nif (this.equals(org.jfree.data.RangeType.NEGATIVE)) {\\n\\treturn org.jfree.data.RangeType.NEGATIVE;\\n}",
      "PATCH_HUNK_TYPE": "CtIfImpl|CtBlockImpl",
      "ORIGINAL_CODE": "if (rowData !\u003d null) {\\n\\tjava.lang.Comparable columnKey \u003d ((java.lang.Comparable) (this.columnKeys.get(column)));\\n\\tif (columnKey !\u003d null) {\\n\\t\\tresult \u003d rowData.getObject(columnKey);\\n\\t}\\n}",
      "BUGGY_CODE_TYPE": "CtIfImpl|CtBlockImpl",
      "OPERATOR": "ReplaceOp",
      "MODIFIED_FILE_PATH": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/.\\/output_astor\\/AstorMain-Chart25\\/\\/src\\/\\/variant-17594\\/org\\/jfree\\/data\\/KeyedObjects2D.java",
      "LINE": "110",
      "MP_RANKING": "174",
      "PATCH_HUNK_CODE": "if (this.equals(org.jfree.data.RangeType.POSITIVE)) {\\n\\treturn org.jfree.data.RangeType.POSITIVE;\\n} else \\nif (this.equals(org.jfree.data.RangeType.NEGATIVE)) {\\n\\treturn org.jfree.data.RangeType.NEGATIVE;\\n}"
    }
  ],
  "TIME": "6970",
  "GENERATION": "8797",
  "FOLDER_SOLUTION_CODE": "\\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/.\\/output_astor\\/AstorMain-Chart25\\/\\/src\\/\\/variant-17594",
  "PATCH_DIFF_ORIG": "--- \\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/source\\/org\\/jfree\\/data\\/KeyedObjects2Djava\\n+++ \\/home\\/user\\/speedy_runner\\/scripts\\/workingdir\\/jGenProg\\/Chart_25\\/source\\/org\\/jfree\\/data\\/KeyedObjects2Djava\\n@@ -110,7 +109,0 @@\\n-\\t\\tif (rowData !\u003d null) {\\n-\\t\\t\\tjava.lang.Comparable columnKey \u003d ((java.lang.Comparable) (this.columnKeys.get(column)));\\n-\\t\\t\\tif (columnKey !\u003d null) {\\n-\\t\\t\\t\\tresult \u003d rowData.getObject(columnKey);\\n-\\t\\t\\t}\\n-\\t\\t}\\n-\\t\\treturn result;\\n@@ -118 +110,0 @@\\n-\\t}\\n@@ -120 +112,26 @@\\n-\\t\\/**\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\t\\tif (this.equals(org.jfree.data.RangeType.POSITIVE)) {\\n+\\t\\t\\treturn org.jfree.data.RangeType.POSITIVE;\\n+\\t\\t} else \\n+\\t\\tif (this.equals(org.jfree.data.RangeType.NEGATIVE)) {\\n+\\t\\t\\treturn org.jfree.data.RangeType.NEGATIVE;\\n+\\t\\t} \\t\\treturn result;} \\t\\/**\\n@@ -126,6 +143 @@\\n-\\t *\\/\\n-\\tpublic java.lang.Comparable getRowKey(int row) {\\n-\\t\\treturn ((java.lang.Comparable) (this.rowKeys.get(row)));\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic java.lang.Comparable getRowKey(int row) { \\t\\treturn ((java.lang.Comparable) (this.rowKeys.get(row)));} \\t\\/**\\n@@ -137,6 +149 @@\\n-\\t *\\/\\n-\\tpublic int getRowIndex(java.lang.Comparable key) {\\n-\\t\\treturn this.rowKeys.indexOf(key);\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic int getRowIndex(java.lang.Comparable key) { \\t\\treturn this.rowKeys.indexOf(key);} \\t\\/**\\n@@ -146,6 +153 @@\\n-\\t *\\/\\n-\\tpublic java.util.List getRowKeys() {\\n-\\t\\treturn java.util.Collections.unmodifiableList(this.rowKeys);\\n-\\t}\\n-\\n-\\t\\/**\\n+\\t *\\/ \\tpublic java.util.List getRowKeys() { \\t\\treturn java.util.Collections.unmodifiableList(this.rowKeys);} \\t\\/**\\n@@ -157,3 +159 @@\\n-\\t *\\/\\n-\\tpublic java.lang.Comparable getColumnKey(int column) {\\n-\\t\\treturn ((java.lang.Comparable) (this.columnKeys.get(column)));\\n+\\t *\\/ \\tpublic java.lang.Comparable getColumnKey(int column) { \\t\\treturn ((java.lang.Comparable) (this.columnKeys.get(column)));\\n\\n"
}