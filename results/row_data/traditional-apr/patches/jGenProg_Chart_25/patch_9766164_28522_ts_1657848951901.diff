--- script/workingdir/jGenProg/Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDatasetjava
+++ script/workingdir/jGenProg/Chart_25/source/org/jfree/data/statistics/DefaultStatisticalCategoryDatasetjava
@@ -273,2 +272,0 @@
-		return this.data.getColumnCount();
-	}
@@ -276 +274,145 @@
-	/**
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+		return 1;} 	/**
@@ -287,3 +429 @@
-	 */ 	public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) { 		add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);}
-
-	/**
+	 */ 	public void add(double mean, double standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) { 		add(new java.lang.Double(mean), new java.lang.Double(standardDeviation), rowKey, columnKey);} 	/**
@@ -300,43 +440 @@
-	 */ 	public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) { 		org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation);
-		this.data.addObject(item, rowKey, columnKey);
-		double m = 0.0;
-		double sd = 0.0;
-		if (mean != null) {
-			m = mean.doubleValue();
-		}
-		if (standardDeviation != null) {
-			sd = standardDeviation.doubleValue();
-		}
-
-		if (!java.lang.Double.isNaN(m)) {
-			if (java.lang.Double.isNaN(this.maximumRangeValue) || 
-			(m > this.maximumRangeValue)) {
-				this.maximumRangeValue = m;
-			}
-		}
-
-		if (!java.lang.Double.isNaN(m + sd)) {
-			if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || 
-			((m + sd) > this.maximumRangeValueIncStdDev)) {
-				this.maximumRangeValueIncStdDev = m + sd;
-			}
-		}
-
-		if (!java.lang.Double.isNaN(m)) {
-			if (java.lang.Double.isNaN(this.minimumRangeValue) || 
-			(m < this.minimumRangeValue)) {
-				this.minimumRangeValue = m;
-			}
-		}
-
-		if (!java.lang.Double.isNaN(m - sd)) {
-			if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || 
-			((m - sd) < this.minimumRangeValueIncStdDev)) {
-				this.minimumRangeValueIncStdDev = m - sd;
-			}
-		}
-
-		fireDatasetChanged();
-	}
-
-	/**
+	 */ 	public void add(java.lang.Number mean, java.lang.Number standardDeviation, java.lang.Comparable rowKey, java.lang.Comparable columnKey) { 		org.jfree.data.statistics.MeanAndStandardDeviation item = new org.jfree.data.statistics.MeanAndStandardDeviation(mean, standardDeviation); 		this.data.addObject(item, rowKey, columnKey); 		double m = 0.0; 		double sd = 0.0; 		if (mean != null) { 			m = mean.doubleValue();} 		if (standardDeviation != null) { 			sd = standardDeviation.doubleValue();} 		if (!java.lang.Double.isNaN(m)) { 			if (java.lang.Double.isNaN(this.maximumRangeValue) || (m > this.maximumRangeValue)) { 				this.maximumRangeValue = m;}} 		if (!java.lang.Double.isNaN(m + sd)) { 			if (java.lang.Double.isNaN(this.maximumRangeValueIncStdDev) || ((m + sd) > this.maximumRangeValueIncStdDev)) { 				this.maximumRangeValueIncStdDev = m + sd;}} 		if (!java.lang.Double.isNaN(m)) { 			if (java.lang.Double.isNaN(this.minimumRangeValue) || (m < this.minimumRangeValue)) { 				this.minimumRangeValue = m;}} 		if (!java.lang.Double.isNaN(m - sd)) { 			if (java.lang.Double.isNaN(this.minimumRangeValueIncStdDev) || ((m - sd) < this.minimumRangeValueIncStdDev)) { 				this.minimumRangeValueIncStdDev = m - sd;}} 		fireDatasetChanged();} 	/**
@@ -350,6 +448 @@
-	 */
-	public double getRangeLowerBound(boolean includeInterval) {
-		return this.minimumRangeValue;
-	}
-
-	/**
+	 */ 	public double getRangeLowerBound(boolean includeInterval) { 		return this.minimumRangeValue;} 	/**
@@ -363,6 +456 @@
-	 */
-	public double getRangeUpperBound(boolean includeInterval) {
-		return this.maximumRangeValue;
-	}
-
-	/**
+	 */ 	public double getRangeUpperBound(boolean includeInterval) { 		return this.maximumRangeValue;} 	/**
@@ -375,18 +463 @@
-	 */
-	public org.jfree.data.Range getRangeBounds(boolean includeInterval) {
-		org.jfree.data.Range result = null;
-		if (includeInterval) {
-			if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && 
-			(!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) 
-			{ 				result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, 
-				this.maximumRangeValueIncStdDev);}
-		} else 
-
-		if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && 
-		(!java.lang.Double.isNaN(this.maximumRangeValue)))
-			result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue);
-
-		return result;
-	}
-
-	/**
+	 */ 	public org.jfree.data.Range getRangeBounds(boolean includeInterval) { 		org.jfree.data.Range result = null; 		if (includeInterval) { 			if ((!java.lang.Double.isNaN(this.minimumRangeValueIncStdDev)) && (!java.lang.Double.isNaN(this.maximumRangeValueIncStdDev))) { 				result = new org.jfree.data.Range(this.minimumRangeValueIncStdDev, this.maximumRangeValueIncStdDev);}} else if ((!java.lang.Double.isNaN(this.minimumRangeValue)) && (!java.lang.Double.isNaN(this.maximumRangeValue))) 			result = new org.jfree.data.Range(this.minimumRangeValue, this.maximumRangeValue); 		return result;} 	/**
@@ -398,15 +469 @@
-	 */
-	public boolean equals(java.lang.Object obj) {
-		if (obj == this) {
-			return true;
-		}
-		if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) {
-			return false;
-		}
-		org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = 
-		((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj));
-		if (!this.data.equals(that.data)) {
-			return false;
-		}
-		return true;
-	}}
\ No newline at end of file
+	 */ 	public boolean equals(java.lang.Object obj) { 		if (obj == this) { 			return true;} 		if (!(obj instanceof org.jfree.data.statistics.DefaultStatisticalCategoryDataset)) { 			return false;} 		org.jfree.data.statistics.DefaultStatisticalCategoryDataset that = ((org.jfree.data.statistics.DefaultStatisticalCategoryDataset) (obj)); 		if (!this.data.equals(that.data)) { 			return false;} 		return true;}}
\ No newline at end of file

