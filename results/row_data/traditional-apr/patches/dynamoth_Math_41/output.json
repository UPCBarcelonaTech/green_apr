{"nbStatement":73,"executionTime":5972797,"date":"Fri Jun 03 20:13:04 EDT 2022","patch":[{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -524,3 +524,5 @@\n                 if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    if (mean <= length) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    }\n                 } else {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":525,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -524,3 +524,5 @@\n                 if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    if (values[0] <= length) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    }\n                 } else {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":525,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -523,6 +523,8 @@\n \n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                if (mean <= length) {\n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":524,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -523,6 +523,8 @@\n \n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                if (values[0] <= length) {\n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":524,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -523,6 +523,8 @@\n \n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                if (mean < length) {\n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":524,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -523,6 +523,8 @@\n \n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                if (values[0] < length) {\n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":524,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -520,3 +520,5 @@\n                 for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n+                    if (mean <= length) {\n+                        sumWts += weights[i];\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":521,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -520,3 +520,5 @@\n                 for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n+                    if (values[0] <= length) {\n+                        sumWts += weights[i];\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":521,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -519,4 +519,6 @@\n                 double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n+                if (mean <= length) {\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":520,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -519,4 +519,6 @@\n                 double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n+                if (values[0] <= length) {\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":520,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -513,3 +513,5 @@\n                 for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n+                    if (mean <= length) {\n+                        dev = values[i] - mean;\n+                    }\n                     accum += weights[i] * (dev * dev);\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":514,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -513,3 +513,5 @@\n                 for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n+                    if (mean < length) {\n+                        dev = values[i] - mean;\n+                    }\n                     accum += weights[i] * (dev * dev);\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":514,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -513,3 +513,5 @@\n                 for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n+                    if (this.incMoment && (mean <= length)) {\n+                        dev = values[i] - mean;\n+                    }\n                     accum += weights[i] * (dev * dev);\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":514,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -513,3 +513,5 @@\n                 for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n+                    if ((mean <= length) && this.incMoment) {\n+                        dev = values[i] - mean;\n+                    }\n                     accum += weights[i] * (dev * dev);\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":514,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -513,3 +513,5 @@\n                 for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n+                    if (this.incMoment && (mean < length)) {\n+                        dev = values[i] - mean;\n+                    }\n                     accum += weights[i] * (dev * dev);\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":514,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -513,3 +513,5 @@\n                 for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n+                    if ((mean < length) && this.incMoment) {\n+                        dev = values[i] - mean;\n+                    }\n                     accum += weights[i] * (dev * dev);\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":514,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (mean <= length) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (values[0] <= length) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (mean < length) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (values[0] < length) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (this.incMoment && (mean <= length)) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if ((mean <= length) && this.incMoment) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (this.incMoment && (values[0] <= length)) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if ((values[0] <= length) && this.incMoment) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if (this.incMoment && (mean < length)) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -512,6 +512,8 @@\n                 double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+                if ((mean < length) && this.incMoment) {\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n                 }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":513,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if (mean <= length) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if (values[0] <= length) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if (mean < length) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if (values[0] < length) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if (this.incMoment && (mean <= length)) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if ((mean <= length) && this.incMoment) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if (this.incMoment && (values[0] <= length)) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if ((values[0] <= length) && this.incMoment) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if (this.incMoment && (mean < length)) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,22 +508,26 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            } else {\n+                if ((mean < length) && this.incMoment) {\n+                    if (length > 1) {\n+                        double accum = 0.0;\n+                        double dev = 0.0;\n+                        double accum2 = 0.0;\n+                        for (int i = begin; i < begin + length; i++) {\n+                            dev = values[i] - mean;\n+                            accum += weights[i] * (dev * dev);\n+                            accum2 += weights[i] * dev;\n+                        }\n+                        \n+                        double sumWts = 0;\n+                        for (int i = 0; i < weights.length; i++) {\n+                            sumWts += weights[i];\n+                        }\n+                        \n+                        if (isBiasCorrected) {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                        } else {\n+                            var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                        }\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (mean <= length) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (values[0] <= length) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (mean < length) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (values[0] < length) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (this.incMoment && (mean <= length)) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if ((mean <= length) && this.incMoment) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (this.incMoment && (values[0] <= length)) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if ((values[0] <= length) && this.incMoment) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (this.incMoment && (mean < length)) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -508,3 +508,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if ((mean < length) && this.incMoment) {\n                 double accum = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":509,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,24 +506,26 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            if (mean <= length) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,24 +506,26 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            if (values[0] <= length) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,24 +506,26 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            if (mean < length) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,24 +506,26 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            if (values[0] < length) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,24 +506,26 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            if (this.incMoment && (mean <= length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,24 +506,26 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            if ((mean <= length) && this.incMoment) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,24 +506,26 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            if (this.incMoment && (values[0] <= length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,24 +506,26 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+            if ((values[0] <= length) && this.incMoment) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,3 +506,3 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n+            if (length <= mean) {\n                 var = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,3 +506,3 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n+            if (length <= values[0]) {\n                 var = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,3 +506,3 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n+            if (length < mean) {\n                 var = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,3 +506,3 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n+            if (length < values[0]) {\n                 var = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,3 +506,3 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n+            if (this.incMoment && (length <= mean)) {\n                 var = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,3 +506,3 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n+            if ((length <= mean) && this.incMoment) {\n                 var = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,3 +506,3 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n+            if (this.incMoment && (length <= values[0])) {\n                 var = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -506,3 +506,3 @@\n         if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n+            if ((length <= values[0]) && this.incMoment) {\n                 var = 0.0;\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":507,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if (mean <= length) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if (values[0] <= length) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if (mean < length) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if (values[0] < length) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if (this.incMoment && (mean <= length)) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if ((mean <= length) && this.incMoment) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if (this.incMoment && (values[0] <= length)) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if ((values[0] <= length) && this.incMoment) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if (this.incMoment && (mean < length)) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,25 +505,27 @@\n \n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n+        if ((mean < length) && this.incMoment) {\n+            if (test(values, weights, begin, length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    double accum = 0.0;\n+                    double dev = 0.0;\n+                    double accum2 = 0.0;\n+                    for (int i = begin; i < begin + length; i++) {\n+                        dev = values[i] - mean;\n+                        accum += weights[i] * (dev * dev);\n+                        accum2 += weights[i] * dev;\n+                    }\n+                    \n+                    double sumWts = 0;\n+                    for (int i = 0; i < weights.length; i++) {\n+                        sumWts += weights[i];\n+                    }\n+                    \n+                    if (isBiasCorrected) {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n+                    } else {\n+                        var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n+                    }\n                 }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,3 +505,3 @@\n \n-        if (test(values, weights, begin, length)) {\n+        if (mean <= length) {\n             if (length == 1) {\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,3 +505,3 @@\n \n-        if (test(values, weights, begin, length)) {\n+        if (values[0] <= length) {\n             if (length == 1) {\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,3 +505,3 @@\n \n-        if (test(values, weights, begin, length)) {\n+        if (mean < length) {\n             if (length == 1) {\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,3 +505,3 @@\n \n-        if (test(values, weights, begin, length)) {\n+        if (values[0] < length) {\n             if (length == 1) {\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,3 +505,3 @@\n \n-        if (test(values, weights, begin, length)) {\n+        if (this.incMoment && (mean <= length)) {\n             if (length == 1) {\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,3 +505,3 @@\n \n-        if (test(values, weights, begin, length)) {\n+        if ((mean <= length) && this.incMoment) {\n             if (length == 1) {\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,3 +505,3 @@\n \n-        if (test(values, weights, begin, length)) {\n+        if (this.incMoment && (values[0] <= length)) {\n             if (length == 1) {\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -505,3 +505,3 @@\n \n-        if (test(values, weights, begin, length)) {\n+        if ((values[0] <= length) && this.incMoment) {\n             if (length == 1) {\n@@ -517,3 +517,3 @@\n                 }\n-\n+                \n                 double sumWts = 0;\n@@ -522,3 +522,3 @@\n                 }\n-\n+                \n                 if (isBiasCorrected) {\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":506,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -324,3 +324,5 @@\n                 double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+                if (m <= length) {\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":325,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -324,3 +324,5 @@\n                 double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+                if (values[0] <= length) {\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":325,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -324,3 +324,5 @@\n                 double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+                if (mean.evaluate((double[]) values) <= length) {\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":325,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -324,3 +324,5 @@\n                 double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+                if (mean.evaluate((double[]) values, (double[]) weights) <= length) {\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":325,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -324,3 +324,5 @@\n                 double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+                if (m < length) {\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":325,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -324,3 +324,5 @@\n                 double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+                if (mean.evaluate((double[]) values) < length) {\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":325,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -324,3 +324,5 @@\n                 double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+                if (mean.evaluate((double[]) values, (double[]) weights) < length) {\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":325,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if (values[0] <= length) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if (values[0] < length) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if (this.incMoment && (values[0] <= length)) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if ((values[0] <= length) && this.incMoment) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if (this.incMoment && (values[0] < length)) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if ((values[0] < length) && this.incMoment) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if (this.isBiasCorrected && (values[0] <= length)) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if ((values[0] <= length) && this.isBiasCorrected) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if (this.isBiasCorrected && (values[0] < length)) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,6 +321,10 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            } else {\n+                if ((values[0] < length) && this.isBiasCorrected) {\n+                    if (length > 1) {\n+                        Mean mean = new Mean();\n+                        double m = mean.evaluate(values, weights, begin, length);\n+                        var = evaluate(values, weights, m, begin, length);\n+                    }\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (values[0] <= length) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (values[0] < length) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (this.incMoment && (values[0] <= length)) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if ((values[0] <= length) && this.incMoment) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (this.incMoment && (values[0] < length)) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if ((values[0] < length) && this.incMoment) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (this.isBiasCorrected && (values[0] <= length)) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if ((values[0] <= length) && this.isBiasCorrected) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if (this.isBiasCorrected && (values[0] < length)) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -321,3 +321,3 @@\n                 var = 0.0;\n-            } else if (length > 1) {\n+            } else if ((values[0] < length) && this.isBiasCorrected) {\n                 Mean mean = new Mean();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":322,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if (values[0] <= length) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if (values[0] < length) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if (this.incMoment && (values[0] <= length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if ((values[0] <= length) && this.incMoment) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if (this.incMoment && (values[0] < length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if ((values[0] < length) && this.incMoment) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if (this.isBiasCorrected && (values[0] <= length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if ((values[0] <= length) && this.isBiasCorrected) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if (this.isBiasCorrected && (values[0] < length)) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,8 +319,10 @@\n             clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+            if ((values[0] < length) && this.isBiasCorrected) {\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if (length <= values[0]) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if (length < values[0]) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if (this.incMoment && (length <= values[0])) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if ((length <= values[0]) && this.incMoment) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if (this.incMoment && (length < values[0])) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if ((length < values[0]) && this.incMoment) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if (this.isBiasCorrected && (length <= values[0])) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if ((length <= values[0]) && this.isBiasCorrected) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if (this.isBiasCorrected && (length < values[0])) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -319,3 +319,3 @@\n             clear();\n-            if (length == 1) {\n+            if ((length < values[0]) && this.isBiasCorrected) {\n                 var = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":320,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if (values[0] <= length) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if (values[0] < length) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if (this.incMoment && (values[0] <= length)) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if ((values[0] <= length) && this.incMoment) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if (this.incMoment && (values[0] < length)) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if ((values[0] < length) && this.incMoment) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if (this.isBiasCorrected && (values[0] <= length)) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if ((values[0] <= length) && this.isBiasCorrected) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if (this.isBiasCorrected && (values[0] < length)) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,10 +317,12 @@\n \n-        if (test(values, weights,begin, length)) {\n-            clear();\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                Mean mean = new Mean();\n-                double m = mean.evaluate(values, weights, begin, length);\n-                var = evaluate(values, weights, m, begin, length);\n+        if ((values[0] < length) && this.isBiasCorrected) {\n+            if (test(values, weights,begin, length)) {\n+                clear();\n+                if (length == 1) {\n+                    var = 0.0;\n+                } else if (length > 1) {\n+                    Mean mean = new Mean();\n+                    double m = mean.evaluate(values, weights, begin, length);\n+                    var = evaluate(values, weights, m, begin, length);\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if (values[0] <= length) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if (values[0] < length) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if (this.incMoment && (values[0] <= length)) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if ((values[0] <= length) && this.incMoment) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if (this.incMoment && (values[0] < length)) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if ((values[0] < length) && this.incMoment) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if (this.isBiasCorrected && (values[0] <= length)) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if ((values[0] <= length) && this.isBiasCorrected) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -317,3 +317,3 @@\n \n-        if (test(values, weights,begin, length)) {\n+        if ((values[0] < length) && this.isBiasCorrected) {\n             clear();\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":3,"patchLocation":{"line":318,"class":"org.apache.commons.math.stat.descriptive.moment.Variance"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if (xbarw <= length) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if (xbarw < length) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if (this.incMoment && (xbarw <= length)) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if ((xbarw <= length) && this.incMoment) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if (this.incMoment && (xbarw < length)) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if ((xbarw < length) && this.incMoment) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if (this.equals((java.lang.Object) this) && (xbarw <= length)) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if ((xbarw <= length) && this.equals((java.lang.Object) this)) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if (this.equals((java.lang.Object) this) && (xbarw < length)) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -216,3 +216,5 @@\n             }\n-            return xbarw + (correction/sumw);\n+            if ((xbarw < length) && this.equals((java.lang.Object) this)) {\n+                return xbarw + (correction/sumw);\n+            }\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":217,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if (values[0] <= length) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if (values[0] < length) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if (this.incMoment && (values[0] <= length)) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if ((values[0] <= length) && this.incMoment) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if (this.incMoment && (values[0] < length)) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if ((values[0] < length) && this.incMoment) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if (this.equals((java.lang.Object) this) && (values[0] <= length)) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if ((values[0] <= length) && this.equals((java.lang.Object) this)) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if (this.equals((java.lang.Object) this) && (values[0] < length)) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,15 +204,17 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n-            Sum sum = new Sum();\n-\n-            // Compute initial estimate using definitional formula\n-            double sumw = sum.evaluate(weights,begin,length);\n-            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n-            // Compute correction factor in second pass\n-            double correction = 0;\n-            for (int i = begin; i < begin + length; i++) {\n-                correction += weights[i] * (values[i] - xbarw);\n+        if ((values[0] < length) && this.equals((java.lang.Object) this)) {\n+            if (test(values, weights, begin, length)) {\n+                Sum sum = new Sum();\n+                \n+                // Compute initial estimate using definitional formula\n+                double sumw = sum.evaluate(weights,begin,length);\n+                double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n+                \n+                // Compute correction factor in second pass\n+                double correction = 0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    correction += weights[i] * (values[i] - xbarw);\n+                }\n+                return xbarw + (correction/sumw);\n             }\n-            return xbarw + (correction/sumw);\n         }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if (values[0] <= length) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if (values[0] < length) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if (this.incMoment && (values[0] <= length)) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if ((values[0] <= length) && this.incMoment) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if (this.incMoment && (values[0] < length)) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if (this.equals((java.lang.Object) this) && (values[0] <= length)) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if ((values[0] <= length) && this.equals((java.lang.Object) this)) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if (this.equals((java.lang.Object) this) && (values[0] < length)) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java\n@@ -204,5 +204,5 @@\n                            final int begin, final int length) {\n-        if (test(values, weights, begin, length)) {\n+        if ((values[0] < length) && this.equals((java.lang.Object) this)) {\n             Sum sum = new Sum();\n-\n+            \n             // Compute initial estimate using definitional formula\n@@ -210,3 +210,3 @@\n             double xbarw = sum.evaluate(values, weights, begin, length) / sumw;\n-\n+            \n             // Compute correction factor in second pass\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":6,"patchLocation":{"line":205,"class":"org.apache.commons.math.stat.descriptive.moment.Mean"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if (values[0] <= length) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if (values[0] < length) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if (this.equals((java.lang.Object) this) && (values[0] <= length)) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if ((values[0] <= length) && this.equals((java.lang.Object) this)) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if (this.equals((java.lang.Object) this) && (values[0] < length)) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if ((values[0] < length) && this.equals((java.lang.Object) this)) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if ((length == values.length) && (values[0] <= length)) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if ((values[0] <= length) && (length == values.length)) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if ((length == values.length) && (values[0] <= values.length)) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -160,3 +160,5 @@\n         if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n+            if ((values[0] <= values.length) && (length == values.length)) {\n+                sum = 0.0;\n+            }\n             for (int i = begin; i < begin + length; i++) {\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":161,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if (values[0] <= length) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if (values[0] < length) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if (this.equals((java.lang.Object) this) && (values[0] <= length)) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if ((values[0] <= length) && this.equals((java.lang.Object) this)) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if (this.equals((java.lang.Object) this) && (values[0] < length)) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if ((length == values.length) && (values[0] <= length)) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if ((values[0] <= length) && (length == values.length)) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if ((length == values.length) && (values[0] <= values.length)) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,6 +159,8 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n-            sum = 0.0;\n-            for (int i = begin; i < begin + length; i++) {\n-                sum += values[i] * weights[i];\n+        if ((values[0] <= values.length) && (length == values.length)) {\n+            if (test(values, weights, begin, length, true)) {\n+                sum = 0.0;\n+                for (int i = begin; i < begin + length; i++) {\n+                    sum += values[i] * weights[i];\n+                }\n             }\n","patchType":"PRECONDITION","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if (values[0] <= length) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if (values[0] < length) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if (this.equals((java.lang.Object) this) && (values[0] <= length)) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if ((values[0] <= length) && this.equals((java.lang.Object) this)) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if (this.equals((java.lang.Object) this) && (values[0] < length)) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if ((values[0] < length) && this.equals((java.lang.Object) this)) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if ((length == values.length) && (values[0] <= length)) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if ((values[0] <= length) && (length == values.length)) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if ((length == values.length) && (values[0] <= values.length)) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}},{"patch":"--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -159,3 +159,3 @@\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length, true)) {\n+        if ((values[0] <= values.length) && (length == values.length)) {\n             sum = 0.0;\n","patchType":"CONDITIONAL","nb_test_that_execute_statement":7,"patchLocation":{"line":160,"class":"org.apache.commons.math.stat.descriptive.summary.Sum"}}],"nb_methods":3768,"nb_classes":578,"nbAngelicValue":31}