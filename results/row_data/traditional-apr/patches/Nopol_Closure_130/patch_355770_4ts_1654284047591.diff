--- a/src/com/google/javascript/jscomp/CollapseProperties.java
+++ b/src/com/google/javascript/jscomp/CollapseProperties.java
@@ -204,36 +204,38 @@
     Node aliasParent = alias.node.getParent();
-    if (aliasParent.isName()) {
-      // Ensure that the local variable is well defined and never reassigned.
-      Scope scope = alias.scope;
-      Var aliasVar = scope.getVar(aliasParent.getString());
-      ReferenceCollectingCallback collector =
-          new ReferenceCollectingCallback(compiler,
-              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
-              Predicates.<Var>equalTo(aliasVar));
-      (new NodeTraversal(compiler, collector)).traverseAtScope(scope);
-
-      ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
-      if (aliasRefs.isWellDefined()
-          && aliasRefs.firstReferenceIsAssigningDeclaration()
-          && aliasRefs.isAssignedOnceInLifetime()) {
-        // The alias is well-formed, so do the inlining now.
-        int size = aliasRefs.references.size();
-        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
-        for (int i = 1; i < size; i++) {
-          ReferenceCollectingCallback.Reference aliasRef =
-              aliasRefs.references.get(i);
-
-          Node newNode = alias.node.cloneTree();
-          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
-          newNodes.add(newNode);
+    if (!(com.google.javascript.jscomp.CollapseProperties.this.collapsePropertiesOnExternTypes)) {
+      if (aliasParent.isName()) {
+        // Ensure that the local variable is well defined and never reassigned.
+        Scope scope = alias.scope;
+        Var aliasVar = scope.getVar(aliasParent.getString());
+        ReferenceCollectingCallback collector =
+        new ReferenceCollectingCallback(compiler,
+        ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
+        Predicates.<Var>equalTo(aliasVar));
+        (new NodeTraversal(compiler, collector)).traverseAtScope(scope);
+        
+        ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
+        if (aliasRefs.isWellDefined()
+        && aliasRefs.firstReferenceIsAssigningDeclaration()
+        && aliasRefs.isAssignedOnceInLifetime()) {
+          // The alias is well-formed, so do the inlining now.
+          int size = aliasRefs.references.size();
+          Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
+          for (int i = 1; i < size; i++) {
+            ReferenceCollectingCallback.Reference aliasRef =
+            aliasRefs.references.get(i);
+            
+            Node newNode = alias.node.cloneTree();
+            aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
+            newNodes.add(newNode);
+          }
+          
+          // just set the original alias to null.
+          aliasParent.replaceChild(alias.node, IR.nullNode());
+          compiler.reportCodeChange();
+          
+          // Inlining the variable may have introduced new references
+          // to descendants of {@code name}. So those need to be collected now.
+          namespace.scanNewNodes(alias.scope, newNodes);
+          return true;
         }
-
-        // just set the original alias to null.
-        aliasParent.replaceChild(alias.node, IR.nullNode());
-        compiler.reportCodeChange();
-
-        // Inlining the variable may have introduced new references
-        // to descendants of {@code name}. So those need to be collected now.
-        namespace.scanNewNodes(alias.scope, newNodes);
-        return true;
       }
