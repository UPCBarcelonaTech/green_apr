Sleep 1m start
GPR[SSLI]-1659931735183
GPR[ESLI]-1659931795187
Running Nopol Closure 16b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/16/seed_261/
The file script/workingdir/Nopol/Closure_16 does not exist!
script/workingdir/Nopol/Closure_16
script/workingdir/Nopol/Closure_16
classpath:  script/workingdir/Nopol/Closure_16/build/classes:script/workingdir/Nopol/Closure_16/lib/args4j.jar:script/workingdir/Nopol/Closure_16/lib/guava.jar:script/workingdir/Nopol/Closure_16/lib/json.jar:script/workingdir/Nopol/Closure_16/lib/jsr305.jar:script/workingdir/Nopol/Closure_16/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_16/build/lib/rhino.jar:script/workingdir/Nopol/Closure_16/lib/ant.jar:script/workingdir/Nopol/Closure_16/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_16/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_16/lib/jarjar.jar:script/workingdir/Nopol/Closure_16/lib/junit.jar:script/workingdir/Nopol/Closure_16/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659931814237
GPR[ESLB]-1659931874243
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_16//build/classes:script/workingdir/Nopol/Closure_16//build/test:script/workingdir/Nopol/Closure_16/build/classes:script/workingdir/Nopol/Closure_16/lib/args4j.jar:script/workingdir/Nopol/Closure_16/lib/guava.jar:script/workingdir/Nopol/Closure_16/lib/json.jar:script/workingdir/Nopol/Closure_16/lib/jsr305.jar:script/workingdir/Nopol/Closure_16/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_16/build/lib/rhino.jar:script/workingdir/Nopol/Closure_16/lib/ant.jar:script/workingdir/Nopol/Closure_16/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_16/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_16/lib/jarjar.jar:script/workingdir/Nopol/Closure_16/lib/junit.jar:script/workingdir/Nopol/Closure_16/build/test
Node: host-48
Date init: Sun 07 Aug 2022 09:11:14 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_16/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_16/build/classes/, file:script/workingdir/Nopol/Closure_16/build/test/, file:script/workingdir/Nopol/Closure_16/build/classes/, file:script/workingdir/Nopol/Closure_16/lib/args4j.jar, file:script/workingdir/Nopol/Closure_16/lib/guava.jar, file:script/workingdir/Nopol/Closure_16/lib/json.jar, file:script/workingdir/Nopol/Closure_16/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_16/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_16/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_16/lib/ant.jar, file:script/workingdir/Nopol/Closure_16/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_16/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_16/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_16/lib/junit.jar, file:script/workingdir/Nopol/Closure_16/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_16/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/16/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659931879581
GPR[ESUP]-1659931879581
GPR[SFL]-1659931879581
GPR[EFL]-1659931920348
GPR[SFP]-1659931920348
GPR[SSUN]-1659931922041
-283827935
GPR[SPVATF]-1659931922539
GPR[EPVATF]-1659931922576
[47534] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931922576
GPR[SSUN]-1659931922576
-1966087783
GPR[ESUN]-1659931922784
GPR[SSUN]-1659931922784
-1966087783
GPR[SPVATF]-1659931922988
GPR[EPVATF]-1659931923021
[47979] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931923021
GPR[SSUN]-1659931923021
-1659631726
GPR[ESUN]-1659931923214
GPR[SSUN]-1659931923214
130004992
GPR[ESUN]-1659931923774
GPR[SSUN]-1659931923774
130004992
GPR[SPVATF]-1659931923956
GPR[EPVATF]-1659931923984
[48942] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931923984
GPR[SSUN]-1659931923984
130004992
GPR[ESUN]-1659931924166
GPR[SSUN]-1659931924166
-1966087783
GPR[SPVATF]-1659931924364
GPR[EPVATF]-1659931924386
[49344] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931924386
GPR[SSUN]-1659931924386
-1966087783
GPR[SPVATF]-1659931924581
GPR[EPVATF]-1659931924602
[49560] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931924602
GPR[SSUN]-1659931924602
890942016
GPR[ESUN]-1659931924796
GPR[SSUN]-1659931924796
890942016
GPR[SPVATF]-1659931924987
GPR[EPVATF]-1659931925007
[49965] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931925007
GPR[SSUN]-1659931925007
890942016
GPR[SPVATF]-1659931925200
GPR[EPVATF]-1659931925219
[50178] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931925220
GPR[EPVATF]-1659931925238
[50196] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931925238
GPR[SSUN]-1659931925239
890942016
GPR[ESUN]-1659931925440
GPR[SSUN]-1659931925440
890942016
GPR[ESUN]-1659931925676
GPR[SSUN]-1659931925676
-1966087783
GPR[ESUN]-1659931925874
GPR[SSUN]-1659931925874
-1966087783
GPR[SPVATF]-1659931926071
GPR[EPVATF]-1659931926090
[51048] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931926090
GPR[EPVATF]-1659931926110
[51068] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931926110
GPR[SSUN]-1659931926110
-1966087783
GPR[ESUN]-1659931926304
GPR[SSUN]-1659931926304
-1966087783
GPR[SPVATF]-1659931926729
GPR[EPVATF]-1659931926749
[51707] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931926749
GPR[EPVATF]-1659931926767
[51726] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931926768
GPR[SSUN]-1659931926768
-1966087783
GPR[ESUN]-1659931926960
GPR[SSUN]-1659931926960
-1966087783
GPR[ESUN]-1659931927155
GPR[SSUN]-1659931927155
-1966087783
GPR[ESUN]-1659931927351
GPR[SSUN]-1659931927351
-47953873
GPR[ESUN]-1659931927616
GPR[SSUN]-1659931927616
1613130706
GPR[ESUN]-1659931927829
GPR[SSUN]-1659931927829
1613130706
GPR[ESUN]-1659931928042
GPR[SSUN]-1659931928042
1613130706
GPR[SPVATF]-1659931928255
GPR[EPVATF]-1659931928439
[53398] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931928440
GPR[SSUN]-1659931928440
-47953873
GPR[ESUN]-1659931928705
GPR[SSUN]-1659931928706
-47953873
GPR[SPVATF]-1659931928973
GPR[EPVATF]-1659931929971
GPR[SPS]-1659931929971
[57954] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$AliasedTypeNode:180.
GPR[EPS]-1659931932996
GPR[ESUN]-1659931932996
GPR[SSUN]-1659931932997
-47953873
GPR[ESUN]-1659931933260
GPR[SSUN]-1659931933260
-47953873
GPR[SPVATF]-1659931933514
GPR[EPVATF]-1659931934466
GPR[SPS]-1659931934466
[60170] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:472.
GPR[EPS]-1659931935212
GPR[ESUN]-1659931935212
GPR[SSUN]-1659931935212
-47953873
GPR[SPVATF]-1659931935488
GPR[EPVATF]-1659931936452
GPR[SPS]-1659931936452
[62070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:468.
GPR[EPS]-1659931937112
GPR[ESUN]-1659931937112
GPR[SSUN]-1659931937112
-47953873
GPR[ESUN]-1659931937370
GPR[SSUN]-1659931937370
-47953873
GPR[SPVATF]-1659931937625
GPR[EPVATF]-1659931939222
GPR[SPS]-1659931939222
[64841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:466.
GPR[EPS]-1659931939883
GPR[SPVATF]-1659931939883
GPR[EPVATF]-1659931940817
GPR[SPS]-1659931940817
[66400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:466.
GPR[EPS]-1659931941442
GPR[ESUN]-1659931941442
GPR[SSUN]-1659931941442
-47953873
GPR[ESUN]-1659931941695
GPR[SSUN]-1659931941695
-47953873
GPR[ESUN]-1659931941948
GPR[SSUN]-1659931941948
-47953873
GPR[SPVATF]-1659931942210
GPR[EPVATF]-1659931943136
GPR[SPS]-1659931943136
[68741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:461.
GPR[EPS]-1659931943783
GPR[SPVATF]-1659931943783
GPR[EPVATF]-1659931944772
GPR[SPS]-1659931944772
[70348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:461.
GPR[EPS]-1659931945390
GPR[ESUN]-1659931945390
GPR[SSUN]-1659931945390
-47953873
GPR[ESUN]-1659931945645
GPR[SSUN]-1659931945645
-47953873
GPR[ESUN]-1659931945895
GPR[SSUN]-1659931945895
-47953873
GPR[SPVATF]-1659931946149
GPR[EPVATF]-1659931947140
GPR[SPS]-1659931947140
[72825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:458.
GPR[EPS]-1659931947867
GPR[SPVATF]-1659931947867
GPR[EPVATF]-1659931949535
GPR[SPS]-1659931949535
[75153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:458.
GPR[EPS]-1659931950195
GPR[ESUN]-1659931950195
GPR[SSUN]-1659931950195
-47953873
GPR[ESUN]-1659931950457
GPR[SSUN]-1659931950457
-47953873
GPR[SPVATF]-1659931950707
GPR[EPVATF]-1659931951648
GPR[SPS]-1659931951648
[77237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:449.
GPR[EPS]-1659931952279
GPR[ESUN]-1659931952279
GPR[SSUN]-1659931952279
-47953873
GPR[SPVATF]-1659931952532
GPR[EPVATF]-1659931953517
GPR[SPS]-1659931953517
[79125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:448.
GPR[EPS]-1659931954167
GPR[ESUN]-1659931954167
GPR[SSUN]-1659931954167
234947553
GPR[ESUN]-1659931954359
GPR[SSUN]-1659931954359
234947553
GPR[SPVATF]-1659931954549
GPR[EPVATF]-1659931954565
[79524] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931954566
GPR[EPVATF]-1659931954580
[79538] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931954580
GPR[SSUN]-1659931954580
234947553
GPR[ESUN]-1659931954770
GPR[SSUN]-1659931954770
234947553
GPR[SPVATF]-1659931954959
GPR[EPVATF]-1659931954975
[79933] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931954975
GPR[EPVATF]-1659931954990
[79948] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931954990
GPR[SSUN]-1659931954990
234947553
GPR[SPVATF]-1659931955178
GPR[EPVATF]-1659931955193
[80151] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931955193
GPR[SSUN]-1659931955193
234947553
GPR[ESUN]-1659931955379
GPR[SSUN]-1659931955379
234947553
GPR[ESUN]-1659931955564
GPR[SSUN]-1659931955564
234947553
GPR[SPVATF]-1659931955751
GPR[EPVATF]-1659931955768
[80726] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931955768
GPR[SSUN]-1659931955768
234947553
GPR[SPVATF]-1659931955955
GPR[EPVATF]-1659931955971
[80929] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931955971
GPR[SSUN]-1659931955971
234947553
GPR[SPVATF]-1659931956160
GPR[EPVATF]-1659931956176
[81134] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931956176
GPR[SSUN]-1659931956176
234947553
GPR[ESUN]-1659931956364
GPR[SSUN]-1659931956364
234947553
GPR[ESUN]-1659931956551
GPR[SSUN]-1659931956551
234947553
GPR[SPVATF]-1659931956734
GPR[EPVATF]-1659931956750
[81709] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931956751
GPR[SSUN]-1659931956751
234947553
GPR[SPVATF]-1659931956932
GPR[EPVATF]-1659931956948
[81906] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931956948
GPR[SSUN]-1659931956948
234947553
GPR[ESUN]-1659931957133
GPR[SSUN]-1659931957133
234947553
GPR[SPVATF]-1659931957335
GPR[EPVATF]-1659931957350
[82308] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931957350
GPR[SSUN]-1659931957350
234947553
GPR[SPVATF]-1659931957536
GPR[EPVATF]-1659931957553
[82511] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931957553
GPR[SSUN]-1659931957553
234947553
GPR[ESUN]-1659931957740
GPR[SSUN]-1659931957740
890942016
GPR[SPVATF]-1659931957936
GPR[EPVATF]-1659931957955
[82913] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931957955
GPR[EPVATF]-1659931957972
[82930] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931957972
GPR[SSUN]-1659931957972
890942016
GPR[SPVATF]-1659931958162
GPR[EPVATF]-1659931958180
[83138] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931958180
GPR[SSUN]-1659931958180
890942016
GPR[ESUN]-1659931958366
GPR[SSUN]-1659931958366
890942016
GPR[SPVATF]-1659931958552
GPR[EPVATF]-1659931958571
[83529] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931958571
GPR[SSUN]-1659931958571
890942016
GPR[SPVATF]-1659931958760
GPR[EPVATF]-1659931958779
[83737] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931958780
GPR[EPVATF]-1659931958798
[83756] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931958798
GPR[SSUN]-1659931958798
890942016
GPR[SPVATF]-1659931958991
GPR[EPVATF]-1659931959010
[83968] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931959010
GPR[SSUN]-1659931959010
890942016
GPR[SPVATF]-1659931959208
GPR[EPVATF]-1659931959226
[84184] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931959226
GPR[EPVATF]-1659931959244
[84202] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931959244
GPR[SSUN]-1659931959244
890942016
GPR[ESUN]-1659931959434
GPR[SSUN]-1659931959434
890942016
GPR[SPVATF]-1659931959624
GPR[EPVATF]-1659931959642
[84600] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931959642
GPR[SSUN]-1659931959642
890942016
GPR[SPVATF]-1659931959828
GPR[EPVATF]-1659931959846
[84804] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931959846
GPR[SSUN]-1659931959846
890942016
GPR[SPVATF]-1659931960036
GPR[EPVATF]-1659931960054
[85012] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931960054
GPR[SSUN]-1659931960054
890942016
GPR[ESUN]-1659931960238
GPR[SSUN]-1659931960238
1613130706
GPR[SPVATF]-1659931960458
GPR[EPVATF]-1659931960635
[85593] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931960635
GPR[EPVATF]-1659931960808
[85766] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931960808
GPR[SSUN]-1659931960808
1613130706
GPR[SPVATF]-1659931961015
GPR[EPVATF]-1659931961184
[86142] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931961184
GPR[SSUN]-1659931961184
1613130706
GPR[SPVATF]-1659931961389
GPR[EPVATF]-1659931961555
[86513] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931961556
GPR[EPVATF]-1659931961726
[86684] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931961726
GPR[SSUN]-1659931961726
-47953873
GPR[ESUN]-1659931961976
GPR[SSUN]-1659931961976
-47953873
GPR[SPVATF]-1659931962227
GPR[EPVATF]-1659931963167
GPR[SPS]-1659931963167
[88732] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$AliasedNode:163.
GPR[EPS]-1659931963774
GPR[ESUN]-1659931963774
GPR[SSUN]-1659931963774
-47953873
GPR[SPVATF]-1659931964020
GPR[EPVATF]-1659931965219
GPR[SPS]-1659931965219
[90809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:443.
GPR[EPS]-1659931965851
GPR[ESUN]-1659931965851
GPR[SSUN]-1659931965851
-47953873
GPR[ESUN]-1659931966100
GPR[SSUN]-1659931966100
-47953873
GPR[SPVATF]-1659931966344
GPR[EPVATF]-1659931967309
GPR[SPS]-1659931967309
[92860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:339.
GPR[EPS]-1659931967902
GPR[SPVATF]-1659931967902
GPR[EPVATF]-1659931969527
GPR[SPS]-1659931969527
[95099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:339.
GPR[EPS]-1659931970141
GPR[ESUN]-1659931970141
GPR[SSUN]-1659931970141
1870456228
GPR[SPVATF]-1659931970366
GPR[EPVATF]-1659931971283
GPR[SPS]-1659931971283
[96754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:108.
GPR[EPS]-1659931971796
GPR[ESUN]-1659931971796
GPR[SSUN]-1659931971796
2433571
GPR[SPVATF]-1659931972041
GPR[EPVATF]-1659931972271
GPR[SPS]-1659931972271
GPR[EPS]-1659931973511
GPR[SPVATR]-1659931973511
[98469] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION node2.sourcePosition == -1
[98876] INFO TestPatch - Running test suite to check the patch "node2.sourcePosition == -1" is working
[99055] INFO TestPatch - Failing tests [testLegacyStylePlaceholderNameInLowerUnderscoreCase(com.google.javascript.jscomp.ReplaceMessagesTest): 
Expected: var MSG_F=function(amt_earned){return"Sum: $"+amt_earned}
Result: var MSG_F=function(amt_earned){return amt_earned+"x"}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME MSG_F 1 [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                        NAME amt_earned 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        RETURN 1 [source_file: expected0]
                            ADD 1 [source_file: expected0]
                                STRING Sum: $ 1 [source_file: expected0]
                                NAME amt_earned 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME MSG_F 1 [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                        NAME amt_earned 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        RETURN 1 [source_file: testcode]
                            ADD 1 [source_file: testcode]
                                NAME amt_earned 1 [source_file: testcode]
                                STRING x 1 [source_file: testcode]


Subtree1: STRING Sum: $ 1 [source_file: expected0]


Subtree2: NAME amt_earned 1 [source_file: testcode]
, testLegacyStyleNoPlaceholdersFunctionSyntax(com.google.javascript.jscomp.ReplaceMessagesTest): 
Expected: var MSG_B=function(){return"Hi\nthere"}
Result: var MSG_B=function(){return"asdf"}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME MSG_B 1 [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        RETURN 1 [source_file: expected0]
                            STRING Hi
there 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME MSG_B 1 [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        RETURN 1 [source_file: testcode]
                            STRING asdf 1 [source_file: testcode]


Subtree1: STRING Hi
there 1 [source_file: expected0]


Subtree2: STRING asdf 1 [source_file: testcode]
, testLegacyStyleOnePlaceholder(com.google.javascript.jscomp.ReplaceMessagesTest): 
Expected: var MSG_C=function(measly){return"One "+(measly+" ph")}
Result: var MSG_C=function(measly){return"asdf"+measly}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME MSG_C 1 [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                        NAME measly 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        RETURN 1 [source_file: expected0]
                            ADD 1 [source_file: expected0]
                                STRING One  1 [source_file: expected0]
                                ADD 1 [parenthesized: true] [source_file: expected0]
                                    NAME measly 1 [source_file: expected0]
                                    STRING  ph 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME MSG_C 1 [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                        NAME measly 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        RETURN 1 [source_file: testcode]
                            ADD 1 [source_file: testcode]
                                STRING asdf 1 [source_file: testcode]
                                NAME measly 1 [source_file: testcode]


Subtree1: STRING One  1 [source_file: expected0]


Subtree2: STRING asdf 1 [source_file: testcode]
, testLegacyStyleTwoPlaceholders(com.google.javascript.jscomp.ReplaceMessagesTest): 
Expected: var MSG_D=function(jane,dick){return dick+(" and "+jane)}
Result: var MSG_D=function(jane,dick){return jane+dick}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME MSG_D 1 [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                        NAME jane 1 [source_file: expected0]
                        NAME dick 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        RETURN 1 [source_file: expected0]
                            ADD 1 [source_file: expected0]
                                NAME dick 1 [source_file: expected0]
                                ADD 1 [parenthesized: true] [source_file: expected0]
                                    STRING  and  1 [source_file: expected0]
                                    NAME jane 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME MSG_D 1 [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                        NAME jane 1 [source_file: testcode]
                        NAME dick 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        RETURN 1 [source_file: testcode]
                            ADD 1 [source_file: testcode]
                                NAME jane 1 [source_file: testcode]
                                NAME dick 1 [source_file: testcode]


Subtree1: NAME dick 1 [source_file: expected0]


Subtree2: NAME jane 1 [source_file: testcode]
, testLegacyStylePlaceholderNameInLowerCamelCase(com.google.javascript.jscomp.ReplaceMessagesTest): 
Expected: var MSG_E=function(amtEarned){return"Sum: $"+amtEarned}
Result: var MSG_E=function(amtEarned){return amtEarned+"x"}
Node tree inequality:
Tree1:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: expected0] [input_id: InputId: expected0]
        VAR 1 [source_file: expected0]
            NAME MSG_E 1 [source_file: expected0]
                FUNCTION  1 [source_file: expected0]
                    NAME  1 [source_file: expected0]
                    PARAM_LIST 1 [source_file: expected0]
                        NAME amtEarned 1 [source_file: expected0]
                    BLOCK 1 [source_file: expected0]
                        RETURN 1 [source_file: expected0]
                            ADD 1 [source_file: expected0]
                                STRING Sum: $ 1 [source_file: expected0]
                                NAME amtEarned 1 [source_file: expected0]


Tree2:
BLOCK [synthetic: 1]
    SCRIPT 1 [synthetic: 1] [source_file: testcode] [input_id: InputId: testcode]
        VAR 1 [source_file: testcode]
            NAME MSG_E 1 [source_file: testcode]
                FUNCTION  1 [source_file: testcode]
                    NAME  1 [source_file: testcode]
                    PARAM_LIST 1 [source_file: testcode]
                        NAME amtEarned 1 [source_file: testcode]
                    BLOCK 1 [source_file: testcode]
                        RETURN 1 [source_file: testcode]
                            ADD 1 [source_file: testcode]
                                NAME amtEarned 1 [source_file: testcode]
                                STRING x 1 [source_file: testcode]


Subtree1: STRING Sum: $ 1 [source_file: expected0]


Subtree2: NAME amtEarned 1 [source_file: testcode]
]
GPR[EPVATR]-1659931974097
GPR[ESUN]-1659931974097
GPR[SSUN]-1659931974097
1613130706
GPR[SPVATF]-1659931974303
GPR[EPVATF]-1659931974470
[99429] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931974471
GPR[EPVATF]-1659931974643
[99601] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931974643
GPR[SSUN]-1659931974643
1613130706
GPR[SPVATF]-1659931974848
GPR[EPVATF]-1659931975014
[99972] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931975014
GPR[EPVATF]-1659931975183
[100141] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931975183
GPR[SSUN]-1659931975183
1613130706
GPR[ESUN]-1659931975390
GPR[SSUN]-1659931975390
1613130706
GPR[ESUN]-1659931975592
GPR[SSUN]-1659931975592
1613130706
GPR[ESUN]-1659931975800
GPR[SSUN]-1659931975800
1613130706
GPR[ESUN]-1659931976001
GPR[SSUN]-1659931976001
1613130706
GPR[SPVATF]-1659931976206
GPR[EPVATF]-1659931976370
[101328] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931976370
GPR[EPVATF]-1659931976542
[101500] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931976542
GPR[SSUN]-1659931976542
-47953873
GPR[SPVATF]-1659931976798
GPR[EPVATF]-1659931977763
GPR[SPS]-1659931977763
[103332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:315.
GPR[EPS]-1659931978374
GPR[ESUN]-1659931978374
GPR[SSUN]-1659931978374
-47953873
GPR[SPVATF]-1659931978645
GPR[EPVATF]-1659931979604
GPR[SPS]-1659931979604
[105175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:314.
GPR[EPS]-1659931980217
GPR[SPVATF]-1659931980217
GPR[EPVATF]-1659931981189
GPR[SPS]-1659931981189
[106767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:314.
GPR[EPS]-1659931981809
GPR[ESUN]-1659931981809
GPR[SSUN]-1659931981809
-47953873
GPR[ESUN]-1659931982061
GPR[SSUN]-1659931982061
1613130706
GPR[SPVATF]-1659931982274
GPR[EPVATF]-1659931982447
[107405] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931982447
GPR[SSUN]-1659931982447
1613130706
GPR[ESUN]-1659931982657
GPR[SSUN]-1659931982657
1613130706
GPR[SPVATF]-1659931982860
GPR[EPVATF]-1659931983032
[107990] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931983033
GPR[EPVATF]-1659931983204
[108162] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931983204
GPR[SSUN]-1659931983204
1613130706
GPR[ESUN]-1659931983418
GPR[SSUN]-1659931983418
1613130706
GPR[SPVATF]-1659931983626
GPR[EPVATF]-1659931983803
[108761] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931983804
GPR[EPVATF]-1659931983981
[108939] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931983981
GPR[SSUN]-1659931983981
-47953873
GPR[ESUN]-1659931984267
GPR[SSUN]-1659931984267
-47953873
GPR[SPVATF]-1659931984516
GPR[EPVATF]-1659931985524
GPR[SPS]-1659931985524
[111790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases:115.
GPR[EPS]-1659931986832
GPR[ESUN]-1659931986832
GPR[SSUN]-1659931986832
-1966087783
GPR[ESUN]-1659931987028
GPR[SSUN]-1659931987028
-1966087783
GPR[SPVATF]-1659931987213
GPR[EPVATF]-1659931987232
[112191] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659931987233
GPR[EPVATF]-1659931987251
[112209] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931987251
GPR[SSUN]-1659931987251
-1966087783
GPR[SPVATF]-1659931987434
GPR[EPVATF]-1659931987456
[112414] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659931987456
GPR[SSUN]-1659931987456
-47953873
GPR[ESUN]-1659931987715
GPR[SSUN]-1659931987715
-47953873
GPR[SPVATF]-1659931987970
GPR[EPVATF]-1659931989085
GPR[SPS]-1659931989085
[114668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases:122.
GPR[EPS]-1659931989710
GPR[ESUN]-1659931989710
GPR[SSUN]-1659931989710
-47953873
GPR[SPVATF]-1659931989960
GPR[EPVATF]-1659931990911
GPR[SPS]-1659931990911
[116495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases:120.
GPR[EPS]-1659931991537
GPR[SPVATF]-1659931991537
GPR[EPVATF]-1659931992550
GPR[SPS]-1659931992550
[118118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases:120.
GPR[EPS]-1659931993160
GPR[ESUN]-1659931993160
GPR[SSUN]-1659931993160
1508329696
GPR[ESUN]-1659931993402
GPR[SSUN]-1659931993402
-47953873
GPR[SPVATF]-1659931993654
GPR[EPVATF]-1659931994620
GPR[SPS]-1659931994620
[120194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases:142.
GPR[EPS]-1659931995236
GPR[ESUN]-1659931995236
GPR[SSUN]-1659931995236
-47953873
GPR[ESUN]-1659931995589
GPR[SSUN]-1659931995589
-47953873
GPR[SPVATF]-1659931995836
GPR[EPVATF]-1659931996841
GPR[SPS]-1659931996841
[122405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases:136.
GPR[EPS]-1659931997447
GPR[ESUN]-1659931997447
GPR[SSUN]-1659931997447
-47953873
GPR[SPVATF]-1659931997698
GPR[EPVATF]-1659931998679
GPR[SPS]-1659931998679
[124272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases:133.
GPR[EPS]-1659931999314
GPR[ESUN]-1659931999314
GPR[SSUN]-1659931999314
-47953873
GPR[SPVATF]-1659931999591
GPR[EPVATF]-1659932000577
GPR[SPS]-1659932000577
[126139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases:132.
GPR[EPS]-1659932001181
GPR[ESUN]-1659932001181
GPR[SSUN]-1659932001181
-47953873
GPR[ESUN]-1659932001432
GPR[SSUN]-1659932001432
-47953873
GPR[ESUN]-1659932001675
GPR[SSUN]-1659932001675
-47953873
GPR[SPVATF]-1659932001922
GPR[EPVATF]-1659932002929
GPR[SPS]-1659932002929
[128545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:417.
GPR[EPS]-1659932003587
GPR[ESUN]-1659932003587
GPR[SSUN]-1659932003587
-47953873
GPR[SPVATF]-1659932003841
GPR[EPVATF]-1659932004850
GPR[SPS]-1659932004850
[130421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:413.
GPR[EPS]-1659932005463
GPR[ESUN]-1659932005463
GPR[SSUN]-1659932005463
-47953873
GPR[SPVATF]-1659932005717
GPR[EPVATF]-1659932007556
GPR[SPS]-1659932007556
[133179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:412.
GPR[EPS]-1659932008222
GPR[SPVATF]-1659932008222
GPR[EPVATF]-1659932009237
GPR[SPS]-1659932009237
[134806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:412.
GPR[EPS]-1659932009848
GPR[ESUN]-1659932009848
GPR[SSUN]-1659932009848
-47953873
GPR[SPVATF]-1659932010100
GPR[EPVATF]-1659932011081
GPR[SPS]-1659932011081
[136646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:405.
GPR[EPS]-1659932011688
GPR[ESUN]-1659932011688
GPR[SSUN]-1659932011688
-47953873
GPR[SPVATF]-1659932011948
GPR[EPVATF]-1659932012940
GPR[SPS]-1659932012940
[138500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:318.
GPR[EPS]-1659932013542
GPR[SPVATF]-1659932013542
GPR[EPVATF]-1659932014511
GPR[SPS]-1659932014511
[140080] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:318.
GPR[EPS]-1659932015122
GPR[ESUN]-1659932015122
GPR[SSUN]-1659932015122
-47953873
GPR[SPVATF]-1659932015368
GPR[EPVATF]-1659932016379
GPR[SPS]-1659932016379
[141948] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:312.
GPR[EPS]-1659932016990
GPR[SPVATF]-1659932016990
GPR[EPVATF]-1659932017992
GPR[SPS]-1659932017993
[143556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:312.
GPR[EPS]-1659932018598
GPR[ESUN]-1659932018598
GPR[SSUN]-1659932018598
-47953873
GPR[ESUN]-1659932018844
GPR[SSUN]-1659932018844
-47953873
GPR[SPVATF]-1659932019091
GPR[EPVATF]-1659932020148
GPR[SPS]-1659932020148
[145797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:309.
GPR[EPS]-1659932020839
GPR[ESUN]-1659932020839
GPR[SSUN]-1659932020839
-47953873
GPR[ESUN]-1659932021089
GPR[SSUN]-1659932021089
-47953873
GPR[SPVATF]-1659932021339
GPR[EPVATF]-1659932022341
GPR[SPS]-1659932022341
[147909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:305.
GPR[EPS]-1659932022951
GPR[ESUN]-1659932022951
GPR[SSUN]-1659932022951
-47953873
GPR[ESUN]-1659932023205
GPR[SSUN]-1659932023205
-47953873
GPR[ESUN]-1659932023490
GPR[SSUN]-1659932023490
-47953873
GPR[ESUN]-1659932023739
GPR[SSUN]-1659932023739
-47953873
GPR[SPVATF]-1659932023990
GPR[EPVATF]-1659932024998
GPR[SPS]-1659932024998
[150566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:301.
GPR[EPS]-1659932025608
GPR[SPVATF]-1659932025608
GPR[EPVATF]-1659932026673
GPR[SPS]-1659932026673
[152236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:301.
GPR[EPS]-1659932027279
GPR[ESUN]-1659932027279
GPR[SSUN]-1659932027279
-47953873
GPR[ESUN]-1659932027525
GPR[SSUN]-1659932027525
-47953873
GPR[ESUN]-1659932027779
GPR[SSUN]-1659932027779
-47953873
GPR[ESUN]-1659932028028
GPR[SSUN]-1659932028028
1508329696
GPR[ESUN]-1659932028271
GPR[SSUN]-1659932028271
1508329696
GPR[SPVATF]-1659932028511
GPR[EPVATF]-1659932030329
GPR[SPS]-1659932030329
[156028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions$NullAliasTransformationHandler:2070.
GPR[EPS]-1659932031070
GPR[ESUN]-1659932031070
GPR[SSUN]-1659932031070
-1966087783
GPR[SPVATF]-1659932031263
GPR[EPVATF]-1659932031285
[156243] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659932031285
GPR[EPVATF]-1659932031306
[156264] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932031306
GPR[SSUN]-1659932031306
-1966087783
GPR[SPVATF]-1659932031497
GPR[EPVATF]-1659932031519
[156477] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659932031519
GPR[EPVATF]-1659932031540
[156498] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932031540
GPR[SSUN]-1659932031540
-1966087783
GPR[SPVATF]-1659932031728
GPR[EPVATF]-1659932031749
[156707] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659932031749
GPR[EPVATF]-1659932031769
[156727] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932031769
GPR[SSUN]-1659932031769
-1966087783
GPR[ESUN]-1659932031955
GPR[SSUN]-1659932031955
-1966087783
GPR[ESUN]-1659932032138
GPR[SSUN]-1659932032138
-1966087783
GPR[SPVATF]-1659932032327
GPR[EPVATF]-1659932032348
[157306] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659932032349
GPR[EPVATF]-1659932032370
[157328] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932032370
GPR[SSUN]-1659932032370
-1966087783
GPR[SPVATF]-1659932032562
GPR[EPVATF]-1659932032583
[157541] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659932032583
GPR[EPVATF]-1659932032604
[157562] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932032604
GPR[SSUN]-1659932032604
-1966087783
GPR[ESUN]-1659932032791
GPR[SSUN]-1659932032791
-1966087783
GPR[SPVATF]-1659932032980
GPR[EPVATF]-1659932033001
[157959] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932033001
GPR[SSUN]-1659932033001
2433571
GPR[SPVATF]-1659932033239
GPR[EPVATF]-1659932033483
GPR[SPS]-1659932033483
GPR[EPS]-1659932034590
GPR[SPVATR]-1659932034590
[159548] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1446: PRECONDITION com.google.javascript.rhino.Node.this.sourcePosition < com.google.javascript.rhino.Node.VAR_ARGS_NAME
[159925] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.sourcePosition < com.google.javascript.rhino.Node.VAR_ARGS_NAME" is working
GPR[EPVATR]-1659932035139
[160097] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659932035139
[160132] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1445,3 +1445,5 @@
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (com.google.javascript.rhino.Node.this.sourcePosition < com.google.javascript.rhino.Node.VAR_ARGS_NAME) {
+        return new NodeMismatch(this, node2);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/16/seed_261/patch_155593_1ts_1659932035174.diff
GPR[ESUN]-1659932035175
GPR[SSUN]-1659932035175
-47953873
GPR[ESUN]-1659932035431
GPR[SSUN]-1659932035431
-47953873
GPR[SPVATF]-1659932035675
GPR[EPVATF]-1659932036670
GPR[SPS]-1659932036670
[162240] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:384.
GPR[EPS]-1659932037282
GPR[ESUN]-1659932037282
GPR[SSUN]-1659932037282
-1966087783
GPR[SPVATF]-1659932037474
GPR[EPVATF]-1659932037496
[162454] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932037496
GPR[SSUN]-1659932037496
-1966087783
GPR[ESUN]-1659932037683
GPR[SSUN]-1659932037683
-1966087783
GPR[SPVATF]-1659932037867
GPR[EPVATF]-1659932037888
[162847] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932037889
GPR[SSUN]-1659932037889
-1966087783
GPR[ESUN]-1659932038075
GPR[SSUN]-1659932038075
-1966087783
GPR[ESUN]-1659932038258
GPR[SSUN]-1659932038258
-1966087783
GPR[SPVATF]-1659932038444
GPR[EPVATF]-1659932038466
[163424] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932038466
GPR[SSUN]-1659932038466
-1966087783
GPR[SPVATF]-1659932038655
GPR[EPVATF]-1659932038676
[163634] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932038676
GPR[SSUN]-1659932038676
79711797
GPR[ESUN]-1659932038907
GPR[SSUN]-1659932038907
-47953873
GPR[ESUN]-1659932039149
GPR[SSUN]-1659932039149
-47953873
GPR[ESUN]-1659932039391
GPR[SSUN]-1659932039391
-47953873
GPR[SPVATF]-1659932039634
GPR[EPVATF]-1659932040602
GPR[SPS]-1659932040602
[166180] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:447.
GPR[EPS]-1659932041222
GPR[SPVATF]-1659932041223
GPR[EPVATF]-1659932042204
GPR[SPS]-1659932042204
[167765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:447.
GPR[EPS]-1659932042807
GPR[ESUN]-1659932042807
GPR[SSUN]-1659932042807
-47953873
GPR[ESUN]-1659932043053
GPR[SSUN]-1659932043053
-47953873
GPR[SPVATF]-1659932043299
GPR[EPVATF]-1659932044300
GPR[SPS]-1659932044300
[169869] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:435.
GPR[EPS]-1659932044911
GPR[SPVATF]-1659932044911
GPR[EPVATF]-1659932045929
GPR[SPS]-1659932045929
[171481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:435.
GPR[EPS]-1659932046523
GPR[ESUN]-1659932046523
GPR[SSUN]-1659932046523
-47953873
GPR[SPVATF]-1659932046772
GPR[EPVATF]-1659932047780
GPR[SPS]-1659932047780
[173350] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:433.
GPR[EPS]-1659932048392
GPR[SPVATF]-1659932048392
GPR[EPVATF]-1659932049401
GPR[SPS]-1659932049401
[174971] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:433.
GPR[EPS]-1659932050014
GPR[ESUN]-1659932050014
GPR[SSUN]-1659932050014
-47953873
GPR[SPVATF]-1659932050263
GPR[EPVATF]-1659932051291
GPR[SPS]-1659932051291
[176851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:427.
GPR[EPS]-1659932051893
GPR[SPVATF]-1659932051893
GPR[EPVATF]-1659932052951
GPR[SPS]-1659932052951
[178506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:427.
GPR[EPS]-1659932053548
GPR[ESUN]-1659932053548
GPR[SSUN]-1659932053548
-47953873
GPR[SPVATF]-1659932053802
GPR[EPVATF]-1659932054859
GPR[SPS]-1659932054859
[180474] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:425.
GPR[EPS]-1659932055516
GPR[SPVATF]-1659932055516
GPR[EPVATF]-1659932057452
GPR[SPS]-1659932057452
[183148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:425.
GPR[EPS]-1659932058190
GPR[ESUN]-1659932058190
GPR[SSUN]-1659932058190
-47953873
GPR[SPVATF]-1659932058437
GPR[EPVATF]-1659932059423
GPR[SPS]-1659932059423
[185008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:423.
GPR[EPS]-1659932060050
GPR[SPVATF]-1659932060051
GPR[EPVATF]-1659932061045
GPR[SPS]-1659932061045
[186607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:423.
GPR[EPS]-1659932061649
GPR[ESUN]-1659932061649
GPR[SSUN]-1659932061649
-47953873
GPR[SPVATF]-1659932061901
GPR[EPVATF]-1659932062891
GPR[SPS]-1659932062891
[188455] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:411.
GPR[EPS]-1659932063497
GPR[SPVATF]-1659932063497
GPR[EPVATF]-1659932064501
GPR[SPS]-1659932064501
[190009] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:411.
GPR[EPS]-1659932065051
GPR[ESUN]-1659932065051
GPR[SSUN]-1659932065051
-47953873
GPR[SPVATF]-1659932065299
GPR[EPVATF]-1659932066295
GPR[SPS]-1659932066295
[191854] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:410.
GPR[EPS]-1659932066896
GPR[SPVATF]-1659932066896
GPR[EPVATF]-1659932067935
GPR[SPS]-1659932067935
[193494] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:410.
GPR[EPS]-1659932068536
GPR[ESUN]-1659932068536
GPR[SSUN]-1659932068536
-47953873
GPR[SPVATF]-1659932068788
GPR[EPVATF]-1659932069809
GPR[SPS]-1659932069809
[195381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:404.
GPR[EPS]-1659932070423
GPR[SPVATF]-1659932070423
GPR[EPVATF]-1659932071484
GPR[SPS]-1659932071484
[197044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:404.
GPR[EPS]-1659932072086
GPR[ESUN]-1659932072087
GPR[SSUN]-1659932072087
-47953873
GPR[ESUN]-1659932072342
GPR[SSUN]-1659932072342
-47953873
GPR[ESUN]-1659932072590
GPR[SSUN]-1659932072590
-47953873
GPR[SPVATF]-1659932072840
GPR[EPVATF]-1659932073870
GPR[SPS]-1659932073870
[199446] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:401.
GPR[EPS]-1659932074488
GPR[SPVATF]-1659932074488
GPR[EPVATF]-1659932075558
GPR[SPS]-1659932075558
[201119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:401.
GPR[EPS]-1659932076161
GPR[ESUN]-1659932076161
GPR[SSUN]-1659932076161
-47953873
GPR[ESUN]-1659932076414
GPR[SSUN]-1659932076414
-47953873
GPR[ESUN]-1659932076664
GPR[SSUN]-1659932076664
-47953873
GPR[SPVATF]-1659932076918
GPR[EPVATF]-1659932078044
GPR[SPS]-1659932078044
[203620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:392.
GPR[EPS]-1659932078662
GPR[ESUN]-1659932078662
GPR[SSUN]-1659932078662
-47953873
GPR[ESUN]-1659932078914
GPR[SSUN]-1659932078914
-47953873
GPR[SPVATF]-1659932079165
GPR[EPVATF]-1659932080270
GPR[SPS]-1659932080270
[206596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:379.
GPR[EPS]-1659932081638
GPR[SPVATF]-1659932081638
GPR[EPVATF]-1659932083087
GPR[SPS]-1659932083087
[208657] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:379.
GPR[EPS]-1659932083699
GPR[ESUN]-1659932083699
GPR[SSUN]-1659932083699
-47953873
GPR[ESUN]-1659932083952
GPR[SSUN]-1659932083952
-47953873
GPR[SPVATF]-1659932084204
GPR[EPVATF]-1659932085215
GPR[SPS]-1659932085215
[210799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:373.
GPR[EPS]-1659932085841
GPR[SPVATF]-1659932085842
GPR[EPVATF]-1659932086867
GPR[SPS]-1659932086867
[212424] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:373.
GPR[EPS]-1659932087466
GPR[ESUN]-1659932087466
GPR[SSUN]-1659932087466
-47953873
GPR[SPVATF]-1659932087717
GPR[EPVATF]-1659932088722
GPR[SPS]-1659932088722
[214293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:370.
GPR[EPS]-1659932089335
GPR[SPVATF]-1659932089335
GPR[EPVATF]-1659932090347
GPR[SPS]-1659932090347
[215924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:370.
GPR[EPS]-1659932090966
GPR[ESUN]-1659932090966
GPR[SSUN]-1659932090966
-47953873
GPR[SPVATF]-1659932091247
GPR[EPVATF]-1659932092256
GPR[SPS]-1659932092256
[217831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:367.
GPR[EPS]-1659932092873
GPR[SPVATF]-1659932092873
GPR[EPVATF]-1659932093888
GPR[SPS]-1659932093888
[219537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:367.
GPR[EPS]-1659932094579
GPR[ESUN]-1659932094579
GPR[SSUN]-1659932094579
-47953873
GPR[ESUN]-1659932094827
GPR[SSUN]-1659932094827
-47953873
GPR[SPVATF]-1659932095117
GPR[EPVATF]-1659932096136
GPR[SPS]-1659932096136
[221719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:352.
GPR[EPS]-1659932096761
GPR[SPVATF]-1659932096761
GPR[EPVATF]-1659932097805
GPR[SPS]-1659932097805
[223379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:352.
GPR[EPS]-1659932098421
GPR[ESUN]-1659932098421
GPR[SSUN]-1659932098421
-47953873
GPR[ESUN]-1659932098671
GPR[SSUN]-1659932098671
-47953873
GPR[SPVATF]-1659932098916
GPR[EPVATF]-1659932099981
GPR[SPS]-1659932099981
[225552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:297.
GPR[EPS]-1659932100594
GPR[ESUN]-1659932100594
GPR[SSUN]-1659932100594
-47953873
GPR[ESUN]-1659932100842
GPR[SSUN]-1659932100842
-47953873
GPR[ESUN]-1659932101088
GPR[SSUN]-1659932101088
-47953873
GPR[SPVATF]-1659932101348
GPR[EPVATF]-1659932102409
GPR[SPS]-1659932102409
[227965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:284.
GPR[EPS]-1659932103007
GPR[ESUN]-1659932103007
GPR[SSUN]-1659932103007
-47953873
GPR[ESUN]-1659932103271
GPR[SSUN]-1659932103271
-47953873
GPR[ESUN]-1659932103523
GPR[SSUN]-1659932103523
-47953873
GPR[ESUN]-1659932103818
GPR[SSUN]-1659932103818
-47953873
GPR[SPVATF]-1659932104067
GPR[EPVATF]-1659932105151
GPR[SPS]-1659932105151
[230716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:275.
GPR[EPS]-1659932105758
GPR[ESUN]-1659932105758
GPR[SSUN]-1659932105758
-47953873
GPR[ESUN]-1659932106010
GPR[SSUN]-1659932106010
-47953873
GPR[ESUN]-1659932106259
GPR[SSUN]-1659932106259
-47953873
GPR[SPVATF]-1659932106501
GPR[EPVATF]-1659932108402
GPR[SPS]-1659932108402
[234407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:257.
GPR[EPS]-1659932109449
GPR[ESUN]-1659932109449
GPR[SSUN]-1659932109449
-47953873
GPR[SPVATF]-1659932109705
GPR[EPVATF]-1659932110701
GPR[SPS]-1659932110701
[236268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:256.
GPR[EPS]-1659932111310
GPR[ESUN]-1659932111310
GPR[SSUN]-1659932111310
-47953873
GPR[SPVATF]-1659932111565
GPR[EPVATF]-1659932112548
GPR[SPS]-1659932112548
[238124] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:255.
GPR[EPS]-1659932113166
GPR[ESUN]-1659932113166
GPR[SSUN]-1659932113167
-47953873
GPR[SPVATF]-1659932113419
GPR[EPVATF]-1659932114408
GPR[SPS]-1659932114408
[239963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:254.
GPR[EPS]-1659932115005
GPR[ESUN]-1659932115005
GPR[SSUN]-1659932115005
-47953873
GPR[SPVATF]-1659932115251
GPR[EPVATF]-1659932116248
GPR[SPS]-1659932116248
[241832] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:253.
GPR[EPS]-1659932116874
GPR[ESUN]-1659932116874
GPR[SSUN]-1659932116874
-47953873
GPR[SPVATF]-1659932117126
GPR[EPVATF]-1659932118122
GPR[SPS]-1659932118122
[243796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:242.
GPR[EPS]-1659932118838
GPR[ESUN]-1659932118838
GPR[SSUN]-1659932118838
-47953873
GPR[SPVATF]-1659932119095
GPR[EPVATF]-1659932120135
GPR[SPS]-1659932120135
[245701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:240.
GPR[EPS]-1659932120743
GPR[ESUN]-1659932120743
GPR[SSUN]-1659932120743
1508981886
GPR[SPVATF]-1659932120954
GPR[EPVATF]-1659932121987
GPR[SPS]-1659932121987
[247497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1473.
GPR[EPS]-1659932122539
GPR[ESUN]-1659932122539
GPR[SSUN]-1659932122539
1508981886
GPR[ESUN]-1659932122748
GPR[SSUN]-1659932122748
1508981886
GPR[SPVATF]-1659932122951
GPR[EPVATF]-1659932123995
GPR[SPS]-1659932123995
[249469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1472.
GPR[EPS]-1659932124511
GPR[SPVATF]-1659932124511
GPR[EPVATF]-1659932125554
GPR[SPS]-1659932125554
[251027] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1472.
GPR[EPS]-1659932126069
GPR[ESUN]-1659932126069
GPR[SSUN]-1659932126069
1508981886
GPR[SPVATF]-1659932126276
GPR[EPVATF]-1659932127322
GPR[SPS]-1659932127322
[252789] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1471.
GPR[EPS]-1659932127831
GPR[ESUN]-1659932127831
GPR[SSUN]-1659932127831
-47953873
GPR[SPVATF]-1659932128081
GPR[EPVATF]-1659932129156
GPR[SPS]-1659932129156
[254707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:338.
GPR[EPS]-1659932129749
GPR[ESUN]-1659932129749
GPR[SSUN]-1659932129749
-47953873
GPR[ESUN]-1659932129996
GPR[SSUN]-1659932129996
-47953873
GPR[SPVATF]-1659932130238
GPR[EPVATF]-1659932131250
GPR[SPS]-1659932131250
[256805] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:333.
GPR[EPS]-1659932131847
GPR[SPVATF]-1659932131847
GPR[EPVATF]-1659932132922
GPR[SPS]-1659932132922
[258464] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:333.
GPR[EPS]-1659932133506
GPR[ESUN]-1659932133507
GPR[SSUN]-1659932133507
-47953873
GPR[SPVATF]-1659932133754
GPR[EPVATF]-1659932135780
GPR[SPS]-1659932135780
[261344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:249.
GPR[EPS]-1659932136386
GPR[ESUN]-1659932136386
GPR[SSUN]-1659932136386
1508981886
GPR[SPVATF]-1659932136593
GPR[EPVATF]-1659932137600
GPR[SPS]-1659932137600
[263078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1478.
GPR[EPS]-1659932138120
GPR[SPVATF]-1659932138120
GPR[EPVATF]-1659932139125
GPR[SPS]-1659932139125
[264573] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1478.
GPR[EPS]-1659932139615
GPR[ESUN]-1659932139615
GPR[SSUN]-1659932139615
1508981886
GPR[SPVATF]-1659932139823
GPR[EPVATF]-1659932140830
GPR[SPS]-1659932140830
[266334] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1470.
GPR[EPS]-1659932141376
GPR[SPVATF]-1659932141376
GPR[EPVATF]-1659932142379
GPR[SPS]-1659932142379
[267837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1470.
GPR[EPS]-1659932142879
GPR[ESUN]-1659932142879
GPR[SSUN]-1659932142879
1508981886
GPR[SPVATF]-1659932143084
GPR[EPVATF]-1659932144087
GPR[SPS]-1659932144087
[269544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1464.
GPR[EPS]-1659932144586
GPR[SPVATF]-1659932144586
GPR[EPVATF]-1659932145601
GPR[SPS]-1659932145601
[271055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1464.
GPR[EPS]-1659932146097
GPR[ESUN]-1659932146097
GPR[SSUN]-1659932146097
1508981886
GPR[SPVATF]-1659932146307
GPR[EPVATF]-1659932147313
GPR[SPS]-1659932147313
[272779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1458.
GPR[EPS]-1659932147821
GPR[SPVATF]-1659932147821
GPR[EPVATF]-1659932148880
GPR[SPS]-1659932148880
[274369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1458.
GPR[EPS]-1659932149411
GPR[ESUN]-1659932149411
GPR[SSUN]-1659932149411
1508981886
GPR[SPVATF]-1659932149621
GPR[EPVATF]-1659932150671
GPR[SPS]-1659932150671
[276169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1454.
GPR[EPS]-1659932151211
GPR[SPVATF]-1659932151211
GPR[EPVATF]-1659932152281
GPR[SPS]-1659932152281
[277746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1454.
GPR[EPS]-1659932152788
GPR[ESUN]-1659932152788
GPR[SSUN]-1659932152788
2433571
GPR[ESUN]-1659932153022
GPR[SSUN]-1659932153022
-47953873
GPR[SPVATF]-1659932153327
GPR[EPVATF]-1659932154336
GPR[SPS]-1659932154336
[279887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ScopedAliases$Traversal:462.
GPR[EPS]-1659932154929
GPR[ESUN]-1659932154929
GPR[SSUN]-1659932154930
1455562524
GPR[ESUN]-1659932155121
GPR[SSUN]-1659932155121
-1617697147
GPR[SPVATF]-1659932155293
GPR[EPVATF]-1659932156389
GPR[SPS]-1659932156389
[281790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.SourcePosition:93.
GPR[EPS]-1659932156832
GPR[SPVATF]-1659932156832
GPR[EPVATF]-1659932157964
GPR[SPS]-1659932157964
[283347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.SourcePosition:93.
GPR[EPS]-1659932158389
GPR[ESUN]-1659932158389
GPR[SSUN]-1659932158389
1508981886
GPR[ESUN]-1659932158598
GPR[SSUN]-1659932158598
1508981886
GPR[SPVATF]-1659932158805
GPR[EPVATF]-1659932159937
GPR[SPS]-1659932159937
[285397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1453.
GPR[EPS]-1659932160439
GPR[SPVATF]-1659932160439
GPR[EPVATF]-1659932162699
GPR[SPS]-1659932162700
[288177] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1453.
GPR[EPS]-1659932163219
GPR[ESUN]-1659932163219
GPR[SSUN]-1659932163219
1508981886
GPR[SPVATF]-1659932163431
GPR[EPVATF]-1659932164416
GPR[SPS]-1659932164416
[289880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1449.
GPR[EPS]-1659932164922
GPR[SPVATF]-1659932164923
GPR[EPVATF]-1659932165938
GPR[SPS]-1659932165938
[291387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1449.
GPR[EPS]-1659932166429
GPR[ESUN]-1659932166429
GPR[SSUN]-1659932166429
1508981886
GPR[SPVATF]-1659932166638
GPR[EPVATF]-1659932167623
GPR[SPS]-1659932167623
[293082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1445.
GPR[EPS]-1659932168124
GPR[SPVATF]-1659932168124
GPR[EPVATF]-1659932169144
GPR[SPS]-1659932169144
[294588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1445.
GPR[EPS]-1659932169630
GPR[ESUN]-1659932169630
GPR[SSUN]-1659932169630
1508981886
GPR[ESUN]-1659932169841
GPR[SSUN]-1659932169841
-1966087783
GPR[SPVATF]-1659932170029
GPR[EPVATF]-1659932170046
[295005] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932170047
GPR[SSUN]-1659932170047
1187751237
GPR[ESUN]-1659932170326
GPR[SSUN]-1659932170326
1187751237
GPR[SPVATF]-1659932170603
GPR[EPVATF]-1659932171659
GPR[SPS]-1659932171659
[297390] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1835.
GPR[EPS]-1659932172432
GPR[ESUN]-1659932172432
GPR[SSUN]-1659932172432
1187751237
GPR[SPVATF]-1659932172714
GPR[EPVATF]-1659932173758
GPR[SPS]-1659932173758
[299452] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1834.
GPR[EPS]-1659932174494
GPR[ESUN]-1659932174494
GPR[SSUN]-1659932174494
1187751237
GPR[ESUN]-1659932174763
GPR[SSUN]-1659932174763
1187751237
GPR[SPVATF]-1659932175032
GPR[EPVATF]-1659932176100
GPR[SPS]-1659932176100
[301775] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    public static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    public static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    public static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    public static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType())) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean valueCheck(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(114).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("previous",previous);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("block",block);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(114).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean containsCall(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.CALL);
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isFunctionObjectCallOrApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode) || com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode);
    }

    static boolean isSimpleFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
            if (callNode.getFirstChild().getFirstChild().isName()) {
                return true;
            }
        }
        return false;
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    public static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        char LARGEST_BASIC_LATIN = 0x7f;
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    public static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    public static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[301776] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659932176818
GPR[SSUN]-1659932176818
1187751237
GPR[SPVATF]-1659932177086
GPR[EPVATF]-1659932178124
GPR[SPS]-1659932178124
[303909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1837.
GPR[EPS]-1659932178951
GPR[ESUN]-1659932178951
GPR[SSUN]-1659932178951
1187751237
GPR[SPVATF]-1659932179265
GPR[EPVATF]-1659932180314
GPR[SPS]-1659932180314
[305994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1832.
GPR[EPS]-1659932181036
GPR[ESUN]-1659932181036
GPR[SSUN]-1659932181036
1187751237
GPR[ESUN]-1659932181309
GPR[SSUN]-1659932181309
-1966087783
GPR[SPVATF]-1659932181494
GPR[EPVATF]-1659932181512
[306470] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932181512
GPR[SSUN]-1659932181512
-1966087783
GPR[SPVATF]-1659932181697
GPR[EPVATF]-1659932181714
[306672] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932181714
GPR[SSUN]-1659932181714
-1966087783
GPR[SPVATF]-1659932181898
GPR[EPVATF]-1659932181915
[306873] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932181915
GPR[SSUN]-1659932181915
-1966087783
GPR[SPVATF]-1659932182100
GPR[EPVATF]-1659932182119
[307077] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932182119
GPR[SSUN]-1659932182119
-1966087783
GPR[SPVATF]-1659932182301
GPR[EPVATF]-1659932182319
[307277] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932182319
GPR[SSUN]-1659932182319
-1966087783
GPR[SPVATF]-1659932182506
GPR[EPVATF]-1659932182524
[307482] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659932182524
GPR[EPVATF]-1659932182542
[307500] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659932182542
GPR[SSUN]-1659932182542
-1966087783
GPR[ESUN]-1659932182727
GPR[SSUN]-1659932182727
80988634
GPR[ESUN]-1659932182897
GPR[SSUN]-1659932182897
79711797
GPR[ESUN]-1659932183126
GPR[SSUN]-1659932183126
646738083
GPR[SPVATF]-1659932183407
GPR[EPVATF]-1659932184497
GPR[SPS]-1659932184497
[310162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:1299.
GPR[EPS]-1659932185204
GPR[ESUN]-1659932185204
GPR[SSUN]-1659932185204
GPR[ESUN]-1659932185204
GPR[SSUN]-1659932185204
GPR[ESUN]-1659932185204
GPR[SSUN]-1659932185204
GPR[ESUN]-1659932185204
GPR[SSUN]-1659932185204
-1053444620
GPR[SPVATF]-1659932185403
GPR[EPVATF]-1659932186419
GPR[SPS]-1659932186419
[311870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.NamedType:188.
GPR[EPS]-1659932186912
GPR[ESUN]-1659932186912
GPR[SSUN]-1659932186912
-1684326478
GPR[SPVATF]-1659932187138
GPR[EPVATF]-1659932188224
GPR[SPS]-1659932188224
[533232] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659932408274
GPR[SSUN]-1659932422852
\n\nNode: host-48\n
\n\nDate: Sun 07 Aug 2022 09:21:09 PM PDT\n
End running Nopol Closure/16 results at /experiment_home///results/Nopol/Closure/16/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_16
GPR[SSLE]-1659932470330
GPR[ESLE]-1659932530336
