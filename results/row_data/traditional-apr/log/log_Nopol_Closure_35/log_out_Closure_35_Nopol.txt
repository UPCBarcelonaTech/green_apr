Sleep 1m start
GPR[SSLI]-1659912988580
GPR[ESLI]-1659913048583
Running Nopol Closure 35b with approach: smt
Timezone: America/Los_Angeles
Seed 263
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/35/seed_263/
The file script/workingdir/Nopol/Closure_35 does not exist!
script/workingdir/Nopol/Closure_35
script/workingdir/Nopol/Closure_35
classpath:  script/workingdir/Nopol/Closure_35/build/classes:script/workingdir/Nopol/Closure_35/lib/args4j.jar:script/workingdir/Nopol/Closure_35/lib/guava.jar:script/workingdir/Nopol/Closure_35/lib/json.jar:script/workingdir/Nopol/Closure_35/lib/jsr305.jar:script/workingdir/Nopol/Closure_35/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_35/build/lib/rhino.jar:script/workingdir/Nopol/Closure_35/lib/ant.jar:script/workingdir/Nopol/Closure_35/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_35/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_35/lib/jarjar.jar:script/workingdir/Nopol/Closure_35/lib/junit.jar:script/workingdir/Nopol/Closure_35/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659913067987
GPR[ESLB]-1659913127990
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_35//build/classes:script/workingdir/Nopol/Closure_35//build/test:script/workingdir/Nopol/Closure_35/build/classes:script/workingdir/Nopol/Closure_35/lib/args4j.jar:script/workingdir/Nopol/Closure_35/lib/guava.jar:script/workingdir/Nopol/Closure_35/lib/json.jar:script/workingdir/Nopol/Closure_35/lib/jsr305.jar:script/workingdir/Nopol/Closure_35/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_35/build/lib/rhino.jar:script/workingdir/Nopol/Closure_35/lib/ant.jar:script/workingdir/Nopol/Closure_35/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_35/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_35/lib/jarjar.jar:script/workingdir/Nopol/Closure_35/lib/junit.jar:script/workingdir/Nopol/Closure_35/build/test
Node: host-51
Date init: Sun 07 Aug 2022 03:58:47 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_35/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_35/build/classes/, file:script/workingdir/Nopol/Closure_35/build/test/, file:script/workingdir/Nopol/Closure_35/build/classes/, file:script/workingdir/Nopol/Closure_35/lib/args4j.jar, file:script/workingdir/Nopol/Closure_35/lib/guava.jar, file:script/workingdir/Nopol/Closure_35/lib/json.jar, file:script/workingdir/Nopol/Closure_35/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_35/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_35/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_35/lib/ant.jar, file:script/workingdir/Nopol/Closure_35/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_35/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_35/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_35/lib/junit.jar, file:script/workingdir/Nopol/Closure_35/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_35/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/35/seed_263/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659913133274
GPR[ESUP]-1659913133274
GPR[SFL]-1659913133274
GPR[EFL]-1659913171916
GPR[SFP]-1659913171916
GPR[SSUN]-1659913173499
-283827935
GPR[SPVATF]-1659913174012
GPR[EPVATF]-1659913174049
[45287] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913174049
GPR[SSUN]-1659913174049
-1966087783
GPR[ESUN]-1659913174250
GPR[SSUN]-1659913174250
-1966087783
GPR[SPVATF]-1659913174446
GPR[EPVATF]-1659913174474
[45712] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913174474
GPR[SSUN]-1659913174474
-1966087783
GPR[SPVATF]-1659913174668
GPR[EPVATF]-1659913174690
[45928] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913174690
GPR[SSUN]-1659913174690
-1966087783
GPR[SPVATF]-1659913174884
GPR[EPVATF]-1659913174906
[46144] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913174906
GPR[SSUN]-1659913174906
-1659631726
GPR[ESUN]-1659913175093
GPR[SSUN]-1659913175093
130004992
GPR[ESUN]-1659913175696
GPR[SSUN]-1659913175696
130004992
GPR[SPVATF]-1659913175876
GPR[EPVATF]-1659913175899
[47137] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913175899
GPR[SSUN]-1659913175899
130004992
GPR[ESUN]-1659913176086
GPR[SSUN]-1659913176086
890942016
GPR[ESUN]-1659913176280
GPR[SSUN]-1659913176281
890942016
GPR[SPVATF]-1659913176474
GPR[EPVATF]-1659913176494
[47732] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913176494
GPR[SSUN]-1659913176494
890942016
GPR[SPVATF]-1659913176695
GPR[EPVATF]-1659913176737
[47975] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913176737
GPR[EPVATF]-1659913176757
[47995] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913176757
GPR[SSUN]-1659913176757
890942016
GPR[ESUN]-1659913176954
GPR[SSUN]-1659913176954
890942016
GPR[ESUN]-1659913177148
GPR[SSUN]-1659913177148
-1966087783
GPR[ESUN]-1659913177348
GPR[SSUN]-1659913177348
-1966087783
GPR[SPVATF]-1659913177569
GPR[EPVATF]-1659913177590
[48829] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913177591
GPR[EPVATF]-1659913177610
[48848] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913177610
GPR[SSUN]-1659913177610
-1966087783
GPR[ESUN]-1659913177809
GPR[SSUN]-1659913177809
-1966087783
GPR[SPVATF]-1659913178000
GPR[EPVATF]-1659913178019
[49257] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913178020
GPR[EPVATF]-1659913178039
[49277] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913178039
GPR[SSUN]-1659913178039
-1966087783
GPR[ESUN]-1659913178240
GPR[SSUN]-1659913178240
-1966087783
GPR[ESUN]-1659913178428
GPR[SSUN]-1659913178428
-1966087783
GPR[ESUN]-1659913178785
GPR[SSUN]-1659913178785
1613130706
GPR[ESUN]-1659913179003
GPR[SSUN]-1659913179003
1613130706
GPR[ESUN]-1659913179206
GPR[SSUN]-1659913179207
1613130706
GPR[SPVATF]-1659913179416
GPR[EPVATF]-1659913179605
[50843] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913179605
GPR[SSUN]-1659913179605
-1966087783
GPR[SPVATF]-1659913179796
GPR[EPVATF]-1659913179818
[51056] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913179819
GPR[EPVATF]-1659913179842
[51080] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913179842
GPR[SSUN]-1659913179842
-1966087783
GPR[SPVATF]-1659913180041
GPR[EPVATF]-1659913180064
[51302] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913180065
GPR[EPVATF]-1659913180086
[51324] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913180086
GPR[SSUN]-1659913180086
-1966087783
GPR[SPVATF]-1659913180277
GPR[EPVATF]-1659913180298
[51536] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913180299
GPR[EPVATF]-1659913180321
[51559] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913180321
GPR[SSUN]-1659913180321
-1966087783
GPR[ESUN]-1659913180509
GPR[SSUN]-1659913180509
-1966087783
GPR[ESUN]-1659913180695
GPR[SSUN]-1659913180695
-1966087783
GPR[SPVATF]-1659913180885
GPR[EPVATF]-1659913180907
[52145] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913180907
GPR[EPVATF]-1659913180928
[52166] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913180928
GPR[SSUN]-1659913180928
-1966087783
GPR[SPVATF]-1659913181114
GPR[EPVATF]-1659913181135
[52373] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913181135
GPR[EPVATF]-1659913181157
[52395] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913181157
GPR[SSUN]-1659913181157
-1966087783
GPR[ESUN]-1659913181347
GPR[SSUN]-1659913181347
-1966087783
GPR[SPVATF]-1659913181539
GPR[EPVATF]-1659913181561
[52799] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913181561
GPR[SSUN]-1659913181561
-1966087783
GPR[SPVATF]-1659913181755
GPR[EPVATF]-1659913181777
[53015] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913181777
GPR[SSUN]-1659913181777
-1966087783
GPR[ESUN]-1659913181963
GPR[SSUN]-1659913181963
-1966087783
GPR[SPVATF]-1659913182150
GPR[EPVATF]-1659913182171
[53410] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913182172
GPR[SSUN]-1659913182172
-1966087783
GPR[ESUN]-1659913182357
GPR[SSUN]-1659913182357
-1966087783
GPR[ESUN]-1659913182542
GPR[SSUN]-1659913182542
-1966087783
GPR[SPVATF]-1659913182733
GPR[EPVATF]-1659913182754
[53992] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913182754
GPR[SSUN]-1659913182754
-1966087783
GPR[SPVATF]-1659913182946
GPR[EPVATF]-1659913182968
[54206] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913182968
GPR[SSUN]-1659913182968
234947553
GPR[ESUN]-1659913183157
GPR[SSUN]-1659913183157
234947553
GPR[SPVATF]-1659913183342
GPR[EPVATF]-1659913183357
[54595] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913183358
GPR[EPVATF]-1659913183373
[54611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913183373
GPR[SSUN]-1659913183373
234947553
GPR[ESUN]-1659913183562
GPR[SSUN]-1659913183562
234947553
GPR[SPVATF]-1659913183746
GPR[EPVATF]-1659913183762
[55000] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913183762
GPR[EPVATF]-1659913183777
[55015] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913183777
GPR[SSUN]-1659913183777
234947553
GPR[SPVATF]-1659913183963
GPR[EPVATF]-1659913183978
[55216] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913183978
GPR[SSUN]-1659913183978
234947553
GPR[ESUN]-1659913184165
GPR[SSUN]-1659913184165
234947553
GPR[ESUN]-1659913184359
GPR[SSUN]-1659913184359
234947553
GPR[SPVATF]-1659913184543
GPR[EPVATF]-1659913184559
[55797] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913184559
GPR[SSUN]-1659913184559
234947553
GPR[SPVATF]-1659913184749
GPR[EPVATF]-1659913184765
[56003] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913184765
GPR[SSUN]-1659913184765
234947553
GPR[SPVATF]-1659913184957
GPR[EPVATF]-1659913184973
[56211] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913184973
GPR[SSUN]-1659913184973
234947553
GPR[ESUN]-1659913185159
GPR[SSUN]-1659913185159
234947553
GPR[ESUN]-1659913185348
GPR[SSUN]-1659913185349
234947553
GPR[SPVATF]-1659913185546
GPR[EPVATF]-1659913185561
[56799] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913185561
GPR[SSUN]-1659913185562
234947553
GPR[SPVATF]-1659913185746
GPR[EPVATF]-1659913185762
[57000] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913185763
GPR[SSUN]-1659913185763
234947553
GPR[ESUN]-1659913185950
GPR[SSUN]-1659913185950
234947553
GPR[SPVATF]-1659913186142
GPR[EPVATF]-1659913186157
[57396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913186158
GPR[SSUN]-1659913186158
234947553
GPR[SPVATF]-1659913186367
GPR[EPVATF]-1659913186382
[57620] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913186383
GPR[SSUN]-1659913186383
234947553
GPR[ESUN]-1659913186570
GPR[SSUN]-1659913186570
890942016
GPR[SPVATF]-1659913186763
GPR[EPVATF]-1659913186782
[58020] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913186782
GPR[EPVATF]-1659913186799
[58037] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913186799
GPR[SSUN]-1659913186799
890942016
GPR[SPVATF]-1659913186995
GPR[EPVATF]-1659913187013
[58252] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913187014
GPR[SSUN]-1659913187014
890942016
GPR[ESUN]-1659913187200
GPR[SSUN]-1659913187200
890942016
GPR[SPVATF]-1659913187387
GPR[EPVATF]-1659913189357
[60595] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913189357
GPR[SSUN]-1659913189357
890942016
GPR[SPVATF]-1659913189554
GPR[EPVATF]-1659913189572
[60810] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913189572
GPR[EPVATF]-1659913189589
[60827] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913189590
GPR[SSUN]-1659913189590
890942016
GPR[SPVATF]-1659913189777
GPR[EPVATF]-1659913189794
[61032] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913189794
GPR[SSUN]-1659913189794
890942016
GPR[SPVATF]-1659913189983
GPR[EPVATF]-1659913190001
[61239] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913190001
GPR[EPVATF]-1659913190017
[61255] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913190017
GPR[SSUN]-1659913190018
890942016
GPR[ESUN]-1659913190205
GPR[SSUN]-1659913190205
890942016
GPR[SPVATF]-1659913190392
GPR[EPVATF]-1659913190411
[61649] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913190411
GPR[SSUN]-1659913190411
890942016
GPR[SPVATF]-1659913190608
GPR[EPVATF]-1659913190626
[61864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913190626
GPR[SSUN]-1659913190626
890942016
GPR[SPVATF]-1659913190817
GPR[EPVATF]-1659913190834
[62072] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913190834
GPR[SSUN]-1659913190834
890942016
GPR[ESUN]-1659913191028
GPR[SSUN]-1659913191029
1613130706
GPR[SPVATF]-1659913191252
GPR[EPVATF]-1659913191420
[62658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913191421
GPR[EPVATF]-1659913191583
[62821] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913191583
GPR[SSUN]-1659913191583
1613130706
GPR[SPVATF]-1659913191791
GPR[EPVATF]-1659913191965
[63203] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913191965
GPR[SSUN]-1659913191965
1613130706
GPR[SPVATF]-1659913192173
GPR[EPVATF]-1659913192349
[63587] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913192349
GPR[EPVATF]-1659913192517
[63755] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913192517
GPR[SSUN]-1659913192517
1613130706
GPR[SPVATF]-1659913192744
GPR[EPVATF]-1659913192908
[64146] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913192909
GPR[EPVATF]-1659913193076
[64314] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913193077
GPR[SSUN]-1659913193077
1613130706
GPR[SPVATF]-1659913193293
GPR[EPVATF]-1659913193457
[64695] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913193457
GPR[EPVATF]-1659913193623
[64861] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913193623
GPR[SSUN]-1659913193623
1613130706
GPR[ESUN]-1659913193831
GPR[SSUN]-1659913193831
1613130706
GPR[ESUN]-1659913194036
GPR[SSUN]-1659913194036
1613130706
GPR[ESUN]-1659913194240
GPR[SSUN]-1659913194240
1613130706
GPR[ESUN]-1659913194444
GPR[SSUN]-1659913194444
1613130706
GPR[SPVATF]-1659913194651
GPR[EPVATF]-1659913194818
[66057] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913194819
GPR[EPVATF]-1659913194987
[66225] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913194988
GPR[SSUN]-1659913194988
1613130706
GPR[SPVATF]-1659913195197
GPR[EPVATF]-1659913195363
[66601] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913195363
GPR[SSUN]-1659913195363
1613130706
GPR[ESUN]-1659913195571
GPR[SSUN]-1659913195571
1613130706
GPR[SPVATF]-1659913195793
GPR[EPVATF]-1659913196471
[67709] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913196471
GPR[EPVATF]-1659913196635
[67873] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913196635
GPR[SSUN]-1659913196635
1613130706
GPR[ESUN]-1659913196850
GPR[SSUN]-1659913196850
1613130706
GPR[SPVATF]-1659913197062
GPR[EPVATF]-1659913197229
[68468] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913197230
GPR[EPVATF]-1659913197399
[68637] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913197399
GPR[SSUN]-1659913197399
466431456
GPR[SPVATF]-1659913197667
GPR[EPVATF]-1659913198908
GPR[SPS]-1659913198908
[71421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1123.
GPR[EPS]-1659913200183
GPR[SPVATF]-1659913200183
GPR[EPVATF]-1659913201328
GPR[SPS]-1659913201328
[73310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1123.
GPR[EPS]-1659913202072
GPR[ESUN]-1659913202072
GPR[SSUN]-1659913202073
466431456
GPR[ESUN]-1659913202344
GPR[SSUN]-1659913202344
-1566590132
GPR[SPVATF]-1659913202549
GPR[EPVATF]-1659913203745
GPR[SPS]-1659913203745
[75482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:260.
GPR[EPS]-1659913204244
GPR[SPVATF]-1659913204244
GPR[EPVATF]-1659913205440
GPR[SPS]-1659913205440
[77188] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:260.
GPR[EPS]-1659913205950
GPR[ESUN]-1659913205950
GPR[SSUN]-1659913205950
-132053243
GPR[ESUN]-1659913206145
GPR[SSUN]-1659913206145
-132053243
GPR[SPVATF]-1659913206336
GPR[EPVATF]-1659913206353
[77591] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913206354
GPR[EPVATF]-1659913206370
[77608] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913206370
GPR[SSUN]-1659913206370
-132053243
GPR[ESUN]-1659913206562
GPR[SSUN]-1659913206562
-132053243
GPR[SPVATF]-1659913206751
GPR[EPVATF]-1659913206767
[78005] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913206767
GPR[SSUN]-1659913206767
-132053243
GPR[SPVATF]-1659913206957
GPR[EPVATF]-1659913207551
[78789] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913207551
GPR[SSUN]-1659913207551
-132053243
GPR[SPVATF]-1659913207747
GPR[EPVATF]-1659913207764
[79002] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913207764
GPR[SSUN]-1659913207764
-132053243
GPR[SPVATF]-1659913207952
GPR[EPVATF]-1659913207969
[79207] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913207969
GPR[SSUN]-1659913207969
-132053243
GPR[ESUN]-1659913208160
GPR[SSUN]-1659913208160
-1093533311
GPR[SPVATF]-1659913208498
GPR[EPVATF]-1659913209713
GPR[SPS]-1659913209713
[81536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1647.
GPR[EPS]-1659913210298
GPR[ESUN]-1659913210298
GPR[SSUN]-1659913210298
-1093533311
GPR[SPVATF]-1659913210540
GPR[EPVATF]-1659913211688
GPR[SPS]-1659913211688
[83488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1630.
GPR[EPS]-1659913212250
GPR[ESUN]-1659913212250
GPR[SSUN]-1659913212250
-1093533311
GPR[SPVATF]-1659913212491
GPR[EPVATF]-1659913213671
GPR[SPS]-1659913213671
[85490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1629.
GPR[EPS]-1659913214252
GPR[ESUN]-1659913214252
GPR[SSUN]-1659913214252
-1566590132
GPR[ESUN]-1659913214459
GPR[SSUN]-1659913214459
-1566590132
GPR[ESUN]-1659913214662
GPR[SSUN]-1659913214663
-1566590132
GPR[SPVATF]-1659913214863
GPR[EPVATF]-1659913216059
GPR[SPS]-1659913216059
[87764] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:275.
GPR[EPS]-1659913216526
GPR[SPVATF]-1659913216527
GPR[EPVATF]-1659913217709
GPR[SPS]-1659913217709
[89436] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:275.
GPR[EPS]-1659913218198
GPR[ESUN]-1659913218198
GPR[SSUN]-1659913218198
-1566590132
GPR[ESUN]-1659913218400
GPR[SSUN]-1659913218400
-1566590132
GPR[ESUN]-1659913218596
GPR[SSUN]-1659913218596
-1566590132
GPR[SPVATF]-1659913218795
GPR[EPVATF]-1659913219970
GPR[SPS]-1659913219970
[91694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:272.
GPR[EPS]-1659913220456
GPR[ESUN]-1659913220456
GPR[SSUN]-1659913220456
-1093533311
GPR[ESUN]-1659913220696
GPR[SSUN]-1659913220696
-1093533311
GPR[SPVATF]-1659913220934
GPR[EPVATF]-1659913222184
GPR[SPS]-1659913222184
GPR[EPS]-1659913223952
GPR[SPVATR]-1659913223952
[95190] INFO TestPatch - Applying patch: com.google.javascript.rhino.jstype.JSTypeRegistry:1655: PRECONDITION (fieldName.length()) != (5)
[95519] INFO TestPatch - Running test suite to check the patch "(fieldName.length()) != (5)" is working
GPR[EPVATR]-1659913224885
[96123] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659913224885
[96149] INFO NoPol - --- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
@@ -1654,8 +1654,10 @@
       // Add the property to the record.
-      if (builder.addProperty(fieldName, fieldType, fieldNameNode) == null) {
-        // Duplicate field name, warning and skip
-        reporter.warning(
-            "Duplicate record field " + fieldName,
-            sourceName,
-            n.getLineno(), fieldNameNode.getCharno());
+      if ((fieldName.length()) != (5)) {
+        if (builder.addProperty(fieldName, fieldType, fieldNameNode) == null) {
+          // Duplicate field name, warning and skip
+          reporter.warning(
+          "Duplicate record field " + fieldName,
+          sourceName,
+          n.getLineno(), fieldNameNode.getCharno());
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/35/seed_263/patch_91637_1ts_1659913224911.diff
GPR[SPVATF]-1659913224912
GPR[EPVATF]-1659913226101
GPR[SPS]-1659913226101
[98600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1655.
GPR[EPS]-1659913227362
GPR[ESUN]-1659913227362
GPR[SSUN]-1659913227362
-1093533311
GPR[SPVATF]-1659913227608
GPR[EPVATF]-1659913228892
GPR[SPS]-1659913228892
[100706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1645.
GPR[EPS]-1659913229468
GPR[SPVATF]-1659913229468
GPR[EPVATF]-1659913230648
GPR[SPS]-1659913230648
[102412] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1645.
GPR[EPS]-1659913231174
GPR[ESUN]-1659913231174
GPR[SSUN]-1659913231174
-1093533311
GPR[ESUN]-1659913231429
GPR[SSUN]-1659913231429
-1093533311
GPR[SPVATF]-1659913231661
GPR[EPVATF]-1659913232831
GPR[SPS]-1659913232831
[104418] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class JSTypeRegistry implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;

    private final transient com.google.javascript.rhino.ErrorReporter reporter;

    private final com.google.javascript.rhino.jstype.JSType[] nativeTypes;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.JSType> namesToTypes;

    private final java.util.Set<java.lang.String> namespaces = new java.util.HashSet<java.lang.String>();

    private final java.util.Set<java.lang.String> nonNullableTypeNames = new java.util.HashSet<java.lang.String>();

    private final java.util.Set<java.lang.String> forwardDeclaredTypes = new java.util.HashSet<java.lang.String>();

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.UnionTypeBuilder> typesIndexedByProperty = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>> eachRefTypeIndexedByProperty = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.JSType> greatestSubtypeByProperty = com.google.common.collect.Maps.newHashMap();

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.rhino.jstype.FunctionType> interfaceToImplementors = com.google.common.collect.LinkedHashMultimap.create();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.NamedType> unresolvedNamedTypes = com.google.common.collect.ArrayListMultimap.create();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.NamedType> resolvedNamedTypes = com.google.common.collect.ArrayListMultimap.create();

    private boolean lastGeneration = true;

    private java.lang.String templateTypeName;

    private com.google.javascript.rhino.jstype.TemplateType templateType;

    private final boolean tolerateUndefinedValues;

    public static enum ResolveMode {

        LAZY_EXPRESSIONS,
        LAZY_NAMES,
        IMMEDIATE;}

    private com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES;

    public JSTypeRegistry(com.google.javascript.rhino.ErrorReporter reporter) {
        this(reporter, false);
    }

    public JSTypeRegistry(com.google.javascript.rhino.ErrorReporter reporter, boolean tolerateUndefinedValues) {
        this.reporter = reporter;
        nativeTypes = new com.google.javascript.rhino.jstype.JSType[com.google.javascript.rhino.jstype.JSTypeNative.values().length];
        namesToTypes = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.JSType>();
        resetForTypeCheck();
        this.tolerateUndefinedValues = tolerateUndefinedValues;
    }

    public void setResolveMode(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode mode) {
        this.resolveMode = mode;
    }

    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode getResolveMode() {
        return resolveMode;
    }

    public com.google.javascript.rhino.ErrorReporter getErrorReporter() {
        return reporter;
    }

    public boolean shouldTolerateUndefinedValues() {
        return tolerateUndefinedValues;
    }

    public void resetForTypeCheck() {
        typesIndexedByProperty.clear();
        eachRefTypeIndexedByProperty.clear();
        initializeBuiltInTypes();
        namesToTypes.clear();
        namespaces.clear();
        initializeRegistry();
    }

    private void initializeBuiltInTypes() {
        com.google.javascript.rhino.jstype.BooleanType BOOLEAN_TYPE = new com.google.javascript.rhino.jstype.BooleanType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);
        com.google.javascript.rhino.jstype.NullType NULL_TYPE = new com.google.javascript.rhino.jstype.NullType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, NULL_TYPE);
        com.google.javascript.rhino.jstype.NumberType NUMBER_TYPE = new com.google.javascript.rhino.jstype.NumberType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);
        com.google.javascript.rhino.jstype.StringType STRING_TYPE = new com.google.javascript.rhino.jstype.StringType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE, STRING_TYPE);
        com.google.javascript.rhino.jstype.UnknownType UNKNOWN_TYPE = new com.google.javascript.rhino.jstype.UnknownType(this, false);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE, new com.google.javascript.rhino.jstype.UnknownType(this, true));
        com.google.javascript.rhino.jstype.VoidType VOID_TYPE = new com.google.javascript.rhino.jstype.VoidType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE, VOID_TYPE);
        com.google.javascript.rhino.jstype.AllType ALL_TYPE = new com.google.javascript.rhino.jstype.AllType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE, ALL_TYPE);
        com.google.javascript.rhino.jstype.PrototypeObjectType TOP_LEVEL_PROTOTYPE = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null, true);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Object", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);
        OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);
        com.google.javascript.rhino.jstype.ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType FUNCTION_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Function", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);
        FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);
        com.google.javascript.rhino.jstype.NoType NO_TYPE = new com.google.javascript.rhino.jstype.NoType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE, NO_TYPE);
        com.google.javascript.rhino.jstype.NoObjectType NO_OBJECT_TYPE = new com.google.javascript.rhino.jstype.NoObjectType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.NoObjectType NO_RESOLVED_TYPE = new com.google.javascript.rhino.jstype.NoResolvedType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);
        com.google.javascript.rhino.jstype.FunctionType ARRAY_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Array", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);
        ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType = ARRAY_FUNCTION_TYPE.getInstanceType();
        com.google.javascript.rhino.jstype.ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);
        com.google.javascript.rhino.jstype.FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Boolean", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType BOOLEAN_OBJECT_TYPE = BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType DATE_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Date", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_TYPE, DATE_TYPE);
        com.google.javascript.rhino.jstype.FunctionType ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "Error");
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE, ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType EVAL_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "EvalError");
        EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType RANGE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "RangeError");
        RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType REFERENCE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "ReferenceError");
        REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType REFERENCE_ERROR_TYPE = REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType SYNTAX_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "SyntaxError");
        SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType TYPE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "TypeError");
        TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType URI_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "URIError");
        URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType NUMBER_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Number", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType NUMBER_OBJECT_TYPE = NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType REGEXP_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "RegExp", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);
        REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType = REGEXP_FUNCTION_TYPE.getInstanceType();
        com.google.javascript.rhino.jstype.ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);
        com.google.javascript.rhino.jstype.FunctionType STRING_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "String", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType STRING_OBJECT_TYPE = STRING_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.JSType OBJECT_NUMBER_STRING = createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);
        com.google.javascript.rhino.jstype.JSType OBJECT_NUMBER_STRING_BOOLEAN = createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);
        com.google.javascript.rhino.jstype.JSType NUMBER_STRING_BOOLEAN = createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);
        com.google.javascript.rhino.jstype.JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING, NUMBER_STRING);
        com.google.javascript.rhino.jstype.JSType STRING_VALUE_OR_OBJECT_TYPE = createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.JSType NUMBER_VALUE_OR_OBJECT_TYPE = createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType U2U_FUNCTION_TYPE = createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.FunctionType U2U_CONSTRUCTOR_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Function", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {
            private static final long serialVersionUID = 1L;

            @java.lang.Override
            public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
                return registry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE);
            }
        };
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);
        FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);
        U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType LEAST_FUNCTION_TYPE = createFunctionType(NO_TYPE, true, ALL_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.FunctionType GLOBAL_THIS_CTOR = new com.google.javascript.rhino.jstype.FunctionType(this, "global this", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);
        com.google.javascript.rhino.jstype.FunctionType GREATEST_FUNCTION_TYPE = createFunctionType(ALL_TYPE, true, NO_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);
        registerPropertyOnType("prototype", OBJECT_FUNCTION_TYPE);
    }

    private void initializeRegistry() {
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE), "Null");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), "Undefined");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), "void");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE), "Function");
    }

    private void register(com.google.javascript.rhino.jstype.JSType type) {
        register(type, type.toString());
    }

    private void register(com.google.javascript.rhino.jstype.JSType type, java.lang.String name) {
        namesToTypes.put(name, type);
        while (name.indexOf('.') > 0) {
            name = name.substring(0, name.lastIndexOf('.'));
            namespaces.add(name);
        } 
    }

    private void registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId, com.google.javascript.rhino.jstype.JSType type) {
        nativeTypes[typeId.ordinal()] = type;
    }

    public void registerPropertyOnType(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);
        if (typeSet == null) {
            typeSet = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this, com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE);
            typesIndexedByProperty.put(propertyName, typeSet);
        }
        typeSet.addAlternate(type);
        addReferenceTypeIndexedByProperty(propertyName, type);
        greatestSubtypeByProperty.remove(propertyName);
    }

    private void addReferenceTypeIndexedByProperty(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        if ((type instanceof com.google.javascript.rhino.jstype.ObjectType) && ((com.google.javascript.rhino.jstype.ObjectType) (type)).hasReferenceName()) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> typeSet = eachRefTypeIndexedByProperty.get(propertyName);
            if (typeSet == null) {
                typeSet = com.google.common.collect.Maps.newHashMap();
                eachRefTypeIndexedByProperty.put(propertyName, typeSet);
            }
            com.google.javascript.rhino.jstype.ObjectType objType = ((com.google.javascript.rhino.jstype.ObjectType) (type));
            typeSet.put(objType.getReferenceName(), objType);
        } else if (type instanceof com.google.javascript.rhino.jstype.NamedType) {
            addReferenceTypeIndexedByProperty(propertyName, ((com.google.javascript.rhino.jstype.NamedType) (type)).getReferencedType());
        } else if (type.isUnionType()) {
            for (com.google.javascript.rhino.jstype.JSType alternate : type.toMaybeUnionType().getAlternates()) {
                addReferenceTypeIndexedByProperty(propertyName, alternate);
            }
        }
    }

    public void unregisterPropertyOnType(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> typeSet = eachRefTypeIndexedByProperty.get(propertyName);
        if (typeSet != null) {
            typeSet.remove(type.toObjectType().getReferenceName());
        }
    }

    public com.google.javascript.rhino.jstype.JSType getGreatestSubtypeWithProperty(com.google.javascript.rhino.jstype.JSType type, java.lang.String propertyName) {
        if (greatestSubtypeByProperty.containsKey(propertyName)) {
            return greatestSubtypeByProperty.get(propertyName).getGreatestSubtype(type);
        }
        if (typesIndexedByProperty.containsKey(propertyName)) {
            com.google.javascript.rhino.jstype.JSType built = typesIndexedByProperty.get(propertyName).build();
            greatestSubtypeByProperty.put(propertyName, built);
            return built.getGreatestSubtype(type);
        }
        return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
    }

    public boolean canPropertyBeDefined(com.google.javascript.rhino.jstype.JSType type, java.lang.String propertyName) {
        if (typesIndexedByProperty.containsKey(propertyName)) {
            for (com.google.javascript.rhino.jstype.JSType alt : typesIndexedByProperty.get(propertyName).getAlternates()) {
                if (!alt.getGreatestSubtype(type).isEmptyType()) {
                    return true;
                }
            }
        }
        return false;
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getTypesWithProperty(java.lang.String propertyName) {
        if (typesIndexedByProperty.containsKey(propertyName)) {
            return typesIndexedByProperty.get(propertyName).getAlternates();
        } else {
            return com.google.common.collect.ImmutableList.of();
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getEachReferenceTypeWithProperty(java.lang.String propertyName) {
        if (eachRefTypeIndexedByProperty.containsKey(propertyName)) {
            return eachRefTypeIndexedByProperty.get(propertyName).values();
        } else {
            return com.google.common.collect.ImmutableList.of();
        }
    }

    com.google.javascript.rhino.jstype.ObjectType findCommonSuperObject(com.google.javascript.rhino.jstype.ObjectType a, com.google.javascript.rhino.jstype.ObjectType b) {
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stackA = com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(a);
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stackB = com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(b);
        com.google.javascript.rhino.jstype.ObjectType result = getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE);
        while ((!stackA.isEmpty()) && (!stackB.isEmpty())) {
            com.google.javascript.rhino.jstype.ObjectType currentA = stackA.remove(stackA.size() - 1);
            com.google.javascript.rhino.jstype.ObjectType currentB = stackB.remove(stackB.size() - 1);
            if (currentA.isEquivalentTo(currentB)) {
                result = currentA;
            } else {
                return result;
            }
        } 
        return result;
    }

    private static java.util.List<com.google.javascript.rhino.jstype.ObjectType> getSuperStack(com.google.javascript.rhino.jstype.ObjectType a) {
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stack = com.google.common.collect.Lists.newArrayListWithExpectedSize(5);
        for (com.google.javascript.rhino.jstype.ObjectType current = a; current != null; current = current.getImplicitPrototype()) {
            stack.add(current);
        }
        return stack;
    }

    public void incrementGeneration() {
        for (com.google.javascript.rhino.jstype.NamedType type : resolvedNamedTypes.values()) {
            type.clearResolved();
        }
        unresolvedNamedTypes.putAll(resolvedNamedTypes);
        resolvedNamedTypes.clear();
    }

    boolean isLastGeneration() {
        return lastGeneration;
    }

    public void setLastGeneration(boolean lastGeneration) {
        this.lastGeneration = lastGeneration;
    }

    void registerTypeImplementingInterface(com.google.javascript.rhino.jstype.FunctionType type, com.google.javascript.rhino.jstype.ObjectType interfaceInstance) {
        interfaceToImplementors.put(interfaceInstance.getReferenceName(), type);
    }

    public java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> getDirectImplementors(com.google.javascript.rhino.jstype.ObjectType interfaceInstance) {
        return interfaceToImplementors.get(interfaceInstance.getReferenceName());
    }

    public boolean declareType(java.lang.String name, com.google.javascript.rhino.jstype.JSType t) {
        if (namesToTypes.containsKey(name)) {
            return false;
        }
        register(t, name);
        return true;
    }

    public void overwriteDeclaredType(java.lang.String name, com.google.javascript.rhino.jstype.JSType t) {
        com.google.common.base.Preconditions.checkState(namesToTypes.containsKey(name));
        register(t, name);
    }

    public void forwardDeclareType(java.lang.String name) {
        forwardDeclaredTypes.add(name);
    }

    public boolean isForwardDeclaredType(java.lang.String name) {
        return forwardDeclaredTypes.contains(name);
    }

    public boolean hasNamespace(java.lang.String name) {
        return namespaces.contains(name);
    }

    public com.google.javascript.rhino.jstype.JSType getType(java.lang.String jsTypeName) {
        if (jsTypeName.equals(templateTypeName)) {
            return templateType;
        }
        return namesToTypes.get(jsTypeName);
    }

    public com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return nativeTypes[typeId.ordinal()];
    }

    public com.google.javascript.rhino.jstype.ObjectType getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return ((com.google.javascript.rhino.jstype.ObjectType) (getNativeType(typeId)));
    }

    public com.google.javascript.rhino.jstype.FunctionType getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return ((com.google.javascript.rhino.jstype.FunctionType) (getNativeType(typeId)));
    }

    public com.google.javascript.rhino.jstype.JSType getType(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope, java.lang.String jsTypeName, java.lang.String sourceName, int lineno, int charno) {
        com.google.javascript.rhino.jstype.JSType type = getType(jsTypeName);
        if (type == null) {
            com.google.javascript.rhino.jstype.NamedType namedType = new com.google.javascript.rhino.jstype.NamedType(this, jsTypeName, sourceName, lineno, charno);
            unresolvedNamedTypes.put(scope, namedType);
            type = namedType;
        }
        return type;
    }

    public void clearNamedTypes() {
        resolvedNamedTypes.clear();
        unresolvedNamedTypes.clear();
    }

    public void resolveTypesInScope(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        for (com.google.javascript.rhino.jstype.NamedType type : unresolvedNamedTypes.get(scope)) {
            type.resolve(reporter, scope);
        }
        resolvedNamedTypes.putAll(scope, unresolvedNamedTypes.removeAll(scope));
        if ((scope != null) && (scope.getParentScope() == null)) {
            com.google.javascript.rhino.jstype.PrototypeObjectType globalThis = ((com.google.javascript.rhino.jstype.PrototypeObjectType) (getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS)));
            com.google.javascript.rhino.jstype.JSType windowType = getType("Window");
            if (globalThis.isUnknownType()) {
                com.google.javascript.rhino.jstype.ObjectType windowObjType = com.google.javascript.rhino.jstype.ObjectType.cast(windowType);
                if (windowObjType != null) {
                    globalThis.setImplicitPrototype(windowObjType);
                } else {
                    globalThis.setImplicitPrototype(getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
                }
            }
        }
    }

    public com.google.javascript.rhino.jstype.JSType createOptionalType(com.google.javascript.rhino.jstype.JSType type) {
        if ((type instanceof com.google.javascript.rhino.jstype.UnknownType) || type.isAllType()) {
            return type;
        } else {
            return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        }
    }

    public com.google.javascript.rhino.jstype.JSType createDefaultObjectUnion(com.google.javascript.rhino.jstype.JSType type) {
        return shouldTolerateUndefinedValues() ? createOptionalNullableType(type) : createNullableType(type);
    }

    public com.google.javascript.rhino.jstype.JSType createNullableType(com.google.javascript.rhino.jstype.JSType type) {
        return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType createOptionalNullableType(com.google.javascript.rhino.jstype.JSType type) {
        return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType createUnionType(com.google.javascript.rhino.jstype.JSType... variants) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
        for (com.google.javascript.rhino.jstype.JSType type : variants) {
            builder.addAlternate(type);
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.JSType createUnionType(com.google.javascript.rhino.jstype.JSTypeNative... variants) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
        for (com.google.javascript.rhino.jstype.JSTypeNative typeId : variants) {
            builder.addAlternate(getNativeType(typeId));
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.EnumType createEnumType(java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.jstype.JSType elementsType) {
        return new com.google.javascript.rhino.jstype.EnumType(this, name, source, elementsType);
    }

    com.google.javascript.rhino.jstype.ArrowType createArrowType(com.google.javascript.rhino.Node parametersNode, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.ArrowType(this, parametersNode, returnType);
    }

    com.google.javascript.rhino.jstype.ArrowType createArrowType(com.google.javascript.rhino.Node parametersNode) {
        return new com.google.javascript.rhino.jstype.ArrowType(this, parametersNode, null);
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createFunctionType(returnType, createParameters(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createFunctionType(returnType, createParametersWithVarArgs(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createFunctionType(returnType, createParameters(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createFunctionType(returnType, createParametersWithVarArgs(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createConstructorType(null, null, createParameters(parameterTypes), returnType);
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createConstructorType(null, null, createParametersWithVarArgs(parameterTypes), returnType);
    }

    public com.google.javascript.rhino.jstype.JSType createFunctionType(com.google.javascript.rhino.jstype.ObjectType instanceType, com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(createParameters(parameterTypes)).withReturnType(returnType).withTypeOfThis(instanceType).build();
    }

    public com.google.javascript.rhino.jstype.JSType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.ObjectType instanceType, com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(createParametersWithVarArgs(parameterTypes)).withReturnType(returnType).withTypeOfThis(instanceType).build();
    }

    public com.google.javascript.rhino.Node createParameters(java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createParameters(parameterTypes.toArray(new com.google.javascript.rhino.jstype.JSType[parameterTypes.size()]));
    }

    public com.google.javascript.rhino.Node createParametersWithVarArgs(java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createParametersWithVarArgs(parameterTypes.toArray(new com.google.javascript.rhino.jstype.JSType[parameterTypes.size()]));
    }

    public com.google.javascript.rhino.Node createParameters(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createParameters(false, parameterTypes);
    }

    public com.google.javascript.rhino.Node createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createParameters(true, parameterTypes);
    }

    public com.google.javascript.rhino.Node createOptionalParameters(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
        builder.addOptionalParams(parameterTypes);
        return builder.build();
    }

    private com.google.javascript.rhino.Node createParameters(boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
        int max = parameterTypes.length - 1;
        for (int i = 0; i <= max; i++) {
            if (lastVarArgs && (i == max)) {
                builder.addVarArgs(parameterTypes[i]);
            } else {
                builder.addRequiredParams(parameterTypes[i]);
            }
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        if (lastVarArgs) {
            return createFunctionTypeWithVarArgs(returnType, parameterTypes);
        } else {
            return createFunctionType(returnType, parameterTypes);
        }
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithNewReturnType(com.google.javascript.rhino.jstype.FunctionType existingFunctionType, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).copyFromOtherFunction(existingFunctionType).withReturnType(returnType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithNewThisType(com.google.javascript.rhino.jstype.FunctionType existingFunctionType, com.google.javascript.rhino.jstype.ObjectType thisType) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).copyFromOtherFunction(existingFunctionType).withTypeOfThis(thisType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.Node parameters) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(parameters).withReturnType(returnType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(com.google.javascript.rhino.jstype.JSType returnType, boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        if (lastVarArgs) {
            return createConstructorTypeWithVarArgs(returnType, parameterTypes);
        } else {
            return createConstructorType(returnType, parameterTypes);
        }
    }

    public com.google.javascript.rhino.jstype.ObjectType createObjectType(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        return createObjectType(null, null, implicitPrototype);
    }

    public com.google.javascript.rhino.jstype.RecordType createRecordType(java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty> properties) {
        return new com.google.javascript.rhino.jstype.RecordType(this, properties);
    }

    public com.google.javascript.rhino.jstype.ObjectType createObjectType(java.lang.String name, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        return new com.google.javascript.rhino.jstype.PrototypeObjectType(this, name, implicitPrototype);
    }

    public com.google.javascript.rhino.jstype.ObjectType createAnonymousObjectType() {
        com.google.javascript.rhino.jstype.PrototypeObjectType type = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null);
        type.setPrettyPrint(true);
        return type;
    }

    public boolean resetImplicitPrototype(com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.jstype.ObjectType newImplicitProto) {
        if (type instanceof com.google.javascript.rhino.jstype.PrototypeObjectType) {
            com.google.javascript.rhino.jstype.PrototypeObjectType poType = ((com.google.javascript.rhino.jstype.PrototypeObjectType) (type));
            poType.clearCachedValues();
            poType.setImplicitPrototype(newImplicitProto);
            return true;
        }
        return false;
    }

    com.google.javascript.rhino.jstype.ObjectType createNativeAnonymousObjectType() {
        com.google.javascript.rhino.jstype.PrototypeObjectType type = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null, true);
        type.setPrettyPrint(true);
        return type;
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node parameters, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.FunctionType(this, name, source, createArrowType(parameters, returnType), null, null, true, false);
    }

    public com.google.javascript.rhino.jstype.FunctionType createInterfaceType(java.lang.String name, com.google.javascript.rhino.Node source) {
        return com.google.javascript.rhino.jstype.FunctionType.forInterface(this, name, source);
    }

    public com.google.javascript.rhino.jstype.ParameterizedType createParameterizedType(com.google.javascript.rhino.jstype.ObjectType objectType, com.google.javascript.rhino.jstype.JSType parameterType) {
        return new com.google.javascript.rhino.jstype.ParameterizedType(this, objectType, parameterType);
    }

    @com.google.common.annotations.VisibleForTesting
    public com.google.javascript.rhino.jstype.JSType createNamedType(java.lang.String reference, java.lang.String sourceName, int lineno, int charno) {
        return new com.google.javascript.rhino.jstype.NamedType(this, reference, sourceName, lineno, charno);
    }

    public void identifyNonNullableName(java.lang.String name) {
        com.google.common.base.Preconditions.checkNotNull(name);
        nonNullableTypeNames.add(name);
    }

    public com.google.javascript.rhino.jstype.JSType createFromTypeNodes(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        if (resolveMode == com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS) {
            boolean hasNames = hasTypeName(n);
            if (hasNames) {
                return new com.google.javascript.rhino.jstype.UnresolvedTypeExpression(this, n, sourceName);
            }
        }
        return createFromTypeNodesInternal(n, sourceName, scope);
    }

    private boolean hasTypeName(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.STRING) {
            return true;
        }
        for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
            if (hasTypeName(child)) {
                return true;
            }
        }
        return false;
    }

    private com.google.javascript.rhino.jstype.JSType createFromTypeNodesInternal(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.LC :
                return createRecordTypeFromNodes(n.getFirstChild(), sourceName, scope);
            case com.google.javascript.rhino.Token.BANG :
                return createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope).restrictByNotNullOrUndefined();
            case com.google.javascript.rhino.Token.QMARK :
                com.google.javascript.rhino.Node firstChild = n.getFirstChild();
                if (firstChild == null) {
                    return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                }
                return createDefaultObjectUnion(createFromTypeNodesInternal(firstChild, sourceName, scope));
            case com.google.javascript.rhino.Token.EQUALS :
                return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope));
            case com.google.javascript.rhino.Token.ELLIPSIS :
                return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope));
            case com.google.javascript.rhino.Token.STAR :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
            case com.google.javascript.rhino.Token.LB :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
            case com.google.javascript.rhino.Token.PIPE :
                com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    builder.addAlternate(createFromTypeNodesInternal(child, sourceName, scope));
                }
                return builder.build();
            case com.google.javascript.rhino.Token.EMPTY :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            case com.google.javascript.rhino.Token.VOID :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            case com.google.javascript.rhino.Token.STRING :
                com.google.javascript.rhino.jstype.JSType namedType = getType(scope, n.getString(), sourceName, n.getLineno(), n.getCharno());
                if (resolveMode != com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES) {
                    namedType = namedType.resolveInternal(reporter, scope);
                }
                if ((namedType instanceof com.google.javascript.rhino.jstype.ObjectType) && (!nonNullableTypeNames.contains(n.getString()))) {
                    com.google.javascript.rhino.Node typeList = n.getFirstChild();
                    if ((typeList != null) && ("Array".equals(n.getString()) || "Object".equals(n.getString()))) {
                        com.google.javascript.rhino.jstype.JSType parameterType = createFromTypeNodesInternal(typeList.getLastChild(), sourceName, scope);
                        namedType = new com.google.javascript.rhino.jstype.ParameterizedType(this, ((com.google.javascript.rhino.jstype.ObjectType) (namedType)), parameterType);
                        if (typeList.hasMoreThanOneChild()) {
                            com.google.javascript.rhino.jstype.JSType indexType = createFromTypeNodesInternal(typeList.getFirstChild(), sourceName, scope);
                            namedType = new com.google.javascript.rhino.jstype.IndexedType(this, ((com.google.javascript.rhino.jstype.ObjectType) (namedType)), indexType);
                        }
                    }
                    return createDefaultObjectUnion(namedType);
                } else {
                    return namedType;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.javascript.rhino.jstype.ObjectType thisType = null;
                boolean isConstructor = false;
                com.google.javascript.rhino.Node current = n.getFirstChild();
                if ((current.getType() == com.google.javascript.rhino.Token.THIS) || (current.getType() == com.google.javascript.rhino.Token.NEW)) {
                    com.google.javascript.rhino.Node contextNode = current.getFirstChild();
                    thisType = com.google.javascript.rhino.jstype.ObjectType.cast(createFromTypeNodesInternal(contextNode, sourceName, scope).restrictByNotNullOrUndefined());
                    if (thisType == null) {
                        reporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0(current.getType() == com.google.javascript.rhino.Token.THIS ? "msg.jsdoc.function.thisnotobject" : "msg.jsdoc.function.newnotobject"), sourceName, contextNode.getLineno(), contextNode.getCharno());
                    }
                    isConstructor = current.getType() == com.google.javascript.rhino.Token.NEW;
                    current = current.getNext();
                }
                com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
                if (current.getType() == com.google.javascript.rhino.Token.PARAM_LIST) {
                    com.google.javascript.rhino.Node args = current.getFirstChild();
                    for (com.google.javascript.rhino.Node arg = current.getFirstChild(); arg != null; arg = arg.getNext()) {
                        if (arg.getType() == com.google.javascript.rhino.Token.ELLIPSIS) {
                            if (arg.getChildCount() == 0) {
                                paramBuilder.addVarArgs(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
                            } else {
                                paramBuilder.addVarArgs(createFromTypeNodesInternal(arg.getFirstChild(), sourceName, scope));
                            }
                        } else {
                            com.google.javascript.rhino.jstype.JSType type = createFromTypeNodesInternal(arg, sourceName, scope);
                            if (arg.getType() == com.google.javascript.rhino.Token.EQUALS) {
                                boolean addSuccess = paramBuilder.addOptionalParams(type);
                                if (!addSuccess) {
                                    reporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0("msg.jsdoc.function.varargs"), sourceName, arg.getLineno(), arg.getCharno());
                                }
                            } else {
                                paramBuilder.addRequiredParams(type);
                            }
                        }
                    }
                    current = current.getNext();
                }
                com.google.javascript.rhino.jstype.JSType returnType = createFromTypeNodesInternal(current, sourceName, scope);
                return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParams(paramBuilder).withReturnType(returnType).withTypeOfThis(thisType).setIsConstructor(isConstructor).build();
        }
        throw new java.lang.IllegalStateException("Unexpected node in type expression: " + n.toString());
    }

    private com.google.javascript.rhino.jstype.JSType createRecordTypeFromNodes(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        com.google.javascript.rhino.jstype.RecordTypeBuilder builder = new com.google.javascript.rhino.jstype.RecordTypeBuilder(this);
        for (com.google.javascript.rhino.Node fieldTypeNode = n.getFirstChild(); fieldTypeNode != null; fieldTypeNode = fieldTypeNode.getNext()) {
            com.google.javascript.rhino.Node fieldNameNode = fieldTypeNode;
            boolean hasType = false;
            if (fieldTypeNode.getType() == com.google.javascript.rhino.Token.COLON) {
                fieldNameNode = fieldTypeNode.getFirstChild();
                hasType = true;
            }
            java.lang.String fieldName = fieldNameNode.getString();
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(14).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("fieldName",fieldName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateType",com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.lastGeneration",com.google.javascript.rhino.jstype.JSTypeRegistry.this.lastGeneration);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.nativeTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.nativeTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("fieldNameNode",fieldNameNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.interfaceToImplementors",com.google.javascript.rhino.jstype.JSTypeRegistry.this.interfaceToImplementors);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.forwardDeclaredTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.forwardDeclaredTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolvedNamedTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolvedNamedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.tolerateUndefinedValues",com.google.javascript.rhino.jstype.JSTypeRegistry.this.tolerateUndefinedValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("scope",scope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("builder",builder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.typesIndexedByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.typesIndexedByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.namesToTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.namesToTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.namespaces",com.google.javascript.rhino.jstype.JSTypeRegistry.this.namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateTypeName",com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateTypeName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.reporter",com.google.javascript.rhino.jstype.JSTypeRegistry.this.reporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.eachRefTypeIndexedByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.eachRefTypeIndexedByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("\"\\"\"","\"");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.greatestSubtypeByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.greatestSubtypeByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.nonNullableTypeNames",com.google.javascript.rhino.jstype.JSTypeRegistry.this.nonNullableTypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.unresolvedNamedTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.unresolvedNamedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("sourceName",sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolveMode",com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolveMode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("\"'\"","'");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("hasType",hasType);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionEnds();
            }
            if (runtimeAngelicValue) if (fieldName.startsWith("'") || fieldName.startsWith("\"")) {
                fieldName = fieldName.substring(1, fieldName.length() - 1);
            }
            com.google.javascript.rhino.jstype.JSType fieldType = null;
            if (hasType) {
                fieldType = createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);
            } else {
                fieldType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            if (builder.addProperty(fieldName, fieldType, fieldNameNode) == null) {
                reporter.warning("Duplicate record field " + fieldName, sourceName, n.getLineno(), fieldNameNode.getCharno());
            }
        }
        return builder.build();
    }

    public void setTemplateTypeName(java.lang.String name) {
        templateTypeName = name;
        templateType = new com.google.javascript.rhino.jstype.TemplateType(this, name);
    }

    public void clearTemplateTypeName() {
        templateTypeName = null;
        templateType = null;
    }
}
[104420] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659913233182
GPR[EPVATF]-1659913234362
GPR[SPS]-1659913234362
[105909] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class JSTypeRegistry implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;

    private final transient com.google.javascript.rhino.ErrorReporter reporter;

    private final com.google.javascript.rhino.jstype.JSType[] nativeTypes;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.JSType> namesToTypes;

    private final java.util.Set<java.lang.String> namespaces = new java.util.HashSet<java.lang.String>();

    private final java.util.Set<java.lang.String> nonNullableTypeNames = new java.util.HashSet<java.lang.String>();

    private final java.util.Set<java.lang.String> forwardDeclaredTypes = new java.util.HashSet<java.lang.String>();

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.UnionTypeBuilder> typesIndexedByProperty = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>> eachRefTypeIndexedByProperty = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.JSType> greatestSubtypeByProperty = com.google.common.collect.Maps.newHashMap();

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.rhino.jstype.FunctionType> interfaceToImplementors = com.google.common.collect.LinkedHashMultimap.create();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.NamedType> unresolvedNamedTypes = com.google.common.collect.ArrayListMultimap.create();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.NamedType> resolvedNamedTypes = com.google.common.collect.ArrayListMultimap.create();

    private boolean lastGeneration = true;

    private java.lang.String templateTypeName;

    private com.google.javascript.rhino.jstype.TemplateType templateType;

    private final boolean tolerateUndefinedValues;

    public static enum ResolveMode {

        LAZY_EXPRESSIONS,
        LAZY_NAMES,
        IMMEDIATE;}

    private com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES;

    public JSTypeRegistry(com.google.javascript.rhino.ErrorReporter reporter) {
        this(reporter, false);
    }

    public JSTypeRegistry(com.google.javascript.rhino.ErrorReporter reporter, boolean tolerateUndefinedValues) {
        this.reporter = reporter;
        nativeTypes = new com.google.javascript.rhino.jstype.JSType[com.google.javascript.rhino.jstype.JSTypeNative.values().length];
        namesToTypes = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.JSType>();
        resetForTypeCheck();
        this.tolerateUndefinedValues = tolerateUndefinedValues;
    }

    public void setResolveMode(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode mode) {
        this.resolveMode = mode;
    }

    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode getResolveMode() {
        return resolveMode;
    }

    public com.google.javascript.rhino.ErrorReporter getErrorReporter() {
        return reporter;
    }

    public boolean shouldTolerateUndefinedValues() {
        return tolerateUndefinedValues;
    }

    public void resetForTypeCheck() {
        typesIndexedByProperty.clear();
        eachRefTypeIndexedByProperty.clear();
        initializeBuiltInTypes();
        namesToTypes.clear();
        namespaces.clear();
        initializeRegistry();
    }

    private void initializeBuiltInTypes() {
        com.google.javascript.rhino.jstype.BooleanType BOOLEAN_TYPE = new com.google.javascript.rhino.jstype.BooleanType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);
        com.google.javascript.rhino.jstype.NullType NULL_TYPE = new com.google.javascript.rhino.jstype.NullType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, NULL_TYPE);
        com.google.javascript.rhino.jstype.NumberType NUMBER_TYPE = new com.google.javascript.rhino.jstype.NumberType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);
        com.google.javascript.rhino.jstype.StringType STRING_TYPE = new com.google.javascript.rhino.jstype.StringType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE, STRING_TYPE);
        com.google.javascript.rhino.jstype.UnknownType UNKNOWN_TYPE = new com.google.javascript.rhino.jstype.UnknownType(this, false);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE, new com.google.javascript.rhino.jstype.UnknownType(this, true));
        com.google.javascript.rhino.jstype.VoidType VOID_TYPE = new com.google.javascript.rhino.jstype.VoidType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE, VOID_TYPE);
        com.google.javascript.rhino.jstype.AllType ALL_TYPE = new com.google.javascript.rhino.jstype.AllType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE, ALL_TYPE);
        com.google.javascript.rhino.jstype.PrototypeObjectType TOP_LEVEL_PROTOTYPE = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null, true);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Object", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);
        OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);
        com.google.javascript.rhino.jstype.ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType FUNCTION_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Function", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);
        FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);
        com.google.javascript.rhino.jstype.NoType NO_TYPE = new com.google.javascript.rhino.jstype.NoType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE, NO_TYPE);
        com.google.javascript.rhino.jstype.NoObjectType NO_OBJECT_TYPE = new com.google.javascript.rhino.jstype.NoObjectType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.NoObjectType NO_RESOLVED_TYPE = new com.google.javascript.rhino.jstype.NoResolvedType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);
        com.google.javascript.rhino.jstype.FunctionType ARRAY_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Array", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);
        ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType = ARRAY_FUNCTION_TYPE.getInstanceType();
        com.google.javascript.rhino.jstype.ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);
        com.google.javascript.rhino.jstype.FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Boolean", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType BOOLEAN_OBJECT_TYPE = BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType DATE_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Date", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_TYPE, DATE_TYPE);
        com.google.javascript.rhino.jstype.FunctionType ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "Error");
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE, ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType EVAL_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "EvalError");
        EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType RANGE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "RangeError");
        RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType REFERENCE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "ReferenceError");
        REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType REFERENCE_ERROR_TYPE = REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType SYNTAX_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "SyntaxError");
        SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType TYPE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "TypeError");
        TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType URI_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "URIError");
        URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType NUMBER_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Number", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType NUMBER_OBJECT_TYPE = NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType REGEXP_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "RegExp", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);
        REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType = REGEXP_FUNCTION_TYPE.getInstanceType();
        com.google.javascript.rhino.jstype.ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);
        com.google.javascript.rhino.jstype.FunctionType STRING_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "String", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType STRING_OBJECT_TYPE = STRING_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.JSType OBJECT_NUMBER_STRING = createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);
        com.google.javascript.rhino.jstype.JSType OBJECT_NUMBER_STRING_BOOLEAN = createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);
        com.google.javascript.rhino.jstype.JSType NUMBER_STRING_BOOLEAN = createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);
        com.google.javascript.rhino.jstype.JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING, NUMBER_STRING);
        com.google.javascript.rhino.jstype.JSType STRING_VALUE_OR_OBJECT_TYPE = createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.JSType NUMBER_VALUE_OR_OBJECT_TYPE = createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType U2U_FUNCTION_TYPE = createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.FunctionType U2U_CONSTRUCTOR_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Function", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {
            private static final long serialVersionUID = 1L;

            @java.lang.Override
            public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
                return registry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE);
            }
        };
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);
        FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);
        U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType LEAST_FUNCTION_TYPE = createFunctionType(NO_TYPE, true, ALL_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.FunctionType GLOBAL_THIS_CTOR = new com.google.javascript.rhino.jstype.FunctionType(this, "global this", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);
        com.google.javascript.rhino.jstype.FunctionType GREATEST_FUNCTION_TYPE = createFunctionType(ALL_TYPE, true, NO_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);
        registerPropertyOnType("prototype", OBJECT_FUNCTION_TYPE);
    }

    private void initializeRegistry() {
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE), "Null");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), "Undefined");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), "void");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE), "Function");
    }

    private void register(com.google.javascript.rhino.jstype.JSType type) {
        register(type, type.toString());
    }

    private void register(com.google.javascript.rhino.jstype.JSType type, java.lang.String name) {
        namesToTypes.put(name, type);
        while (name.indexOf('.') > 0) {
            name = name.substring(0, name.lastIndexOf('.'));
            namespaces.add(name);
        } 
    }

    private void registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId, com.google.javascript.rhino.jstype.JSType type) {
        nativeTypes[typeId.ordinal()] = type;
    }

    public void registerPropertyOnType(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);
        if (typeSet == null) {
            typeSet = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this, com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE);
            typesIndexedByProperty.put(propertyName, typeSet);
        }
        typeSet.addAlternate(type);
        addReferenceTypeIndexedByProperty(propertyName, type);
        greatestSubtypeByProperty.remove(propertyName);
    }

    private void addReferenceTypeIndexedByProperty(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        if ((type instanceof com.google.javascript.rhino.jstype.ObjectType) && ((com.google.javascript.rhino.jstype.ObjectType) (type)).hasReferenceName()) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> typeSet = eachRefTypeIndexedByProperty.get(propertyName);
            if (typeSet == null) {
                typeSet = com.google.common.collect.Maps.newHashMap();
                eachRefTypeIndexedByProperty.put(propertyName, typeSet);
            }
            com.google.javascript.rhino.jstype.ObjectType objType = ((com.google.javascript.rhino.jstype.ObjectType) (type));
            typeSet.put(objType.getReferenceName(), objType);
        } else if (type instanceof com.google.javascript.rhino.jstype.NamedType) {
            addReferenceTypeIndexedByProperty(propertyName, ((com.google.javascript.rhino.jstype.NamedType) (type)).getReferencedType());
        } else if (type.isUnionType()) {
            for (com.google.javascript.rhino.jstype.JSType alternate : type.toMaybeUnionType().getAlternates()) {
                addReferenceTypeIndexedByProperty(propertyName, alternate);
            }
        }
    }

    public void unregisterPropertyOnType(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> typeSet = eachRefTypeIndexedByProperty.get(propertyName);
        if (typeSet != null) {
            typeSet.remove(type.toObjectType().getReferenceName());
        }
    }

    public com.google.javascript.rhino.jstype.JSType getGreatestSubtypeWithProperty(com.google.javascript.rhino.jstype.JSType type, java.lang.String propertyName) {
        if (greatestSubtypeByProperty.containsKey(propertyName)) {
            return greatestSubtypeByProperty.get(propertyName).getGreatestSubtype(type);
        }
        if (typesIndexedByProperty.containsKey(propertyName)) {
            com.google.javascript.rhino.jstype.JSType built = typesIndexedByProperty.get(propertyName).build();
            greatestSubtypeByProperty.put(propertyName, built);
            return built.getGreatestSubtype(type);
        }
        return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
    }

    public boolean canPropertyBeDefined(com.google.javascript.rhino.jstype.JSType type, java.lang.String propertyName) {
        if (typesIndexedByProperty.containsKey(propertyName)) {
            for (com.google.javascript.rhino.jstype.JSType alt : typesIndexedByProperty.get(propertyName).getAlternates()) {
                if (!alt.getGreatestSubtype(type).isEmptyType()) {
                    return true;
                }
            }
        }
        return false;
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getTypesWithProperty(java.lang.String propertyName) {
        if (typesIndexedByProperty.containsKey(propertyName)) {
            return typesIndexedByProperty.get(propertyName).getAlternates();
        } else {
            return com.google.common.collect.ImmutableList.of();
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getEachReferenceTypeWithProperty(java.lang.String propertyName) {
        if (eachRefTypeIndexedByProperty.containsKey(propertyName)) {
            return eachRefTypeIndexedByProperty.get(propertyName).values();
        } else {
            return com.google.common.collect.ImmutableList.of();
        }
    }

    com.google.javascript.rhino.jstype.ObjectType findCommonSuperObject(com.google.javascript.rhino.jstype.ObjectType a, com.google.javascript.rhino.jstype.ObjectType b) {
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stackA = com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(a);
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stackB = com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(b);
        com.google.javascript.rhino.jstype.ObjectType result = getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE);
        while ((!stackA.isEmpty()) && (!stackB.isEmpty())) {
            com.google.javascript.rhino.jstype.ObjectType currentA = stackA.remove(stackA.size() - 1);
            com.google.javascript.rhino.jstype.ObjectType currentB = stackB.remove(stackB.size() - 1);
            if (currentA.isEquivalentTo(currentB)) {
                result = currentA;
            } else {
                return result;
            }
        } 
        return result;
    }

    private static java.util.List<com.google.javascript.rhino.jstype.ObjectType> getSuperStack(com.google.javascript.rhino.jstype.ObjectType a) {
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stack = com.google.common.collect.Lists.newArrayListWithExpectedSize(5);
        for (com.google.javascript.rhino.jstype.ObjectType current = a; current != null; current = current.getImplicitPrototype()) {
            stack.add(current);
        }
        return stack;
    }

    public void incrementGeneration() {
        for (com.google.javascript.rhino.jstype.NamedType type : resolvedNamedTypes.values()) {
            type.clearResolved();
        }
        unresolvedNamedTypes.putAll(resolvedNamedTypes);
        resolvedNamedTypes.clear();
    }

    boolean isLastGeneration() {
        return lastGeneration;
    }

    public void setLastGeneration(boolean lastGeneration) {
        this.lastGeneration = lastGeneration;
    }

    void registerTypeImplementingInterface(com.google.javascript.rhino.jstype.FunctionType type, com.google.javascript.rhino.jstype.ObjectType interfaceInstance) {
        interfaceToImplementors.put(interfaceInstance.getReferenceName(), type);
    }

    public java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> getDirectImplementors(com.google.javascript.rhino.jstype.ObjectType interfaceInstance) {
        return interfaceToImplementors.get(interfaceInstance.getReferenceName());
    }

    public boolean declareType(java.lang.String name, com.google.javascript.rhino.jstype.JSType t) {
        if (namesToTypes.containsKey(name)) {
            return false;
        }
        register(t, name);
        return true;
    }

    public void overwriteDeclaredType(java.lang.String name, com.google.javascript.rhino.jstype.JSType t) {
        com.google.common.base.Preconditions.checkState(namesToTypes.containsKey(name));
        register(t, name);
    }

    public void forwardDeclareType(java.lang.String name) {
        forwardDeclaredTypes.add(name);
    }

    public boolean isForwardDeclaredType(java.lang.String name) {
        return forwardDeclaredTypes.contains(name);
    }

    public boolean hasNamespace(java.lang.String name) {
        return namespaces.contains(name);
    }

    public com.google.javascript.rhino.jstype.JSType getType(java.lang.String jsTypeName) {
        if (jsTypeName.equals(templateTypeName)) {
            return templateType;
        }
        return namesToTypes.get(jsTypeName);
    }

    public com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return nativeTypes[typeId.ordinal()];
    }

    public com.google.javascript.rhino.jstype.ObjectType getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return ((com.google.javascript.rhino.jstype.ObjectType) (getNativeType(typeId)));
    }

    public com.google.javascript.rhino.jstype.FunctionType getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return ((com.google.javascript.rhino.jstype.FunctionType) (getNativeType(typeId)));
    }

    public com.google.javascript.rhino.jstype.JSType getType(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope, java.lang.String jsTypeName, java.lang.String sourceName, int lineno, int charno) {
        com.google.javascript.rhino.jstype.JSType type = getType(jsTypeName);
        if (type == null) {
            com.google.javascript.rhino.jstype.NamedType namedType = new com.google.javascript.rhino.jstype.NamedType(this, jsTypeName, sourceName, lineno, charno);
            unresolvedNamedTypes.put(scope, namedType);
            type = namedType;
        }
        return type;
    }

    public void clearNamedTypes() {
        resolvedNamedTypes.clear();
        unresolvedNamedTypes.clear();
    }

    public void resolveTypesInScope(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        for (com.google.javascript.rhino.jstype.NamedType type : unresolvedNamedTypes.get(scope)) {
            type.resolve(reporter, scope);
        }
        resolvedNamedTypes.putAll(scope, unresolvedNamedTypes.removeAll(scope));
        if ((scope != null) && (scope.getParentScope() == null)) {
            com.google.javascript.rhino.jstype.PrototypeObjectType globalThis = ((com.google.javascript.rhino.jstype.PrototypeObjectType) (getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS)));
            com.google.javascript.rhino.jstype.JSType windowType = getType("Window");
            if (globalThis.isUnknownType()) {
                com.google.javascript.rhino.jstype.ObjectType windowObjType = com.google.javascript.rhino.jstype.ObjectType.cast(windowType);
                if (windowObjType != null) {
                    globalThis.setImplicitPrototype(windowObjType);
                } else {
                    globalThis.setImplicitPrototype(getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
                }
            }
        }
    }

    public com.google.javascript.rhino.jstype.JSType createOptionalType(com.google.javascript.rhino.jstype.JSType type) {
        if ((type instanceof com.google.javascript.rhino.jstype.UnknownType) || type.isAllType()) {
            return type;
        } else {
            return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        }
    }

    public com.google.javascript.rhino.jstype.JSType createDefaultObjectUnion(com.google.javascript.rhino.jstype.JSType type) {
        return shouldTolerateUndefinedValues() ? createOptionalNullableType(type) : createNullableType(type);
    }

    public com.google.javascript.rhino.jstype.JSType createNullableType(com.google.javascript.rhino.jstype.JSType type) {
        return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType createOptionalNullableType(com.google.javascript.rhino.jstype.JSType type) {
        return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType createUnionType(com.google.javascript.rhino.jstype.JSType... variants) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
        for (com.google.javascript.rhino.jstype.JSType type : variants) {
            builder.addAlternate(type);
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.JSType createUnionType(com.google.javascript.rhino.jstype.JSTypeNative... variants) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
        for (com.google.javascript.rhino.jstype.JSTypeNative typeId : variants) {
            builder.addAlternate(getNativeType(typeId));
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.EnumType createEnumType(java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.jstype.JSType elementsType) {
        return new com.google.javascript.rhino.jstype.EnumType(this, name, source, elementsType);
    }

    com.google.javascript.rhino.jstype.ArrowType createArrowType(com.google.javascript.rhino.Node parametersNode, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.ArrowType(this, parametersNode, returnType);
    }

    com.google.javascript.rhino.jstype.ArrowType createArrowType(com.google.javascript.rhino.Node parametersNode) {
        return new com.google.javascript.rhino.jstype.ArrowType(this, parametersNode, null);
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createFunctionType(returnType, createParameters(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createFunctionType(returnType, createParametersWithVarArgs(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createFunctionType(returnType, createParameters(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createFunctionType(returnType, createParametersWithVarArgs(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createConstructorType(null, null, createParameters(parameterTypes), returnType);
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createConstructorType(null, null, createParametersWithVarArgs(parameterTypes), returnType);
    }

    public com.google.javascript.rhino.jstype.JSType createFunctionType(com.google.javascript.rhino.jstype.ObjectType instanceType, com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(createParameters(parameterTypes)).withReturnType(returnType).withTypeOfThis(instanceType).build();
    }

    public com.google.javascript.rhino.jstype.JSType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.ObjectType instanceType, com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(createParametersWithVarArgs(parameterTypes)).withReturnType(returnType).withTypeOfThis(instanceType).build();
    }

    public com.google.javascript.rhino.Node createParameters(java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createParameters(parameterTypes.toArray(new com.google.javascript.rhino.jstype.JSType[parameterTypes.size()]));
    }

    public com.google.javascript.rhino.Node createParametersWithVarArgs(java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createParametersWithVarArgs(parameterTypes.toArray(new com.google.javascript.rhino.jstype.JSType[parameterTypes.size()]));
    }

    public com.google.javascript.rhino.Node createParameters(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createParameters(false, parameterTypes);
    }

    public com.google.javascript.rhino.Node createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createParameters(true, parameterTypes);
    }

    public com.google.javascript.rhino.Node createOptionalParameters(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
        builder.addOptionalParams(parameterTypes);
        return builder.build();
    }

    private com.google.javascript.rhino.Node createParameters(boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
        int max = parameterTypes.length - 1;
        for (int i = 0; i <= max; i++) {
            if (lastVarArgs && (i == max)) {
                builder.addVarArgs(parameterTypes[i]);
            } else {
                builder.addRequiredParams(parameterTypes[i]);
            }
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        if (lastVarArgs) {
            return createFunctionTypeWithVarArgs(returnType, parameterTypes);
        } else {
            return createFunctionType(returnType, parameterTypes);
        }
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithNewReturnType(com.google.javascript.rhino.jstype.FunctionType existingFunctionType, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).copyFromOtherFunction(existingFunctionType).withReturnType(returnType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithNewThisType(com.google.javascript.rhino.jstype.FunctionType existingFunctionType, com.google.javascript.rhino.jstype.ObjectType thisType) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).copyFromOtherFunction(existingFunctionType).withTypeOfThis(thisType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.Node parameters) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(parameters).withReturnType(returnType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(com.google.javascript.rhino.jstype.JSType returnType, boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        if (lastVarArgs) {
            return createConstructorTypeWithVarArgs(returnType, parameterTypes);
        } else {
            return createConstructorType(returnType, parameterTypes);
        }
    }

    public com.google.javascript.rhino.jstype.ObjectType createObjectType(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        return createObjectType(null, null, implicitPrototype);
    }

    public com.google.javascript.rhino.jstype.RecordType createRecordType(java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty> properties) {
        return new com.google.javascript.rhino.jstype.RecordType(this, properties);
    }

    public com.google.javascript.rhino.jstype.ObjectType createObjectType(java.lang.String name, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        return new com.google.javascript.rhino.jstype.PrototypeObjectType(this, name, implicitPrototype);
    }

    public com.google.javascript.rhino.jstype.ObjectType createAnonymousObjectType() {
        com.google.javascript.rhino.jstype.PrototypeObjectType type = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null);
        type.setPrettyPrint(true);
        return type;
    }

    public boolean resetImplicitPrototype(com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.jstype.ObjectType newImplicitProto) {
        if (type instanceof com.google.javascript.rhino.jstype.PrototypeObjectType) {
            com.google.javascript.rhino.jstype.PrototypeObjectType poType = ((com.google.javascript.rhino.jstype.PrototypeObjectType) (type));
            poType.clearCachedValues();
            poType.setImplicitPrototype(newImplicitProto);
            return true;
        }
        return false;
    }

    com.google.javascript.rhino.jstype.ObjectType createNativeAnonymousObjectType() {
        com.google.javascript.rhino.jstype.PrototypeObjectType type = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null, true);
        type.setPrettyPrint(true);
        return type;
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node parameters, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.FunctionType(this, name, source, createArrowType(parameters, returnType), null, null, true, false);
    }

    public com.google.javascript.rhino.jstype.FunctionType createInterfaceType(java.lang.String name, com.google.javascript.rhino.Node source) {
        return com.google.javascript.rhino.jstype.FunctionType.forInterface(this, name, source);
    }

    public com.google.javascript.rhino.jstype.ParameterizedType createParameterizedType(com.google.javascript.rhino.jstype.ObjectType objectType, com.google.javascript.rhino.jstype.JSType parameterType) {
        return new com.google.javascript.rhino.jstype.ParameterizedType(this, objectType, parameterType);
    }

    @com.google.common.annotations.VisibleForTesting
    public com.google.javascript.rhino.jstype.JSType createNamedType(java.lang.String reference, java.lang.String sourceName, int lineno, int charno) {
        return new com.google.javascript.rhino.jstype.NamedType(this, reference, sourceName, lineno, charno);
    }

    public void identifyNonNullableName(java.lang.String name) {
        com.google.common.base.Preconditions.checkNotNull(name);
        nonNullableTypeNames.add(name);
    }

    public com.google.javascript.rhino.jstype.JSType createFromTypeNodes(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        if (resolveMode == com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS) {
            boolean hasNames = hasTypeName(n);
            if (hasNames) {
                return new com.google.javascript.rhino.jstype.UnresolvedTypeExpression(this, n, sourceName);
            }
        }
        return createFromTypeNodesInternal(n, sourceName, scope);
    }

    private boolean hasTypeName(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.STRING) {
            return true;
        }
        for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
            if (hasTypeName(child)) {
                return true;
            }
        }
        return false;
    }

    private com.google.javascript.rhino.jstype.JSType createFromTypeNodesInternal(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.LC :
                return createRecordTypeFromNodes(n.getFirstChild(), sourceName, scope);
            case com.google.javascript.rhino.Token.BANG :
                return createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope).restrictByNotNullOrUndefined();
            case com.google.javascript.rhino.Token.QMARK :
                com.google.javascript.rhino.Node firstChild = n.getFirstChild();
                if (firstChild == null) {
                    return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                }
                return createDefaultObjectUnion(createFromTypeNodesInternal(firstChild, sourceName, scope));
            case com.google.javascript.rhino.Token.EQUALS :
                return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope));
            case com.google.javascript.rhino.Token.ELLIPSIS :
                return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope));
            case com.google.javascript.rhino.Token.STAR :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
            case com.google.javascript.rhino.Token.LB :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
            case com.google.javascript.rhino.Token.PIPE :
                com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    builder.addAlternate(createFromTypeNodesInternal(child, sourceName, scope));
                }
                return builder.build();
            case com.google.javascript.rhino.Token.EMPTY :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            case com.google.javascript.rhino.Token.VOID :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            case com.google.javascript.rhino.Token.STRING :
                com.google.javascript.rhino.jstype.JSType namedType = getType(scope, n.getString(), sourceName, n.getLineno(), n.getCharno());
                if (resolveMode != com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES) {
                    namedType = namedType.resolveInternal(reporter, scope);
                }
                if ((namedType instanceof com.google.javascript.rhino.jstype.ObjectType) && (!nonNullableTypeNames.contains(n.getString()))) {
                    com.google.javascript.rhino.Node typeList = n.getFirstChild();
                    if ((typeList != null) && ("Array".equals(n.getString()) || "Object".equals(n.getString()))) {
                        com.google.javascript.rhino.jstype.JSType parameterType = createFromTypeNodesInternal(typeList.getLastChild(), sourceName, scope);
                        namedType = new com.google.javascript.rhino.jstype.ParameterizedType(this, ((com.google.javascript.rhino.jstype.ObjectType) (namedType)), parameterType);
                        if (typeList.hasMoreThanOneChild()) {
                            com.google.javascript.rhino.jstype.JSType indexType = createFromTypeNodesInternal(typeList.getFirstChild(), sourceName, scope);
                            namedType = new com.google.javascript.rhino.jstype.IndexedType(this, ((com.google.javascript.rhino.jstype.ObjectType) (namedType)), indexType);
                        }
                    }
                    return createDefaultObjectUnion(namedType);
                } else {
                    return namedType;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.javascript.rhino.jstype.ObjectType thisType = null;
                boolean isConstructor = false;
                com.google.javascript.rhino.Node current = n.getFirstChild();
                if ((current.getType() == com.google.javascript.rhino.Token.THIS) || (current.getType() == com.google.javascript.rhino.Token.NEW)) {
                    com.google.javascript.rhino.Node contextNode = current.getFirstChild();
                    thisType = com.google.javascript.rhino.jstype.ObjectType.cast(createFromTypeNodesInternal(contextNode, sourceName, scope).restrictByNotNullOrUndefined());
                    if (thisType == null) {
                        reporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0(current.getType() == com.google.javascript.rhino.Token.THIS ? "msg.jsdoc.function.thisnotobject" : "msg.jsdoc.function.newnotobject"), sourceName, contextNode.getLineno(), contextNode.getCharno());
                    }
                    isConstructor = current.getType() == com.google.javascript.rhino.Token.NEW;
                    current = current.getNext();
                }
                com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
                if (current.getType() == com.google.javascript.rhino.Token.PARAM_LIST) {
                    com.google.javascript.rhino.Node args = current.getFirstChild();
                    for (com.google.javascript.rhino.Node arg = current.getFirstChild(); arg != null; arg = arg.getNext()) {
                        if (arg.getType() == com.google.javascript.rhino.Token.ELLIPSIS) {
                            if (arg.getChildCount() == 0) {
                                paramBuilder.addVarArgs(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
                            } else {
                                paramBuilder.addVarArgs(createFromTypeNodesInternal(arg.getFirstChild(), sourceName, scope));
                            }
                        } else {
                            com.google.javascript.rhino.jstype.JSType type = createFromTypeNodesInternal(arg, sourceName, scope);
                            if (arg.getType() == com.google.javascript.rhino.Token.EQUALS) {
                                boolean addSuccess = paramBuilder.addOptionalParams(type);
                                if (!addSuccess) {
                                    reporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0("msg.jsdoc.function.varargs"), sourceName, arg.getLineno(), arg.getCharno());
                                }
                            } else {
                                paramBuilder.addRequiredParams(type);
                            }
                        }
                    }
                    current = current.getNext();
                }
                com.google.javascript.rhino.jstype.JSType returnType = createFromTypeNodesInternal(current, sourceName, scope);
                return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParams(paramBuilder).withReturnType(returnType).withTypeOfThis(thisType).setIsConstructor(isConstructor).build();
        }
        throw new java.lang.IllegalStateException("Unexpected node in type expression: " + n.toString());
    }

    private com.google.javascript.rhino.jstype.JSType createRecordTypeFromNodes(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        com.google.javascript.rhino.jstype.RecordTypeBuilder builder = new com.google.javascript.rhino.jstype.RecordTypeBuilder(this);
        for (com.google.javascript.rhino.Node fieldTypeNode = n.getFirstChild(); fieldTypeNode != null; fieldTypeNode = fieldTypeNode.getNext()) {
            com.google.javascript.rhino.Node fieldNameNode = fieldTypeNode;
            boolean hasType = false;
            if (fieldTypeNode.getType() == com.google.javascript.rhino.Token.COLON) {
                fieldNameNode = fieldTypeNode.getFirstChild();
                hasType = true;
            }
            java.lang.String fieldName = fieldNameNode.getString();
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = fieldName.startsWith("'") || fieldName.startsWith("\"");
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(15).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("fieldName",fieldName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateType",com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.lastGeneration",com.google.javascript.rhino.jstype.JSTypeRegistry.this.lastGeneration);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.nativeTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.nativeTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("fieldNameNode",fieldNameNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.interfaceToImplementors",com.google.javascript.rhino.jstype.JSTypeRegistry.this.interfaceToImplementors);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.forwardDeclaredTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.forwardDeclaredTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolvedNamedTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolvedNamedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.tolerateUndefinedValues",com.google.javascript.rhino.jstype.JSTypeRegistry.this.tolerateUndefinedValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("scope",scope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("builder",builder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.typesIndexedByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.typesIndexedByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.namesToTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.namesToTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.namespaces",com.google.javascript.rhino.jstype.JSTypeRegistry.this.namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateTypeName",com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateTypeName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.reporter",com.google.javascript.rhino.jstype.JSTypeRegistry.this.reporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.eachRefTypeIndexedByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.eachRefTypeIndexedByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("\"\\"\"","\"");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.greatestSubtypeByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.greatestSubtypeByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.nonNullableTypeNames",com.google.javascript.rhino.jstype.JSTypeRegistry.this.nonNullableTypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.unresolvedNamedTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.unresolvedNamedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("sourceName",sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolveMode",com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolveMode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("\"'\"","'");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectInput("hasType",hasType);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(15).collectionEnds();
            }
            if (runtimeAngelicValue) {
                fieldName = fieldName.substring(1, fieldName.length() - 1);
            }
            com.google.javascript.rhino.jstype.JSType fieldType = null;
            if (hasType) {
                fieldType = createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);
            } else {
                fieldType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            if (builder.addProperty(fieldName, fieldType, fieldNameNode) == null) {
                reporter.warning("Duplicate record field " + fieldName, sourceName, n.getLineno(), fieldNameNode.getCharno());
            }
        }
        return builder.build();
    }

    public void setTemplateTypeName(java.lang.String name) {
        templateTypeName = name;
        templateType = new com.google.javascript.rhino.jstype.TemplateType(this, name);
    }

    public void clearTemplateTypeName() {
        templateTypeName = null;
        templateType = null;
    }
}
[105910] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659913234672
GPR[SSUN]-1659913234672
-1093533311
GPR[ESUN]-1659913234904
GPR[SSUN]-1659913234904
-1093533311
GPR[SPVATF]-1659913235155
GPR[EPVATF]-1659913236319
GPR[SPS]-1659913236319
[108077] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1628.
GPR[EPS]-1659913236839
GPR[SPVATF]-1659913236840
GPR[EPVATF]-1659913238046
GPR[SPS]-1659913238046
[109801] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1628.
GPR[EPS]-1659913238563
GPR[ESUN]-1659913238563
GPR[SSUN]-1659913238563
-1093533311
GPR[ESUN]-1659913238799
GPR[SSUN]-1659913238799
-1093533311
GPR[ESUN]-1659913239059
GPR[SSUN]-1659913239059
-1093533311
GPR[ESUN]-1659913239289
GPR[SSUN]-1659913239289
-1093533311
GPR[SPVATF]-1659913239519
GPR[EPVATF]-1659913240712
GPR[SPS]-1659913240712
GPR[EPS]-1659913263552
GPR[ESUN]-1659913263552
GPR[SSUN]-1659913263552
-1093533311
GPR[ESUN]-1659913263902
GPR[SSUN]-1659913263902
-1093533311
GPR[ESUN]-1659913264158
GPR[SSUN]-1659913264159
-1566590132
GPR[SPVATF]-1659913264358
GPR[EPVATF]-1659913265575
GPR[SPS]-1659913265575
[137270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:222.
GPR[EPS]-1659913266032
GPR[ESUN]-1659913266032
GPR[SSUN]-1659913266032
-1966087783
GPR[ESUN]-1659913266216
GPR[SSUN]-1659913266216
-1966087783
GPR[SPVATF]-1659913266407
GPR[EPVATF]-1659913266467
[137705] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913266467
GPR[EPVATF]-1659913266484
[137723] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913266485
GPR[SSUN]-1659913266485
-1966087783
GPR[SPVATF]-1659913266673
GPR[EPVATF]-1659913266691
[137929] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913266691
GPR[SSUN]-1659913266691
-1566590132
GPR[ESUN]-1659913266887
GPR[SSUN]-1659913266887
-1566590132
GPR[ESUN]-1659913267116
GPR[SSUN]-1659913267116
-1566590132
GPR[SPVATF]-1659913267313
GPR[EPVATF]-1659913268497
GPR[SPS]-1659913268497
GPR[EPS]-1659913283106
GPR[ESUN]-1659913283107
GPR[SSUN]-1659913283107
-1566590132
GPR[SPVATF]-1659913283363
GPR[EPVATF]-1659913284578
GPR[SPS]-1659913284578
[156282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:98.
GPR[EPS]-1659913285045
GPR[ESUN]-1659913285045
GPR[SSUN]-1659913285045
-1566590132
GPR[SPVATF]-1659913285247
GPR[EPVATF]-1659913286501
GPR[SPS]-1659913286501
[158199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:255.
GPR[EPS]-1659913286961
GPR[SPVATF]-1659913286961
GPR[EPVATF]-1659913288309
GPR[SPS]-1659913288309
[160005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:255.
GPR[EPS]-1659913288767
GPR[ESUN]-1659913288767
GPR[SSUN]-1659913288767
-1566590132
GPR[SPVATF]-1659913288961
GPR[EPVATF]-1659913291000
GPR[SPS]-1659913291000
[162730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:254.
GPR[EPS]-1659913291492
GPR[SPVATF]-1659913291492
GPR[EPVATF]-1659913292713
GPR[SPS]-1659913292713
[164410] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:254.
GPR[EPS]-1659913293172
GPR[ESUN]-1659913293172
GPR[SSUN]-1659913293172
-1566590132
GPR[ESUN]-1659913293370
GPR[SSUN]-1659913293370
-1566590132
GPR[ESUN]-1659913293568
GPR[SSUN]-1659913293568
-1566590132
GPR[SPVATF]-1659913293762
GPR[EPVATF]-1659913294997
GPR[SPS]-1659913294997
[166694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:221.
GPR[EPS]-1659913295456
GPR[SPVATF]-1659913295456
GPR[EPVATF]-1659913296641
GPR[SPS]-1659913296641
[168337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:221.
GPR[EPS]-1659913297099
GPR[ESUN]-1659913297099
GPR[SSUN]-1659913297099
-1566590132
GPR[SPVATF]-1659913297307
GPR[EPVATF]-1659913298564
GPR[SPS]-1659913298564
[170253] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:213.
GPR[EPS]-1659913299015
GPR[SPVATF]-1659913299015
GPR[EPVATF]-1659913300266
GPR[SPS]-1659913300266
[171963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:213.
GPR[EPS]-1659913300726
GPR[ESUN]-1659913300726
GPR[SSUN]-1659913300726
-1966087783
GPR[ESUN]-1659913300919
GPR[SSUN]-1659913300919
-1007410555
GPR[ESUN]-1659913301109
GPR[SSUN]-1659913301109
-1966087783
GPR[SPVATF]-1659913301293
GPR[EPVATF]-1659913301310
[172548] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913301311
GPR[EPVATF]-1659913301328
[172566] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913301328
GPR[SSUN]-1659913301328
-179796259
GPR[ESUN]-1659913301564
GPR[SSUN]-1659913301564
-179796259
GPR[SPVATF]-1659913301804
GPR[EPVATF]-1659913303015
GPR[SPS]-1659913303015
[174967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2138.
GPR[EPS]-1659913303729
GPR[ESUN]-1659913303729
GPR[SSUN]-1659913303729
-179796259
GPR[SPVATF]-1659913303968
GPR[EPVATF]-1659913305223
GPR[SPS]-1659913305223
[177150] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2137.
GPR[EPS]-1659913305912
GPR[ESUN]-1659913305912
GPR[SSUN]-1659913305912
-179796259
GPR[ESUN]-1659913306149
GPR[SSUN]-1659913306149
-179796259
GPR[SPVATF]-1659913306383
GPR[EPVATF]-1659913307604
GPR[SPS]-1659913307604
[179538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2132.
GPR[EPS]-1659913308300
GPR[SPVATF]-1659913308300
GPR[EPVATF]-1659913309571
GPR[SPS]-1659913309571
[181477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2132.
GPR[EPS]-1659913310240
GPR[ESUN]-1659913310240
GPR[SSUN]-1659913310240
-179796259
GPR[ESUN]-1659913310476
GPR[SSUN]-1659913310476
-179796259
GPR[SPVATF]-1659913310709
GPR[EPVATF]-1659913311930
GPR[SPS]-1659913311930
[183847] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2129.
GPR[EPS]-1659913312610
GPR[ESUN]-1659913312610
GPR[SSUN]-1659913312610
-179796259
GPR[SPVATF]-1659913312894
GPR[EPVATF]-1659913314139
GPR[SPS]-1659913314139
[186045] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2125.
GPR[EPS]-1659913314807
GPR[ESUN]-1659913314807
GPR[SSUN]-1659913314807
-1566590132
GPR[SPVATF]-1659913315010
GPR[EPVATF]-1659913316238
GPR[SPS]-1659913316238
[187935] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:208.
GPR[EPS]-1659913316697
GPR[SPVATF]-1659913316697
GPR[EPVATF]-1659913317966
GPR[SPS]-1659913317966
[189726] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:208.
GPR[EPS]-1659913318488
GPR[ESUN]-1659913318489
GPR[SSUN]-1659913318489
-1566590132
GPR[SPVATF]-1659913318687
GPR[EPVATF]-1659913319971
GPR[SPS]-1659913319971
GPR[EPS]-1659913332031
GPR[SPVATF]-1659913332031
GPR[EPVATF]-1659913334246
GPR[SPS]-1659913334246
GPR[EPS]-1659913350989
GPR[ESUN]-1659913350989
GPR[SSUN]-1659913350989
-1566590132
GPR[SPVATF]-1659913351238
GPR[EPVATF]-1659913352463
GPR[SPS]-1659913352463
GPR[EPS]-1659913363031
GPR[ESUN]-1659913363031
GPR[SSUN]-1659913363031
-622774852
GPR[SPVATF]-1659913363249
GPR[EPVATF]-1659913364484
GPR[SPS]-1659913364484
[236236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:458.
GPR[EPS]-1659913364998
GPR[ESUN]-1659913364998
GPR[SSUN]-1659913364998
-179796259
GPR[ESUN]-1659913365236
GPR[SSUN]-1659913365236
-179796259
GPR[ESUN]-1659913365467
GPR[SSUN]-1659913365467
-179796259
GPR[SPVATF]-1659913365694
GPR[EPVATF]-1659913366900
GPR[SPS]-1659913366900
[238818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2120.
GPR[EPS]-1659913367580
GPR[SPVATF]-1659913367580
GPR[EPVATF]-1659913368789
GPR[SPS]-1659913368789
[240796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2120.
GPR[EPS]-1659913369558
GPR[ESUN]-1659913369558
GPR[SSUN]-1659913369558
-179796259
GPR[SPVATF]-1659913369793
GPR[EPVATF]-1659913370993
GPR[SPS]-1659913370993
[242904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2119.
GPR[EPS]-1659913371666
GPR[ESUN]-1659913371666
GPR[SSUN]-1659913371666
-179796259
GPR[ESUN]-1659913371903
GPR[SSUN]-1659913371903
-179796259
GPR[SPVATF]-1659913372135
GPR[EPVATF]-1659913373325
GPR[SPS]-1659913373325
[245289] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2095.
GPR[EPS]-1659913374051
GPR[ESUN]-1659913374051
GPR[SSUN]-1659913374051
-179796259
GPR[SPVATF]-1659913374284
GPR[EPVATF]-1659913375501
GPR[SPS]-1659913375501
[247415] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2094.
GPR[EPS]-1659913376177
GPR[SPVATF]-1659913376178
GPR[EPVATF]-1659913377396
GPR[SPS]-1659913377396
[249323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2094.
GPR[EPS]-1659913378085
GPR[ESUN]-1659913378085
GPR[SSUN]-1659913378085
-179796259
GPR[SPVATF]-1659913378327
GPR[EPVATF]-1659913379591
GPR[SPS]-1659913379591
[251518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2093.
GPR[EPS]-1659913380280
GPR[ESUN]-1659913380280
GPR[SSUN]-1659913380280
-179796259
GPR[SPVATF]-1659913380513
GPR[EPVATF]-1659913381749
GPR[SPS]-1659913381749
GPR[EPS]-1659913390988
GPR[ESUN]-1659913390988
GPR[SSUN]-1659913390988
-179796259
GPR[ESUN]-1659913391224
GPR[SSUN]-1659913391224
-179796259
GPR[SPVATF]-1659913391458
GPR[EPVATF]-1659913392717
GPR[SPS]-1659913392717
[264614] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2074.
GPR[EPS]-1659913393376
GPR[ESUN]-1659913393376
GPR[SSUN]-1659913393376
-179796259
GPR[SPVATF]-1659913393611
GPR[EPVATF]-1659913394928
GPR[SPS]-1659913394928
[267003] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2072.
GPR[EPS]-1659913395765
GPR[ESUN]-1659913395765
GPR[SSUN]-1659913395765
-179796259
GPR[SPVATF]-1659913396000
GPR[EPVATF]-1659913397354
GPR[SPS]-1659913397354
[269258] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2068.
GPR[EPS]-1659913398020
GPR[SPVATF]-1659913398020
GPR[EPVATF]-1659913399375
GPR[SPS]-1659913399375
[271278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2068.
GPR[EPS]-1659913400040
GPR[ESUN]-1659913400040
GPR[SSUN]-1659913400040
-179796259
GPR[SPVATF]-1659913400275
GPR[EPVATF]-1659913401803
GPR[SPS]-1659913401803
[273703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2067.
GPR[EPS]-1659913402465
GPR[ESUN]-1659913402465
GPR[SSUN]-1659913402465
-622774852
GPR[ESUN]-1659913402679
GPR[SSUN]-1659913402679
-622774852
GPR[SPVATF]-1659913402893
GPR[EPVATF]-1659913404350
GPR[SPS]-1659913404350
[276064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:383.
GPR[EPS]-1659913404826
GPR[SPVATF]-1659913404826
GPR[EPVATF]-1659913406370
GPR[SPS]-1659913406370
[278834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:383.
GPR[EPS]-1659913407596
GPR[ESUN]-1659913407596
GPR[SSUN]-1659913407596
-622774852
GPR[SPVATF]-1659913407813
GPR[EPVATF]-1659913409622
GPR[SPS]-1659913409622
[281357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:382.
GPR[EPS]-1659913410119
GPR[ESUN]-1659913410119
GPR[SSUN]-1659913410119
-622774852
GPR[SPVATF]-1659913410330
GPR[EPVATF]-1659913411571
GPR[SPS]-1659913411571
[283302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:380.
GPR[EPS]-1659913412064
GPR[ESUN]-1659913412064
GPR[SSUN]-1659913412064
-622774852
GPR[SPVATF]-1659913412280
GPR[EPVATF]-1659913413499
GPR[SPS]-1659913413499
[285219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:379.
GPR[EPS]-1659913413981
GPR[ESUN]-1659913413981
GPR[SSUN]-1659913413981
-622774852
GPR[SPVATF]-1659913414194
GPR[EPVATF]-1659913415435
GPR[SPS]-1659913415435
[287194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:378.
GPR[EPS]-1659913415956
GPR[ESUN]-1659913415956
GPR[SSUN]-1659913415956
-622774852
GPR[SPVATF]-1659913416167
GPR[EPVATF]-1659913417392
GPR[SPS]-1659913417392
[289140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:374.
GPR[EPS]-1659913417902
GPR[SPVATF]-1659913417902
GPR[EPVATF]-1659913419119
GPR[SPS]-1659913419119
[290841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:374.
GPR[EPS]-1659913419603
GPR[ESUN]-1659913419603
GPR[SSUN]-1659913419603
-1566590132
GPR[SPVATF]-1659913419802
GPR[EPVATF]-1659913421020
GPR[SPS]-1659913421020
[292724] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:97.
GPR[EPS]-1659913421486
GPR[SPVATF]-1659913421486
GPR[EPVATF]-1659913422789
GPR[SPS]-1659913422789
[294486] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:97.
GPR[EPS]-1659913423248
GPR[ESUN]-1659913423248
GPR[SSUN]-1659913423248
-179796259
GPR[ESUN]-1659913423485
GPR[SSUN]-1659913423485
-179796259
GPR[SPVATF]-1659913423723
GPR[EPVATF]-1659913424973
GPR[SPS]-1659913424973
[296870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2115.
GPR[EPS]-1659913425632
GPR[SPVATF]-1659913425632
GPR[EPVATF]-1659913426910
GPR[SPS]-1659913426910
[298819] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2115.
GPR[EPS]-1659913427581
GPR[ESUN]-1659913427581
GPR[SSUN]-1659913427581
-179796259
GPR[ESUN]-1659913427816
GPR[SSUN]-1659913427816
-179796259
GPR[SPVATF]-1659913428105
GPR[EPVATF]-1659913429393
GPR[SPS]-1659913429393
[301291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2087.
GPR[EPS]-1659913430053
GPR[SPVATF]-1659913430054
GPR[EPVATF]-1659913431355
GPR[SPS]-1659913431355
[303257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2087.
GPR[EPS]-1659913432019
GPR[ESUN]-1659913432019
GPR[SSUN]-1659913432019
-179796259
GPR[ESUN]-1659913432254
GPR[SSUN]-1659913432254
-179796259
GPR[ESUN]-1659913432488
GPR[SSUN]-1659913432488
-179796259
GPR[SPVATF]-1659913432720
GPR[EPVATF]-1659913434073
GPR[SPS]-1659913434073
[306031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2063.
GPR[EPS]-1659913434794
GPR[SPVATF]-1659913434794
GPR[EPVATF]-1659913436145
GPR[SPS]-1659913436145
[308048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2063.
GPR[EPS]-1659913436810
GPR[ESUN]-1659913436810
GPR[SSUN]-1659913436810
-179796259
GPR[ESUN]-1659913437042
GPR[SSUN]-1659913437042
-179796259
GPR[ESUN]-1659913437274
GPR[SSUN]-1659913437274
-179796259
GPR[SPVATF]-1659913437504
GPR[EPVATF]-1659913438951
GPR[SPS]-1659913438951
[310852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1714.
GPR[EPS]-1659913439614
GPR[ESUN]-1659913439614
GPR[SSUN]-1659913439614
-179796259
GPR[SPVATF]-1659913439847
GPR[EPVATF]-1659913441352
GPR[SPS]-1659913441352
[313260] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1713.
GPR[EPS]-1659913442023
GPR[ESUN]-1659913442023
GPR[SSUN]-1659913442023
-1566590132
GPR[ESUN]-1659913442224
GPR[SSUN]-1659913442224
-600752576
GPR[ESUN]-1659913442406
GPR[SSUN]-1659913442406
-1566590132
GPR[ESUN]-1659913442619
GPR[SSUN]-1659913442619
-622774852
GPR[SPVATF]-1659913442827
GPR[EPVATF]-1659913444344
GPR[SPS]-1659913444344
[315868] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PrototypeObjectType extends com.google.javascript.rhino.jstype.ObjectType {
    private static final long serialVersionUID = 1L;

    private final java.lang.String className;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType.Property> properties;

    private final boolean nativeType;

    private com.google.javascript.rhino.jstype.ObjectType implicitPrototypeFallback;

    private com.google.javascript.rhino.jstype.FunctionType ownerFunction = null;

    private boolean prettyPrint = false;

    private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        this(registry, className, implicitPrototype, false);
    }

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype, boolean nativeType) {
        super(registry);
        this.properties = com.google.common.collect.Maps.newTreeMap();
        this.className = className;
        this.nativeType = nativeType;
        if (nativeType || (implicitPrototype != null)) {
            setImplicitPrototype(implicitPrototype);
        } else {
            setImplicitPrototype(registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        }
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType.Property getSlot(java.lang.String name) {
        if (properties.containsKey(name)) {
            return properties.get(name);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = implicitPrototype.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        for (com.google.javascript.rhino.jstype.ObjectType interfaceType : getCtorExtendedInterfaces()) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = interfaceType.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        return null;
    }

    @java.lang.Override
    public int getPropertiesCount() {
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype == null) {
            return this.properties.size();
        }
        int localCount = 0;
        for (java.lang.String property : properties.keySet()) {
            if (!implicitPrototype.hasProperty(property)) {
                localCount++;
            }
        }
        return implicitPrototype.getPropertiesCount() + localCount;
    }

    @java.lang.Override
    public boolean hasProperty(java.lang.String propertyName) {
        return isUnknownType() || (getSlot(propertyName) != null);
    }

    @java.lang.Override
    public boolean hasOwnProperty(java.lang.String propertyName) {
        return properties.get(propertyName) != null;
    }

    @java.lang.Override
    public java.util.Set<java.lang.String> getOwnPropertyNames() {
        return properties.keySet();
    }

    @java.lang.Override
    public boolean isPropertyTypeDeclared(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return !slot.isTypeInferred();
    }

    @java.lang.Override
    void collectPropertyNames(java.util.Set<java.lang.String> props) {
        for (java.lang.String prop : properties.keySet()) {
            props.add(prop);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototype.collectPropertyNames(props);
        }
    }

    @java.lang.Override
    public boolean isPropertyTypeInferred(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return slot.isTypeInferred();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getPropertyType(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        return slot.getType();
    }

    @java.lang.Override
    public boolean isPropertyInExterns(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.isFromExterns();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.isPropertyInExterns(propertyName);
        }
        return false;
    }

    @java.lang.Override
    boolean defineProperty(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, boolean inferred, com.google.javascript.rhino.Node propertyNode) {
        if (hasOwnDeclaredProperty(name)) {
            return false;
        }
        com.google.javascript.rhino.jstype.ObjectType.Property newProp = new com.google.javascript.rhino.jstype.ObjectType.Property(name, type, inferred, propertyNode);
        com.google.javascript.rhino.jstype.ObjectType.Property oldProp = properties.get(name);
        if (oldProp != null) {
            newProp.setJSDocInfo(oldProp.getJSDocInfo());
        }
        properties.put(name, newProp);
        return true;
    }

    @java.lang.Override
    public boolean removeProperty(java.lang.String name) {
        return properties.remove(name) != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getPropertyNode(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getNode();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.getPropertyNode(propertyName);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.JSDocInfo getOwnPropertyJSDocInfo(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getJSDocInfo();
        }
        return null;
    }

    @java.lang.Override
    public void setPropertyJSDocInfo(java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            if (!properties.containsKey(propertyName)) {
                defineInferredProperty(propertyName, getPropertyType(propertyName), null);
            }
            com.google.javascript.rhino.jstype.ObjectType.Property property = properties.get(propertyName);
            if (property != null) {
                property.setJSDocInfo(info);
            }
        }
    }

    @java.lang.Override
    public boolean matchesNumberContext() {
        return (((isNumberObjectType() || isDateType()) || isBooleanObjectType()) || isStringObjectType()) || hasOverridenNativeProperty("valueOf");
    }

    @java.lang.Override
    public boolean matchesStringContext() {
        return ((((((isTheObjectType() || isStringObjectType()) || isDateType()) || isRegexpType()) || isArrayType()) || isNumberObjectType()) || isBooleanObjectType()) || hasOverridenNativeProperty("toString");
    }

    private boolean hasOverridenNativeProperty(java.lang.String propertyName) {
        if (isNativeObjectType()) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType propertyType = getPropertyType(propertyName);
        com.google.javascript.rhino.jstype.ObjectType nativeType = (this.isFunctionType()) ? registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE) : registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.JSType nativePropertyType = nativeType.getPropertyType(propertyName);
        return propertyType != nativePropertyType;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType unboxesTo() {
        if (isStringObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
        } else if (isBooleanObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
        } else if (isNumberObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
        } else {
            return super.unboxesTo();
        }
    }

    @java.lang.Override
    public boolean matchesObjectContext() {
        return true;
    }

    @java.lang.Override
    public boolean canBeCalled() {
        return isRegexpType();
    }

    @java.lang.Override
    java.lang.String toStringHelper(boolean forAnnotations) {
        if (hasReferenceName()) {
            return getReferenceName();
        } else if (prettyPrint) {
            prettyPrint = false;
            java.util.Set<java.lang.String> propertyNames = com.google.common.collect.Sets.newTreeSet();
            for (com.google.javascript.rhino.jstype.ObjectType current = this; ((current != null) && (!current.isNativeObjectType())) && (propertyNames.size() <= com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES); current = current.getImplicitPrototype()) {
                propertyNames.addAll(current.getOwnPropertyNames());
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            sb.append("{");
            int i = 0;
            for (java.lang.String property : propertyNames) {
                if (i > 0) {
                    sb.append(", ");
                }
                sb.append(property);
                sb.append(": ");
                sb.append(getPropertyType(property).toStringHelper(forAnnotations));
                ++i;
                if ((!forAnnotations) && (i == com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES)) {
                    sb.append(", ...");
                    break;
                }
            }
            sb.append("}");
            prettyPrint = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(73).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType",com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties",com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction",com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("propertyNames",propertyNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("forAnnotations",forAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint",com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.className",com.google.javascript.rhino.jstype.PrototypeObjectType.this.className);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback",com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(73).collectionEnds();
            }
            if (runtimeAngelicValue)
                return sb.toString();

        } else {
            return forAnnotations ? "?" : "{...}";
        }
    }

    void setPrettyPrint(boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
    }

    boolean isPrettyPrint() {
        return prettyPrint;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getImplicitPrototype() {
        return implicitPrototypeFallback;
    }

    final void setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        com.google.common.base.Preconditions.checkState(!hasCachedValues());
        this.implicitPrototypeFallback = implicitPrototype;
    }

    @java.lang.Override
    public java.lang.String getReferenceName() {
        if (className != null) {
            return className;
        } else if (ownerFunction != null) {
            return ownerFunction.getReferenceName() + ".prototype";
        } else {
            return null;
        }
    }

    @java.lang.Override
    public boolean hasReferenceName() {
        return (className != null) || (ownerFunction != null);
    }

    @java.lang.Override
    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        if (com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that)) {
            return true;
        }
        if (that.isUnionType()) {
            return false;
        }
        if (that.isRecordType()) {
            return com.google.javascript.rhino.jstype.RecordType.isSubtype(this, that.toMaybeRecordType());
        }
        com.google.javascript.rhino.jstype.ObjectType thatObj = that.toObjectType();
        com.google.javascript.rhino.jstype.ObjectType thatCtor = (thatObj == null) ? null : thatObj.getConstructor();
        if ((thatCtor != null) && thatCtor.isInterface()) {
            java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> thisInterfaces = getCtorImplementedInterfaces();
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : thisInterfaces) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if ((getConstructor() != null) && getConstructor().isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : getCtorExtendedInterfaces()) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {
            return true;
        }
        return this.isImplicitPrototype(thatObj);
    }

    private boolean implicitPrototypeChainIsUnknown() {
        com.google.javascript.rhino.jstype.ObjectType p = getImplicitPrototype();
        while (p != null) {
            if (p.isUnknownType()) {
                return true;
            }
            p = p.getImplicitPrototype();
        } 
        return false;
    }

    @java.lang.Override
    public boolean hasCachedValues() {
        return super.hasCachedValues();
    }

    @java.lang.Override
    public boolean isNativeObjectType() {
        return nativeType;
    }

    void setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType type) {
        com.google.common.base.Preconditions.checkState((ownerFunction == null) || (type == null));
        ownerFunction = type;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getOwnerFunction() {
        return ownerFunction;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorImplementedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorExtendedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        setResolvedTypeInternal(this);
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototypeFallback = ((com.google.javascript.rhino.jstype.ObjectType) (implicitPrototype.resolve(t, scope)));
        }
        for (com.google.javascript.rhino.jstype.ObjectType.Property prop : properties.values()) {
            prop.setType(com.google.javascript.rhino.jstype.JSType.safeResolve(prop.getType(), t, scope));
        }
        return this;
    }

    @java.lang.Override
    public void matchConstraint(com.google.javascript.rhino.jstype.ObjectType constraintObj) {
        if (constraintObj.isRecordType()) {
            for (java.lang.String prop : constraintObj.getOwnPropertyNames()) {
                com.google.javascript.rhino.jstype.JSType propType = constraintObj.getPropertyType(prop);
                if (!isPropertyTypeDeclared(prop)) {
                    com.google.javascript.rhino.jstype.JSType typeToInfer = propType;
                    if (!hasProperty(prop)) {
                        typeToInfer = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                    }
                    defineInferredProperty(prop, typeToInfer, null);
                }
            }
        }
    }
}
[315868] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659913444630
GPR[SSUN]-1659913444630
-622774852
GPR[SPVATF]-1659913444845
GPR[EPVATF]-1659913446487
GPR[SPS]-1659913446488
[318211] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:391.
GPR[EPS]-1659913446973
GPR[ESUN]-1659913446973
GPR[SSUN]-1659913446973
-622774852
GPR[SPVATF]-1659913447183
GPR[EPVATF]-1659913449033
GPR[SPS]-1659913449033
[321516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:389.
GPR[EPS]-1659913450278
GPR[ESUN]-1659913450278
GPR[SSUN]-1659913450278
-622774852
GPR[SPVATF]-1659913450499
GPR[EPVATF]-1659913452501
GPR[SPS]-1659913452501
[324232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:373.
GPR[EPS]-1659913452994
GPR[ESUN]-1659913452994
GPR[SSUN]-1659913452995
-622774852
GPR[ESUN]-1659913453204
GPR[SSUN]-1659913453204
-622774852
GPR[SPVATF]-1659913453412
GPR[EPVATF]-1659913454639
GPR[SPS]-1659913454639
[326353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:370.
GPR[EPS]-1659913455115
GPR[ESUN]-1659913455116
GPR[SSUN]-1659913455116
-622774852
GPR[ESUN]-1659913455438
GPR[SSUN]-1659913455438
-622774852
GPR[SPVATF]-1659913455648
GPR[EPVATF]-1659913456906
GPR[SPS]-1659913456906
[328612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:366.
GPR[EPS]-1659913457374
GPR[ESUN]-1659913457374
GPR[SSUN]-1659913457374
-622774852
GPR[ESUN]-1659913457587
GPR[SSUN]-1659913457587
-622774852
GPR[SPVATF]-1659913457817
GPR[EPVATF]-1659913459069
GPR[SPS]-1659913459069
[330782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:362.
GPR[EPS]-1659913459544
GPR[ESUN]-1659913459544
GPR[SSUN]-1659913459544
-622774852
GPR[ESUN]-1659913459757
GPR[SSUN]-1659913459757
-622774852
GPR[SPVATF]-1659913459965
GPR[EPVATF]-1659913461192
GPR[SPS]-1659913461192
[332896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:358.
GPR[EPS]-1659913461658
GPR[ESUN]-1659913461658
GPR[SSUN]-1659913461658
-622774852
GPR[SPVATF]-1659913461877
GPR[EPVATF]-1659913463070
GPR[SPS]-1659913463070
[334599] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PrototypeObjectType extends com.google.javascript.rhino.jstype.ObjectType {
    private static final long serialVersionUID = 1L;

    private final java.lang.String className;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType.Property> properties;

    private final boolean nativeType;

    private com.google.javascript.rhino.jstype.ObjectType implicitPrototypeFallback;

    private com.google.javascript.rhino.jstype.FunctionType ownerFunction = null;

    private boolean prettyPrint = false;

    private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        this(registry, className, implicitPrototype, false);
    }

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype, boolean nativeType) {
        super(registry);
        this.properties = com.google.common.collect.Maps.newTreeMap();
        this.className = className;
        this.nativeType = nativeType;
        if (nativeType || (implicitPrototype != null)) {
            setImplicitPrototype(implicitPrototype);
        } else {
            setImplicitPrototype(registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        }
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType.Property getSlot(java.lang.String name) {
        if (properties.containsKey(name)) {
            return properties.get(name);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = implicitPrototype.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        for (com.google.javascript.rhino.jstype.ObjectType interfaceType : getCtorExtendedInterfaces()) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = interfaceType.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        return null;
    }

    @java.lang.Override
    public int getPropertiesCount() {
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype == null) {
            return this.properties.size();
        }
        int localCount = 0;
        for (java.lang.String property : properties.keySet()) {
            if (!implicitPrototype.hasProperty(property)) {
                localCount++;
            }
        }
        return implicitPrototype.getPropertiesCount() + localCount;
    }

    @java.lang.Override
    public boolean hasProperty(java.lang.String propertyName) {
        return isUnknownType() || (getSlot(propertyName) != null);
    }

    @java.lang.Override
    public boolean hasOwnProperty(java.lang.String propertyName) {
        return properties.get(propertyName) != null;
    }

    @java.lang.Override
    public java.util.Set<java.lang.String> getOwnPropertyNames() {
        return properties.keySet();
    }

    @java.lang.Override
    public boolean isPropertyTypeDeclared(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return !slot.isTypeInferred();
    }

    @java.lang.Override
    void collectPropertyNames(java.util.Set<java.lang.String> props) {
        for (java.lang.String prop : properties.keySet()) {
            props.add(prop);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototype.collectPropertyNames(props);
        }
    }

    @java.lang.Override
    public boolean isPropertyTypeInferred(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return slot.isTypeInferred();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getPropertyType(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        return slot.getType();
    }

    @java.lang.Override
    public boolean isPropertyInExterns(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.isFromExterns();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.isPropertyInExterns(propertyName);
        }
        return false;
    }

    @java.lang.Override
    boolean defineProperty(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, boolean inferred, com.google.javascript.rhino.Node propertyNode) {
        if (hasOwnDeclaredProperty(name)) {
            return false;
        }
        com.google.javascript.rhino.jstype.ObjectType.Property newProp = new com.google.javascript.rhino.jstype.ObjectType.Property(name, type, inferred, propertyNode);
        com.google.javascript.rhino.jstype.ObjectType.Property oldProp = properties.get(name);
        if (oldProp != null) {
            newProp.setJSDocInfo(oldProp.getJSDocInfo());
        }
        properties.put(name, newProp);
        return true;
    }

    @java.lang.Override
    public boolean removeProperty(java.lang.String name) {
        return properties.remove(name) != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getPropertyNode(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getNode();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.getPropertyNode(propertyName);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.JSDocInfo getOwnPropertyJSDocInfo(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getJSDocInfo();
        }
        return null;
    }

    @java.lang.Override
    public void setPropertyJSDocInfo(java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            if (!properties.containsKey(propertyName)) {
                defineInferredProperty(propertyName, getPropertyType(propertyName), null);
            }
            com.google.javascript.rhino.jstype.ObjectType.Property property = properties.get(propertyName);
            if (property != null) {
                property.setJSDocInfo(info);
            }
        }
    }

    @java.lang.Override
    public boolean matchesNumberContext() {
        return (((isNumberObjectType() || isDateType()) || isBooleanObjectType()) || isStringObjectType()) || hasOverridenNativeProperty("valueOf");
    }

    @java.lang.Override
    public boolean matchesStringContext() {
        return ((((((isTheObjectType() || isStringObjectType()) || isDateType()) || isRegexpType()) || isArrayType()) || isNumberObjectType()) || isBooleanObjectType()) || hasOverridenNativeProperty("toString");
    }

    private boolean hasOverridenNativeProperty(java.lang.String propertyName) {
        if (isNativeObjectType()) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType propertyType = getPropertyType(propertyName);
        com.google.javascript.rhino.jstype.ObjectType nativeType = (this.isFunctionType()) ? registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE) : registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.JSType nativePropertyType = nativeType.getPropertyType(propertyName);
        return propertyType != nativePropertyType;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType unboxesTo() {
        if (isStringObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
        } else if (isBooleanObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
        } else if (isNumberObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
        } else {
            return super.unboxesTo();
        }
    }

    @java.lang.Override
    public boolean matchesObjectContext() {
        return true;
    }

    @java.lang.Override
    public boolean canBeCalled() {
        return isRegexpType();
    }

    @java.lang.Override
    java.lang.String toStringHelper(boolean forAnnotations) {
        if (hasReferenceName()) {
            return getReferenceName();
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(81).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType",com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties",com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction",com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectInput("forAnnotations",forAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint",com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.className",com.google.javascript.rhino.jstype.PrototypeObjectType.this.className);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback",com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(81).collectionEnds();
            }
            if (runtimeAngelicValue) if (prettyPrint) {
                prettyPrint = false;
                java.util.Set<java.lang.String> propertyNames = com.google.common.collect.Sets.newTreeSet();
                for (com.google.javascript.rhino.jstype.ObjectType current = this; ((current != null) && (!current.isNativeObjectType())) && (propertyNames.size() <= com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES); current = current.getImplicitPrototype()) {
                    propertyNames.addAll(current.getOwnPropertyNames());
                }
                java.lang.StringBuilder sb = new java.lang.StringBuilder();
                sb.append("{");
                int i = 0;
                for (java.lang.String property : propertyNames) {
                    if (i > 0) {
                        sb.append(", ");
                    }
                    sb.append(property);
                    sb.append(": ");
                    sb.append(getPropertyType(property).toStringHelper(forAnnotations));
                    ++i;
                    if ((!forAnnotations) && (i == com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES)) {
                        sb.append(", ...");
                        break;
                    }
                }
                sb.append("}");
                prettyPrint = true;
                return sb.toString();
            } else {
                return forAnnotations ? "?" : "{...}";
            }
        }
    }

    void setPrettyPrint(boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
    }

    boolean isPrettyPrint() {
        return prettyPrint;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getImplicitPrototype() {
        return implicitPrototypeFallback;
    }

    final void setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        com.google.common.base.Preconditions.checkState(!hasCachedValues());
        this.implicitPrototypeFallback = implicitPrototype;
    }

    @java.lang.Override
    public java.lang.String getReferenceName() {
        if (className != null) {
            return className;
        } else if (ownerFunction != null) {
            return ownerFunction.getReferenceName() + ".prototype";
        } else {
            return null;
        }
    }

    @java.lang.Override
    public boolean hasReferenceName() {
        return (className != null) || (ownerFunction != null);
    }

    @java.lang.Override
    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        if (com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that)) {
            return true;
        }
        if (that.isUnionType()) {
            return false;
        }
        if (that.isRecordType()) {
            return com.google.javascript.rhino.jstype.RecordType.isSubtype(this, that.toMaybeRecordType());
        }
        com.google.javascript.rhino.jstype.ObjectType thatObj = that.toObjectType();
        com.google.javascript.rhino.jstype.ObjectType thatCtor = (thatObj == null) ? null : thatObj.getConstructor();
        if ((thatCtor != null) && thatCtor.isInterface()) {
            java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> thisInterfaces = getCtorImplementedInterfaces();
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : thisInterfaces) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if ((getConstructor() != null) && getConstructor().isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : getCtorExtendedInterfaces()) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {
            return true;
        }
        return this.isImplicitPrototype(thatObj);
    }

    private boolean implicitPrototypeChainIsUnknown() {
        com.google.javascript.rhino.jstype.ObjectType p = getImplicitPrototype();
        while (p != null) {
            if (p.isUnknownType()) {
                return true;
            }
            p = p.getImplicitPrototype();
        } 
        return false;
    }

    @java.lang.Override
    public boolean hasCachedValues() {
        return super.hasCachedValues();
    }

    @java.lang.Override
    public boolean isNativeObjectType() {
        return nativeType;
    }

    void setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType type) {
        com.google.common.base.Preconditions.checkState((ownerFunction == null) || (type == null));
        ownerFunction = type;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getOwnerFunction() {
        return ownerFunction;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorImplementedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorExtendedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        setResolvedTypeInternal(this);
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototypeFallback = ((com.google.javascript.rhino.jstype.ObjectType) (implicitPrototype.resolve(t, scope)));
        }
        for (com.google.javascript.rhino.jstype.ObjectType.Property prop : properties.values()) {
            prop.setType(com.google.javascript.rhino.jstype.JSType.safeResolve(prop.getType(), t, scope));
        }
        return this;
    }

    @java.lang.Override
    public void matchConstraint(com.google.javascript.rhino.jstype.ObjectType constraintObj) {
        if (constraintObj.isRecordType()) {
            for (java.lang.String prop : constraintObj.getOwnPropertyNames()) {
                com.google.javascript.rhino.jstype.JSType propType = constraintObj.getPropertyType(prop);
                if (!isPropertyTypeDeclared(prop)) {
                    com.google.javascript.rhino.jstype.JSType typeToInfer = propType;
                    if (!hasProperty(prop)) {
                        typeToInfer = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                    }
                    defineInferredProperty(prop, typeToInfer, null);
                }
            }
        }
    }
}
[334599] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659913463362
GPR[EPVATF]-1659913464608
GPR[SPS]-1659913464608
[336355] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:356.
GPR[EPS]-1659913465117
GPR[ESUN]-1659913465117
GPR[SSUN]-1659913465117
-1797850673
GPR[SPVATF]-1659913465353
GPR[EPVATF]-1659913466555
GPR[SPS]-1659913466555
[338374] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:917.
GPR[EPS]-1659913467136
GPR[ESUN]-1659913467136
GPR[SSUN]-1659913467136
160819208
GPR[SPVATF]-1659913467361
GPR[EPVATF]-1659913468601
GPR[SPS]-1659913468601
GPR[EPS]-1659913480273
GPR[ESUN]-1659913480273
GPR[SSUN]-1659913480274
466431456
GPR[SPVATF]-1659913480538
GPR[EPVATF]-1659913481765
GPR[SPS]-1659913481765
[353644] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:692.
GPR[EPS]-1659913482406
GPR[ESUN]-1659913482406
GPR[SSUN]-1659913482406
GPR[ESUN]-1659913482406
GPR[SSUN]-1659913482406
GPR[ESUN]-1659913482406
GPR[SSUN]-1659913482406
GPR[ESUN]-1659913482406
GPR[SSUN]-1659913482406
466431456
GPR[SPVATF]-1659913482657
GPR[EPVATF]-1659913483960
GPR[SPS]-1659913483960
[355850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:696.
GPR[EPS]-1659913484612
GPR[ESUN]-1659913484612
GPR[SSUN]-1659913484612
466431456
GPR[SPVATF]-1659913484863
GPR[EPVATF]-1659913486142
GPR[SPS]-1659913486142
[358007] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:691.
GPR[EPS]-1659913486769
GPR[SPVATF]-1659913486770
GPR[EPVATF]-1659913488053
GPR[SPS]-1659913488053
[359919] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:691.
GPR[EPS]-1659913488681
GPR[ESUN]-1659913488681
GPR[SSUN]-1659913488681
466431456
GPR[ESUN]-1659913488931
GPR[SSUN]-1659913488931
466431456
GPR[ESUN]-1659913489180
GPR[SSUN]-1659913489180
466431456
GPR[ESUN]-1659913489421
GPR[SSUN]-1659913489421
-179796259
GPR[SPVATF]-1659913489716
GPR[EPVATF]-1659913491027
GPR[SPS]-1659913491027
[362923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2010.
GPR[EPS]-1659913491685
GPR[ESUN]-1659913491685
GPR[SSUN]-1659913491685
1290590094
GPR[SPVATF]-1659913491903
GPR[EPVATF]-1659913493262
GPR[SPS]-1659913493262
[364864] ERROR ConstraintModelBuilder - Unable to compile the change: 
class LinkedFlowScope implements com.google.javascript.jscomp.FlowScope {
    private final com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache cache;

    private final com.google.javascript.jscomp.LinkedFlowScope parent;

    private int depth;

    static final int MAX_DEPTH = 250;

    private com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache flattened;

    private boolean frozen = false;

    private com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot lastSlot;

    private LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache cache, com.google.javascript.jscomp.LinkedFlowScope directParent) {
        this.cache = cache;
        if (directParent == null) {
            this.lastSlot = null;
            this.depth = 0;
            this.parent = cache.linkedEquivalent;
        } else {
            this.lastSlot = directParent.lastSlot;
            this.depth = directParent.depth + 1;
            this.parent = directParent;
        }
    }

    LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache cache) {
        this(cache, null);
    }

    LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope directParent) {
        this(directParent.cache, directParent);
    }

    private com.google.javascript.jscomp.Scope getFunctionScope() {
        return cache.functionScope;
    }

    private boolean flowsFromBottom() {
        return getFunctionScope().isBottom();
    }

    public static com.google.javascript.jscomp.LinkedFlowScope createEntryLattice(com.google.javascript.jscomp.Scope scope) {
        return new com.google.javascript.jscomp.LinkedFlowScope(new com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(scope));
    }

    @java.lang.Override
    public void inferSlotType(java.lang.String symbol, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(!frozen);
        lastSlot = new com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot(symbol, type, lastSlot);
        depth++;
        cache.dirtySymbols.add(symbol);
    }

    @java.lang.Override
    public void inferQualifiedSlot(com.google.javascript.rhino.Node node, java.lang.String symbol, com.google.javascript.rhino.jstype.JSType bottomType, com.google.javascript.rhino.jstype.JSType inferredType) {
        com.google.javascript.jscomp.Scope functionScope = getFunctionScope();
        if (functionScope.isLocal()) {
            if ((functionScope.getVar(symbol) == null) && (!functionScope.isBottom())) {
                functionScope.declare(symbol, node, bottomType, null);
            }
            inferSlotType(symbol, inferredType);
        }
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        return cache.functionScope.getTypeOfThis();
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return getFunctionScope().getRootNode();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return getFunctionScope().getParentScope();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        if (cache.dirtySymbols.contains(name)) {
            for (com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot slot = lastSlot; slot != null; slot = slot.parent) {
                if (slot.getName().equals(name)) {
                    return slot;
                }
            }
        }
        return cache.getSlot(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        throw new java.lang.UnsupportedOperationException();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.FlowScope createChildFlowScope() {
        frozen = true;
        if (depth > com.google.javascript.jscomp.LinkedFlowScope.MAX_DEPTH) {
            if (flattened == null) {
                flattened = new com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(this);
            }
            return new com.google.javascript.jscomp.LinkedFlowScope(flattened);
        }
        return new com.google.javascript.jscomp.LinkedFlowScope(this);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> findUniqueRefinedSlot(com.google.javascript.jscomp.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> result = null;
        for (com.google.javascript.jscomp.LinkedFlowScope currentScope = this; currentScope != blindScope; currentScope = currentScope.parent) {
            for (com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot currentSlot = currentScope.lastSlot; (currentSlot != null) && ((currentScope.parent == null) || (currentScope.parent.lastSlot != currentSlot)); currentSlot = currentSlot.parent) {
                if (result == null) {
                    result = currentSlot;
                } else if (!currentSlot.getName().equals(result.getName())) {
                    return null;
                }
            }
        }
        return result;
    }

    @java.lang.Override
    public void completeScope(com.google.javascript.jscomp.Scope scope) {
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = scope.getVars(); it.hasNext();) {
            com.google.javascript.jscomp.Scope.Var var = it.next();
            if (var.isTypeInferred()) {
                com.google.javascript.rhino.jstype.JSType type = var.getType();
                if ((type == null) || type.isUnknownType()) {
                    com.google.javascript.rhino.jstype.JSType flowType = getSlot(var.getName()).getType();
                    var.setType(flowType);
                }
            }
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.LinkedFlowScope optimize() {
        com.google.javascript.jscomp.LinkedFlowScope current;
        for (current = this; (current.parent != null) && (current.lastSlot == current.parent.lastSlot); current = current.parent) {
        }
        return current;
    }

    static class FlowScopeJoinOp extends com.google.javascript.jscomp.JoinOp.BinaryJoinOp<com.google.javascript.jscomp.FlowScope> {
        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public com.google.javascript.jscomp.FlowScope apply(com.google.javascript.jscomp.FlowScope a, com.google.javascript.jscomp.FlowScope b) {
            com.google.javascript.jscomp.LinkedFlowScope linkedA = ((com.google.javascript.jscomp.LinkedFlowScope) (a));
            com.google.javascript.jscomp.LinkedFlowScope linkedB = ((com.google.javascript.jscomp.LinkedFlowScope) (b));
            linkedA.frozen = true;
            linkedB.frozen = true;
            if (linkedA.optimize() == linkedB.optimize()) {
                return linkedA.createChildFlowScope();
            }
            return new com.google.javascript.jscomp.LinkedFlowScope(new com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache(linkedA, linkedB));
        }
    }

    @java.lang.Override
    public boolean equals(java.lang.Object other) {
        if (other instanceof com.google.javascript.jscomp.LinkedFlowScope) {
            com.google.javascript.jscomp.LinkedFlowScope that = ((com.google.javascript.jscomp.LinkedFlowScope) (other));
            if (this.optimize() == that.optimize()) {
                return true;
            }
            if (this.getFunctionScope() != that.getFunctionScope()) {
                return false;
            }
            if (cache == that.cache) {
                for (java.lang.String name : cache.dirtySymbols) {
                    if (diffSlots(getSlot(name), that.getSlot(name))) {
                        return false;
                    }
                }
                return true;
            }
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> myFlowSlots = allFlowSlots();
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> otherFlowSlots = that.allFlowSlots();
            for (com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot : myFlowSlots.values()) {
                if (diffSlots(slot, otherFlowSlots.get(slot.getName()))) {
                    return false;
                }
                otherFlowSlots.remove(slot.getName());
            }
            for (com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot : otherFlowSlots.values()) {
                if (diffSlots(slot, myFlowSlots.get(slot.getName()))) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    private boolean diffSlots(com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slotA, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slotB) {
        boolean aIsNull = (slotA == null) || (slotA.getType() == null);
        boolean bIsNull = (slotB == null) || (slotB.getType() == null);
        if (aIsNull && bIsNull) {
            return false;
        } else if (aIsNull ^ bIsNull) {
            return true;
        }
        return slotA.getType().differsFrom(slotB.getType());
    }

    private java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> allFlowSlots() {
        java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> slots = com.google.common.collect.Maps.newHashMap();
        for (com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot slot = lastSlot; slot != null; slot = slot.parent) {
            if (!slots.containsKey(slot.getName())) {
                slots.put(slot.getName(), slot);
            }
        }
        for (java.util.Map.Entry<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> symbolEntry : cache.symbols.entrySet()) {
            if (!slots.containsKey(symbolEntry.getKey())) {
                slots.put(symbolEntry.getKey(), symbolEntry.getValue());
            }
        }
        return slots;
    }

    private static class LinkedFlowSlot extends com.google.javascript.rhino.jstype.SimpleSlot {
        final com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot parent;

        LinkedFlowSlot(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.LinkedFlowScope.LinkedFlowSlot parent) {
            super(name, type, true);
            this.parent = parent;
        }
    }

    private static class FlatFlowScopeCache {
        private final com.google.javascript.jscomp.Scope functionScope;

        private final com.google.javascript.jscomp.LinkedFlowScope linkedEquivalent;

        private java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> symbols = com.google.common.collect.Maps.newHashMap();

        final java.util.Set<java.lang.String> dirtySymbols = com.google.common.collect.Sets.newHashSet();

        FlatFlowScopeCache(com.google.javascript.jscomp.Scope functionScope) {
            this.functionScope = functionScope;
            symbols = com.google.common.collect.ImmutableMap.of();
            linkedEquivalent = null;
        }

        FlatFlowScopeCache(com.google.javascript.jscomp.LinkedFlowScope directParent) {
            com.google.javascript.jscomp.LinkedFlowScope.FlatFlowScopeCache cache = directParent.cache;
            functionScope = cache.functionScope;
            symbols = directParent.allFlowSlots();
            linkedEquivalent = directParent;
        }

        FlatFlowScopeCache(com.google.javascript.jscomp.LinkedFlowScope joinedScopeA, com.google.javascript.jscomp.LinkedFlowScope joinedScopeB) {
            linkedEquivalent = null;
            functionScope = (joinedScopeA.flowsFromBottom()) ? joinedScopeB.getFunctionScope() : joinedScopeA.getFunctionScope();
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> slotsA = joinedScopeA.allFlowSlots();
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> slotsB = joinedScopeB.allFlowSlots();
            symbols = slotsA;
            java.util.Set<java.lang.String> symbolNames = com.google.common.collect.Sets.newHashSet(symbols.keySet());
            symbolNames.addAll(slotsB.keySet());
            for (java.lang.String name : symbolNames) {
                com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slotA = slotsA.get(name);
                com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slotB = slotsB.get(name);
                com.google.javascript.rhino.jstype.JSType joinedType = null;
                if ((slotB == null) || (slotB.getType() == null)) {
                    com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> fnSlot = joinedScopeB.getFunctionScope().getSlot(name);
                    com.google.javascript.rhino.jstype.JSType fnSlotType = (fnSlot == null) ? null : fnSlot.getType();
                    if (fnSlotType == null) {
                    } else {
                        joinedType = slotA.getType().getLeastSupertype(fnSlotType);
                    }
                } else if ((slotA == null) || (slotA.getType() == null)) {
                    com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> fnSlot = joinedScopeA.getFunctionScope().getSlot(name);
                    com.google.javascript.rhino.jstype.JSType fnSlotType = (fnSlot == null) ? null : fnSlot.getType();
                    if (fnSlotType == null) {
                        symbols.put(name, slotB);
                    } else {
                        joinedType = slotB.getType().getLeastSupertype(fnSlotType);
                    }
                } else {
                    joinedType = slotA.getType().getLeastSupertype(slotB.getType());
                }
                if (joinedType != null) {
                    symbols.put(name, new com.google.javascript.rhino.jstype.SimpleSlot(name, joinedType, true));
                }
            }
        }

        public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
            if (symbols.containsKey(name)) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(90).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(90).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(90).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(90).collectInput("com.google.javascript.jscomp.LinkedFlowScope.MAX_DEPTH",com.google.javascript.jscomp.LinkedFlowScope.MAX_DEPTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(90).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(90).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return symbols.get(name);

            } else {
                return functionScope.getSlot(name);
            }
        }
    }
}
[364864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659913493626
GPR[SSUN]-1659913493626
-179796259
GPR[SPVATF]-1659913493860
GPR[EPVATF]-1659913495224
GPR[SPS]-1659913495224
[367140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2007.
GPR[EPS]-1659913495903
GPR[SPVATF]-1659913495903
GPR[EPVATF]-1659913497408
GPR[SPS]-1659913497408
[369323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2007.
GPR[EPS]-1659913498085
GPR[ESUN]-1659913498086
GPR[SSUN]-1659913498086
-179796259
GPR[SPVATF]-1659913498320
GPR[EPVATF]-1659913499801
GPR[SPS]-1659913499801
[371709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2006.
GPR[EPS]-1659913500471
GPR[ESUN]-1659913500471
GPR[SSUN]-1659913500471
-179796259
GPR[ESUN]-1659913500705
GPR[SSUN]-1659913500705
-179796259
GPR[SPVATF]-1659913500934
GPR[EPVATF]-1659913502500
GPR[SPS]-1659913502500
[374400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1717.
GPR[EPS]-1659913503162
GPR[ESUN]-1659913503162
GPR[SSUN]-1659913503162
-179796259
GPR[SPVATF]-1659913503393
GPR[EPVATF]-1659913505169
GPR[SPS]-1659913505169
[377059] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1716.
GPR[EPS]-1659913505821
GPR[ESUN]-1659913505821
GPR[SSUN]-1659913505821
-179796259
GPR[SPVATF]-1659913506051
GPR[EPVATF]-1659913508769
GPR[SPS]-1659913508769
[380692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1994.
GPR[EPS]-1659913509454
GPR[ESUN]-1659913509454
GPR[SSUN]-1659913509454
-179796259
GPR[SPVATF]-1659913509692
GPR[EPVATF]-1659913510910
GPR[SPS]-1659913510910
[382810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1993.
GPR[EPS]-1659913511572
GPR[ESUN]-1659913511572
GPR[SSUN]-1659913511572
-179796259
GPR[SPVATF]-1659913511807
GPR[EPVATF]-1659913513043
GPR[SPS]-1659913513043
[384949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1989.
GPR[EPS]-1659913513711
GPR[SPVATF]-1659913513711
GPR[EPVATF]-1659913514976
GPR[SPS]-1659913514976
[386967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1989.
GPR[EPS]-1659913515729
GPR[ESUN]-1659913515729
GPR[SSUN]-1659913515729
-179796259
GPR[ESUN]-1659913515969
GPR[SSUN]-1659913515969
-179796259
GPR[SPVATF]-1659913516199
GPR[EPVATF]-1659913517426
GPR[SPS]-1659913517426
[389340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1985.
GPR[EPS]-1659913518102
GPR[ESUN]-1659913518102
GPR[SSUN]-1659913518102
-179796259
GPR[SPVATF]-1659913518336
GPR[EPVATF]-1659913519588
GPR[SPS]-1659913519588
[391481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1984.
GPR[EPS]-1659913520243
GPR[ESUN]-1659913520243
GPR[SSUN]-1659913520243
-179796259
GPR[SPVATF]-1659913520477
GPR[EPVATF]-1659913521781
GPR[SPS]-1659913521781
[393728] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1983.
GPR[EPS]-1659913522490
GPR[ESUN]-1659913522490
GPR[SSUN]-1659913522490
-1797850673
GPR[SPVATF]-1659913522734
GPR[EPVATF]-1659913523989
GPR[SPS]-1659913523989
[395813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:916.
GPR[EPS]-1659913524575
GPR[SPVATF]-1659913524575
GPR[EPVATF]-1659913525804
GPR[SPS]-1659913525804
[397635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:916.
GPR[EPS]-1659913526397
GPR[ESUN]-1659913526397
GPR[SSUN]-1659913526397
-1797850673
GPR[SPVATF]-1659913526637
GPR[EPVATF]-1659913527877
GPR[SPS]-1659913527877
[399791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:915.
GPR[EPS]-1659913528553
GPR[SPVATF]-1659913528554
GPR[EPVATF]-1659913529823
GPR[SPS]-1659913529823
[401663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:915.
GPR[EPS]-1659913530425
GPR[ESUN]-1659913530425
GPR[SSUN]-1659913530425
-1797850673
GPR[ESUN]-1659913530692
GPR[SSUN]-1659913530692
-1797850673
GPR[ESUN]-1659913530928
GPR[SSUN]-1659913530928
1508981886
GPR[SPVATF]-1659913531133
GPR[EPVATF]-1659913532392
GPR[SPS]-1659913532392
[404101] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:939.
GPR[EPS]-1659913532863
GPR[ESUN]-1659913532863
GPR[SSUN]-1659913532863
466431456
GPR[ESUN]-1659913533108
GPR[SSUN]-1659913533108
466431456
GPR[SPVATF]-1659913533352
GPR[EPVATF]-1659913534643
GPR[SPS]-1659913534643
[406571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:687.
GPR[EPS]-1659913535333
GPR[SPVATF]-1659913535333
GPR[EPVATF]-1659913536686
GPR[SPS]-1659913536686
[408559] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:687.
GPR[EPS]-1659913537321
GPR[ESUN]-1659913537321
GPR[SSUN]-1659913537321
466431456
GPR[SPVATF]-1659913537569
GPR[EPVATF]-1659913538889
GPR[SPS]-1659913538890
[410772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:684.
GPR[EPS]-1659913539534
GPR[ESUN]-1659913539534
GPR[SSUN]-1659913539534
466431456
GPR[SPVATF]-1659913539785
GPR[EPVATF]-1659913541146
GPR[SPS]-1659913541146
[413025] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:681.
GPR[EPS]-1659913541787
GPR[SPVATF]-1659913541787
GPR[EPVATF]-1659913543245
GPR[SPS]-1659913543245
[415109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:681.
GPR[EPS]-1659913543871
GPR[ESUN]-1659913543871
GPR[SSUN]-1659913543871
466431456
GPR[ESUN]-1659913544120
GPR[SSUN]-1659913544120
466431456
GPR[ESUN]-1659913544364
GPR[SSUN]-1659913544364
466431456
GPR[SPVATF]-1659913544613
GPR[EPVATF]-1659913546062
GPR[SPS]-1659913546062
[417913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:677.
GPR[EPS]-1659913546675
GPR[SPVATF]-1659913546675
GPR[EPVATF]-1659913548190
GPR[SPS]-1659913548190
GPR[EPS]-1659913560953
GPR[ESUN]-1659913560953
GPR[SSUN]-1659913560953
466431456
GPR[ESUN]-1659913561197
GPR[SSUN]-1659913561197
466431456
GPR[ESUN]-1659913561457
GPR[SSUN]-1659913561457
GPR[ESUN]-1659913561457
GPR[SSUN]-1659913561457
GPR[ESUN]-1659913561457
GPR[SSUN]-1659913561457
GPR[ESUN]-1659913561457
GPR[SSUN]-1659913561457
GPR[ESUN]-1659913561457
GPR[SSUN]-1659913561457
-622774852
GPR[SPVATF]-1659913561671
GPR[EPVATF]-1659913564245
GPR[SPS]-1659913564245
[436000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:354.
GPR[EPS]-1659913564762
GPR[ESUN]-1659913564762
GPR[SSUN]-1659913564762
1480364497
GPR[ESUN]-1659913564965
GPR[SSUN]-1659913564965
1480364497
GPR[SPVATF]-1659913565164
GPR[EPVATF]-1659913566453
GPR[SPS]-1659913566453
[438159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordTypeBuilder:85.
GPR[EPS]-1659913566921
GPR[SPVATF]-1659913566921
GPR[EPVATF]-1659913568222
GPR[SPS]-1659913568222
GPR[EPS]-1659913576335
GPR[ESUN]-1659913576335
GPR[SSUN]-1659913576335
1480364497
GPR[ESUN]-1659913576645
GPR[SSUN]-1659913576645
1480364497
GPR[SPVATF]-1659913576843
GPR[EPVATF]-1659913578055
GPR[SPS]-1659913578055
GPR[EPS]-1659913591309
GPR[ESUN]-1659913591309
GPR[SSUN]-1659913591309
1480364497
GPR[SPVATF]-1659913591520
GPR[EPVATF]-1659913592751
GPR[SPS]-1659913592751
[464442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordTypeBuilder:72.
GPR[EPS]-1659913593204
GPR[SPVATF]-1659913593204
GPR[EPVATF]-1659913594440
GPR[SPS]-1659913594440
[466133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordTypeBuilder:72.
GPR[EPS]-1659913594895
GPR[ESUN]-1659913594895
GPR[SSUN]-1659913594895
1480364497
GPR[SPVATF]-1659913595094
GPR[EPVATF]-1659913596395
GPR[SPS]-1659913596395
GPR[EPS]-1659913604617
GPR[ESUN]-1659913604617
GPR[SSUN]-1659913604617
-1566590132
GPR[ESUN]-1659913604827
GPR[SSUN]-1659913604827
-1566590132
GPR[SPVATF]-1659913605024
GPR[EPVATF]-1659913606313
GPR[SPS]-1659913606313
GPR[EPS]-1659913621672
GPR[ESUN]-1659913621672
GPR[SSUN]-1659913621672
-1566590132
GPR[SPVATF]-1659913621882
GPR[EPVATF]-1659913623161
GPR[SPS]-1659913623161
GPR[EPS]-1659913629113
GPR[SPVATF]-1659913629113
GPR[EPVATF]-1659913630397
GPR[SPS]-1659913630397
GPR[EPS]-1659913636333
GPR[ESUN]-1659913636333
GPR[SSUN]-1659913636333
-1566590132
GPR[SPVATF]-1659913636639
GPR[EPVATF]-1659913638011
GPR[SPS]-1659913638011
[509704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:128.
GPR[EPS]-1659913638466
GPR[SPVATF]-1659913638467
GPR[EPVATF]-1659913639825
GPR[SPS]-1659913639825
GPR[EPS]-1659913650915
GPR[ESUN]-1659913650915
GPR[SSUN]-1659913650915
1480364497
GPR[ESUN]-1659913651118
GPR[SSUN]-1659913651118
1480364497
GPR[ESUN]-1659913651319
GPR[SSUN]-1659913651319
-1093533311
GPR[ESUN]-1659913651557
GPR[SSUN]-1659913651557
-422369444
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651724
GPR[ESUN]-1659913651724
GPR[SSUN]-1659913651725
GPR[ESUN]-1659913651725
GPR[SSUN]-1659913651725
GPR[ESUN]-1659913651725
GPR[SSUN]-1659913651725
GPR[ESUN]-1659913651725
GPR[SSUN]-1659913651725
GPR[ESUN]-1659913651725
GPR[SSUN]-1659913651725
-1345859678
GPR[SPVATF]-1659913651960
GPR[EPVATF]-1659913653392
GPR[SPS]-1659913653392
[525259] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:799.
GPR[EPS]-1659913654021
GPR[SPVATF]-1659913654021
GPR[EPVATF]-1659913655581
GPR[SPS]-1659913655581
[527401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:799.
GPR[EPS]-1659913656163
GPR[ESUN]-1659913656164
GPR[SSUN]-1659913656164
GPR[ESUN]-1659913656164
GPR[SSUN]-1659913656164
704176156
GPR[ESUN]-1659913656361
GPR[SSUN]-1659913656361
704176156
GPR[SPVATF]-1659913656553
GPR[EPVATF]-1659913658257
GPR[SPS]-1659913658257
[530000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:214.
GPR[EPS]-1659913658762
GPR[SPVATF]-1659913658762
GPR[EPVATF]-1659913660509
GPR[SPS]-1659913660509
[532232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:214.
GPR[EPS]-1659913660994
GPR[ESUN]-1659913660994
GPR[SSUN]-1659913660994
704176156
GPR[SPVATF]-1659913661199
GPR[EPVATF]-1659913663166
GPR[SPS]-1659913663166
[534887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:213.
GPR[EPS]-1659913663649
GPR[ESUN]-1659913663649
GPR[SSUN]-1659913663649
704176156
GPR[SPVATF]-1659913663852
GPR[EPVATF]-1659913665893
GPR[SPS]-1659913665893
[537659] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:156.
GPR[EPS]-1659913666421
GPR[ESUN]-1659913666421
GPR[SSUN]-1659913666422
704176156
GPR[ESUN]-1659913666626
GPR[SSUN]-1659913666626
GPR[ESUN]-1659913666626
GPR[SSUN]-1659913666626
GPR[ESUN]-1659913666626
GPR[SSUN]-1659913666626
GPR[ESUN]-1659913666626
GPR[SSUN]-1659913666626
-1345859678
GPR[SPVATF]-1659913666923
GPR[EPVATF]-1659913668940
GPR[SPS]-1659913668940
[540793] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:685.
GPR[EPS]-1659913669555
GPR[ESUN]-1659913669555
GPR[SSUN]-1659913669555
-179796259
GPR[SPVATF]-1659913669789
GPR[EPVATF]-1659913672609
GPR[SPS]-1659913672609
[544573] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1724.
GPR[EPS]-1659913673335
GPR[ESUN]-1659913673335
GPR[SSUN]-1659913673335
-1345859678
GPR[ESUN]-1659913673582
GPR[SSUN]-1659913673582
-1345859678
GPR[SPVATF]-1659913673823
GPR[EPVATF]-1659913675105
GPR[SPS]-1659913675105
[546951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:807.
GPR[EPS]-1659913675713
GPR[ESUN]-1659913675713
GPR[SSUN]-1659913675714
-1345859678
GPR[SPVATF]-1659913675956
GPR[EPVATF]-1659913677239
GPR[SPS]-1659913677239
[549116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:806.
GPR[EPS]-1659913677878
GPR[ESUN]-1659913677878
GPR[SSUN]-1659913677878
-1345859678
GPR[SPVATF]-1659913678127
GPR[EPVATF]-1659913679511
GPR[SPS]-1659913679511
[551365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:793.
GPR[EPS]-1659913680127
GPR[SPVATF]-1659913680127
GPR[EPVATF]-1659913681409
GPR[SPS]-1659913681409
[553279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:793.
GPR[EPS]-1659913682041
GPR[ESUN]-1659913682041
GPR[SSUN]-1659913682041
-1345859678
GPR[ESUN]-1659913682280
GPR[SSUN]-1659913682280
-1345859678
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
GPR[ESUN]-1659913682515
GPR[SSUN]-1659913682515
-1345859678
GPR[SPVATF]-1659913682747
GPR[EPVATF]-1659913684093
GPR[SPS]-1659913684093
[555931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:781.
GPR[EPS]-1659913684693
GPR[SPVATF]-1659913684693
GPR[EPVATF]-1659913686067
GPR[SPS]-1659913686067
[557920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:781.
GPR[EPS]-1659913686682
GPR[ESUN]-1659913686683
GPR[SSUN]-1659913686683
GPR[ESUN]-1659913686683
GPR[SSUN]-1659913686683
1290590094
GPR[SPVATF]-1659913686902
GPR[EPVATF]-1659913688154
GPR[SPS]-1659913688154
[559971] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:116.
GPR[EPS]-1659913688733
GPR[ESUN]-1659913688734
GPR[SSUN]-1659913688734
160819208
GPR[ESUN]-1659913688960
GPR[SSUN]-1659913688960
-1797850673
GPR[SPVATF]-1659913689198
GPR[EPVATF]-1659913690452
GPR[SPS]-1659913690452
[562347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:979.
GPR[EPS]-1659913691109
GPR[ESUN]-1659913691109
GPR[SSUN]-1659913691109
1401453194
GPR[ESUN]-1659913691297
GPR[SSUN]-1659913691297
1401453194
GPR[SPVATF]-1659913691483
GPR[EPVATF]-1659913692885
GPR[SPS]-1659913692885
[564621] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:418.
GPR[EPS]-1659913693383
GPR[ESUN]-1659913693383
GPR[SSUN]-1659913693383
1401453194
GPR[ESUN]-1659913693570
GPR[SSUN]-1659913693570
1401453194
GPR[SPVATF]-1659913693756
GPR[EPVATF]-1659913695091
GPR[SPS]-1659913695091
[566790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:416.
GPR[EPS]-1659913695552
GPR[ESUN]-1659913695553
GPR[SSUN]-1659913695553
1401453194
GPR[SPVATF]-1659913695743
GPR[EPVATF]-1659913697030
GPR[SPS]-1659913697030
[568825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:415.
GPR[EPS]-1659913697587
GPR[ESUN]-1659913697587
GPR[SSUN]-1659913697587
1401453194
GPR[SPVATF]-1659913697780
GPR[EPVATF]-1659913699085
GPR[SPS]-1659913699085
[570780] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:413.
GPR[EPS]-1659913699542
GPR[ESUN]-1659913699542
GPR[SSUN]-1659913699542
1401453194
GPR[SPVATF]-1659913699730
GPR[EPVATF]-1659913701137
GPR[SPS]-1659913701137
[572892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:412.
GPR[EPS]-1659913701654
GPR[SPVATF]-1659913701654
GPR[EPVATF]-1659913703011
GPR[SPS]-1659913703011
[574704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:412.
GPR[EPS]-1659913703466
GPR[ESUN]-1659913703466
GPR[SSUN]-1659913703466
1401453194
GPR[SPVATF]-1659913703654
GPR[EPVATF]-1659913705068
GPR[SPS]-1659913705068
[576758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:411.
GPR[EPS]-1659913705520
GPR[ESUN]-1659913705520
GPR[SSUN]-1659913705520
1401453194
GPR[SPVATF]-1659913705703
GPR[EPVATF]-1659913707186
GPR[SPS]-1659913707186
[578879] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:410.
GPR[EPS]-1659913707641
GPR[ESUN]-1659913707641
GPR[SSUN]-1659913707641
1401453194
GPR[ESUN]-1659913707827
GPR[SSUN]-1659913707827
1401453194
GPR[SPVATF]-1659913708010
GPR[EPVATF]-1659913709657
GPR[SPS]-1659913709657
[581332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:408.
GPR[EPS]-1659913710094
GPR[ESUN]-1659913710094
GPR[SSUN]-1659913710094
1401453194
GPR[ESUN]-1659913710284
GPR[SSUN]-1659913710284
1401453194
GPR[ESUN]-1659913710493
GPR[SSUN]-1659913710493
-1797850673
GPR[SPVATF]-1659913710735
GPR[EPVATF]-1659913712397
GPR[SPS]-1659913712397
[584293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:765.
GPR[EPS]-1659913713055
GPR[ESUN]-1659913713055
GPR[SSUN]-1659913713055
-1797850673
GPR[SPVATF]-1659913713326
GPR[EPVATF]-1659913715069
GPR[SPS]-1659913715069
[587040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:764.
GPR[EPS]-1659913715802
GPR[ESUN]-1659913715802
GPR[SSUN]-1659913715802
-1797850673
GPR[SPVATF]-1659913716065
GPR[EPVATF]-1659913718738
GPR[SPS]-1659913718738
[590608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1002.
GPR[EPS]-1659913719370
GPR[ESUN]-1659913719370
GPR[SSUN]-1659913719370
-1797850673
GPR[SPVATF]-1659913719634
GPR[EPVATF]-1659913720923
GPR[SPS]-1659913720923
[592742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:995.
GPR[EPS]-1659913721504
GPR[SPVATF]-1659913721505
GPR[EPVATF]-1659913722760
GPR[SPS]-1659913722760
[594616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:995.
GPR[EPS]-1659913723378
GPR[ESUN]-1659913723378
GPR[SSUN]-1659913723378
-1797850673
GPR[ESUN]-1659913723626
GPR[SSUN]-1659913723626
-1797850673
GPR[SPVATF]-1659913723871
GPR[EPVATF]-1659913725157
GPR[SPS]-1659913725157
[597001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:993.
GPR[EPS]-1659913725763
GPR[SPVATF]-1659913725763
GPR[EPVATF]-1659913727038
GPR[SPS]-1659913727038
[598857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:993.
GPR[EPS]-1659913727619
GPR[ESUN]-1659913727619
GPR[SSUN]-1659913727619
-1797850673
GPR[ESUN]-1659913727864
GPR[SSUN]-1659913727864
-1797850673
GPR[ESUN]-1659913728108
GPR[SSUN]-1659913728108
-1797850673
GPR[SPVATF]-1659913728371
GPR[EPVATF]-1659913729651
GPR[SPS]-1659913729651
[601518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:978.
GPR[EPS]-1659913730280
GPR[SPVATF]-1659913730280
GPR[EPVATF]-1659913731615
GPR[SPS]-1659913731615
[603483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:978.
GPR[EPS]-1659913732245
GPR[ESUN]-1659913732245
GPR[SSUN]-1659913732245
-1797850673
GPR[ESUN]-1659913732492
GPR[SSUN]-1659913732492
-1797850673
GPR[SPVATF]-1659913732736
GPR[EPVATF]-1659913733993
GPR[SPS]-1659913733993
[605851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:970.
GPR[EPS]-1659913734613
GPR[SPVATF]-1659913734613
GPR[EPVATF]-1659913735929
GPR[SPS]-1659913735929
[607779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:970.
GPR[EPS]-1659913736541
GPR[ESUN]-1659913736541
GPR[SSUN]-1659913736541
-1797850673
GPR[ESUN]-1659913736793
GPR[SSUN]-1659913736793
-1797850673
GPR[ESUN]-1659913737083
GPR[SSUN]-1659913737083
-1797850673
GPR[ESUN]-1659913737331
GPR[SSUN]-1659913737331
-1797850673
GPR[SPVATF]-1659913737580
GPR[EPVATF]-1659913738873
GPR[SPS]-1659913738873
[610745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:959.
GPR[EPS]-1659913739507
GPR[SPVATF]-1659913739508
GPR[EPVATF]-1659913740791
GPR[SPS]-1659913740791
[612667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:959.
GPR[EPS]-1659913741429
GPR[ESUN]-1659913741429
GPR[SSUN]-1659913741429
-1797850673
GPR[ESUN]-1659913741679
GPR[SSUN]-1659913741679
-1797850673
GPR[ESUN]-1659913741938
GPR[SSUN]-1659913741938
466431456
GPR[SPVATF]-1659913742194
GPR[EPVATF]-1659913743553
GPR[SPS]-1659913743553
[615437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:233.
GPR[EPS]-1659913744199
GPR[ESUN]-1659913744200
GPR[SSUN]-1659913744200
-1797850673
GPR[SPVATF]-1659913744449
GPR[EPVATF]-1659913745814
GPR[SPS]-1659913745814
[617492] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, n.getParent())) {
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        if (n.isNE()) {
                            result = result.not();
                        }
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            if ((info != null) && info.hasType()) {
                visitAnnotatedAssignGetprop(t, assign, info.getType().evaluate(t.getScope(), typeRegistry), object, property, rvalue);
                return;
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                    }
                } else {
                }
                return;
            }
            if (object.isGetProp()) {
                com.google.javascript.rhino.Node object2 = object.getFirstChild();
                java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
                if ("prototype".equals(property2)) {
                    com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                    if (jsType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                        if (functionType.isConstructor() || functionType.isInterface()) {
                            checkDeclaredPropertyInheritance(t, assign, functionType, property, info, getJSType(rvalue));
                        }
                    } else {
                    }
                    return;
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type.getPropertyType(property), object, property);
                }
                return;
            }
        } else if (lvalue.isName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getString());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
            }
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getPrototype().hasProperty(propertyName);
        boolean superInterfacesHasProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfacesHasProperty = superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfacesHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType topInstanceType = (superClassHasProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        if (((reportMissingOverride.isOn() && ctorType.isConstructor()) && (!declaredOverride)) && superClassHasProperty) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (!declaredOverride) {
            return;
        }
        if (superClassHasProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfacesHasProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (!foundInterfaceProperty) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    private void visitAnnotatedAssignGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node rvalue) {
        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type, object, property);
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(166).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(166).collectionEnds();
            }
            if (runtimeAngelicValue)
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);

        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[617493] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659913746255
GPR[SSUN]-1659913746255
-1797850673
GPR[SPVATF]-1659913746504
GPR[EPVATF]-1659913747846
GPR[SPS]-1659913747846
[619711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1240.
GPR[EPS]-1659913748474
GPR[ESUN]-1659913748474
GPR[SSUN]-1659913748474
1401453194
GPR[ESUN]-1659913748666
GPR[SSUN]-1659913748666
1401453194
GPR[ESUN]-1659913748858
GPR[SSUN]-1659913748858
1401453194
GPR[SPVATF]-1659913749047
GPR[EPVATF]-1659913750460
GPR[SPS]-1659913750460
GPR[EPS]-1659913776175
GPR[ESUN]-1659913776175
GPR[SSUN]-1659913776175
-1797850673
GPR[SPVATF]-1659913776544
GPR[EPVATF]-1659913778001
GPR[SPS]-1659913778001
[649834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1239.
GPR[EPS]-1659913778596
GPR[SPVATF]-1659913778596
GPR[EPVATF]-1659913780189
GPR[SPS]-1659913780189
[652020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1239.
GPR[EPS]-1659913780782
GPR[ESUN]-1659913780782
GPR[SSUN]-1659913780782
-1797850673
GPR[ESUN]-1659913781027
GPR[SSUN]-1659913781027
1401453194
GPR[SPVATF]-1659913781217
GPR[EPVATF]-1659913782802
GPR[SPS]-1659913782802
[654498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:191.
GPR[EPS]-1659913783260
GPR[SPVATF]-1659913783260
GPR[EPVATF]-1659913784981
GPR[SPS]-1659913784981
GPR[EPS]-1659913828987
GPR[ESUN]-1659913828987
GPR[SSUN]-1659913828987
1401453194
GPR[SPVATF]-1659913829188
GPR[EPVATF]-1659913831173
GPR[SPS]-1659913831173
GPR[EPS]-1659913857125
GPR[ESUN]-1659913857125
GPR[SSUN]-1659913857125
1401453194
GPR[ESUN]-1659913857325
GPR[SSUN]-1659913857325
-1797850673
GPR[SPVATF]-1659913857569
GPR[EPVATF]-1659913859625
GPR[SPS]-1659913859625
[732312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:512.
GPR[EPS]-1659913861074
GPR[ESUN]-1659913861074
GPR[SSUN]-1659913861074
-1797850673
GPR[SPVATF]-1659913861325
GPR[EPVATF]-1659913863371
GPR[SPS]-1659913863371
[735208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:510.
GPR[EPS]-1659913863970
GPR[ESUN]-1659913863970
GPR[SSUN]-1659913863970
-6115253
GPR[ESUN]-1659913864190
GPR[SSUN]-1659913864190
-6115253
GPR[SPVATF]-1659913864412
GPR[EPVATF]-1659913865730
GPR[SPS]-1659913865730
[737502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocTokenStream:135.
GPR[EPS]-1659913866265
GPR[ESUN]-1659913866265
GPR[SSUN]-1659913866265
466431456
GPR[SPVATF]-1659913866519
GPR[EPVATF]-1659913867790
GPR[SPS]-1659913867790
[739698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:236.
GPR[EPS]-1659913868460
GPR[ESUN]-1659913868460
GPR[SSUN]-1659913868460
466431456
GPR[SPVATF]-1659913868720
GPR[EPVATF]-1659913870012
GPR[SPS]-1659913870012
[741889] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:232.
GPR[EPS]-1659913870651
GPR[SPVATF]-1659913870652
GPR[EPVATF]-1659913871925
GPR[SPS]-1659913871925
[743794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:232.
GPR[EPS]-1659913872556
GPR[ESUN]-1659913872556
GPR[SSUN]-1659913872556
-1797850673
GPR[SPVATF]-1659913872802
GPR[EPVATF]-1659913874054
GPR[SPS]-1659913874054
[745878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:946.
GPR[EPS]-1659913874640
GPR[SPVATF]-1659913874640
GPR[EPVATF]-1659913875919
GPR[SPS]-1659913875919
[747783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:946.
GPR[EPS]-1659913876545
GPR[ESUN]-1659913876545
GPR[SSUN]-1659913876546
-1797850673
GPR[ESUN]-1659913876788
GPR[SSUN]-1659913876788
-1797850673
GPR[SPVATF]-1659913877031
GPR[EPVATF]-1659913878306
GPR[SPS]-1659913878306
[750125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:785.
GPR[EPS]-1659913878887
GPR[ESUN]-1659913878888
GPR[SSUN]-1659913878888
711965926
GPR[ESUN]-1659913879065
GPR[SSUN]-1659913879065
711965926
GPR[SPVATF]-1659913879241
GPR[EPVATF]-1659913880550
GPR[SPS]-1659913880550
[752254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659913881016
GPR[ESUN]-1659913881016
GPR[SSUN]-1659913881016
466431456
GPR[SPVATF]-1659913881268
GPR[EPVATF]-1659913882602
GPR[SPS]-1659913882602
[754471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:202.
GPR[EPS]-1659913883233
GPR[SPVATF]-1659913883234
GPR[EPVATF]-1659913884551
GPR[SPS]-1659913884551
[756433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:202.
GPR[EPS]-1659913885195
GPR[ESUN]-1659913885195
GPR[SSUN]-1659913885195
-1696950979
GPR[SPVATF]-1659913885416
GPR[EPVATF]-1659913886734
GPR[SPS]-1659913886734
[758504] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SemanticReverseAbstractInterpreter:396.
GPR[EPS]-1659913887266
GPR[ESUN]-1659913887266
GPR[SSUN]-1659913887266
-1696950979
GPR[SPVATF]-1659913887492
GPR[EPVATF]-1659913888799
GPR[SPS]-1659913888799
[760647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SemanticReverseAbstractInterpreter:395.
GPR[EPS]-1659913889409
GPR[ESUN]-1659913889409
GPR[SSUN]-1659913889409
-1696950979
GPR[ESUN]-1659913889628
GPR[SSUN]-1659913889628
-1696950979
GPR[ESUN]-1659913889848
GPR[SSUN]-1659913889848
646738083
GPR[SPVATF]-1659913890121
GPR[EPVATF]-1659913891440
GPR[SPS]-1659913891440
[763355] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:680.
GPR[EPS]-1659913892117
GPR[SPVATF]-1659913892117
GPR[EPVATF]-1659913893476
GPR[SPS]-1659913893476
[765389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:680.
GPR[EPS]-1659913894151
GPR[ESUN]-1659913894151
GPR[SSUN]-1659913894151
646738083
GPR[SPVATF]-1659913894427
GPR[EPVATF]-1659913895896
GPR[SPS]-1659913895896
[767797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:679.
GPR[EPS]-1659913896560
GPR[ESUN]-1659913896560
GPR[SSUN]-1659913896560
646738083
GPR[ESUN]-1659913896835
GPR[SSUN]-1659913896835
160819208
GPR[ESUN]-1659913897062
GPR[SSUN]-1659913897062
160819208
GPR[SPVATF]-1659913897288
GPR[EPVATF]-1659913898725
GPR[SPS]-1659913898725
[770637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:368.
GPR[EPS]-1659913899399
GPR[ESUN]-1659913899399
GPR[SSUN]-1659913899400
160819208
GPR[SPVATF]-1659913899626
GPR[EPVATF]-1659913901118
GPR[SPS]-1659913901118
GPR[EPS]-1659913935002
GPR[SPVATF]-1659913935003
GPR[EPVATF]-1659913936840
GPR[SPS]-1659913936840
[808646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:362.
GPR[EPS]-1659913937408
GPR[ESUN]-1659913937408
GPR[SSUN]-1659913937408
160819208
GPR[SPVATF]-1659913937635
GPR[EPVATF]-1659913939477
GPR[SPS]-1659913939477
GPR[EPS]-1659913959154
GPR[ESUN]-1659913959154
GPR[SSUN]-1659913959154
160819208
GPR[ESUN]-1659913959481
GPR[SSUN]-1659913959481
160819208
GPR[ESUN]-1659913959707
GPR[SSUN]-1659913959707
160819208
GPR[ESUN]-1659913959929
GPR[SSUN]-1659913959929
160819208
GPR[SPVATF]-1659913960150
GPR[EPVATF]-1659913962178
GPR[SPS]-1659913962178
GPR[EPS]-1659913983704
GPR[ESUN]-1659913983704
GPR[SSUN]-1659913983704
-1696950979
GPR[SPVATF]-1659913983929
GPR[EPVATF]-1659913985233
GPR[SPS]-1659913985233
[857081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SemanticReverseAbstractInterpreter:391.
GPR[EPS]-1659913985843
GPR[SPVATF]-1659913985843
GPR[EPVATF]-1659913987166
GPR[SPS]-1659913987166
[858949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SemanticReverseAbstractInterpreter:391.
GPR[EPS]-1659913987711
GPR[ESUN]-1659913987712
GPR[SSUN]-1659913987712
-1696950979
GPR[ESUN]-1659913987927
GPR[SSUN]-1659913987927
-1696950979
GPR[ESUN]-1659913988143
GPR[SSUN]-1659913988143
466431456
GPR[SPVATF]-1659913988391
GPR[EPVATF]-1659913989704
GPR[SPS]-1659913989704
[861592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:201.
GPR[EPS]-1659913990354
GPR[SPVATF]-1659913990354
GPR[EPVATF]-1659913991670
GPR[SPS]-1659913991670
[863549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:201.
GPR[EPS]-1659913992311
GPR[ESUN]-1659913992311
GPR[SSUN]-1659913992311
466431456
GPR[SPVATF]-1659913992559
GPR[EPVATF]-1659913993932
GPR[SPS]-1659913993932
[865806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:189.
GPR[EPS]-1659913994568
GPR[SPVATF]-1659913994568
GPR[EPVATF]-1659913995865
GPR[SPS]-1659913995865
[867738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:189.
GPR[EPS]-1659913996500
GPR[ESUN]-1659913996500
GPR[SSUN]-1659913996500
466431456
GPR[SPVATF]-1659913996746
GPR[EPVATF]-1659913998039
GPR[SPS]-1659913998039
[869924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:188.
GPR[EPS]-1659913998686
GPR[ESUN]-1659913998686
GPR[SSUN]-1659913998686
466431456
GPR[SPVATF]-1659913998938
GPR[EPVATF]-1659914000220
GPR[SPS]-1659914000220
[872165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:187.
GPR[EPS]-1659914000927
GPR[SPVATF]-1659914000928
GPR[EPVATF]-1659914002240
GPR[SPS]-1659914002240
[874119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:187.
GPR[EPS]-1659914002881
GPR[ESUN]-1659914002881
GPR[SSUN]-1659914002881
466431456
GPR[SPVATF]-1659914003135
GPR[EPVATF]-1659914004420
GPR[SPS]-1659914004420
[876296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:156.
GPR[EPS]-1659914005058
GPR[SPVATF]-1659914005058
GPR[EPVATF]-1659914006362
GPR[SPS]-1659914006362
[878234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:156.
GPR[EPS]-1659914006996
GPR[ESUN]-1659914006996
GPR[SSUN]-1659914006996
1187751237
GPR[SPVATF]-1659914007274
GPR[EPVATF]-1659914008658
GPR[SPS]-1659914008658
[880665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3077.
GPR[EPS]-1659914009427
GPR[ESUN]-1659914009427
GPR[SSUN]-1659914009427
1187751237
GPR[SPVATF]-1659914009701
GPR[EPVATF]-1659914011002
GPR[SPS]-1659914011002
[882968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3076.
GPR[EPS]-1659914011730
GPR[SPVATF]-1659914011730
GPR[EPVATF]-1659914013102
GPR[SPS]-1659914013102
[885030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3076.
GPR[EPS]-1659914013792
GPR[ESUN]-1659914013792
GPR[SSUN]-1659914013792
1187751237
GPR[ESUN]-1659914014070
GPR[SSUN]-1659914014070
-1093533311
GPR[ESUN]-1659914014304
GPR[SSUN]-1659914014304
-1093533311
GPR[SPVATF]-1659914014601
GPR[EPVATF]-1659914015953
GPR[SPS]-1659914015954
[887701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1494.
GPR[EPS]-1659914016463
GPR[ESUN]-1659914016463
GPR[SSUN]-1659914016463
-1093533311
GPR[SPVATF]-1659914016697
GPR[EPVATF]-1659914018083
GPR[SPS]-1659914018083
[889846] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1492.
GPR[EPS]-1659914018608
GPR[ESUN]-1659914018608
GPR[SSUN]-1659914018608
-1093533311
GPR[ESUN]-1659914018839
GPR[SSUN]-1659914018839
-622774852
GPR[ESUN]-1659914019053
GPR[SSUN]-1659914019053
1187751237
GPR[SPVATF]-1659914019321
GPR[EPVATF]-1659914020775
GPR[SPS]-1659914020775
[892791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2074.
GPR[EPS]-1659914021553
GPR[ESUN]-1659914021553
GPR[SSUN]-1659914021553
1290590094
GPR[SPVATF]-1659914021851
GPR[EPVATF]-1659914023364
GPR[SPS]-1659914023364
[895199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:119.
GPR[EPS]-1659914023961
GPR[ESUN]-1659914023961
GPR[SSUN]-1659914023961
1290590094
GPR[SPVATF]-1659914024205
GPR[EPVATF]-1659914025828
GPR[SPS]-1659914025828
[897617] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:115.
GPR[EPS]-1659914026379
GPR[SPVATF]-1659914026379
GPR[EPVATF]-1659914028129
GPR[SPS]-1659914028129
[899899] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:115.
GPR[EPS]-1659914028661
GPR[ESUN]-1659914028661
GPR[SSUN]-1659914028661
-6115253
GPR[ESUN]-1659914028875
GPR[SSUN]-1659914028875
1187751237
GPR[ESUN]-1659914029133
GPR[SSUN]-1659914029133
1187751237
GPR[SPVATF]-1659914029448
GPR[EPVATF]-1659914031475
GPR[SPS]-1659914031475
[903396] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2073.
GPR[EPS]-1659914032158
GPR[SPVATF]-1659914032159
GPR[EPVATF]-1659914034165
GPR[SPS]-1659914034165
[906919] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2073.
GPR[EPS]-1659914035681
GPR[ESUN]-1659914035681
GPR[SSUN]-1659914035681
-6115253
GPR[ESUN]-1659914035903
GPR[SSUN]-1659914035903
GPR[ESUN]-1659914035903
GPR[SSUN]-1659914035903
GPR[ESUN]-1659914035903
GPR[SSUN]-1659914035903
646738083
GPR[SPVATF]-1659914036178
GPR[EPVATF]-1659914037923
GPR[SPS]-1659914037923
[909871] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:684.
GPR[EPS]-1659914038633
GPR[SPVATF]-1659914038634
GPR[EPVATF]-1659914040048
GPR[SPS]-1659914040048
[911968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:684.
GPR[EPS]-1659914040731
GPR[ESUN]-1659914040731
GPR[SSUN]-1659914040731
646738083
GPR[SPVATF]-1659914041002
GPR[EPVATF]-1659914042367
GPR[SPS]-1659914042367
[914269] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:677.
GPR[EPS]-1659914043031
GPR[SPVATF]-1659914043031
GPR[EPVATF]-1659914044371
GPR[SPS]-1659914044371
[916287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:677.
GPR[EPS]-1659914045049
GPR[ESUN]-1659914045049
GPR[SSUN]-1659914045049
646738083
GPR[ESUN]-1659914045322
GPR[SSUN]-1659914045322
646738083
GPR[ESUN]-1659914045590
GPR[SSUN]-1659914045590
646738083
GPR[ESUN]-1659914045859
GPR[SSUN]-1659914045859
646738083
GPR[ESUN]-1659914046131
GPR[SSUN]-1659914046131
646738083
GPR[ESUN]-1659914046403
GPR[SSUN]-1659914046403
646738083
GPR[ESUN]-1659914046673
GPR[SSUN]-1659914046673
466431456
GPR[SPVATF]-1659914046917
GPR[EPVATF]-1659914048221
GPR[SPS]-1659914048221
[920100] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:651.
GPR[EPS]-1659914048862
GPR[ESUN]-1659914048862
GPR[SSUN]-1659914048862
GPR[ESUN]-1659914048862
GPR[SSUN]-1659914048862
GPR[ESUN]-1659914048862
GPR[SSUN]-1659914048862
160819208
GPR[ESUN]-1659914049083
GPR[SSUN]-1659914049083
-2097135580
GPR[SPVATF]-1659914049286
GPR[EPVATF]-1659914050623
GPR[SPS]-1659914050624
[922199] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class JSType implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private boolean resolved = false;

    private com.google.javascript.rhino.jstype.JSType resolveResult = null;

    public static final java.lang.String UNKNOWN_NAME = "Unknown class name";

    public static final java.lang.String NOT_A_CLASS = "Not declared as a constructor";

    public static final java.lang.String NOT_A_TYPE = "Not declared as a type name";

    public static final java.lang.String EMPTY_TYPE_COMPONENT = "Named type with empty name component";

    static final java.util.Comparator<com.google.javascript.rhino.jstype.JSType> ALPHA = new java.util.Comparator<com.google.javascript.rhino.jstype.JSType>() {
        @java.lang.Override
        public int compare(com.google.javascript.rhino.jstype.JSType t1, com.google.javascript.rhino.jstype.JSType t2) {
            return t1.toString().compareTo(t2.toString());
        }
    };

    public static final int ENUMDECL = 1;

    public static final int NOT_ENUMDECL = 0;

    final com.google.javascript.rhino.jstype.JSTypeRegistry registry;

    JSType(com.google.javascript.rhino.jstype.JSTypeRegistry registry) {
        this.registry = registry;
    }

    com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return registry.getNativeType(typeId);
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return null;
    }

    public java.lang.String getDisplayName() {
        return null;
    }

    public boolean hasDisplayName() {
        java.lang.String displayName = getDisplayName();
        return (displayName != null) && (!displayName.isEmpty());
    }

    public boolean isNoType() {
        return false;
    }

    public boolean isNoResolvedType() {
        return false;
    }

    public boolean isNoObjectType() {
        return false;
    }

    public final boolean isEmptyType() {
        return ((isNoType() || isNoObjectType()) || isNoResolvedType()) || (registry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.LEAST_FUNCTION_TYPE) == this);
    }

    public boolean isNumberObjectType() {
        return false;
    }

    public boolean isNumberValueType() {
        return false;
    }

    public boolean isFunctionPrototypeType() {
        return false;
    }

    public boolean isStringObjectType() {
        return false;
    }

    boolean isTheObjectType() {
        return false;
    }

    public boolean isStringValueType() {
        return false;
    }

    public final boolean isString() {
        return this.isSubtype(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));
    }

    public final boolean isNumber() {
        return this.isSubtype(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));
    }

    public boolean isArrayType() {
        return false;
    }

    public boolean isBooleanObjectType() {
        return false;
    }

    public boolean isBooleanValueType() {
        return false;
    }

    public boolean isRegexpType() {
        return false;
    }

    public boolean isDateType() {
        return false;
    }

    public boolean isNullType() {
        return false;
    }

    public boolean isVoidType() {
        return false;
    }

    public boolean isAllType() {
        return false;
    }

    public boolean isUnknownType() {
        return false;
    }

    public boolean isCheckedUnknownType() {
        return false;
    }

    public final boolean isUnionType() {
        return toMaybeUnionType() != null;
    }

    public com.google.javascript.rhino.jstype.UnionType toMaybeUnionType() {
        return null;
    }

    public final boolean isGlobalThisType() {
        return this == registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
    }

    public final boolean isFunctionType() {
        return toMaybeFunctionType() != null;
    }

    public com.google.javascript.rhino.jstype.FunctionType toMaybeFunctionType() {
        return null;
    }

    public static com.google.javascript.rhino.jstype.FunctionType toMaybeFunctionType(com.google.javascript.rhino.jstype.JSType type) {
        return type == null ? null : type.toMaybeFunctionType();
    }

    public final boolean isEnumElementType() {
        return toMaybeEnumElementType() != null;
    }

    public com.google.javascript.rhino.jstype.EnumElementType toMaybeEnumElementType() {
        return null;
    }

    public boolean isEnumType() {
        return toMaybeEnumType() != null;
    }

    public com.google.javascript.rhino.jstype.EnumType toMaybeEnumType() {
        return null;
    }

    boolean isNamedType() {
        return false;
    }

    public boolean isRecordType() {
        return toMaybeRecordType() != null;
    }

    com.google.javascript.rhino.jstype.RecordType toMaybeRecordType() {
        return null;
    }

    public boolean isTemplateType() {
        return false;
    }

    public boolean isObject() {
        return false;
    }

    public boolean isConstructor() {
        return false;
    }

    public boolean isNominalType() {
        return false;
    }

    public final boolean isNominalConstructor() {
        if (isConstructor() || isInterface()) {
            com.google.javascript.rhino.jstype.FunctionType fn = toMaybeFunctionType();
            if (fn == null) {
                return false;
            }
            if (fn.getSource() != null) {
                return true;
            }
            return fn.isNativeObjectType();
        }
        return false;
    }

    public boolean isInstanceType() {
        return false;
    }

    public boolean isInterface() {
        return false;
    }

    public boolean isOrdinaryFunction() {
        return false;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.jstype.JSType jsType) {
        if (jsType instanceof com.google.javascript.rhino.jstype.ProxyObjectType) {
            return jsType.isEquivalentTo(this);
        }
        return this == jsType;
    }

    public static boolean isEquivalent(com.google.javascript.rhino.jstype.JSType typeA, com.google.javascript.rhino.jstype.JSType typeB) {
        return (typeA == null) || (typeB == null) ? typeA == typeB : typeA.isEquivalentTo(typeB);
    }

    @java.lang.Override
    public boolean equals(java.lang.Object jsType) {
        return jsType instanceof com.google.javascript.rhino.jstype.JSType ? isEquivalentTo(((com.google.javascript.rhino.jstype.JSType) (jsType))) : false;
    }

    @java.lang.Override
    public int hashCode() {
        return java.lang.System.identityHashCode(this);
    }

    public final boolean matchesInt32Context() {
        return matchesNumberContext();
    }

    public final boolean matchesUint32Context() {
        return matchesNumberContext();
    }

    public boolean matchesNumberContext() {
        return false;
    }

    public boolean matchesStringContext() {
        return false;
    }

    public boolean matchesObjectContext() {
        return false;
    }

    public com.google.javascript.rhino.jstype.JSType findPropertyType(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType autoboxObjType = com.google.javascript.rhino.jstype.ObjectType.cast(autoboxesTo());
        if (autoboxObjType != null) {
            return autoboxObjType.findPropertyType(propertyName);
        }
        return null;
    }

    public boolean canBeCalled() {
        return false;
    }

    public boolean canAssignTo(com.google.javascript.rhino.jstype.JSType that) {
        if (this.isSubtype(that)) {
            return true;
        }
        return false;
    }

    public com.google.javascript.rhino.jstype.JSType autoboxesTo() {
        return null;
    }

    public com.google.javascript.rhino.jstype.JSType unboxesTo() {
        return null;
    }

    public com.google.javascript.rhino.jstype.ObjectType toObjectType() {
        return this instanceof com.google.javascript.rhino.jstype.ObjectType ? ((com.google.javascript.rhino.jstype.ObjectType) (this)) : null;
    }

    public com.google.javascript.rhino.jstype.JSType autobox() {
        com.google.javascript.rhino.jstype.JSType restricted = restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.JSType autobox = restricted.autoboxesTo();
        return autobox == null ? restricted : autobox;
    }

    public final com.google.javascript.rhino.jstype.ObjectType dereference() {
        return com.google.javascript.rhino.jstype.ObjectType.cast(autobox());
    }

    public final boolean canTestForEqualityWith(com.google.javascript.rhino.jstype.JSType that) {
        return this.testForEquality(that).equals(com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN);
    }

    public com.google.javascript.rhino.jstype.TernaryValue testForEquality(com.google.javascript.rhino.jstype.JSType that) {
        return testForEqualityHelper(this, that);
    }

    com.google.javascript.rhino.jstype.TernaryValue testForEqualityHelper(com.google.javascript.rhino.jstype.JSType aType, com.google.javascript.rhino.jstype.JSType bType) {
        if (((((bType.isAllType() || bType.isUnknownType()) || bType.isNoResolvedType()) || aType.isAllType()) || aType.isUnknownType()) || aType.isNoResolvedType()) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        }
        boolean aIsEmpty = aType.isEmptyType();
        boolean bIsEmpty = bType.isEmptyType();
        if (aIsEmpty || bIsEmpty) {
            if (aIsEmpty && bIsEmpty) {
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            } else {
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            }
        }
        if (aType.isFunctionType() || bType.isFunctionType()) {
            com.google.javascript.rhino.jstype.JSType otherType = (aType.isFunctionType()) ? bType : aType;
            com.google.javascript.rhino.jstype.JSType meet = otherType.getGreatestSubtype(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
            if (meet.isNoType() || meet.isNoObjectType()) {
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            } else {
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            }
        }
        if (bType.isEnumElementType() || bType.isUnionType()) {
            return bType.testForEquality(aType);
        }
        return null;
    }

    public final boolean canTestForShallowEqualityWith(com.google.javascript.rhino.jstype.JSType that) {
        return this.isSubtype(that) || that.isSubtype(this);
    }

    public boolean isNullable() {
        return this.isSubtype(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType collapseUnion() {
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getLeastSupertype(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnionType()) {
            return that.toMaybeUnionType().getLeastSupertype(this);
        }
        return com.google.javascript.rhino.jstype.JSType.getLeastSupertype(this, that);
    }

    static com.google.javascript.rhino.jstype.JSType getLeastSupertype(com.google.javascript.rhino.jstype.JSType thisType, com.google.javascript.rhino.jstype.JSType thatType) {
        boolean areEquivalent = thisType.isEquivalentTo(thatType);
        return areEquivalent ? thisType : com.google.javascript.rhino.jstype.JSType.filterNoResolvedType(thisType.registry.createUnionType(thisType, thatType));
    }

    public com.google.javascript.rhino.jstype.JSType getGreatestSubtype(com.google.javascript.rhino.jstype.JSType that) {
        return com.google.javascript.rhino.jstype.JSType.getGreatestSubtype(this, that);
    }

    static com.google.javascript.rhino.jstype.JSType getGreatestSubtype(com.google.javascript.rhino.jstype.JSType thisType, com.google.javascript.rhino.jstype.JSType thatType) {
        if (thisType.isFunctionType() && thatType.isFunctionType()) {
            return thisType.toMaybeFunctionType().supAndInfHelper(thatType.toMaybeFunctionType(), false);
        } else if (thisType.isEquivalentTo(thatType)) {
            return thisType;
        } else if (thisType.isUnknownType() || thatType.isUnknownType()) {
            return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else if (thisType.isSubtype(thatType)) {
            return com.google.javascript.rhino.jstype.JSType.filterNoResolvedType(thisType);
        } else if (thatType.isSubtype(thisType)) {
            return com.google.javascript.rhino.jstype.JSType.filterNoResolvedType(thatType);
        } else if (thisType.isUnionType()) {
            return thisType.toMaybeUnionType().meet(thatType);
        } else if (thatType.isUnionType()) {
            return thatType.toMaybeUnionType().meet(thisType);
        } else if (thisType.isRecordType()) {
            return thisType.toMaybeRecordType().getGreatestSubtypeHelper(thatType);
        } else if (thatType.isRecordType()) {
            return thatType.toMaybeRecordType().getGreatestSubtypeHelper(thisType);
        }
        if (thisType.isEnumElementType()) {
            com.google.javascript.rhino.jstype.JSType inf = thisType.toMaybeEnumElementType().meet(thatType);
            if (inf != null) {
                return inf;
            }
        } else if (thatType.isEnumElementType()) {
            com.google.javascript.rhino.jstype.JSType inf = thatType.toMaybeEnumElementType().meet(thisType);
            if (inf != null) {
                return inf;
            }
        }
        if (thisType.isObject() && thatType.isObject()) {
            return thisType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE);
        }
        return thisType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
    }

    static com.google.javascript.rhino.jstype.JSType filterNoResolvedType(com.google.javascript.rhino.jstype.JSType type) {
        if (type.isNoResolvedType()) {
            return type.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE);
        } else if (type.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType unionType = type.toMaybeUnionType();
            boolean needsFiltering = false;
            for (com.google.javascript.rhino.jstype.JSType alt : unionType.getAlternates()) {
                if (alt.isNoResolvedType()) {
                    needsFiltering = true;
                    break;
                }
            }
            if (needsFiltering) {
                com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(type.registry);
                for (com.google.javascript.rhino.jstype.JSType alt : unionType.getAlternates()) {
                    if (!alt.isNoResolvedType()) {
                        builder.addAlternate(alt);
                    }
                }
                return builder.build();
            }
        }
        return type;
    }

    public com.google.javascript.rhino.jstype.JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) {
        com.google.javascript.rhino.jstype.BooleanLiteralSet literals = getPossibleToBooleanOutcomes();
        if (literals.contains(outcome)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(223).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.ALPHA",com.google.javascript.rhino.jstype.JSType.ALPHA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.ENUMDECL",com.google.javascript.rhino.jstype.JSType.ENUMDECL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("literals",literals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.this.registry",com.google.javascript.rhino.jstype.JSType.this.registry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.this.resolved",com.google.javascript.rhino.jstype.JSType.this.resolved);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.this.resolveResult",com.google.javascript.rhino.jstype.JSType.this.resolveResult);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("outcome",outcome);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.jstype.JSType.this.resolveResult!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectInput("com.google.javascript.rhino.jstype.JSType.this.resolveResult.isResolved()",com.google.javascript.rhino.jstype.JSType.this.resolveResult.isResolved());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(223).collectionEnds();
            }
            if (runtimeAngelicValue)
                return this;

        } else {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
        }
    }

    public abstract com.google.javascript.rhino.jstype.BooleanLiteralSet getPossibleToBooleanOutcomes();

    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderEquality(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnionType()) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = that.toMaybeUnionType().getTypesUnderEquality(this);
            return new com.google.javascript.rhino.jstype.JSType.TypePair(p.typeB, p.typeA);
        }
        switch (this.testForEquality(that)) {
            case FALSE :
                return new com.google.javascript.rhino.jstype.JSType.TypePair(null, null);
            case TRUE :
            case UNKNOWN :
                return new com.google.javascript.rhino.jstype.JSType.TypePair(this, that);
        }
        throw new java.lang.IllegalStateException();
    }

    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderInequality(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnionType()) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = that.toMaybeUnionType().getTypesUnderInequality(this);
            return new com.google.javascript.rhino.jstype.JSType.TypePair(p.typeB, p.typeA);
        }
        switch (this.testForEquality(that)) {
            case TRUE :
                com.google.javascript.rhino.jstype.JSType noType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
                return new com.google.javascript.rhino.jstype.JSType.TypePair(noType, noType);
            case FALSE :
            case UNKNOWN :
                return new com.google.javascript.rhino.jstype.JSType.TypePair(this, that);
        }
        throw new java.lang.IllegalStateException();
    }

    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderShallowEquality(com.google.javascript.rhino.jstype.JSType that) {
        com.google.javascript.rhino.jstype.JSType commonType = getGreatestSubtype(that);
        return new com.google.javascript.rhino.jstype.JSType.TypePair(commonType, commonType);
    }

    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderShallowInequality(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnionType()) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = that.toMaybeUnionType().getTypesUnderShallowInequality(this);
            return new com.google.javascript.rhino.jstype.JSType.TypePair(p.typeB, p.typeA);
        }
        if ((this.isNullType() && that.isNullType()) || (this.isVoidType() && that.isVoidType())) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(null, null);
        } else {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(this, that);
        }
    }

    public com.google.javascript.rhino.jstype.JSType restrictByNotNullOrUndefined() {
        return this;
    }

    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        return com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that);
    }

    public boolean differsFrom(com.google.javascript.rhino.jstype.JSType that) {
        if ((!this.isUnknownType()) && (!that.isUnknownType())) {
            return !this.isEquivalentTo(that);
        }
        return this.isUnknownType() ^ that.isUnknownType();
    }

    static boolean isSubtypeHelper(com.google.javascript.rhino.jstype.JSType thisType, com.google.javascript.rhino.jstype.JSType thatType) {
        if (thatType.isUnknownType()) {
            return true;
        }
        if (thisType.isEquivalentTo(thatType)) {
            return true;
        }
        if (thatType.isAllType()) {
            return true;
        }
        if (thatType.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType union = thatType.toMaybeUnionType();
            for (com.google.javascript.rhino.jstype.JSType element : union.alternates) {
                if (thisType.isSubtype(element)) {
                    return true;
                }
            }
        }
        if (thatType instanceof com.google.javascript.rhino.jstype.ProxyObjectType) {
            return thisType.isSubtype(((com.google.javascript.rhino.jstype.ProxyObjectType) (thatType)).getReferencedTypeInternal());
        }
        return false;
    }

    public abstract <T> T visit(com.google.javascript.rhino.jstype.Visitor<T> visitor);

    public final com.google.javascript.rhino.jstype.JSType forceResolve(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode oldResolveMode = registry.getResolveMode();
        registry.setResolveMode(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE);
        com.google.javascript.rhino.jstype.JSType result = resolve(t, scope);
        registry.setResolveMode(oldResolveMode);
        return result;
    }

    public final com.google.javascript.rhino.jstype.JSType resolve(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        if (resolved) {
            if (resolveResult == null) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            return resolveResult;
        }
        resolved = true;
        resolveResult = resolveInternal(t, scope);
        resolveResult.setResolvedTypeInternal(resolveResult);
        return resolveResult;
    }

    abstract com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope);

    void setResolvedTypeInternal(com.google.javascript.rhino.jstype.JSType type) {
        resolveResult = type;
        resolved = true;
    }

    public final boolean isResolved() {
        return resolved;
    }

    public final void clearResolved() {
        resolved = false;
        resolveResult = null;
    }

    static final com.google.javascript.rhino.jstype.JSType safeResolve(com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        return type == null ? null : type.resolve(t, scope);
    }

    public boolean setValidator(com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> validator) {
        return validator.apply(this);
    }

    public static class TypePair {
        public final com.google.javascript.rhino.jstype.JSType typeA;

        public final com.google.javascript.rhino.jstype.JSType typeB;

        public TypePair(com.google.javascript.rhino.jstype.JSType typeA, com.google.javascript.rhino.jstype.JSType typeB) {
            this.typeA = typeA;
            this.typeB = typeB;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toStringHelper(false);
    }

    public java.lang.String toDebugHashCodeString() {
        return ("{" + this.hashCode()) + "}";
    }

    public final java.lang.String toAnnotationString() {
        return toStringHelper(true);
    }

    abstract java.lang.String toStringHelper(boolean forAnnotations);

    public void matchConstraint(com.google.javascript.rhino.jstype.ObjectType contraint) {
    }
}
[922199] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659914050961
GPR[SSUN]-1659914050961
2433571
GPR[SPVATF]-1659914051194
GPR[EPVATF]-1659914052522
GPR[SPS]-1659914052522
[924424] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:603.
GPR[EPS]-1659914053186
GPR[ESUN]-1659914053186
GPR[SSUN]-1659914053186
1187751237
GPR[SPVATF]-1659914053453
GPR[EPVATF]-1659914054742
GPR[SPS]-1659914054742
[926670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3074.
GPR[EPS]-1659914055432
GPR[SPVATF]-1659914055432
GPR[EPVATF]-1659914056744
GPR[SPS]-1659914056744
[928708] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3074.
GPR[EPS]-1659914057470
GPR[ESUN]-1659914057470
GPR[SSUN]-1659914057470
1187751237
GPR[ESUN]-1659914057739
GPR[SSUN]-1659914057739
1187751237
GPR[ESUN]-1659914058000
GPR[SSUN]-1659914058000
1187751237
GPR[SPVATF]-1659914058278
GPR[EPVATF]-1659914059599
GPR[SPS]-1659914059599
[931514] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2059.
GPR[EPS]-1659914060276
GPR[ESUN]-1659914060277
GPR[SSUN]-1659914060277
-2097135580
GPR[SPVATF]-1659914060481
GPR[EPVATF]-1659914061812
GPR[SPS]-1659914061812
[933543] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:822.
GPR[EPS]-1659914062305
GPR[ESUN]-1659914062305
GPR[SSUN]-1659914062305
-2097135580
GPR[ESUN]-1659914062512
GPR[SSUN]-1659914062512
-422369444
GPR[ESUN]-1659914062685
GPR[SSUN]-1659914062685
1187751237
GPR[ESUN]-1659914062952
GPR[SSUN]-1659914062952
-179796259
GPR[ESUN]-1659914063184
GPR[SSUN]-1659914063184
-179796259
GPR[SPVATF]-1659914063416
GPR[EPVATF]-1659914064794
GPR[SPS]-1659914064794
[936710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2005.
GPR[EPS]-1659914065472
GPR[SPVATF]-1659914065472
GPR[EPVATF]-1659914066892
GPR[SPS]-1659914066892
[938817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2005.
GPR[EPS]-1659914067579
GPR[ESUN]-1659914067579
GPR[SSUN]-1659914067579
-179796259
GPR[ESUN]-1659914067814
GPR[SSUN]-1659914067814
-179796259
GPR[SPVATF]-1659914068047
GPR[EPVATF]-1659914069419
GPR[SPS]-1659914069419
[941333] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2251.
GPR[EPS]-1659914070096
GPR[ESUN]-1659914070096
GPR[SSUN]-1659914070096
-179796259
GPR[ESUN]-1659914070334
GPR[SSUN]-1659914070334
-179796259
GPR[SPVATF]-1659914070569
GPR[EPVATF]-1659914072044
GPR[SPS]-1659914072044
[944058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2001.
GPR[EPS]-1659914072820
GPR[ESUN]-1659914072820
GPR[SSUN]-1659914072821
-622774852
GPR[SPVATF]-1659914073032
GPR[EPVATF]-1659914074483
GPR[SPS]-1659914074483
[946212] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:186.
GPR[EPS]-1659914074974
GPR[ESUN]-1659914074974
GPR[SSUN]-1659914074974
-179796259
GPR[SPVATF]-1659914075207
GPR[EPVATF]-1659914076726
GPR[SPS]-1659914076726
[948624] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1997.
GPR[EPS]-1659914077386
GPR[SPVATF]-1659914077386
GPR[EPVATF]-1659914078997
GPR[SPS]-1659914078997
[950967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1997.
GPR[EPS]-1659914079729
GPR[ESUN]-1659914079729
GPR[SSUN]-1659914079729
-179796259
GPR[SPVATF]-1659914079967
GPR[EPVATF]-1659914081679
GPR[SPS]-1659914081679
[953663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1996.
GPR[EPS]-1659914082425
GPR[ESUN]-1659914082425
GPR[SSUN]-1659914082425
-179796259
GPR[SPVATF]-1659914082658
GPR[EPVATF]-1659914084590
GPR[SPS]-1659914084590
[1336480] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[SPVATF]-1659914465242
GPR[EPVATF]-1659914474125
GPR[SPS]-1659914474125
[1596357] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659914725119
GPR[SSUN]-1659914725119
-179796259
GPR[ESUN]-1659914732449
GPR[SSUN]-1659914732449
-179796259
GPR[SPVATF]-1659914732685
GPR[EPVATF]-1659914734112
GPR[SPS]-1659914734112
[1606068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1976.
GPR[EPS]-1659914734830
GPR[SPVATF]-1659914734830
GPR[EPVATF]-1659914736206
GPR[SPS]-1659914736206
[1608208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1976.
GPR[EPS]-1659914736970
GPR[ESUN]-1659914736970
GPR[SSUN]-1659914736970
-179796259
GPR[ESUN]-1659914737249
GPR[SSUN]-1659914737249
1331276989
GPR[SPVATF]-1659914737465
GPR[EPVATF]-1659914738838
GPR[SPS]-1659914738838
[1610421] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class NodeTraversal {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.NodeTraversal.Callback callback;

    private com.google.javascript.rhino.Node curNode;

    public static final com.google.javascript.jscomp.DiagnosticType NODE_TRAVERSAL_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NODE_TRAVERSAL_ERROR", "{0}");

    private final java.util.Deque<com.google.javascript.jscomp.Scope> scopes = new java.util.ArrayDeque<com.google.javascript.jscomp.Scope>();

    private final java.util.Deque<com.google.javascript.rhino.Node> scopeRoots = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    java.util.Deque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> cfgs = new java.util.LinkedList<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>();

    private java.lang.String sourceName;

    private com.google.javascript.rhino.InputId inputId;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private com.google.javascript.jscomp.NodeTraversal.ScopedCallback scopeCallback;

    public interface Callback {
        public abstract boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);

        public abstract void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);
    }

    public interface ScopedCallback extends com.google.javascript.jscomp.NodeTraversal.Callback {
        public abstract void enterScope(com.google.javascript.jscomp.NodeTraversal t);

        public abstract void exitScope(com.google.javascript.jscomp.NodeTraversal t);
    }

    public abstract static class AbstractPostOrderCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }
    }

    public abstract static class AbstractScopedCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }
    }

    public abstract static class AbstractShallowCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || (!parent.isFunction())) || (n == parent.getFirstChild());
        }
    }

    public abstract static class AbstractShallowStatementCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent);
        }
    }

    public abstract static class AbstractNodeTypePruningCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.Set<java.lang.Integer> nodeTypes;

        private final boolean include;

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes) {
            this(nodeTypes, true);
        }

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes, boolean include) {
            this.nodeTypes = nodeTypes;
            this.include = include;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return include == nodeTypes.contains(n.getType());
        }
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        this(compiler, cb, new com.google.javascript.jscomp.SyntacticScopeCreator(compiler));
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.jscomp.ScopeCreator scopeCreator) {
        this.callback = cb;
        if (cb instanceof com.google.javascript.jscomp.NodeTraversal.ScopedCallback) {
            this.scopeCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (cb));
        }
        this.compiler = compiler;
        this.inputId = null;
        this.sourceName = "";
        this.scopeCreator = scopeCreator;
    }

    private void throwUnexpectedException(java.lang.Exception unexpectedException) {
        java.lang.String message = unexpectedException.getMessage();
        if (inputId != null) {
            message = ((unexpectedException.getMessage() + "\n") + formatNodeContext("Node", curNode)) + (curNode == null ? "" : formatNodeContext("Parent", curNode.getParent()));
        }
        compiler.throwInternalError(message, unexpectedException);
    }

    private java.lang.String formatNodeContext(java.lang.String label, com.google.javascript.rhino.Node n) {
        if (n == null) {
            return ("  " + label) + ": NULL";
        }
        return (((("  " + label) + "(") + n.toString(false, false, false)) + "): ") + formatNodePosition(n);
    }

    public void traverse(com.google.javascript.rhino.Node root) {
        try {
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(root);
            sourceName = "";
            curNode = root;
            pushScope(root);
            traverseBranch(root, null);
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    public void traverseRoots(com.google.javascript.rhino.Node... roots) {
        traverseRoots(com.google.common.collect.Lists.newArrayList(roots));
    }

    public void traverseRoots(java.util.List<com.google.javascript.rhino.Node> roots) {
        if (roots.isEmpty()) {
            return;
        }
        try {
            com.google.javascript.rhino.Node scopeRoot = roots.get(0).getParent();
            com.google.common.base.Preconditions.checkState(scopeRoot != null);
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(scopeRoot);
            sourceName = "";
            curNode = scopeRoot;
            pushScope(scopeRoot);
            for (com.google.javascript.rhino.Node root : roots) {
                com.google.common.base.Preconditions.checkState(root.getParent() == scopeRoot);
                traverseBranch(root, scopeRoot);
            }
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    private static final java.lang.String MISSING_SOURCE = "[source unknown]";

    private java.lang.String formatNodePosition(com.google.javascript.rhino.Node n) {
        if (n == null) {
            return com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE + "\n";
        }
        int lineNumber = n.getLineno();
        int columnNumber = n.getCharno();
        java.lang.String src = compiler.getSourceLine(sourceName, lineNumber);
        if (src == null) {
            src = com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE;
        }
        return ((((((sourceName + ":") + lineNumber) + ":") + columnNumber) + "\n") + src) + "\n";
    }

    void traverseWithScope(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(s.isGlobal());
        inputId = null;
        sourceName = "";
        curNode = root;
        pushScope(s);
        traverseBranch(root, null);
        popScope();
    }

    void traverseAtScope(com.google.javascript.jscomp.Scope s) {
        com.google.javascript.rhino.Node n = s.getRootNode();
        if (n.isFunction()) {
            if (inputId == null) {
                inputId = com.google.javascript.jscomp.NodeUtil.getInputId(n);
            }
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
            curNode = n;
            pushScope(s);
            com.google.javascript.rhino.Node args = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node body = args.getNext();
            traverseBranch(args, n);
            traverseBranch(body, n);
            popScope();
        } else {
            traverseWithScope(n, s);
        }
    }

    protected void traverseInnerNode(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope refinedScope) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        if ((refinedScope != null) && (getScope() != refinedScope)) {
            curNode = node;
            pushScope(refinedScope);
            traverseBranch(node, parent);
            popScope();
        } else {
            traverseBranch(node, parent);
        }
    }

    public com.google.javascript.jscomp.Compiler getCompiler() {
        return ((com.google.javascript.jscomp.Compiler) (compiler));
    }

    public int getLineNumber() {
        com.google.javascript.rhino.Node cur = curNode;
        while (cur != null) {
            int line = cur.getLineno();
            if (line >= 0) {
                return line;
            }
            cur = cur.getParent();
        } 
        return 0;
    }

    public java.lang.String getSourceName() {
        return sourceName;
    }

    public com.google.javascript.jscomp.CompilerInput getInput() {
        return compiler.getInput(inputId);
    }

    public com.google.javascript.jscomp.JSModule getModule() {
        com.google.javascript.jscomp.CompilerInput input = getInput();
        return input == null ? null : input.getModule();
    }

    public com.google.javascript.rhino.Node getCurrentNode() {
        return curNode;
    }

    public static void traverse(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverse(root);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> roots, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.rhino.Node... roots) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    @java.lang.SuppressWarnings("fallthrough")
    private void traverseBranch(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.SCRIPT) {
            inputId = n.getInputId();
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
        }
        curNode = n;
        if (!callback.shouldTraverse(this, n, parent)) {
            return;
        }
        switch (type) {
            case com.google.javascript.rhino.Token.FUNCTION :
                traverseFunction(n, parent);
                break;
            default :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null;) {
                    com.google.javascript.rhino.Node next = child.getNext();
                    traverseBranch(child, n);
                    child = next;
                }
                break;
        }
        curNode = n;
        callback.visit(this, n, parent);
    }

    private void traverseFunction(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(n.getChildCount() == 3);
        com.google.common.base.Preconditions.checkState(n.isFunction());
        final com.google.javascript.rhino.Node fnName = n.getFirstChild();
        boolean isFunctionExpression = (parent != null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
        if (!isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        curNode = n;
        pushScope(n);
        if (isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        final com.google.javascript.rhino.Node args = fnName.getNext();
        final com.google.javascript.rhino.Node body = args.getNext();
        traverseBranch(args, n);
        com.google.common.base.Preconditions.checkState((body.getNext() == null) && body.isBlock(), body);
        traverseBranch(body, n);
        popScope();
    }

    @java.lang.SuppressWarnings("unchecked")
    public com.google.javascript.rhino.Node getEnclosingFunction() {
        if ((scopes.size() + scopeRoots.size()) < 2) {
            return null;
        } else if (scopeRoots.isEmpty()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(241).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.compiler",com.google.javascript.jscomp.NodeTraversal.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopes",com.google.javascript.jscomp.NodeTraversal.this.scopes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.cfgs",com.google.javascript.jscomp.NodeTraversal.this.cfgs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCallback",com.google.javascript.jscomp.NodeTraversal.this.scopeCallback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.inputId",com.google.javascript.jscomp.NodeTraversal.this.inputId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.curNode",com.google.javascript.jscomp.NodeTraversal.this.curNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.sourceName",com.google.javascript.jscomp.NodeTraversal.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.callback",com.google.javascript.jscomp.NodeTraversal.this.callback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeRoots",com.google.javascript.jscomp.NodeTraversal.this.scopeRoots);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCreator",com.google.javascript.jscomp.NodeTraversal.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectionEnds();
            }
            if (runtimeAngelicValue)
                return scopes.peek().getRootNode();

        } else {
            return scopeRoots.peek();
        }
    }

    private void pushScope(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopeRoots.push(node);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void pushScope(com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopes.push(s);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void popScope() {
        if (scopeCallback != null) {
            scopeCallback.exitScope(this);
        }
        if (scopeRoots.isEmpty()) {
            scopes.pop();
        } else {
            scopeRoots.pop();
        }
        cfgs.pop();
    }

    public com.google.javascript.jscomp.Scope getScope() {
        com.google.javascript.jscomp.Scope scope = (scopes.isEmpty()) ? null : scopes.peek();
        if (scopeRoots.isEmpty()) {
            return scope;
        }
        java.util.Iterator<com.google.javascript.rhino.Node> it = scopeRoots.descendingIterator();
        while (it.hasNext()) {
            scope = scopeCreator.createScope(it.next(), scope);
            scopes.push(scope);
        } 
        scopeRoots.clear();
        return scope;
    }

    public com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getControlFlowGraph() {
        if (cfgs.peek() == null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(compiler, false, true);
            cfa.process(null, getScopeRoot());
            cfgs.pop();
            cfgs.push(cfa.getCfg());
        }
        return cfgs.peek();
    }

    public com.google.javascript.rhino.Node getScopeRoot() {
        if (scopeRoots.isEmpty()) {
            return scopes.peek().getRootNode();
        } else {
            return scopeRoots.peek();
        }
    }

    boolean inGlobalScope() {
        return getScopeDepth() <= 1;
    }

    int getScopeDepth() {
        return scopes.size() + scopeRoots.size();
    }

    public boolean hasScope() {
        return !(scopes.isEmpty() && scopeRoots.isEmpty());
    }

    public void report(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        com.google.javascript.jscomp.JSError error = com.google.javascript.jscomp.JSError.make(getSourceName(), n, diagnosticType, arguments);
        compiler.report(error);
    }

    private static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String name = n.getSourceFileName();
        return name == null ? "" : name;
    }

    com.google.javascript.rhino.InputId getInputId() {
        return inputId;
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CheckLevel level, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, level, type, arguments);
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, type, arguments);
    }
}
[1610421] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659914739183
GPR[SSUN]-1659914739183
-179796259
GPR[ESUN]-1659914739422
GPR[SSUN]-1659914739422
2069352659
GPR[SPVATF]-1659914739626
GPR[EPVATF]-1659914740964
GPR[SPS]-1659914740965
[1612485] ERROR ConstraintModelBuilder - Unable to compile the change: 
class UnionTypeBuilder implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private static final int DEFAULT_MAX_UNION_SIZE = 20;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry registry;

    private final java.util.List<com.google.javascript.rhino.jstype.JSType> alternates = com.google.common.collect.Lists.newArrayList();

    private boolean isAllType = false;

    private boolean isNativeUnknownType = false;

    private boolean areAllUnknownsChecked = true;

    private final int maxUnionSize;

    private int functionTypePosition = -1;

    private com.google.javascript.rhino.jstype.JSType result = null;

    UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry) {
        this(registry, com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE);
    }

    UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry, int maxUnionSize) {
        this.registry = registry;
        this.maxUnionSize = maxUnionSize;
    }

    java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getAlternates() {
        com.google.javascript.rhino.jstype.JSType specialCaseType = reduceAlternatesWithoutUnion();
        if (specialCaseType != null) {
            return com.google.common.collect.ImmutableList.of(specialCaseType);
        }
        return java.util.Collections.unmodifiableList(alternates);
    }

    com.google.javascript.rhino.jstype.UnionTypeBuilder addAlternate(com.google.javascript.rhino.jstype.JSType alternate) {
        if (alternate.isNoType()) {
            return this;
        }
        isAllType = isAllType || alternate.isAllType();
        boolean isAlternateUnknown = alternate instanceof com.google.javascript.rhino.jstype.UnknownType;
        isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;
        if (isAlternateUnknown) {
            areAllUnknownsChecked = areAllUnknownsChecked && alternate.isCheckedUnknownType();
        }
        if ((!isAllType) && (!isNativeUnknownType)) {
            if (alternate.isUnionType()) {
                com.google.javascript.rhino.jstype.UnionType union = alternate.toMaybeUnionType();
                for (com.google.javascript.rhino.jstype.JSType unionAlt : union.getAlternates()) {
                    addAlternate(unionAlt);
                }
            } else {
                if (alternates.size() > maxUnionSize) {
                    return this;
                }
                if (alternate.isFunctionType() && (functionTypePosition != (-1))) {
                    com.google.javascript.rhino.jstype.FunctionType other = alternates.get(functionTypePosition).toMaybeFunctionType();
                    com.google.javascript.rhino.jstype.FunctionType supremum = alternate.toMaybeFunctionType().supAndInfHelper(other, true);
                    alternates.set(functionTypePosition, supremum);
                    result = null;
                    return this;
                }
                int currentIndex = 0;
                java.util.Iterator<com.google.javascript.rhino.jstype.JSType> it = alternates.iterator();
                while (it.hasNext()) {
                    com.google.javascript.rhino.jstype.JSType current = it.next();
                    if (((alternate.isUnknownType() || current.isUnknownType()) || alternate.isNoResolvedType()) || current.isNoResolvedType()) {
                        if (alternate.isEquivalentTo(current)) {
                            return this;
                        }
                    } else if (alternate.isSubtype(current)) {
                        return this;
                    } else if (current.isSubtype(alternate)) {
                        it.remove();
                        if (currentIndex == functionTypePosition) {
                            functionTypePosition = -1;
                        } else if (currentIndex < functionTypePosition) {
                            functionTypePosition--;
                            currentIndex--;
                        }
                    }
                    currentIndex++;
                } 
                if (alternate.isFunctionType()) {
                    com.google.common.base.Preconditions.checkState(functionTypePosition == (-1));
                    functionTypePosition = alternates.size();
                }
                alternates.add(alternate);
                result = null;
            }
        } else {
            result = null;
        }
        return this;
    }

    private com.google.javascript.rhino.jstype.JSType reduceAlternatesWithoutUnion() {
        if (isAllType) {
            return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
        } else if (isNativeUnknownType) {
            if (areAllUnknownsChecked) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE);
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(242).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.result",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.result);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isNativeUnknownType",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isNativeUnknownType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isAllType",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isAllType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.registry",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.registry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.areAllUnknownsChecked",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.areAllUnknownsChecked);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.functionTypePosition",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.functionTypePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.maxUnionSize",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.maxUnionSize);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.alternates",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.alternates);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(242).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);

            }
        } else {
            int size = alternates.size();
            if (size > maxUnionSize) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            } else if (size > 1) {
                return null;
            } else if (size == 1) {
                return alternates.iterator().next();
            } else {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
            }
        }
    }

    com.google.javascript.rhino.jstype.JSType build() {
        if (result == null) {
            result = reduceAlternatesWithoutUnion();
            if (result == null) {
                result = new com.google.javascript.rhino.jstype.UnionType(registry, getAlternateListCopy());
            }
        }
        return result;
    }

    private java.util.Collection<com.google.javascript.rhino.jstype.JSType> getAlternateListCopy() {
        return com.google.common.collect.ImmutableList.copyOf(alternates);
    }
}
[1612485] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659914741247
GPR[SSUN]-1659914741247
2069352659
GPR[SPVATF]-1659914741449
GPR[EPVATF]-1659914742833
GPR[SPS]-1659914742833
[1614398] ERROR ConstraintModelBuilder - Unable to compile the change: 
class UnionTypeBuilder implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private static final int DEFAULT_MAX_UNION_SIZE = 20;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry registry;

    private final java.util.List<com.google.javascript.rhino.jstype.JSType> alternates = com.google.common.collect.Lists.newArrayList();

    private boolean isAllType = false;

    private boolean isNativeUnknownType = false;

    private boolean areAllUnknownsChecked = true;

    private final int maxUnionSize;

    private int functionTypePosition = -1;

    private com.google.javascript.rhino.jstype.JSType result = null;

    UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry) {
        this(registry, com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE);
    }

    UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry, int maxUnionSize) {
        this.registry = registry;
        this.maxUnionSize = maxUnionSize;
    }

    java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getAlternates() {
        com.google.javascript.rhino.jstype.JSType specialCaseType = reduceAlternatesWithoutUnion();
        if (specialCaseType != null) {
            return com.google.common.collect.ImmutableList.of(specialCaseType);
        }
        return java.util.Collections.unmodifiableList(alternates);
    }

    com.google.javascript.rhino.jstype.UnionTypeBuilder addAlternate(com.google.javascript.rhino.jstype.JSType alternate) {
        if (alternate.isNoType()) {
            return this;
        }
        isAllType = isAllType || alternate.isAllType();
        boolean isAlternateUnknown = alternate instanceof com.google.javascript.rhino.jstype.UnknownType;
        isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;
        if (isAlternateUnknown) {
            areAllUnknownsChecked = areAllUnknownsChecked && alternate.isCheckedUnknownType();
        }
        if ((!isAllType) && (!isNativeUnknownType)) {
            if (alternate.isUnionType()) {
                com.google.javascript.rhino.jstype.UnionType union = alternate.toMaybeUnionType();
                for (com.google.javascript.rhino.jstype.JSType unionAlt : union.getAlternates()) {
                    addAlternate(unionAlt);
                }
            } else {
                if (alternates.size() > maxUnionSize) {
                    return this;
                }
                if (alternate.isFunctionType() && (functionTypePosition != (-1))) {
                    com.google.javascript.rhino.jstype.FunctionType other = alternates.get(functionTypePosition).toMaybeFunctionType();
                    com.google.javascript.rhino.jstype.FunctionType supremum = alternate.toMaybeFunctionType().supAndInfHelper(other, true);
                    alternates.set(functionTypePosition, supremum);
                    result = null;
                    return this;
                }
                int currentIndex = 0;
                java.util.Iterator<com.google.javascript.rhino.jstype.JSType> it = alternates.iterator();
                while (it.hasNext()) {
                    com.google.javascript.rhino.jstype.JSType current = it.next();
                    if (((alternate.isUnknownType() || current.isUnknownType()) || alternate.isNoResolvedType()) || current.isNoResolvedType()) {
                        if (alternate.isEquivalentTo(current)) {
                            return this;
                        }
                    } else if (alternate.isSubtype(current)) {
                        return this;
                    } else if (current.isSubtype(alternate)) {
                        it.remove();
                        if (currentIndex == functionTypePosition) {
                            functionTypePosition = -1;
                        } else if (currentIndex < functionTypePosition) {
                            functionTypePosition--;
                            currentIndex--;
                        }
                    }
                    currentIndex++;
                } 
                if (alternate.isFunctionType()) {
                    com.google.common.base.Preconditions.checkState(functionTypePosition == (-1));
                    functionTypePosition = alternates.size();
                }
                alternates.add(alternate);
                result = null;
            }
        } else {
            result = null;
        }
        return this;
    }

    private com.google.javascript.rhino.jstype.JSType reduceAlternatesWithoutUnion() {
        if (isAllType) {
            return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
        } else if (isNativeUnknownType) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(243).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.result",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.result);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isNativeUnknownType",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isNativeUnknownType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isAllType",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.isAllType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.registry",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.registry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.areAllUnknownsChecked",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.areAllUnknownsChecked);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.functionTypePosition",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.functionTypePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.maxUnionSize",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.maxUnionSize);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.this.alternates",com.google.javascript.rhino.jstype.UnionTypeBuilder.this.alternates);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectionEnds();
            }
            if (runtimeAngelicValue) if (areAllUnknownsChecked) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE);
            } else {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
        } else {
            int size = alternates.size();
            if (size > maxUnionSize) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            } else if (size > 1) {
                return null;
            } else if (size == 1) {
                return alternates.iterator().next();
            } else {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
            }
        }
    }

    com.google.javascript.rhino.jstype.JSType build() {
        if (result == null) {
            result = reduceAlternatesWithoutUnion();
            if (result == null) {
                result = new com.google.javascript.rhino.jstype.UnionType(registry, getAlternateListCopy());
            }
        }
        return result;
    }

    private java.util.Collection<com.google.javascript.rhino.jstype.JSType> getAlternateListCopy() {
        return com.google.common.collect.ImmutableList.copyOf(alternates);
    }
}
[1614399] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659914743161
GPR[EPVATF]-1659914744524
GPR[SPS]-1659914744524
[1616270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:223.
GPR[EPS]-1659914745032
GPR[ESUN]-1659914745032
GPR[SSUN]-1659914745032
2069352659
GPR[SPVATF]-1659914745233
GPR[EPVATF]-1659914746559
GPR[SPS]-1659914746559
[1618290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:133.
GPR[EPS]-1659914747052
GPR[ESUN]-1659914747052
GPR[SSUN]-1659914747052
-1007410555
GPR[ESUN]-1659914747242
GPR[SSUN]-1659914747242
2433571
GPR[ESUN]-1659914747474
GPR[SSUN]-1659914747474
2433571
GPR[SPVATF]-1659914747742
GPR[EPVATF]-1659914749151
GPR[SPS]-1659914749151
[1621071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:602.
GPR[EPS]-1659914749833
GPR[SPVATF]-1659914749833
GPR[EPVATF]-1659914751262
GPR[SPS]-1659914751262
[1623153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:602.
GPR[EPS]-1659914751915
GPR[ESUN]-1659914751915
GPR[SSUN]-1659914751915
2433571
GPR[SPVATF]-1659914752144
GPR[EPVATF]-1659914753526
GPR[SPS]-1659914753526
[1625493] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:601.
GPR[EPS]-1659914754255
GPR[ESUN]-1659914754256
GPR[SSUN]-1659914754256
2433571
GPR[SPVATF]-1659914754486
GPR[EPVATF]-1659914755916
GPR[SPS]-1659914755916
[1627800] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:600.
GPR[EPS]-1659914756562
GPR[ESUN]-1659914756562
GPR[SSUN]-1659914756562
2433571
GPR[SPVATF]-1659914756847
GPR[EPVATF]-1659914758207
GPR[SPS]-1659914758207
[1630097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:599.
GPR[EPS]-1659914758859
GPR[ESUN]-1659914758859
GPR[SSUN]-1659914758859
2433571
GPR[SPVATF]-1659914759089
GPR[EPVATF]-1659914760593
GPR[SPS]-1659914760593
[1632473] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:598.
GPR[EPS]-1659914761235
GPR[ESUN]-1659914761235
GPR[SSUN]-1659914761235
2433571
GPR[SPVATF]-1659914761464
GPR[EPVATF]-1659914762864
GPR[SPS]-1659914762864
[1634717] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:597.
GPR[EPS]-1659914763479
GPR[ESUN]-1659914763480
GPR[SSUN]-1659914763480
-1797850673
GPR[SPVATF]-1659914763721
GPR[EPVATF]-1659914765073
GPR[SPS]-1659914765073
[1636941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1237.
GPR[EPS]-1659914765703
GPR[SPVATF]-1659914765704
GPR[EPVATF]-1659914767080
GPR[SPS]-1659914767080
[1638937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1237.
GPR[EPS]-1659914767699
GPR[ESUN]-1659914767699
GPR[SSUN]-1659914767699
-1797850673
GPR[ESUN]-1659914767942
GPR[SSUN]-1659914767942
-1797850673
GPR[SPVATF]-1659914768191
GPR[EPVATF]-1659914769621
GPR[SPS]-1659914769621
[1641467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1235.
GPR[EPS]-1659914770229
GPR[ESUN]-1659914770229
GPR[SSUN]-1659914770229
-1464408086
GPR[SPVATF]-1659914770475
GPR[EPVATF]-1659914771957
GPR[SPS]-1659914771957
[1643831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:466.
GPR[EPS]-1659914772593
GPR[ESUN]-1659914772593
GPR[SSUN]-1659914772593
-1345859678
GPR[SPVATF]-1659914772835
GPR[EPVATF]-1659914774365
GPR[SPS]-1659914774365
[1646200] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:867.
GPR[EPS]-1659914774962
GPR[ESUN]-1659914774962
GPR[SSUN]-1659914774962
GPR[ESUN]-1659914774962
GPR[SSUN]-1659914774962
GPR[ESUN]-1659914774962
GPR[SSUN]-1659914774962
GPR[ESUN]-1659914774962
GPR[SSUN]-1659914774962
-711686510
GPR[SPVATF]-1659914775185
GPR[EPVATF]-1659914776825
GPR[SPS]-1659914776825
[1648591] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:159.
GPR[EPS]-1659914777354
GPR[ESUN]-1659914777354
GPR[SSUN]-1659914777354
-711686510
GPR[SPVATF]-1659914777572
GPR[EPVATF]-1659914779272
GPR[SPS]-1659914779272
[1651034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:158.
GPR[EPS]-1659914779796
GPR[ESUN]-1659914779796
GPR[SSUN]-1659914779796
-711686510
GPR[SPVATF]-1659914780014
GPR[EPVATF]-1659914781824
GPR[SPS]-1659914781824
[1653604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:125.
GPR[EPS]-1659914782366
GPR[ESUN]-1659914782366
GPR[SSUN]-1659914782366
-711686510
GPR[SPVATF]-1659914782584
GPR[EPVATF]-1659914784645
GPR[SPS]-1659914784645
[1656401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:122.
GPR[EPS]-1659914785163
GPR[SPVATF]-1659914785163
GPR[EPVATF]-1659914787245
GPR[SPS]-1659914787245
[1659131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:122.
GPR[EPS]-1659914787893
GPR[ESUN]-1659914787893
GPR[SSUN]-1659914787893
-711686510
GPR[ESUN]-1659914788113
GPR[SSUN]-1659914788113
-1605808871
GPR[SPVATF]-1659914788344
GPR[EPVATF]-1659914790457
GPR[SPS]-1659914790457
[1662266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:384.
GPR[EPS]-1659914791028
GPR[ESUN]-1659914791028
GPR[SSUN]-1659914791028
-1605808871
GPR[SPVATF]-1659914791263
GPR[EPVATF]-1659914793417
GPR[SPS]-1659914793417
GPR[EPS]-1659914822170
GPR[ESUN]-1659914822170
GPR[SSUN]-1659914822170
-1605808871
GPR[SPVATF]-1659914822407
GPR[EPVATF]-1659914823868
GPR[SPS]-1659914823868
GPR[EPS]-1659914844159
GPR[SPVATF]-1659914844159
GPR[EPVATF]-1659914845565
GPR[SPS]-1659914845565
GPR[EPS]-1659914872182
GPR[ESUN]-1659914872182
GPR[SSUN]-1659914872182
-711686510
GPR[SPVATF]-1659914872408
GPR[EPVATF]-1659914873792
GPR[SPS]-1659914873793
[1745605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:120.
GPR[EPS]-1659914874367
GPR[SPVATF]-1659914874367
GPR[EPVATF]-1659914875757
GPR[SPS]-1659914875757
[1747546] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:120.
GPR[EPS]-1659914876308
GPR[ESUN]-1659914876308
GPR[SSUN]-1659914876308
-711686510
GPR[ESUN]-1659914876529
GPR[SSUN]-1659914876529
2433571
GPR[ESUN]-1659914876767
GPR[SSUN]-1659914876767
-1464408086
GPR[SPVATF]-1659914877014
GPR[EPVATF]-1659914878424
GPR[SPS]-1659914878424
[1750276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:460.
GPR[EPS]-1659914879039
GPR[SPVATF]-1659914879039
GPR[EPVATF]-1659914880380
GPR[SPS]-1659914880380
[1752238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:460.
GPR[EPS]-1659914881000
GPR[ESUN]-1659914881000
GPR[SSUN]-1659914881000
2069352659
GPR[SPVATF]-1659914881204
GPR[EPVATF]-1659914882578
GPR[SPS]-1659914882578
[1754338] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:209.
GPR[EPS]-1659914883100
GPR[ESUN]-1659914883100
GPR[SSUN]-1659914883100
1187751237
GPR[SPVATF]-1659914883381
GPR[EPVATF]-1659914884873
GPR[SPS]-1659914884873
[1756801] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1672.
GPR[EPS]-1659914885563
GPR[ESUN]-1659914885563
GPR[SSUN]-1659914885564
GPR[ESUN]-1659914885564
GPR[SSUN]-1659914885564
1537627151
GPR[ESUN]-1659914885767
GPR[SSUN]-1659914885767
-1345859678
GPR[ESUN]-1659914886009
GPR[SSUN]-1659914886009
-1345859678
GPR[ESUN]-1659914886251
GPR[SSUN]-1659914886251
-1345859678
GPR[SPVATF]-1659914886496
GPR[EPVATF]-1659914888015
GPR[SPS]-1659914888015
[1759862] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:866.
GPR[EPS]-1659914888624
GPR[SPVATF]-1659914888624
GPR[EPVATF]-1659914890143
GPR[SPS]-1659914890143
[1762022] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:866.
GPR[EPS]-1659914890784
GPR[ESUN]-1659914890784
GPR[SSUN]-1659914890784
-1345859678
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891030
GPR[ESUN]-1659914891030
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
GPR[ESUN]-1659914891031
GPR[SSUN]-1659914891031
-2097135580
GPR[ESUN]-1659914891234
GPR[SSUN]-1659914891234
79711797
GPR[ESUN]-1659914891465
GPR[SSUN]-1659914891465
466431456
GPR[SPVATF]-1659914891717
GPR[EPVATF]-1659914893252
GPR[SPS]-1659914893252
[1765162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:542.
GPR[EPS]-1659914893924
GPR[ESUN]-1659914893924
GPR[SSUN]-1659914893924
646738083
GPR[SPVATF]-1659914894201
GPR[EPVATF]-1659914895804
GPR[SPS]-1659914895805
[1767715] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:1477.
GPR[EPS]-1659914896477
GPR[ESUN]-1659914896477
GPR[SSUN]-1659914896477
704176156
GPR[ESUN]-1659914896726
GPR[SSUN]-1659914896726
704176156
GPR[ESUN]-1659914896931
GPR[SSUN]-1659914896931
704176156
GPR[SPVATF]-1659914897134
GPR[EPVATF]-1659914898805
GPR[SPS]-1659914898805
[1770528] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:153.
GPR[EPS]-1659914899290
GPR[ESUN]-1659914899290
GPR[SSUN]-1659914899290
704176156
GPR[SPVATF]-1659914899495
GPR[EPVATF]-1659914901305
GPR[SPS]-1659914901305
[1773028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:152.
GPR[EPS]-1659914901790
GPR[ESUN]-1659914901790
GPR[SSUN]-1659914901790
704176156
GPR[SPVATF]-1659914901994
GPR[EPVATF]-1659914903916
GPR[SPS]-1659914903916
[1775688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:132.
GPR[EPS]-1659914904450
GPR[ESUN]-1659914904450
GPR[SSUN]-1659914904451
-1605808871
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
GPR[ESUN]-1659914904687
GPR[SSUN]-1659914904687
1537627151
GPR[ESUN]-1659914904890
GPR[SSUN]-1659914904890
-1345859678
GPR[ESUN]-1659914905135
GPR[SSUN]-1659914905135
-1345859678
GPR[SPVATF]-1659914905382
GPR[EPVATF]-1659914907425
GPR[SPS]-1659914907425
[1779297] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:780.
GPR[EPS]-1659914908059
GPR[ESUN]-1659914908059
GPR[SSUN]-1659914908059
-1345859678
GPR[ESUN]-1659914908307
GPR[SSUN]-1659914908307
-1345859678
GPR[SPVATF]-1659914908551
GPR[EPVATF]-1659914910572
GPR[SPS]-1659914910572
[1782388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:775.
GPR[EPS]-1659914911150
GPR[SPVATF]-1659914911150
GPR[EPVATF]-1659914913287
GPR[SPS]-1659914913287
[1785098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:775.
GPR[EPS]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
GPR[ESUN]-1659914913860
GPR[SSUN]-1659914913860
-711686510
GPR[ESUN]-1659914914082
GPR[SSUN]-1659914914082
-711686510
GPR[SPVATF]-1659914914302
GPR[EPVATF]-1659914916483
GPR[SPS]-1659914916483
[1788255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:156.
GPR[EPS]-1659914917017
GPR[ESUN]-1659914917017
GPR[SSUN]-1659914917017
466431456
GPR[SPVATF]-1659914917383
GPR[EPVATF]-1659914919684
GPR[SPS]-1659914919684
[1791552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:538.
GPR[EPS]-1659914920314
GPR[SPVATF]-1659914920314
GPR[EPVATF]-1659914922528
GPR[SPS]-1659914922528
[1794403] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:538.
GPR[EPS]-1659914923165
GPR[ESUN]-1659914923165
GPR[SSUN]-1659914923165
-2097135580
GPR[SPVATF]-1659914923371
GPR[EPVATF]-1659914925593
GPR[SPS]-1659914925593
[1797303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:793.
GPR[EPS]-1659914926065
GPR[SPVATF]-1659914926066
GPR[EPVATF]-1659914928229
GPR[SPS]-1659914928229
[1799944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:793.
GPR[EPS]-1659914928706
GPR[ESUN]-1659914928706
GPR[SSUN]-1659914928706
-2097135580
GPR[ESUN]-1659914928913
GPR[SSUN]-1659914928913
-2097135580
GPR[SPVATF]-1659914929117
GPR[EPVATF]-1659914935574
GPR[SPS]-1659914935574
[1807693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:787.
GPR[EPS]-1659914936455
GPR[SPVATF]-1659914936455
GPR[EPVATF]-1659914937891
GPR[SPS]-1659914937891
[1809641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:787.
GPR[EPS]-1659914938403
GPR[ESUN]-1659914938403
GPR[SSUN]-1659914938403
-2097135580
GPR[SPVATF]-1659914938645
GPR[EPVATF]-1659914940029
GPR[SPS]-1659914940029
[1811794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:786.
GPR[EPS]-1659914940556
GPR[ESUN]-1659914940556
GPR[SSUN]-1659914940556
-2097135580
GPR[ESUN]-1659914940764
GPR[SSUN]-1659914940764
-2097135580
GPR[ESUN]-1659914940970
GPR[SSUN]-1659914940970
-1117079791
GPR[ESUN]-1659914941168
GPR[SSUN]-1659914941168
-1117079791
GPR[SPVATF]-1659914941364
GPR[EPVATF]-1659914941553
[1812791] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914941553
GPR[SSUN]-1659914941553
-1117079791
GPR[SPVATF]-1659914941751
GPR[EPVATF]-1659914941939
[1813177] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914941939
GPR[SSUN]-1659914941939
-1117079791
GPR[SPVATF]-1659914942205
GPR[EPVATF]-1659914942396
[1813634] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914942396
GPR[SSUN]-1659914942396
-1117079791
GPR[SPVATF]-1659914942596
GPR[EPVATF]-1659914942782
[1814020] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914942782
GPR[SSUN]-1659914942782
-1117079791
GPR[ESUN]-1659914942980
GPR[SSUN]-1659914942980
-1117079791
GPR[SPVATF]-1659914943177
GPR[EPVATF]-1659914943362
[1814600] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914943362
GPR[SSUN]-1659914943362
-898632916
GPR[SPVATF]-1659914943573
GPR[EPVATF]-1659914944957
GPR[SPS]-1659914944957
[1816796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:77.
GPR[EPS]-1659914945558
GPR[ESUN]-1659914945558
GPR[SSUN]-1659914945558
-1117079791
GPR[SPVATF]-1659914945759
GPR[EPVATF]-1659914945947
[1817186] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914945948
GPR[SSUN]-1659914945948
-1696950979
GPR[SPVATF]-1659914946172
GPR[EPVATF]-1659914947543
GPR[SPS]-1659914947543
[1819367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SemanticReverseAbstractInterpreter:168.
GPR[EPS]-1659914948129
GPR[ESUN]-1659914948129
GPR[SSUN]-1659914948129
-711686510
GPR[SPVATF]-1659914948357
GPR[EPVATF]-1659914949784
GPR[SPS]-1659914949784
[1821581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ChainableReverseAbstractInterpreter:117.
GPR[EPS]-1659914950343
GPR[ESUN]-1659914950343
GPR[SSUN]-1659914950344
466431456
GPR[SPVATF]-1659914950596
GPR[EPVATF]-1659914951947
GPR[SPS]-1659914951947
[1823874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1182.
GPR[EPS]-1659914952636
GPR[SPVATF]-1659914952636
GPR[EPVATF]-1659914953949
GPR[SPS]-1659914953949
[1825815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1182.
GPR[EPS]-1659914954577
GPR[ESUN]-1659914954577
GPR[SSUN]-1659914954578
466431456
GPR[ESUN]-1659914954829
GPR[SSUN]-1659914954829
-1797850673
GPR[SPVATF]-1659914955122
GPR[EPVATF]-1659914956496
GPR[SPS]-1659914956496
[1828384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:819.
GPR[EPS]-1659914957146
GPR[ESUN]-1659914957146
GPR[SSUN]-1659914957146
-1797850673
GPR[SPVATF]-1659914957390
GPR[EPVATF]-1659914958820
GPR[SPS]-1659914958820
[1830647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:815.
GPR[EPS]-1659914959409
GPR[SPVATF]-1659914959410
GPR[EPVATF]-1659914960756
GPR[SPS]-1659914960756
[1832627] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:815.
GPR[EPS]-1659914961389
GPR[ESUN]-1659914961389
GPR[SSUN]-1659914961389
GPR[ESUN]-1659914961389
GPR[SSUN]-1659914961389
-1117079791
GPR[ESUN]-1659914961588
GPR[SSUN]-1659914961588
-1117079791
GPR[SPVATF]-1659914961784
GPR[EPVATF]-1659914961968
[1833206] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659914961968
GPR[EPVATF]-1659914962153
[1833391] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914962153
GPR[SSUN]-1659914962153
-1117079791
GPR[SPVATF]-1659914962351
GPR[EPVATF]-1659914962537
[1833775] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914962537
GPR[SSUN]-1659914962537
-1117079791
GPR[SPVATF]-1659914962734
GPR[EPVATF]-1659914962921
[1834159] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659914962921
GPR[SSUN]-1659914962921
-1696950979
GPR[SPVATF]-1659914963144
GPR[EPVATF]-1659914964541
GPR[SPS]-1659914964541
[1836387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SemanticReverseAbstractInterpreter:128.
GPR[EPS]-1659914965150
GPR[ESUN]-1659914965150
GPR[SSUN]-1659914965150
-1696950979
GPR[ESUN]-1659914965375
GPR[SSUN]-1659914965375
-2097135580
GPR[ESUN]-1659914965577
GPR[SSUN]-1659914965577
2433571
GPR[ESUN]-1659914965811
GPR[SSUN]-1659914965811
-1605808871
GPR[ESUN]-1659914966045
GPR[SSUN]-1659914966045
-1605808871
GPR[SPVATF]-1659914966279
GPR[EPVATF]-1659914967688
GPR[SPS]-1659914967688
[1839556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:651.
GPR[EPS]-1659914968318
GPR[SPVATF]-1659914968319
GPR[EPVATF]-1659914969759
GPR[SPS]-1659914969759
[1841561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:651.
GPR[EPS]-1659914970323
GPR[ESUN]-1659914970323
GPR[SSUN]-1659914970323
-1605808871
GPR[SPVATF]-1659914970560
GPR[EPVATF]-1659914972095
GPR[SPS]-1659914972095
[1843901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:650.
GPR[EPS]-1659914972663
GPR[ESUN]-1659914972663
GPR[SSUN]-1659914972663
466431456
GPR[SPVATF]-1659914972913
GPR[EPVATF]-1659914974430
GPR[SPS]-1659914974430
[1846377] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:536.
GPR[EPS]-1659914975139
GPR[SPVATF]-1659914975140
GPR[EPVATF]-1659914976758
GPR[SPS]-1659914976758
[1848723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:536.
GPR[EPS]-1659914977485
GPR[ESUN]-1659914977485
GPR[SSUN]-1659914977485
2433571
GPR[SPVATF]-1659914977733
GPR[EPVATF]-1659914979600
GPR[SPS]-1659914979600
[1851439] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(305).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.Node.this.last!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.next!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.first!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(305).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.util.Collections.emptySet();

        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[1851439] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659914980201
GPR[SSUN]-1659914980201
1290590094
GPR[SPVATF]-1659914980426
GPR[EPVATF]-1659914982353
GPR[SPS]-1659914982353
[1854151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:349.
GPR[EPS]-1659914982913
GPR[ESUN]-1659914982913
GPR[SSUN]-1659914982914
1290590094
GPR[SPVATF]-1659914983141
GPR[EPVATF]-1659914985210
GPR[SPS]-1659914985210
[1857068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:348.
GPR[EPS]-1659914985830
GPR[SPVATF]-1659914985830
GPR[EPVATF]-1659914987918
GPR[SPS]-1659914987918
[1859729] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:348.
GPR[EPS]-1659914988491
GPR[ESUN]-1659914988491
GPR[SSUN]-1659914988491
646738083
GPR[SPVATF]-1659914988775
GPR[EPVATF]-1659914990994
GPR[SPS]-1659914990994
[1862996] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:642.
GPR[EPS]-1659914991758
GPR[ESUN]-1659914991758
GPR[SSUN]-1659914991758
GPR[ESUN]-1659914991758
GPR[SSUN]-1659914991758
GPR[ESUN]-1659914991758
GPR[SSUN]-1659914991758
GPR[ESUN]-1659914991758
GPR[SSUN]-1659914991758
1537627151
GPR[ESUN]-1659914991977
GPR[SSUN]-1659914991977
-1345859678
GPR[ESUN]-1659914992234
GPR[SSUN]-1659914992234
-1345859678
GPR[SPVATF]-1659914992483
GPR[EPVATF]-1659914994750
GPR[SPS]-1659914994750
[1866612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:684.
GPR[EPS]-1659914995374
GPR[SPVATF]-1659914995375
GPR[EPVATF]-1659914997555
GPR[SPS]-1659914997555
[1873159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:684.
GPR[EPS]-1659915001921
GPR[ESUN]-1659915001921
GPR[SSUN]-1659915001921
-1345859678
GPR[SPVATF]-1659915002187
GPR[EPVATF]-1659915004170
GPR[SPS]-1659915004170
[1876085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:683.
GPR[EPS]-1659915004847
GPR[ESUN]-1659915004847
GPR[SSUN]-1659915004847
-1345859678
GPR[SPVATF]-1659915005090
GPR[EPVATF]-1659915006501
GPR[SPS]-1659915006501
[1878351] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:682.
GPR[EPS]-1659915007113
GPR[ESUN]-1659915007113
GPR[SSUN]-1659915007113
-1345859678
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
GPR[ESUN]-1659915007359
GPR[SSUN]-1659915007359
466431456
GPR[ESUN]-1659915007614
GPR[SSUN]-1659915007614
466431456
GPR[SPVATF]-1659915007866
GPR[EPVATF]-1659915009297
GPR[SPS]-1659915009297
[1881214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:673.
GPR[EPS]-1659915009976
GPR[ESUN]-1659915009977
GPR[SSUN]-1659915009977
466431456
GPR[ESUN]-1659915010227
GPR[SSUN]-1659915010227
1508981886
GPR[ESUN]-1659915010441
GPR[SSUN]-1659915010441
1508981886
GPR[ESUN]-1659915010653
GPR[SSUN]-1659915010653
1290590094
GPR[ESUN]-1659915010877
GPR[SSUN]-1659915010877
1290590094
GPR[ESUN]-1659915011099
GPR[SSUN]-1659915011099
1290590094
GPR[SPVATF]-1659915011340
GPR[EPVATF]-1659915012702
GPR[SPS]-1659915012702
[1884549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:353.
GPR[EPS]-1659915013311
GPR[ESUN]-1659915013311
GPR[SSUN]-1659915013311
1290590094
GPR[ESUN]-1659915013535
GPR[SSUN]-1659915013535
1290590094
GPR[SPVATF]-1659915013758
GPR[EPVATF]-1659915015129
GPR[SPS]-1659915015129
[1886924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:346.
GPR[EPS]-1659915015686
GPR[ESUN]-1659915015687
GPR[SSUN]-1659915015687
1290590094
GPR[ESUN]-1659915015909
GPR[SSUN]-1659915015909
1290590094
GPR[ESUN]-1659915016130
GPR[SSUN]-1659915016130
1290590094
GPR[ESUN]-1659915016351
GPR[SSUN]-1659915016351
-1797850673
GPR[SPVATF]-1659915016597
GPR[EPVATF]-1659915017969
GPR[SPS]-1659915017969
[1889789] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1862.
GPR[EPS]-1659915018551
GPR[ESUN]-1659915018551
GPR[SSUN]-1659915018551
-1797850673
GPR[SPVATF]-1659915018800
GPR[EPVATF]-1659915020149
GPR[SPS]-1659915020149
[1892015] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:784.
GPR[EPS]-1659915020777
GPR[ESUN]-1659915020777
GPR[SSUN]-1659915020777
-1605808871
GPR[ESUN]-1659915021010
GPR[SSUN]-1659915021010
-1605808871
GPR[ESUN]-1659915021240
GPR[SSUN]-1659915021240
-1605808871
GPR[SPVATF]-1659915021472
GPR[EPVATF]-1659915022850
GPR[SPS]-1659915022850
GPR[EPS]-1659915059343
GPR[ESUN]-1659915059343
GPR[SSUN]-1659915059343
-1605808871
GPR[ESUN]-1659915059597
GPR[SSUN]-1659915059597
-1605808871
GPR[SPVATF]-1659915059831
GPR[EPVATF]-1659915061199
GPR[SPS]-1659915061199
GPR[EPS]-1659915092357
GPR[ESUN]-1659915092358
GPR[SSUN]-1659915092358
-1813088701
GPR[SPVATF]-1659915092600
GPR[EPVATF]-1659915094002
GPR[SPS]-1659915094002
[1965812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MemoizedScopeCreator:85.
GPR[EPS]-1659915094574
GPR[ESUN]-1659915094574
GPR[SSUN]-1659915094574
-1797850673
GPR[SPVATF]-1659915094853
GPR[EPVATF]-1659915096293
GPR[SPS]-1659915096293
[1968189] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:909.
GPR[EPS]-1659915096951
GPR[ESUN]-1659915096951
GPR[SSUN]-1659915096951
-1797850673
GPR[SPVATF]-1659915097212
GPR[EPVATF]-1659915098709
GPR[SPS]-1659915098709
[1970642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:902.
GPR[EPS]-1659915099404
GPR[SPVATF]-1659915099404
GPR[EPVATF]-1659915100832
GPR[SPS]-1659915100832
[1972858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:902.
GPR[EPS]-1659915101620
GPR[ESUN]-1659915101620
GPR[SSUN]-1659915101620
-2097135580
GPR[SPVATF]-1659915101884
GPR[EPVATF]-1659915103346
GPR[SPS]-1659915103347
[1975102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:1032.
GPR[EPS]-1659915103864
GPR[ESUN]-1659915103864
GPR[SSUN]-1659915103864
GPR[ESUN]-1659915103864
GPR[SSUN]-1659915103864
GPR[ESUN]-1659915103864
GPR[SSUN]-1659915103864
GPR[ESUN]-1659915103864
GPR[SSUN]-1659915103864
-1797850673
GPR[SPVATF]-1659915104110
GPR[EPVATF]-1659915105608
GPR[SPS]-1659915105608
[1977517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:901.
GPR[EPS]-1659915106279
GPR[SPVATF]-1659915106279
GPR[EPVATF]-1659915107849
GPR[SPS]-1659915107849
[1979733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:901.
GPR[EPS]-1659915108495
GPR[ESUN]-1659915108495
GPR[SSUN]-1659915108495
-1797850673
GPR[ESUN]-1659915108747
GPR[SSUN]-1659915108747
-898632916
GPR[SPVATF]-1659915108955
GPR[EPVATF]-1659915110666
GPR[SPS]-1659915110666
[1982427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:66.
GPR[EPS]-1659915111189
GPR[ESUN]-1659915111189
GPR[SSUN]-1659915111189
GPR[ESUN]-1659915111189
GPR[SSUN]-1659915111189
-1605808871
GPR[SPVATF]-1659915111429
GPR[EPVATF]-1659915113214
GPR[SPS]-1659915113214
[1985042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:646.
GPR[EPS]-1659915113804
GPR[SPVATF]-1659915113804
GPR[EPVATF]-1659915115856
GPR[SPS]-1659915115856
[1987750] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:646.
GPR[EPS]-1659915116512
GPR[ESUN]-1659915116512
GPR[SSUN]-1659915116512
-1605808871
GPR[SPVATF]-1659915116752
GPR[EPVATF]-1659915118750
GPR[SPS]-1659915118750
[1990538] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:645.
GPR[EPS]-1659915119300
GPR[ESUN]-1659915119300
GPR[SSUN]-1659915119300
-1605808871
GPR[SPVATF]-1659915119545
GPR[EPVATF]-1659915121704
GPR[SPS]-1659915121704
[1993523] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:644.
GPR[EPS]-1659915122285
GPR[ESUN]-1659915122285
GPR[SSUN]-1659915122286
-2097135580
GPR[ESUN]-1659915122508
GPR[SSUN]-1659915122508
1187751237
GPR[ESUN]-1659915122793
GPR[SSUN]-1659915122793
-1117079791
GPR[SPVATF]-1659915122993
GPR[EPVATF]-1659915123193
[1994431] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659915123193
GPR[SSUN]-1659915123193
GPR[ESUN]-1659915123193
GPR[SSUN]-1659915123194
GPR[ESUN]-1659915123194
GPR[SSUN]-1659915123194
GPR[ESUN]-1659915123194
GPR[SSUN]-1659915123194
GPR[ESUN]-1659915123194
GPR[SSUN]-1659915123194
GPR[ESUN]-1659915123194
GPR[SSUN]-1659915123194
GPR[ESUN]-1659915123194
GPR[SSUN]-1659915123194
GPR[ESUN]-1659915123194
GPR[SSUN]-1659915123194
GPR[ESUN]-1659915123194
GPR[SSUN]-1659915123194
646738083
GPR[SPVATF]-1659915123482
GPR[EPVATF]-1659915125658
GPR[SPS]-1659915125658
[1997597] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:596.
GPR[EPS]-1659915126359
GPR[ESUN]-1659915126359
GPR[SSUN]-1659915126360
-622774852
GPR[SPVATF]-1659915126581
GPR[EPVATF]-1659915128806
GPR[SPS]-1659915128806
[2000562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:446.
GPR[EPS]-1659915129324
GPR[ESUN]-1659915129324
GPR[SSUN]-1659915129324
646738083
GPR[ESUN]-1659915129627
GPR[SSUN]-1659915129627
646738083
GPR[SPVATF]-1659915129907
GPR[EPVATF]-1659915132080
GPR[SPS]-1659915132080
[2003985] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:663.
GPR[EPS]-1659915132747
GPR[ESUN]-1659915132747
GPR[SSUN]-1659915132747
646738083
GPR[ESUN]-1659915133030
GPR[SSUN]-1659915133030
646738083
GPR[SPVATF]-1659915133354
GPR[EPVATF]-1659915135545
GPR[SPS]-1659915135545
[2007447] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:648.
GPR[EPS]-1659915136209
GPR[ESUN]-1659915136209
GPR[SSUN]-1659915136210
646738083
GPR[SPVATF]-1659915136491
GPR[EPVATF]-1659915142285
GPR[SPS]-1659915142285
[2014453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:645.
GPR[EPS]-1659915143215
GPR[ESUN]-1659915143215
GPR[SSUN]-1659915143215
646738083
GPR[SPVATF]-1659915143494
GPR[EPVATF]-1659915144919
GPR[SPS]-1659915144919
[2016914] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:641.
GPR[EPS]-1659915145676
GPR[SPVATF]-1659915145676
GPR[EPVATF]-1659915147068
GPR[SPS]-1659915147068
[2018986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:641.
GPR[EPS]-1659915147748
GPR[ESUN]-1659915147749
GPR[SSUN]-1659915147749
646738083
GPR[SPVATF]-1659915148028
GPR[EPVATF]-1659915149451
GPR[SPS]-1659915149451
[2021378] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:636.
GPR[EPS]-1659915150140
GPR[SPVATF]-1659915150141
GPR[EPVATF]-1659915151499
GPR[SPS]-1659915151499
[2023475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:636.
GPR[EPS]-1659915152237
GPR[ESUN]-1659915152237
GPR[SSUN]-1659915152237
646738083
GPR[ESUN]-1659915152514
GPR[SSUN]-1659915152514
646738083
GPR[ESUN]-1659915152787
GPR[SSUN]-1659915152787
646738083
GPR[ESUN]-1659915153063
GPR[SSUN]-1659915153063
646738083
GPR[SPVATF]-1659915153353
GPR[EPVATF]-1659915154751
GPR[SPS]-1659915154751
[2026704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:632.
GPR[EPS]-1659915155466
GPR[ESUN]-1659915155466
GPR[SSUN]-1659915155466
646738083
GPR[SPVATF]-1659915155744
GPR[EPVATF]-1659915157120
GPR[SPS]-1659915157120
[2029034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:609.
GPR[EPS]-1659915157796
GPR[SPVATF]-1659915157797
GPR[EPVATF]-1659915159214
GPR[SPS]-1659915159214
[2031132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:609.
GPR[EPS]-1659915159894
GPR[ESUN]-1659915159894
GPR[SSUN]-1659915159894
646738083
GPR[ESUN]-1659915160171
GPR[SSUN]-1659915160171
646738083
GPR[ESUN]-1659915160442
GPR[SSUN]-1659915160442
646738083
GPR[SPVATF]-1659915160716
GPR[EPVATF]-1659915162113
GPR[SPS]-1659915162113
[2034155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:589.
GPR[EPS]-1659915162917
GPR[SPVATF]-1659915162917
GPR[EPVATF]-1659915164303
GPR[SPS]-1659915164303
[2036281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:589.
GPR[EPS]-1659915165043
GPR[ESUN]-1659915165043
GPR[SSUN]-1659915165043
646738083
GPR[ESUN]-1659915165319
GPR[SSUN]-1659915165319
466431456
GPR[SPVATF]-1659915165568
GPR[EPVATF]-1659915167000
GPR[SPS]-1659915167000
[2038888] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:667.
GPR[EPS]-1659915167650
GPR[SPVATF]-1659915167651
GPR[EPVATF]-1659915169067
GPR[SPS]-1659915169067
[2040945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:667.
GPR[EPS]-1659915169707
GPR[ESUN]-1659915169707
GPR[SSUN]-1659915169707
466431456
GPR[ESUN]-1659915169956
GPR[SSUN]-1659915169956
466431456
GPR[SPVATF]-1659915170205
GPR[EPVATF]-1659915171736
GPR[SPS]-1659915171736
[2043621] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:661.
GPR[EPS]-1659915172383
GPR[SPVATF]-1659915172383
GPR[EPVATF]-1659915173809
GPR[SPS]-1659915173809
[2045764] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:661.
GPR[EPS]-1659915174526
GPR[ESUN]-1659915174526
GPR[SSUN]-1659915174526
466431456
GPR[ESUN]-1659915174781
GPR[SSUN]-1659915174781
466431456
GPR[SPVATF]-1659915175093
GPR[EPVATF]-1659915176515
GPR[SPS]-1659915176515
[2048421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:650.
GPR[EPS]-1659915177183
GPR[ESUN]-1659915177183
GPR[SSUN]-1659915177183
466431456
GPR[SPVATF]-1659915177433
GPR[EPVATF]-1659915179028
GPR[SPS]-1659915179028
[2050936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:648.
GPR[EPS]-1659915179698
GPR[ESUN]-1659915179698
GPR[SSUN]-1659915179698
466431456
GPR[ESUN]-1659915179949
GPR[SSUN]-1659915179949
466431456
GPR[SPVATF]-1659915180200
GPR[EPVATF]-1659915181704
GPR[SPS]-1659915181704
[2053661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:279.
GPR[EPS]-1659915182423
GPR[ESUN]-1659915182423
GPR[SSUN]-1659915182423
466431456
GPR[SPVATF]-1659915182673
GPR[EPVATF]-1659915184220
GPR[SPS]-1659915184220
[2056110] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:278.
GPR[EPS]-1659915184872
GPR[ESUN]-1659915184872
GPR[SSUN]-1659915184872
-1605808871
GPR[SPVATF]-1659915185176
GPR[EPVATF]-1659915186736
GPR[SPS]-1659915186736
GPR[EPS]-1659915212921
GPR[ESUN]-1659915212922
GPR[SSUN]-1659915212922
-1605808871
GPR[ESUN]-1659915213158
GPR[SSUN]-1659915213158
-1605808871
GPR[SPVATF]-1659915213401
GPR[EPVATF]-1659915215126
GPR[SPS]-1659915215126
GPR[EPS]-1659915242021
GPR[SPVATF]-1659915242021
GPR[EPVATF]-1659915244083
GPR[SPS]-1659915244083
GPR[EPS]-1659915282481
GPR[ESUN]-1659915282481
GPR[SSUN]-1659915282481
-1605808871
GPR[ESUN]-1659915282723
GPR[SSUN]-1659915282723
-1117079791
GPR[ESUN]-1659915282922
GPR[SSUN]-1659915282922
-1117079791
GPR[SPVATF]-1659915283120
GPR[EPVATF]-1659915283321
[2154560] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659915283322
GPR[EPVATF]-1659915283528
[2154766] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659915283528
GPR[SSUN]-1659915283528
-1117079791
GPR[SPVATF]-1659915283729
GPR[EPVATF]-1659915283935
[2155174] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659915283936
GPR[SSUN]-1659915283936
-1117079791
GPR[SPVATF]-1659915284133
GPR[EPVATF]-1659915284331
[2155569] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659915284331
GPR[SSUN]-1659915284332
-1117079791
GPR[ESUN]-1659915284530
GPR[SSUN]-1659915284530
-1117079791
GPR[SPVATF]-1659915284738
GPR[EPVATF]-1659915284935
[2156173] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659915284935
GPR[SSUN]-1659915284935
79711797
GPR[ESUN]-1659915285177
GPR[SSUN]-1659915285177
-1797850673
GPR[SPVATF]-1659915285425
GPR[EPVATF]-1659915287540
GPR[SPS]-1659915287540
[2159182] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, n.getParent())) {
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        if (n.isNE()) {
                            result = result.not();
                        }
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            if ((info != null) && info.hasType()) {
                visitAnnotatedAssignGetprop(t, assign, info.getType().evaluate(t.getScope(), typeRegistry), object, property, rvalue);
                return;
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                    }
                } else {
                }
                return;
            }
            if (object.isGetProp()) {
                com.google.javascript.rhino.Node object2 = object.getFirstChild();
                java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
                if ("prototype".equals(property2)) {
                    com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                    if (jsType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                        if (functionType.isConstructor() || functionType.isInterface()) {
                            checkDeclaredPropertyInheritance(t, assign, functionType, property, info, getJSType(rvalue));
                        }
                    } else {
                    }
                    return;
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type.getPropertyType(property), object, property);
                }
                return;
            }
        } else if (lvalue.isName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getString());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
            }
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getPrototype().hasProperty(propertyName);
        boolean superInterfacesHasProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfacesHasProperty = superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfacesHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType topInstanceType = (superClassHasProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        if (((reportMissingOverride.isOn() && ctorType.isConstructor()) && (!declaredOverride)) && superClassHasProperty) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (!declaredOverride) {
            return;
        }
        if (superClassHasProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfacesHasProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (!foundInterfaceProperty) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    private void visitAnnotatedAssignGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node rvalue) {
        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type, object, property);
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(358).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("function",function);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("returnType",returnType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("valueNode",valueNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("functionType",functionType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(358).collectionEnds();
                }
                if (runtimeAngelicValue)
                    actualReturnType = getJSType(valueNode);

            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[2159183] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659915287945
GPR[SSUN]-1659915287945
-1345859678
GPR[ESUN]-1659915288201
GPR[SSUN]-1659915288201
-1345859678
GPR[ESUN]-1659915288446
GPR[SSUN]-1659915288447
1537627151
GPR[ESUN]-1659915288650
GPR[SSUN]-1659915288650
-1345859678
GPR[ESUN]-1659915288891
GPR[SSUN]-1659915288891
-1605808871
GPR[SPVATF]-1659915289137
GPR[EPVATF]-1659915291313
GPR[SPS]-1659915291313
[2163119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:347.
GPR[EPS]-1659915291881
GPR[SPVATF]-1659915291881
GPR[EPVATF]-1659915294058
GPR[SPS]-1659915294058
[2165853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:347.
GPR[EPS]-1659915294615
GPR[ESUN]-1659915294615
GPR[SSUN]-1659915294615
GPR[ESUN]-1659915294615
GPR[SSUN]-1659915294615
GPR[ESUN]-1659915294615
GPR[SSUN]-1659915294615
GPR[ESUN]-1659915294615
GPR[SSUN]-1659915294615
GPR[ESUN]-1659915294615
GPR[SSUN]-1659915294615
1290590094
GPR[ESUN]-1659915294839
GPR[SSUN]-1659915294839
466431456
GPR[SPVATF]-1659915295103
GPR[EPVATF]-1659915297929
GPR[SPS]-1659915297929
[2170057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:426.
GPR[EPS]-1659915298819
GPR[ESUN]-1659915298819
GPR[SSUN]-1659915298819
466431456
GPR[SPVATF]-1659915299071
GPR[EPVATF]-1659915300468
GPR[SPS]-1659915300469
[2172449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:425.
GPR[EPS]-1659915301211
GPR[SPVATF]-1659915301211
GPR[EPVATF]-1659915302609
GPR[SPS]-1659915302609
[2174509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:425.
GPR[EPS]-1659915303271
GPR[ESUN]-1659915303271
GPR[SSUN]-1659915303271
466431456
GPR[ESUN]-1659915303519
GPR[SSUN]-1659915303519
466431456
GPR[SPVATF]-1659915303767
GPR[EPVATF]-1659915305212
GPR[SPS]-1659915305212
[2177155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:423.
GPR[EPS]-1659915305917
GPR[SPVATF]-1659915305917
GPR[EPVATF]-1659915307289
GPR[SPS]-1659915307289
[2179163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:423.
GPR[EPS]-1659915307925
GPR[ESUN]-1659915307925
GPR[SSUN]-1659915307925
466431456
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308171
GPR[ESUN]-1659915308171
GPR[SSUN]-1659915308172
GPR[ESUN]-1659915308172
GPR[SSUN]-1659915308172
GPR[ESUN]-1659915308172
GPR[SSUN]-1659915308172
-1464408086
GPR[ESUN]-1659915308421
GPR[SSUN]-1659915308421
-1464408086
GPR[SPVATF]-1659915308668
GPR[EPVATF]-1659915310125
GPR[SPS]-1659915310125
[2182005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder$AstFunctionContents:834.
GPR[EPS]-1659915310767
GPR[ESUN]-1659915310767
GPR[SSUN]-1659915310767
646738083
GPR[SPVATF]-1659915311048
GPR[EPVATF]-1659915312410
GPR[SPS]-1659915312410
[2184360] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer:1946.
GPR[EPS]-1659915313122
GPR[ESUN]-1659915313122
GPR[SSUN]-1659915313122
GPR[ESUN]-1659915313122
GPR[SSUN]-1659915313122
GPR[ESUN]-1659915313122
GPR[SSUN]-1659915313122
GPR[ESUN]-1659915313122
GPR[SSUN]-1659915313122
-1797850673
GPR[ESUN]-1659915313407
GPR[SSUN]-1659915313407
-1797850673
GPR[SPVATF]-1659915313651
GPR[EPVATF]-1659915315018
GPR[SPS]-1659915315018
GPR[EPS]-1659915344143
GPR[ESUN]-1659915344143
GPR[SSUN]-1659915344143
-1797850673
GPR[SPVATF]-1659915344391
GPR[EPVATF]-1659915345835
GPR[SPS]-1659915345835
[2217476] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, n.getParent())) {
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        if (n.isNE()) {
                            result = result.not();
                        }
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            if ((info != null) && info.hasType()) {
                visitAnnotatedAssignGetprop(t, assign, info.getType().evaluate(t.getScope(), typeRegistry), object, property, rvalue);
                return;
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                    }
                } else {
                }
                return;
            }
            if (object.isGetProp()) {
                com.google.javascript.rhino.Node object2 = object.getFirstChild();
                java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
                if ("prototype".equals(property2)) {
                    com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                    if (jsType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                        if (functionType.isConstructor() || functionType.isInterface()) {
                            checkDeclaredPropertyInheritance(t, assign, functionType, property, info, getJSType(rvalue));
                        }
                    } else {
                    }
                    return;
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type.getPropertyType(property), object, property);
                }
                return;
            }
        } else if (lvalue.isName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getString());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
            }
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getPrototype().hasProperty(propertyName);
        boolean superInterfacesHasProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfacesHasProperty = superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfacesHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType topInstanceType = (superClassHasProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        if (((reportMissingOverride.isOn() && ctorType.isConstructor()) && (!declaredOverride)) && superClassHasProperty) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (!declaredOverride) {
            return;
        }
        if (superClassHasProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getPrototype().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfacesHasProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (!foundInterfaceProperty) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    private void visitAnnotatedAssignGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node rvalue) {
        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type, object, property);
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(369).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("function",function);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("returnType",returnType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("valueNode == null",valueNode == null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("valueNode",valueNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("functionType",functionType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(369).collectionEnds();
            }
            if (runtimeAngelicValue) if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[2217476] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659915346239
GPR[EPVATF]-1659915347666
GPR[SPS]-1659915347666
[2219484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1674.
GPR[EPS]-1659915348247
GPR[ESUN]-1659915348247
GPR[SSUN]-1659915348247
-1797850673
GPR[ESUN]-1659915348492
GPR[SSUN]-1659915348492
-1797850673
GPR[SPVATF]-1659915348737
GPR[EPVATF]-1659915350104
GPR[SPS]-1659915350104
[2222042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1667.
GPR[EPS]-1659915350804
GPR[SPVATF]-1659915350804
GPR[EPVATF]-1659915352203
GPR[SPS]-1659915352203
[2224030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1667.
GPR[EPS]-1659915352792
GPR[ESUN]-1659915352792
GPR[SSUN]-1659915352792
-1797850673
GPR[ESUN]-1659915353045
GPR[SSUN]-1659915353045
-1797850673
GPR[ESUN]-1659915353296
GPR[SSUN]-1659915353296
-1797850673
GPR[SPVATF]-1659915353544
GPR[EPVATF]-1659915354969
GPR[SPS]-1659915354969
GPR[EPS]-1659915387246
GPR[SPVATF]-1659915387246
GPR[EPVATF]-1659915388740
GPR[SPS]-1659915388740
GPR[EPS]-1659915420777
GPR[ESUN]-1659915420777
GPR[SSUN]-1659915420777
-1797850673
GPR[ESUN]-1659915421029
GPR[SSUN]-1659915421029
-1797850673
GPR[SPVATF]-1659915421275
GPR[EPVATF]-1659915422934
GPR[SPS]-1659915422934
[2294761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1655.
GPR[EPS]-1659915423523
GPR[SPVATF]-1659915423523
GPR[EPVATF]-1659915425203
GPR[SPS]-1659915425203
GPR[EPS]-1659915457922
GPR[ESUN]-1659915457922
GPR[SSUN]-1659915457922
-1797850673
GPR[ESUN]-1659915458174
GPR[SSUN]-1659915458174
-1797850673
GPR[SPVATF]-1659915458420
GPR[EPVATF]-1659915460475
GPR[SPS]-1659915460475
[2332297] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:559.
GPR[EPS]-1659915461059
GPR[ESUN]-1659915461059
GPR[SSUN]-1659915461059
-1797850673
GPR[SPVATF]-1659915461305
GPR[EPVATF]-1659915463392
GPR[SPS]-1659915463392
[2335199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:558.
GPR[EPS]-1659915463961
GPR[ESUN]-1659915463961
GPR[SSUN]-1659915463961
-1797850673
GPR[SPVATF]-1659915464208
GPR[EPVATF]-1659915466321
GPR[SPS]-1659915466321
GPR[EPS]-1659915498513
GPR[ESUN]-1659915498514
GPR[SSUN]-1659915498514
GPR[ESUN]-1659915498514
GPR[SSUN]-1659915498514
2346
GPR[ESUN]-1659915498701
GPR[SSUN]-1659915498701
GPR[ESUN]-1659915498701
GPR[SSUN]-1659915498701
GPR[ESUN]-1659915498701
GPR[SSUN]-1659915498701
GPR[ESUN]-1659915498701
GPR[SSUN]-1659915498701
GPR[ESUN]-1659915498701
GPR[SSUN]-1659915498701
GPR[ESUN]-1659915498701
GPR[SSUN]-1659915498701
2433571
GPR[ESUN]-1659915498947
GPR[SSUN]-1659915498947
GPR[ESUN]-1659915498947
GPR[SSUN]-1659915498947
GPR[ESUN]-1659915498947
GPR[SSUN]-1659915498947
GPR[ESUN]-1659915498947
GPR[SSUN]-1659915498947
GPR[ESUN]-1659915498947
GPR[SSUN]-1659915498947
466431456
GPR[ESUN]-1659915499198
GPR[SSUN]-1659915499198
466431456
GPR[SPVATF]-1659915499447
GPR[EPVATF]-1659915501705
GPR[SPS]-1659915501705
[2373710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:421.
GPR[EPS]-1659915502472
GPR[SPVATF]-1659915502472
GPR[EPVATF]-1659915504677
GPR[SPS]-1659915504677
[2376565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:421.
GPR[EPS]-1659915505327
GPR[ESUN]-1659915505327
GPR[SSUN]-1659915505327
466431456
GPR[ESUN]-1659915505578
GPR[SSUN]-1659915505578
466431456
GPR[SPVATF]-1659915505833
GPR[EPVATF]-1659915508015
GPR[SPS]-1659915508016
[2379902] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:418.
GPR[EPS]-1659915508664
GPR[ESUN]-1659915508664
GPR[SSUN]-1659915508664
466431456
GPR[SPVATF]-1659915508956
GPR[EPVATF]-1659915511158
GPR[SPS]-1659915511158
[2383042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:383.
GPR[EPS]-1659915511804
GPR[ESUN]-1659915511804
GPR[SSUN]-1659915511804
466431456
GPR[SPVATF]-1659915512054
GPR[EPVATF]-1659915514314
GPR[SPS]-1659915514314
[2386192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:382.
GPR[EPS]-1659915514954
GPR[ESUN]-1659915514954
GPR[SSUN]-1659915514954
-1234646214
GPR[ESUN]-1659915515160
GPR[SSUN]-1659915515160
-1797850673
GPR[SPVATF]-1659915515410
GPR[EPVATF]-1659915517657
GPR[SPS]-1659915517657
[2389493] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:773.
GPR[EPS]-1659915518256
GPR[ESUN]-1659915518256
GPR[SSUN]-1659915518256
-1797850673
GPR[SPVATF]-1659915518513
GPR[EPVATF]-1659915520714
GPR[SPS]-1659915520714
[2398645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:783.
GPR[EPS]-1659915527407
GPR[SPVATF]-1659915527407
GPR[EPVATF]-1659915529620
GPR[SPS]-1659915529620
[2401794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:783.
GPR[EPS]-1659915530556
GPR[ESUN]-1659915530556
GPR[SSUN]-1659915530556
-1797850673
GPR[SPVATF]-1659915530805
GPR[EPVATF]-1659915532239
GPR[SPS]-1659915532239
[2404096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:772.
GPR[EPS]-1659915532858
GPR[SPVATF]-1659915532858
GPR[EPVATF]-1659915534264
GPR[SPS]-1659915534264
[2406120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:772.
GPR[EPS]-1659915534882
GPR[ESUN]-1659915534882
GPR[SSUN]-1659915534882
466431456
GPR[SPVATF]-1659915535138
GPR[EPVATF]-1659915536512
GPR[SPS]-1659915536512
[2408431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1175.
GPR[EPS]-1659915537193
GPR[ESUN]-1659915537194
GPR[SSUN]-1659915537194
160819208
GPR[SPVATF]-1659915537426
GPR[EPVATF]-1659915538818
GPR[SPS]-1659915538818
[2410640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:656.
GPR[EPS]-1659915539403
GPR[ESUN]-1659915539403
GPR[SSUN]-1659915539403
-1093533311
GPR[ESUN]-1659915539643
GPR[SSUN]-1659915539643
-1093533311
GPR[SPVATF]-1659915539882
GPR[EPVATF]-1659915541346
GPR[SPS]-1659915541346
[2413145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1331.
GPR[EPS]-1659915541907
GPR[ESUN]-1659915541907
GPR[SSUN]-1659915541907
-1093533311
GPR[ESUN]-1659915542140
GPR[SSUN]-1659915542140
466431456
GPR[ESUN]-1659915542389
GPR[SSUN]-1659915542389
466431456
GPR[SPVATF]-1659915542635
GPR[EPVATF]-1659915544032
GPR[SPS]-1659915544032
[2415938] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:490.
GPR[EPS]-1659915544700
GPR[ESUN]-1659915544700
GPR[SSUN]-1659915544700
466431456
GPR[ESUN]-1659915544948
GPR[SSUN]-1659915544948
-1345859678
GPR[ESUN]-1659915545195
GPR[SSUN]-1659915545195
-1345859678
GPR[SPVATF]-1659915545438
GPR[EPVATF]-1659915546892
GPR[SPS]-1659915546892
[4216676] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659917345443
GPR[SSUN]-1659917345443
466431456
GPR[ESUN]-1659917345840
GPR[SSUN]-1659917345840
466431456
GPR[SPVATF]-1659917346095
GPR[EPVATF]-1659917347538
GPR[SPS]-1659917347538
[4219459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1178.
GPR[EPS]-1659917348221
GPR[SPVATF]-1659917348221
GPR[EPVATF]-1659917349682
GPR[SPS]-1659917349682
[4221620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1178.
GPR[EPS]-1659917350382
GPR[ESUN]-1659917350382
GPR[SSUN]-1659917350382
466431456
GPR[SPVATF]-1659917350636
GPR[EPVATF]-1659917352139
GPR[SPS]-1659917352139
[4224117] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1174.
GPR[EPS]-1659917352879
GPR[SPVATF]-1659917352880
GPR[EPVATF]-1659917354436
GPR[SPS]-1659917354436
[4226337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1174.
GPR[EPS]-1659917355099
GPR[ESUN]-1659917355099
GPR[SSUN]-1659917355099
466431456
GPR[ESUN]-1659917355355
GPR[SSUN]-1659917355355
GPR[ESUN]-1659917355355
GPR[SSUN]-1659917355355
GPR[ESUN]-1659917355355
GPR[SSUN]-1659917355355
GPR[ESUN]-1659917355355
GPR[SSUN]-1659917355355
GPR[ESUN]-1659917355355
GPR[SSUN]-1659917355355
GPR[ESUN]-1659917355355
GPR[SSUN]-1659917355355
GPR[ESUN]-1659917355355
GPR[SSUN]-1659917355355
-2097135580
GPR[ESUN]-1659917355565
GPR[SSUN]-1659917355565
-2097135580
GPR[SPVATF]-1659917355774
GPR[EPVATF]-1659917357301
GPR[SPS]-1659917357301
[4229051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:783.
GPR[EPS]-1659917357814
GPR[SPVATF]-1659917357814
GPR[EPVATF]-1659917359368
GPR[SPS]-1659917359368
[4231122] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:783.
GPR[EPS]-1659917359884
GPR[ESUN]-1659917359884
GPR[SSUN]-1659917359884
-2097135580
GPR[SPVATF]-1659917360095
GPR[EPVATF]-1659917361752
GPR[SPS]-1659917361752
[4233496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:779.
GPR[EPS]-1659917362258
GPR[SPVATF]-1659917362258
GPR[EPVATF]-1659917364021
GPR[SPS]-1659917364021
GPR[EPS]-1659917385051
GPR[ESUN]-1659917385051
GPR[SSUN]-1659917385051
160819208
GPR[SPVATF]-1659917385285
GPR[EPVATF]-1659917387387
GPR[SPS]-1659917387387
[4259186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:660.
GPR[EPS]-1659917387948
GPR[ESUN]-1659917387948
GPR[SSUN]-1659917387948
160819208
GPR[ESUN]-1659917388188
GPR[SSUN]-1659917388188
160819208
GPR[SPVATF]-1659917388418
GPR[EPVATF]-1659917390588
GPR[SPS]-1659917390588
[4262375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:659.
GPR[EPS]-1659917391137
GPR[SPVATF]-1659917391137
GPR[EPVATF]-1659917393336
GPR[SPS]-1659917393336
[4265151] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:659.
GPR[EPS]-1659917393913
GPR[ESUN]-1659917393913
GPR[SSUN]-1659917393913
160819208
GPR[SPVATF]-1659917394143
GPR[EPVATF]-1659917396364
GPR[SPS]-1659917396364
[4268172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:655.
GPR[EPS]-1659917396934
GPR[SPVATF]-1659917396935
GPR[EPVATF]-1659917399188
GPR[SPS]-1659917399188
[4270982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:655.
GPR[EPS]-1659917399744
GPR[ESUN]-1659917399744
GPR[SSUN]-1659917399744
160819208
GPR[SPVATF]-1659917399981
GPR[EPVATF]-1659917402283
GPR[SPS]-1659917402283
[4274094] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:639.
GPR[EPS]-1659917402856
GPR[ESUN]-1659917402856
GPR[SSUN]-1659917402856
160819208
GPR[ESUN]-1659917403095
GPR[SSUN]-1659917403095
160819208
GPR[ESUN]-1659917403327
GPR[SSUN]-1659917403327
160819208
GPR[SPVATF]-1659917403555
GPR[EPVATF]-1659917405860
GPR[SPS]-1659917405860
[4277865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:344.
GPR[EPS]-1659917406627
GPR[ESUN]-1659917406627
GPR[SSUN]-1659917406627
-1093533311
GPR[SPVATF]-1659917406867
GPR[EPVATF]-1659917409108
GPR[SPS]-1659917409108
[4280871] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:645.
GPR[EPS]-1659917409633
GPR[SPVATF]-1659917409633
GPR[EPVATF]-1659917411898
GPR[SPS]-1659917411898
[4283734] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:645.
GPR[EPS]-1659917412496
GPR[ESUN]-1659917412496
GPR[SSUN]-1659917412496
561857265
GPR[ESUN]-1659917412684
GPR[SSUN]-1659917412684
1537627151
GPR[SPVATF]-1659917412892
GPR[EPVATF]-1659917420423
GPR[SPS]-1659917420423
[4292284] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:174.
GPR[EPS]-1659917421047
GPR[ESUN]-1659917421047
GPR[SSUN]-1659917421047
1537627151
GPR[SPVATF]-1659917421256
GPR[EPVATF]-1659917422893
GPR[SPS]-1659917422893
[4294672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:173.
GPR[EPS]-1659917423434
GPR[SPVATF]-1659917423435
GPR[EPVATF]-1659917425090
GPR[SPS]-1659917425090
[4296877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:173.
GPR[EPS]-1659917425639
GPR[ESUN]-1659917425639
GPR[SSUN]-1659917425639
-1345859678
GPR[ESUN]-1659917425902
GPR[SSUN]-1659917425902
79711797
GPR[ESUN]-1659917426144
GPR[SSUN]-1659917426144
79711797
GPR[SPVATF]-1659917426379
GPR[EPVATF]-1659917427858
GPR[SPS]-1659917427858
[4299664] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope$Var:282.
GPR[EPS]-1659917428426
GPR[ESUN]-1659917428426
GPR[SSUN]-1659917428426
79711797
GPR[SPVATF]-1659917428664
GPR[EPVATF]-1659917430247
GPR[SPS]-1659917430247
[4302058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope$Var:281.
GPR[EPS]-1659917430820
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
GPR[ESUN]-1659917430821
GPR[SSUN]-1659917430821
2433571
GPR[SPVATF]-1659917431066
GPR[EPVATF]-1659917432573
GPR[SPS]-1659917432573
[4304534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1229.
GPR[EPS]-1659917433296
GPR[ESUN]-1659917433296
GPR[SSUN]-1659917433296
-1797850673
GPR[SPVATF]-1659917433545
GPR[EPVATF]-1659917435048
GPR[SPS]-1659917435048
[4306955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:502.
GPR[EPS]-1659917435717
GPR[ESUN]-1659917435717
GPR[SSUN]-1659917435717
-1797850673
GPR[SPVATF]-1659917435965
GPR[EPVATF]-1659917437482
GPR[SPS]-1659917437482
[4309339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:501.
GPR[EPS]-1659917438101
GPR[ESUN]-1659917438101
GPR[SSUN]-1659917438101
1331276989
GPR[SPVATF]-1659917438365
GPR[EPVATF]-1659917439859
GPR[SPS]-1659917439859
[4311453] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class NodeTraversal {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.NodeTraversal.Callback callback;

    private com.google.javascript.rhino.Node curNode;

    public static final com.google.javascript.jscomp.DiagnosticType NODE_TRAVERSAL_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NODE_TRAVERSAL_ERROR", "{0}");

    private final java.util.Deque<com.google.javascript.jscomp.Scope> scopes = new java.util.ArrayDeque<com.google.javascript.jscomp.Scope>();

    private final java.util.Deque<com.google.javascript.rhino.Node> scopeRoots = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    java.util.Deque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> cfgs = new java.util.LinkedList<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>();

    private java.lang.String sourceName;

    private com.google.javascript.rhino.InputId inputId;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private com.google.javascript.jscomp.NodeTraversal.ScopedCallback scopeCallback;

    public interface Callback {
        public abstract boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);

        public abstract void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);
    }

    public interface ScopedCallback extends com.google.javascript.jscomp.NodeTraversal.Callback {
        public abstract void enterScope(com.google.javascript.jscomp.NodeTraversal t);

        public abstract void exitScope(com.google.javascript.jscomp.NodeTraversal t);
    }

    public abstract static class AbstractPostOrderCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }
    }

    public abstract static class AbstractScopedCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }
    }

    public abstract static class AbstractShallowCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || (!parent.isFunction())) || (n == parent.getFirstChild());
        }
    }

    public abstract static class AbstractShallowStatementCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent);
        }
    }

    public abstract static class AbstractNodeTypePruningCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.Set<java.lang.Integer> nodeTypes;

        private final boolean include;

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes) {
            this(nodeTypes, true);
        }

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes, boolean include) {
            this.nodeTypes = nodeTypes;
            this.include = include;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return include == nodeTypes.contains(n.getType());
        }
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        this(compiler, cb, new com.google.javascript.jscomp.SyntacticScopeCreator(compiler));
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.jscomp.ScopeCreator scopeCreator) {
        this.callback = cb;
        if (cb instanceof com.google.javascript.jscomp.NodeTraversal.ScopedCallback) {
            this.scopeCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (cb));
        }
        this.compiler = compiler;
        this.inputId = null;
        this.sourceName = "";
        this.scopeCreator = scopeCreator;
    }

    private void throwUnexpectedException(java.lang.Exception unexpectedException) {
        java.lang.String message = unexpectedException.getMessage();
        if (inputId != null) {
            message = ((unexpectedException.getMessage() + "\n") + formatNodeContext("Node", curNode)) + (curNode == null ? "" : formatNodeContext("Parent", curNode.getParent()));
        }
        compiler.throwInternalError(message, unexpectedException);
    }

    private java.lang.String formatNodeContext(java.lang.String label, com.google.javascript.rhino.Node n) {
        if (n == null) {
            return ("  " + label) + ": NULL";
        }
        return (((("  " + label) + "(") + n.toString(false, false, false)) + "): ") + formatNodePosition(n);
    }

    public void traverse(com.google.javascript.rhino.Node root) {
        try {
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(root);
            sourceName = "";
            curNode = root;
            pushScope(root);
            traverseBranch(root, null);
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    public void traverseRoots(com.google.javascript.rhino.Node... roots) {
        traverseRoots(com.google.common.collect.Lists.newArrayList(roots));
    }

    public void traverseRoots(java.util.List<com.google.javascript.rhino.Node> roots) {
        if (roots.isEmpty()) {
            return;
        }
        try {
            com.google.javascript.rhino.Node scopeRoot = roots.get(0).getParent();
            com.google.common.base.Preconditions.checkState(scopeRoot != null);
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(scopeRoot);
            sourceName = "";
            curNode = scopeRoot;
            pushScope(scopeRoot);
            for (com.google.javascript.rhino.Node root : roots) {
                com.google.common.base.Preconditions.checkState(root.getParent() == scopeRoot);
                traverseBranch(root, scopeRoot);
            }
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    private static final java.lang.String MISSING_SOURCE = "[source unknown]";

    private java.lang.String formatNodePosition(com.google.javascript.rhino.Node n) {
        if (n == null) {
            return com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE + "\n";
        }
        int lineNumber = n.getLineno();
        int columnNumber = n.getCharno();
        java.lang.String src = compiler.getSourceLine(sourceName, lineNumber);
        if (src == null) {
            src = com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE;
        }
        return ((((((sourceName + ":") + lineNumber) + ":") + columnNumber) + "\n") + src) + "\n";
    }

    void traverseWithScope(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(s.isGlobal());
        inputId = null;
        sourceName = "";
        curNode = root;
        pushScope(s);
        traverseBranch(root, null);
        popScope();
    }

    void traverseAtScope(com.google.javascript.jscomp.Scope s) {
        com.google.javascript.rhino.Node n = s.getRootNode();
        if (n.isFunction()) {
            if (inputId == null) {
                inputId = com.google.javascript.jscomp.NodeUtil.getInputId(n);
            }
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
            curNode = n;
            pushScope(s);
            com.google.javascript.rhino.Node args = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node body = args.getNext();
            traverseBranch(args, n);
            traverseBranch(body, n);
            popScope();
        } else {
            traverseWithScope(n, s);
        }
    }

    protected void traverseInnerNode(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope refinedScope) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        if ((refinedScope != null) && (getScope() != refinedScope)) {
            curNode = node;
            pushScope(refinedScope);
            traverseBranch(node, parent);
            popScope();
        } else {
            traverseBranch(node, parent);
        }
    }

    public com.google.javascript.jscomp.Compiler getCompiler() {
        return ((com.google.javascript.jscomp.Compiler) (compiler));
    }

    public int getLineNumber() {
        com.google.javascript.rhino.Node cur = curNode;
        while (cur != null) {
            int line = cur.getLineno();
            if (line >= 0) {
                return line;
            }
            cur = cur.getParent();
        } 
        return 0;
    }

    public java.lang.String getSourceName() {
        return sourceName;
    }

    public com.google.javascript.jscomp.CompilerInput getInput() {
        return compiler.getInput(inputId);
    }

    public com.google.javascript.jscomp.JSModule getModule() {
        com.google.javascript.jscomp.CompilerInput input = getInput();
        return input == null ? null : input.getModule();
    }

    public com.google.javascript.rhino.Node getCurrentNode() {
        return curNode;
    }

    public static void traverse(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverse(root);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> roots, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.rhino.Node... roots) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    @java.lang.SuppressWarnings("fallthrough")
    private void traverseBranch(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.SCRIPT) {
            inputId = n.getInputId();
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
        }
        curNode = n;
        if (!callback.shouldTraverse(this, n, parent)) {
            return;
        }
        switch (type) {
            case com.google.javascript.rhino.Token.FUNCTION :
                traverseFunction(n, parent);
                break;
            default :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null;) {
                    com.google.javascript.rhino.Node next = child.getNext();
                    traverseBranch(child, n);
                    child = next;
                }
                break;
        }
        curNode = n;
        callback.visit(this, n, parent);
    }

    private void traverseFunction(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(n.getChildCount() == 3);
        com.google.common.base.Preconditions.checkState(n.isFunction());
        final com.google.javascript.rhino.Node fnName = n.getFirstChild();
        boolean isFunctionExpression = (parent != null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
        if (!isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        curNode = n;
        pushScope(n);
        if (isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        final com.google.javascript.rhino.Node args = fnName.getNext();
        final com.google.javascript.rhino.Node body = args.getNext();
        traverseBranch(args, n);
        com.google.common.base.Preconditions.checkState((body.getNext() == null) && body.isBlock(), body);
        traverseBranch(body, n);
        popScope();
    }

    @java.lang.SuppressWarnings("unchecked")
    public com.google.javascript.rhino.Node getEnclosingFunction() {
        if ((scopes.size() + scopeRoots.size()) < 2) {
            return null;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(420).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.compiler",com.google.javascript.jscomp.NodeTraversal.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopes",com.google.javascript.jscomp.NodeTraversal.this.scopes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.cfgs",com.google.javascript.jscomp.NodeTraversal.this.cfgs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCallback",com.google.javascript.jscomp.NodeTraversal.this.scopeCallback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.inputId",com.google.javascript.jscomp.NodeTraversal.this.inputId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.curNode",com.google.javascript.jscomp.NodeTraversal.this.curNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.sourceName",com.google.javascript.jscomp.NodeTraversal.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.callback",com.google.javascript.jscomp.NodeTraversal.this.callback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeRoots",com.google.javascript.jscomp.NodeTraversal.this.scopeRoots);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCreator",com.google.javascript.jscomp.NodeTraversal.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(420).collectionEnds();
            }
            if (runtimeAngelicValue) if (scopeRoots.isEmpty()) {
                return scopes.peek().getRootNode();
            } else {
                return scopeRoots.peek();
            }
        }
    }

    private void pushScope(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopeRoots.push(node);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void pushScope(com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopes.push(s);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void popScope() {
        if (scopeCallback != null) {
            scopeCallback.exitScope(this);
        }
        if (scopeRoots.isEmpty()) {
            scopes.pop();
        } else {
            scopeRoots.pop();
        }
        cfgs.pop();
    }

    public com.google.javascript.jscomp.Scope getScope() {
        com.google.javascript.jscomp.Scope scope = (scopes.isEmpty()) ? null : scopes.peek();
        if (scopeRoots.isEmpty()) {
            return scope;
        }
        java.util.Iterator<com.google.javascript.rhino.Node> it = scopeRoots.descendingIterator();
        while (it.hasNext()) {
            scope = scopeCreator.createScope(it.next(), scope);
            scopes.push(scope);
        } 
        scopeRoots.clear();
        return scope;
    }

    public com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getControlFlowGraph() {
        if (cfgs.peek() == null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(compiler, false, true);
            cfa.process(null, getScopeRoot());
            cfgs.pop();
            cfgs.push(cfa.getCfg());
        }
        return cfgs.peek();
    }

    public com.google.javascript.rhino.Node getScopeRoot() {
        if (scopeRoots.isEmpty()) {
            return scopes.peek().getRootNode();
        } else {
            return scopeRoots.peek();
        }
    }

    boolean inGlobalScope() {
        return getScopeDepth() <= 1;
    }

    int getScopeDepth() {
        return scopes.size() + scopeRoots.size();
    }

    public boolean hasScope() {
        return !(scopes.isEmpty() && scopeRoots.isEmpty());
    }

    public void report(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        com.google.javascript.jscomp.JSError error = com.google.javascript.jscomp.JSError.make(getSourceName(), n, diagnosticType, arguments);
        compiler.report(error);
    }

    private static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String name = n.getSourceFileName();
        return name == null ? "" : name;
    }

    com.google.javascript.rhino.InputId getInputId() {
        return inputId;
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CheckLevel level, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, level, type, arguments);
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, type, arguments);
    }
}
[4311453] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659917440215
GPR[EPVATF]-1659917441727
GPR[SPS]-1659917441727
GPR[EPS]-1659917469728
GPR[ESUN]-1659917469728
GPR[SSUN]-1659917469728
-1345859678
GPR[ESUN]-1659917470074
GPR[SSUN]-1659917470074
-1345859678
GPR[SPVATF]-1659917470325
GPR[EPVATF]-1659917471854
GPR[SPS]-1659917471854
[4343764] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:212.
GPR[EPS]-1659917472526
GPR[SPVATF]-1659917472526
GPR[EPVATF]-1659917474124
GPR[SPS]-1659917474124
[4346026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:212.
GPR[EPS]-1659917474788
GPR[ESUN]-1659917474788
GPR[SSUN]-1659917474788
-1345859678
GPR[ESUN]-1659917475039
GPR[SSUN]-1659917475039
466431456
GPR[SPVATF]-1659917475295
GPR[EPVATF]-1659917477019
GPR[SPS]-1659917477019
[4348914] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:483.
GPR[EPS]-1659917477676
GPR[ESUN]-1659917477676
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
GPR[ESUN]-1659917477677
GPR[SSUN]-1659917477677
-1345859678
GPR[SPVATF]-1659917477928
GPR[EPVATF]-1659917479729
GPR[SPS]-1659917479729
[4351581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:655.
GPR[EPS]-1659917480343
GPR[ESUN]-1659917480343
GPR[SSUN]-1659917480343
-1345859678
GPR[SPVATF]-1659917480589
GPR[EPVATF]-1659917482557
GPR[SPS]-1659917482557
[4354380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:640.
GPR[EPS]-1659917483142
GPR[ESUN]-1659917483142
GPR[SSUN]-1659917483142
-1345859678
GPR[SPVATF]-1659917483391
GPR[EPVATF]-1659917485471
GPR[SPS]-1659917485471
[4357320] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:639.
GPR[EPS]-1659917486082
GPR[ESUN]-1659917486082
GPR[SSUN]-1659917486082
-1345859678
GPR[ESUN]-1659917486330
GPR[SSUN]-1659917486330
-1345859678
GPR[SPVATF]-1659917486579
GPR[EPVATF]-1659917488865
GPR[SPS]-1659917488865
[4360702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:633.
GPR[EPS]-1659917489464
GPR[ESUN]-1659917489464
GPR[SSUN]-1659917489464
-1345859678
GPR[SPVATF]-1659917489744
GPR[EPVATF]-1659917491973
GPR[SPS]-1659917491973
[4363808] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:626.
GPR[EPS]-1659917492570
GPR[ESUN]-1659917492570
GPR[SSUN]-1659917492570
-1345859678
GPR[SPVATF]-1659917492816
GPR[EPVATF]-1659917494938
GPR[SPS]-1659917494938
[4366758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:625.
GPR[EPS]-1659917495520
GPR[ESUN]-1659917495520
GPR[SSUN]-1659917495520
-1345859678
GPR[SPVATF]-1659917495767
GPR[EPVATF]-1659917497931
GPR[SPS]-1659917497931
[4369765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:624.
GPR[EPS]-1659917498527
GPR[ESUN]-1659917498527
GPR[SSUN]-1659917498527
-1345859678
GPR[SPVATF]-1659917498776
GPR[EPVATF]-1659917501003
GPR[SPS]-1659917501003
[4372898] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:615.
GPR[EPS]-1659917501660
GPR[SPVATF]-1659917501660
GPR[EPVATF]-1659917503887
GPR[SPS]-1659917503887
[4375777] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:615.
GPR[EPS]-1659917504539
GPR[ESUN]-1659917504539
GPR[SSUN]-1659917504540
-1345859678
GPR[ESUN]-1659917504798
GPR[SSUN]-1659917504798
GPR[ESUN]-1659917504798
GPR[SSUN]-1659917504798
2433571
GPR[SPVATF]-1659917505037
GPR[EPVATF]-1659917507282
GPR[SPS]-1659917507282
[4379096] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(434).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("charno",charno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("lineno",lineno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(434).collectionEnds();
            }
            if (runtimeAngelicValue)
                return -1;

        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[4379096] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659917507858
GPR[SSUN]-1659917507858
-2097135580
GPR[ESUN]-1659917508063
GPR[SSUN]-1659917508063
GPR[ESUN]-1659917508063
GPR[SSUN]-1659917508063
GPR[ESUN]-1659917508063
GPR[SSUN]-1659917508063
79711797
GPR[SPVATF]-1659917508300
GPR[EPVATF]-1659917510527
GPR[SPS]-1659917510527
[4382133] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                return parent;
            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                return parent.getLastChild();
            } else if (pType == com.google.javascript.rhino.Token.VAR) {
                return nameNode.getFirstChild();
            } else {
                return null;
            }
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            thisType = nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = (nameNode == null) ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(435).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.thisType",com.google.javascript.jscomp.Scope.this.thisType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis()",com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isDefine()",com.google.javascript.jscomp.Scope.this.arguments.isDefine());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo()",com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNode()",com.google.javascript.jscomp.Scope.this.arguments.getNode());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getInput()",com.google.javascript.jscomp.Scope.this.arguments.getInput());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(435).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[4382134] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659917510896
GPR[SSUN]-1659917510896
1187751237
GPR[SPVATF]-1659917511222
GPR[EPVATF]-1659917513596
GPR[SPS]-1659917513596
[4385532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2818.
GPR[EPS]-1659917514294
GPR[SPVATF]-1659917514295
GPR[EPVATF]-1659917516556
GPR[SPS]-1659917516556
[4388487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2818.
GPR[EPS]-1659917517249
GPR[ESUN]-1659917517249
GPR[SSUN]-1659917517250
1187751237
GPR[ESUN]-1659917517529
GPR[SSUN]-1659917517529
1331276989
GPR[SPVATF]-1659917517738
GPR[EPVATF]-1659917519971
GPR[SPS]-1659917519971
[4391733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:530.
GPR[EPS]-1659917520495
GPR[ESUN]-1659917520495
GPR[SSUN]-1659917520495
1290590094
GPR[SPVATF]-1659917520727
GPR[EPVATF]-1659917523054
GPR[SPS]-1659917523054
[4395005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:147.
GPR[EPS]-1659917523767
GPR[ESUN]-1659917523767
GPR[SSUN]-1659917523767
646738083
GPR[SPVATF]-1659917524142
GPR[EPVATF]-1659917533739
GPR[SPS]-1659917533739
[4406125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:576.
GPR[EPS]-1659917534888
GPR[ESUN]-1659917534888
GPR[SSUN]-1659917534889
646738083
GPR[SPVATF]-1659917535328
GPR[EPVATF]-1659917537252
GPR[SPS]-1659917537252
[4409229] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:575.
GPR[EPS]-1659917537991
GPR[ESUN]-1659917537991
GPR[SSUN]-1659917537991
1290590094
GPR[SPVATF]-1659917538228
GPR[EPVATF]-1659917539729
GPR[SPS]-1659917539729
[4411592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:146.
GPR[EPS]-1659917540354
GPR[SPVATF]-1659917540355
GPR[EPVATF]-1659917541851
GPR[SPS]-1659917541851
[4413737] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:146.
GPR[EPS]-1659917542500
GPR[ESUN]-1659917542500
GPR[SSUN]-1659917542500
GPR[ESUN]-1659917542500
GPR[SSUN]-1659917542500
646738083
GPR[SPVATF]-1659917542789
GPR[EPVATF]-1659917544253
GPR[SPS]-1659917544253
[4416229] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:797.
GPR[EPS]-1659917544991
GPR[ESUN]-1659917544991
GPR[SSUN]-1659917544991
-2097135580
GPR[ESUN]-1659917545206
GPR[SSUN]-1659917545206
-2097135580
GPR[ESUN]-1659917545412
GPR[SSUN]-1659917545412
1290590094
GPR[ESUN]-1659917545640
GPR[SSUN]-1659917545640
1290590094
GPR[SPVATF]-1659917545865
GPR[EPVATF]-1659917547317
GPR[SPS]-1659917547317
[4419126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:144.
GPR[EPS]-1659917547888
GPR[ESUN]-1659917547888
GPR[SSUN]-1659917547888
-2097135580
GPR[SPVATF]-1659917548099
GPR[EPVATF]-1659917549535
GPR[SPS]-1659917549535
[4421331] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:684.
GPR[EPS]-1659917550093
GPR[SPVATF]-1659917550093
GPR[EPVATF]-1659917551658
GPR[SPS]-1659917551658
[4423398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:684.
GPR[EPS]-1659917552160
GPR[ESUN]-1659917552160
GPR[SSUN]-1659917552160
79711797
GPR[SPVATF]-1659917552404
GPR[EPVATF]-1659917553905
GPR[SPS]-1659917553905
[4425538] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                return parent;
            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                return parent.getLastChild();
            } else if (pType == com.google.javascript.rhino.Token.VAR) {
                return nameNode.getFirstChild();
            } else {
                return null;
            }
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            thisType = nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = (nameNode == null) ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(448).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("parent != null",parent != null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.thisType",com.google.javascript.jscomp.Scope.this.thisType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis()",com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isDefine()",com.google.javascript.jscomp.Scope.this.arguments.isDefine());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo()",com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNode()",com.google.javascript.jscomp.Scope.this.arguments.getNode());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getInput()",com.google.javascript.jscomp.Scope.this.arguments.getInput());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(448).collectionEnds();
            }
            if (runtimeAngelicValue) if (parent != null) {
                return parent.getVar(name);
            } else {
                return null;
            }
        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[4425538] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659917554300
GPR[EPVATF]-1659917555853
GPR[SPS]-1659917555853
[4427644] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:543.
GPR[EPS]-1659917556406
GPR[ESUN]-1659917556406
GPR[SSUN]-1659917556406
-1234646214
GPR[ESUN]-1659917556617
GPR[SSUN]-1659917556617
-1234646214
GPR[SPVATF]-1659917556833
GPR[EPVATF]-1659917558344
GPR[SPS]-1659917558344
[4430067] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:307.
GPR[EPS]-1659917558829
GPR[ESUN]-1659917558829
GPR[SSUN]-1659917558829
-1234646214
GPR[ESUN]-1659917559039
GPR[SSUN]-1659917559039
-1234646214
GPR[SPVATF]-1659917559244
GPR[EPVATF]-1659917560847
GPR[SPS]-1659917560847
[4432608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:294.
GPR[EPS]-1659917561370
GPR[SPVATF]-1659917561370
GPR[EPVATF]-1659917562967
GPR[SPS]-1659917562967
[4434709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:294.
GPR[EPS]-1659917563471
GPR[ESUN]-1659917563471
GPR[SSUN]-1659917563471
466431456
GPR[ESUN]-1659917563733
GPR[SSUN]-1659917563733
466431456
GPR[SPVATF]-1659917563991
GPR[EPVATF]-1659917565583
GPR[SPS]-1659917565583
[4437530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1384.
GPR[EPS]-1659917566292
GPR[ESUN]-1659917566292
GPR[SSUN]-1659917566292
466431456
GPR[SPVATF]-1659917566550
GPR[EPVATF]-1659917568265
GPR[SPS]-1659917568265
[4440166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1381.
GPR[EPS]-1659917568928
GPR[SPVATF]-1659917568929
GPR[EPVATF]-1659917570691
GPR[SPS]-1659917570691
[4442595] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1381.
GPR[EPS]-1659917571357
GPR[ESUN]-1659917571357
GPR[SSUN]-1659917571357
466431456
GPR[SPVATF]-1659917571610
GPR[EPVATF]-1659917573360
GPR[SPS]-1659917573360
[4445263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1378.
GPR[EPS]-1659917574025
GPR[SPVATF]-1659917574025
GPR[EPVATF]-1659917575892
GPR[SPS]-1659917575892
GPR[EPS]-1659917593838
GPR[SPVATR]-1659917593838
[4465076] INFO TestPatch - Applying patch: com.google.javascript.jscomp.TypeInference:1378: CONDITIONAL com.google.javascript.jscomp.TypeInference.this.assertionFunctionsMap.size() == varName.length()
[4465599] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.TypeInference.this.assertionFunctionsMap.size() == varName.length()" is working
GPR[EPVATR]-1659917602917
[4474155] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659917602917
[4474172] INFO NoPol - --- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1377,3 +1377,3 @@
     String varName = nameNode.getString();
-    if (varType == null) {
+    if (com.google.javascript.jscomp.TypeInference.this.assertionFunctionsMap.size() == varName.length()) {
       varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);

Saving patch at /experiment_home///results/Nopol/Closure/35/seed_263/patch_4469660_2ts_1659917602934.diff
GPR[ESUN]-1659917602935
GPR[SSUN]-1659917602935
466431456
GPR[ESUN]-1659917603192
GPR[SSUN]-1659917603192
466431456
GPR[SPVATF]-1659917603447
GPR[EPVATF]-1659917605684
GPR[SPS]-1659917605684
[4477566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1376.
GPR[EPS]-1659917606328
GPR[ESUN]-1659917606329
GPR[SSUN]-1659917606329
GPR[ESUN]-1659917606329
GPR[SSUN]-1659917606329
GPR[ESUN]-1659917606329
GPR[SSUN]-1659917606329
GPR[ESUN]-1659917606329
GPR[SSUN]-1659917606329
466431456
GPR[ESUN]-1659917606583
GPR[SSUN]-1659917606583
466431456
GPR[SPVATF]-1659917606841
GPR[EPVATF]-1659917609096
GPR[SPS]-1659917609096
[4480984] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1121.
GPR[EPS]-1659917609746
GPR[SPVATF]-1659917609746
GPR[EPVATF]-1659917612127
GPR[SPS]-1659917612127
[4484080] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1121.
GPR[EPS]-1659917612842
GPR[ESUN]-1659917612842
GPR[SSUN]-1659917612842
466431456
GPR[ESUN]-1659917613101
GPR[SSUN]-1659917613101
GPR[ESUN]-1659917613101
GPR[SSUN]-1659917613101
1187751237
GPR[ESUN]-1659917613381
GPR[SSUN]-1659917613382
GPR[ESUN]-1659917613382
GPR[SSUN]-1659917613382
GPR[ESUN]-1659917613382
GPR[SSUN]-1659917613382
-701280240
GPR[SPVATF]-1659917613607
GPR[EPVATF]-1659917615957
GPR[SPS]-1659917615957
[4487753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InferJSDocInfo:136.
GPR[EPS]-1659917616515
GPR[ESUN]-1659917616515
GPR[SSUN]-1659917616515
GPR[ESUN]-1659917616515
GPR[SSUN]-1659917616515
GPR[ESUN]-1659917616515
GPR[SSUN]-1659917616515
466431456
GPR[SPVATF]-1659917616776
GPR[EPVATF]-1659917619098
GPR[SPS]-1659917619098
[4490992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1115.
GPR[EPS]-1659917619754
GPR[SPVATF]-1659917619754
GPR[EPVATF]-1659917622016
GPR[SPS]-1659917622016
[4494096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1115.
GPR[EPS]-1659917622858
GPR[ESUN]-1659917622858
GPR[SSUN]-1659917622858
GPR[ESUN]-1659917622858
GPR[SSUN]-1659917622858
2433571
GPR[ESUN]-1659917623144
GPR[SSUN]-1659917623144
GPR[ESUN]-1659917623144
GPR[SSUN]-1659917623144
160819208
GPR[ESUN]-1659917623401
GPR[SSUN]-1659917623401
160819208
GPR[SPVATF]-1659917623670
GPR[EPVATF]-1659917625959
GPR[SPS]-1659917625959
[4497811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:204.
GPR[EPS]-1659917626573
GPR[ESUN]-1659917626573
GPR[SSUN]-1659917626573
2433571
GPR[ESUN]-1659917626825
GPR[SSUN]-1659917626825
2433571
GPR[ESUN]-1659917627074
GPR[SSUN]-1659917627074
-1117079791
GPR[ESUN]-1659917627277
GPR[SSUN]-1659917627277
-1117079791
GPR[SPVATF]-1659917627480
GPR[EPVATF]-1659917627701
[4498939] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659917627701
GPR[SSUN]-1659917627701
-1117079791
GPR[SPVATF]-1659917627909
GPR[EPVATF]-1659917628124
[4499362] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659917628124
GPR[SSUN]-1659917628125
-1117079791
GPR[ESUN]-1659917628324
GPR[SSUN]-1659917628324
-1117079791
GPR[SPVATF]-1659917628525
GPR[EPVATF]-1659917628737
[4499976] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659917628738
GPR[SSUN]-1659917628738
-1345859678
GPR[ESUN]-1659917628990
GPR[SSUN]-1659917628990
-1345859678
GPR[SPVATF]-1659917629243
GPR[EPVATF]-1659917631482
GPR[SPS]-1659917631482
[4503447] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:287.
GPR[EPS]-1659917632209
GPR[ESUN]-1659917632209
GPR[SSUN]-1659917632209
-1345859678
GPR[SPVATF]-1659917632539
GPR[EPVATF]-1659917634845
GPR[SPS]-1659917634845
[4506772] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:284.
GPR[EPS]-1659917635534
GPR[SPVATF]-1659917635535
GPR[EPVATF]-1659917637801
GPR[SPS]-1659917637801
[4509691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:284.
GPR[EPS]-1659917638454
GPR[ESUN]-1659917638454
GPR[SSUN]-1659917638454
-1345859678
GPR[ESUN]-1659917638729
GPR[SSUN]-1659917638729
-1345859678
GPR[ESUN]-1659917638986
GPR[SSUN]-1659917638986
-1345859678
GPR[SPVATF]-1659917639250
GPR[EPVATF]-1659917641564
GPR[SPS]-1659917641564
[4513384] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private final java.util.Set<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.Sets.newHashSet("use strict");

    private static final java.util.Set<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final java.util.Set<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                lp.addChildToBack(transform(param));
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(468).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.this.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("asString",asString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectInput("nameNode",nameNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(468).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());

            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters are not supported in Internet Explorer", sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters are not supported in Internet Explorer", sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[4513384] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659917642146
GPR[SSUN]-1659917642146
-1345859678
GPR[SPVATF]-1659917642446
GPR[EPVATF]-1659917645666
GPR[SPS]-1659917645666
[4517546] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private final java.util.Set<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.Sets.newHashSet("use strict");

    private static final java.util.Set<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final java.util.Set<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(469).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.this.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(469).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));

            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                lp.addChildToBack(transform(param));
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters are not supported in Internet Explorer", sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters are not supported in Internet Explorer", sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[4517549] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659917646311
GPR[SSUN]-1659917646311
561857265
GPR[ESUN]-1659917646505
GPR[SSUN]-1659917646505
79711797
GPR[ESUN]-1659917646753
GPR[SSUN]-1659917646753
-1345859678
GPR[ESUN]-1659917647003
GPR[SSUN]-1659917647003
-1345859678
GPR[SPVATF]-1659917647251
GPR[EPVATF]-1659917648784
GPR[SPS]-1659917648784
[4520712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:409.
GPR[EPS]-1659917649475
GPR[ESUN]-1659917649475
GPR[SSUN]-1659917649475
-1345859678
GPR[SPVATF]-1659917649725
GPR[EPVATF]-1659917651336
GPR[SPS]-1659917651336
[4523053] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private final java.util.Set<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.Sets.newHashSet("use strict");

    private static final java.util.Set<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final java.util.Set<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(471).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.this.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("n instanceof com.google.javascript.rhino.head.ast.Name",n instanceof com.google.javascript.rhino.head.ast.Name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(471).collectionEnds();
            }
            if (runtimeAngelicValue) if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                lp.addChildToBack(transform(param));
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters are not supported in Internet Explorer", sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters are not supported in Internet Explorer", sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[4523053] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659917651816
GPR[EPVATF]-1659917653474
GPR[SPS]-1659917653474
[4525388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:400.
GPR[EPS]-1659917654151
GPR[ESUN]-1659917654151
GPR[SSUN]-1659917654151
1331276989
GPR[SPVATF]-1659917654444
GPR[EPVATF]-1659917655921
GPR[SPS]-1659917655921
GPR[EPS]-1659917700867
GPR[ESUN]-1659917700867
GPR[SSUN]-1659917700867
466431456
GPR[ESUN]-1659917701128
GPR[SSUN]-1659917701128
GPR[ESUN]-1659917701128
GPR[SSUN]-1659917701128
GPR[ESUN]-1659917701128
GPR[SSUN]-1659917701128
1331276989
GPR[SPVATF]-1659917701337
GPR[EPVATF]-1659917702850
GPR[SPS]-1659917702850
[4574446] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class NodeTraversal {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.NodeTraversal.Callback callback;

    private com.google.javascript.rhino.Node curNode;

    public static final com.google.javascript.jscomp.DiagnosticType NODE_TRAVERSAL_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NODE_TRAVERSAL_ERROR", "{0}");

    private final java.util.Deque<com.google.javascript.jscomp.Scope> scopes = new java.util.ArrayDeque<com.google.javascript.jscomp.Scope>();

    private final java.util.Deque<com.google.javascript.rhino.Node> scopeRoots = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    java.util.Deque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> cfgs = new java.util.LinkedList<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>();

    private java.lang.String sourceName;

    private com.google.javascript.rhino.InputId inputId;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private com.google.javascript.jscomp.NodeTraversal.ScopedCallback scopeCallback;

    public interface Callback {
        public abstract boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);

        public abstract void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);
    }

    public interface ScopedCallback extends com.google.javascript.jscomp.NodeTraversal.Callback {
        public abstract void enterScope(com.google.javascript.jscomp.NodeTraversal t);

        public abstract void exitScope(com.google.javascript.jscomp.NodeTraversal t);
    }

    public abstract static class AbstractPostOrderCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }
    }

    public abstract static class AbstractScopedCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }
    }

    public abstract static class AbstractShallowCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || (!parent.isFunction())) || (n == parent.getFirstChild());
        }
    }

    public abstract static class AbstractShallowStatementCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent);
        }
    }

    public abstract static class AbstractNodeTypePruningCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.Set<java.lang.Integer> nodeTypes;

        private final boolean include;

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes) {
            this(nodeTypes, true);
        }

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes, boolean include) {
            this.nodeTypes = nodeTypes;
            this.include = include;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return include == nodeTypes.contains(n.getType());
        }
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        this(compiler, cb, new com.google.javascript.jscomp.SyntacticScopeCreator(compiler));
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.jscomp.ScopeCreator scopeCreator) {
        this.callback = cb;
        if (cb instanceof com.google.javascript.jscomp.NodeTraversal.ScopedCallback) {
            this.scopeCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (cb));
        }
        this.compiler = compiler;
        this.inputId = null;
        this.sourceName = "";
        this.scopeCreator = scopeCreator;
    }

    private void throwUnexpectedException(java.lang.Exception unexpectedException) {
        java.lang.String message = unexpectedException.getMessage();
        if (inputId != null) {
            message = ((unexpectedException.getMessage() + "\n") + formatNodeContext("Node", curNode)) + (curNode == null ? "" : formatNodeContext("Parent", curNode.getParent()));
        }
        compiler.throwInternalError(message, unexpectedException);
    }

    private java.lang.String formatNodeContext(java.lang.String label, com.google.javascript.rhino.Node n) {
        if (n == null) {
            return ("  " + label) + ": NULL";
        }
        return (((("  " + label) + "(") + n.toString(false, false, false)) + "): ") + formatNodePosition(n);
    }

    public void traverse(com.google.javascript.rhino.Node root) {
        try {
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(root);
            sourceName = "";
            curNode = root;
            pushScope(root);
            traverseBranch(root, null);
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    public void traverseRoots(com.google.javascript.rhino.Node... roots) {
        traverseRoots(com.google.common.collect.Lists.newArrayList(roots));
    }

    public void traverseRoots(java.util.List<com.google.javascript.rhino.Node> roots) {
        if (roots.isEmpty()) {
            return;
        }
        try {
            com.google.javascript.rhino.Node scopeRoot = roots.get(0).getParent();
            com.google.common.base.Preconditions.checkState(scopeRoot != null);
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(scopeRoot);
            sourceName = "";
            curNode = scopeRoot;
            pushScope(scopeRoot);
            for (com.google.javascript.rhino.Node root : roots) {
                com.google.common.base.Preconditions.checkState(root.getParent() == scopeRoot);
                traverseBranch(root, scopeRoot);
            }
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    private static final java.lang.String MISSING_SOURCE = "[source unknown]";

    private java.lang.String formatNodePosition(com.google.javascript.rhino.Node n) {
        if (n == null) {
            return com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE + "\n";
        }
        int lineNumber = n.getLineno();
        int columnNumber = n.getCharno();
        java.lang.String src = compiler.getSourceLine(sourceName, lineNumber);
        if (src == null) {
            src = com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE;
        }
        return ((((((sourceName + ":") + lineNumber) + ":") + columnNumber) + "\n") + src) + "\n";
    }

    void traverseWithScope(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(s.isGlobal());
        inputId = null;
        sourceName = "";
        curNode = root;
        pushScope(s);
        traverseBranch(root, null);
        popScope();
    }

    void traverseAtScope(com.google.javascript.jscomp.Scope s) {
        com.google.javascript.rhino.Node n = s.getRootNode();
        if (n.isFunction()) {
            if (inputId == null) {
                inputId = com.google.javascript.jscomp.NodeUtil.getInputId(n);
            }
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
            curNode = n;
            pushScope(s);
            com.google.javascript.rhino.Node args = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node body = args.getNext();
            traverseBranch(args, n);
            traverseBranch(body, n);
            popScope();
        } else {
            traverseWithScope(n, s);
        }
    }

    protected void traverseInnerNode(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope refinedScope) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        if ((refinedScope != null) && (getScope() != refinedScope)) {
            curNode = node;
            pushScope(refinedScope);
            traverseBranch(node, parent);
            popScope();
        } else {
            traverseBranch(node, parent);
        }
    }

    public com.google.javascript.jscomp.Compiler getCompiler() {
        return ((com.google.javascript.jscomp.Compiler) (compiler));
    }

    public int getLineNumber() {
        com.google.javascript.rhino.Node cur = curNode;
        while (cur != null) {
            int line = cur.getLineno();
            if (line >= 0) {
                return line;
            }
            cur = cur.getParent();
        } 
        return 0;
    }

    public java.lang.String getSourceName() {
        return sourceName;
    }

    public com.google.javascript.jscomp.CompilerInput getInput() {
        return compiler.getInput(inputId);
    }

    public com.google.javascript.jscomp.JSModule getModule() {
        com.google.javascript.jscomp.CompilerInput input = getInput();
        return input == null ? null : input.getModule();
    }

    public com.google.javascript.rhino.Node getCurrentNode() {
        return curNode;
    }

    public static void traverse(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverse(root);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> roots, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.rhino.Node... roots) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    @java.lang.SuppressWarnings("fallthrough")
    private void traverseBranch(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.SCRIPT) {
            inputId = n.getInputId();
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
        }
        curNode = n;
        if (!callback.shouldTraverse(this, n, parent)) {
            return;
        }
        switch (type) {
            case com.google.javascript.rhino.Token.FUNCTION :
                traverseFunction(n, parent);
                break;
            default :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null;) {
                    com.google.javascript.rhino.Node next = child.getNext();
                    traverseBranch(child, n);
                    child = next;
                }
                break;
        }
        curNode = n;
        callback.visit(this, n, parent);
    }

    private void traverseFunction(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(n.getChildCount() == 3);
        com.google.common.base.Preconditions.checkState(n.isFunction());
        final com.google.javascript.rhino.Node fnName = n.getFirstChild();
        boolean isFunctionExpression = (parent != null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
        if (!isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        curNode = n;
        pushScope(n);
        if (isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        final com.google.javascript.rhino.Node args = fnName.getNext();
        final com.google.javascript.rhino.Node body = args.getNext();
        traverseBranch(args, n);
        com.google.common.base.Preconditions.checkState((body.getNext() == null) && body.isBlock(), body);
        traverseBranch(body, n);
        popScope();
    }

    @java.lang.SuppressWarnings("unchecked")
    public com.google.javascript.rhino.Node getEnclosingFunction() {
        if ((scopes.size() + scopeRoots.size()) < 2) {
            return null;
        } else if (scopeRoots.isEmpty()) {
            return scopes.peek().getRootNode();
        } else {
            return scopeRoots.peek();
        }
    }

    private void pushScope(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopeRoots.push(node);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void pushScope(com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopes.push(s);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void popScope() {
        if (scopeCallback != null) {
            scopeCallback.exitScope(this);
        }
        if (scopeRoots.isEmpty()) {
            scopes.pop();
        } else {
            scopeRoots.pop();
        }
        cfgs.pop();
    }

    public com.google.javascript.jscomp.Scope getScope() {
        com.google.javascript.jscomp.Scope scope = (scopes.isEmpty()) ? null : scopes.peek();
        if (scopeRoots.isEmpty()) {
            return scope;
        }
        java.util.Iterator<com.google.javascript.rhino.Node> it = scopeRoots.descendingIterator();
        while (it.hasNext()) {
            scope = scopeCreator.createScope(it.next(), scope);
            scopes.push(scope);
        } 
        scopeRoots.clear();
        return scope;
    }

    public com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getControlFlowGraph() {
        if (cfgs.peek() == null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(compiler, false, true);
            cfa.process(null, getScopeRoot());
            cfgs.pop();
            cfgs.push(cfa.getCfg());
        }
        return cfgs.peek();
    }

    public com.google.javascript.rhino.Node getScopeRoot() {
        if (scopeRoots.isEmpty()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(474).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.compiler",com.google.javascript.jscomp.NodeTraversal.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopes",com.google.javascript.jscomp.NodeTraversal.this.scopes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.cfgs",com.google.javascript.jscomp.NodeTraversal.this.cfgs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCallback",com.google.javascript.jscomp.NodeTraversal.this.scopeCallback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.inputId",com.google.javascript.jscomp.NodeTraversal.this.inputId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.curNode",com.google.javascript.jscomp.NodeTraversal.this.curNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.sourceName",com.google.javascript.jscomp.NodeTraversal.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.callback",com.google.javascript.jscomp.NodeTraversal.this.callback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeRoots",com.google.javascript.jscomp.NodeTraversal.this.scopeRoots);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCreator",com.google.javascript.jscomp.NodeTraversal.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(474).collectionEnds();
            }
            if (runtimeAngelicValue)
                return scopes.peek().getRootNode();

        } else {
            return scopeRoots.peek();
        }
    }

    boolean inGlobalScope() {
        return getScopeDepth() <= 1;
    }

    int getScopeDepth() {
        return scopes.size() + scopeRoots.size();
    }

    public boolean hasScope() {
        return !(scopes.isEmpty() && scopeRoots.isEmpty());
    }

    public void report(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        com.google.javascript.jscomp.JSError error = com.google.javascript.jscomp.JSError.make(getSourceName(), n, diagnosticType, arguments);
        compiler.report(error);
    }

    private static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String name = n.getSourceFileName();
        return name == null ? "" : name;
    }

    com.google.javascript.rhino.InputId getInputId() {
        return inputId;
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CheckLevel level, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, level, type, arguments);
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, type, arguments);
    }
}
[4574447] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659917703209
GPR[SSUN]-1659917703209
79711797
GPR[SPVATF]-1659917703444
GPR[EPVATF]-1659917705018
GPR[SPS]-1659917705018
[4576865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:541.
GPR[EPS]-1659917705627
GPR[ESUN]-1659917705627
GPR[SSUN]-1659917705627
79711797
GPR[ESUN]-1659917705869
GPR[SSUN]-1659917705869
561857265
GPR[ESUN]-1659917706051
GPR[SSUN]-1659917706051
-546582215
GPR[SPVATF]-1659917706255
GPR[EPVATF]-1659917707835
GPR[SPS]-1659917707835
[4579578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:164.
GPR[EPS]-1659917708340
GPR[ESUN]-1659917708340
GPR[SSUN]-1659917708341
-546582215
GPR[SPVATF]-1659917708546
GPR[EPVATF]-1659917710079
GPR[SPS]-1659917710079
[4581823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:163.
GPR[EPS]-1659917710585
GPR[ESUN]-1659917710585
GPR[SSUN]-1659917710586
-546582215
GPR[SPVATF]-1659917710789
GPR[EPVATF]-1659917712390
GPR[SPS]-1659917712390
[4584158] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:117.
GPR[EPS]-1659917712920
GPR[ESUN]-1659917712920
GPR[SSUN]-1659917712920
-546582215
GPR[SPVATF]-1659917713124
GPR[EPVATF]-1659917714717
GPR[SPS]-1659917714717
[4586549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:116.
GPR[EPS]-1659917715311
GPR[ESUN]-1659917715311
GPR[SSUN]-1659917715311
-861565004
GPR[SPVATF]-1659917715502
GPR[EPVATF]-1659917717165
GPR[SPS]-1659917717165
[4588940] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:50.
GPR[EPS]-1659917717702
GPR[ESUN]-1659917717702
GPR[SSUN]-1659917717702
-861565004
GPR[SPVATF]-1659917717900
GPR[EPVATF]-1659917719525
GPR[SPS]-1659917719525
[4591282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:49.
GPR[EPS]-1659917720044
GPR[SPVATF]-1659917720044
GPR[EPVATF]-1659917721779
GPR[SPS]-1659917721779
[4593575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:49.
GPR[EPS]-1659917722337
GPR[ESUN]-1659917722337
GPR[SSUN]-1659917722337
GPR[ESUN]-1659917722337
GPR[SSUN]-1659917722337
-546582215
GPR[SPVATF]-1659917722543
GPR[EPVATF]-1659917724464
GPR[SPS]-1659917724464
[4596204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:71.
GPR[EPS]-1659917724966
GPR[ESUN]-1659917724966
GPR[SSUN]-1659917724966
-546582215
GPR[ESUN]-1659917725170
GPR[SSUN]-1659917725170
-546582215
GPR[SPVATF]-1659917725373
GPR[EPVATF]-1659917727387
GPR[SPS]-1659917727387
[5067711] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659918196473
GPR[SSUN]-1659918196473
-546582215
GPR[SPVATF]-1659918196863
GPR[EPVATF]-1659918199853
GPR[SPS]-1659918199853
[5071650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:174.
GPR[EPS]-1659918200412
GPR[ESUN]-1659918200412
GPR[SSUN]-1659918200412
-546582215
GPR[ESUN]-1659918200619
GPR[SSUN]-1659918200619
-546582215
GPR[ESUN]-1659918200841
GPR[SSUN]-1659918200841
-546582215
GPR[SPVATF]-1659918201044
GPR[EPVATF]-1659918202587
GPR[SPS]-1659918202587
[5074354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:171.
GPR[EPS]-1659918203116
GPR[ESUN]-1659918203116
GPR[SSUN]-1659918203116
2433571
GPR[ESUN]-1659918203358
GPR[SSUN]-1659918203358
-546582215
GPR[ESUN]-1659918203565
GPR[SSUN]-1659918203565
-546582215
GPR[SPVATF]-1659918203773
GPR[EPVATF]-1659918205751
GPR[SPS]-1659918205751
[5077506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:170.
GPR[EPS]-1659918206268
GPR[SPVATF]-1659918206269
GPR[EPVATF]-1659918207771
GPR[SPS]-1659918207771
[5079563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:170.
GPR[EPS]-1659918208325
GPR[ESUN]-1659918208325
GPR[SSUN]-1659918208325
-546582215
GPR[SPVATF]-1659918208531
GPR[EPVATF]-1659918209992
GPR[SPS]-1659918209992
[5081790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:125.
GPR[EPS]-1659918210552
GPR[ESUN]-1659918210552
GPR[SSUN]-1659918210552
-546582215
GPR[ESUN]-1659918210755
GPR[SSUN]-1659918210756
-546582215
GPR[SPVATF]-1659918210958
GPR[EPVATF]-1659918212518
GPR[SPS]-1659918212518
[5084292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:85.
GPR[EPS]-1659918213054
GPR[SPVATF]-1659918213054
GPR[EPVATF]-1659918215090
GPR[SPS]-1659918215090
[5086820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:85.
GPR[EPS]-1659918215582
GPR[ESUN]-1659918215582
GPR[SSUN]-1659918215582
-546582215
GPR[ESUN]-1659918215785
GPR[SSUN]-1659918215785
-546582215
GPR[SPVATF]-1659918215988
GPR[EPVATF]-1659918217495
GPR[SPS]-1659918217496
[5089261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:80.
GPR[EPS]-1659918218023
GPR[ESUN]-1659918218023
GPR[SSUN]-1659918218023
-546582215
GPR[ESUN]-1659918218228
GPR[SSUN]-1659918218228
-546582215
GPR[SPVATF]-1659918218432
GPR[EPVATF]-1659918219939
GPR[SPS]-1659918219939
[5091734] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:78.
GPR[EPS]-1659918220496
GPR[ESUN]-1659918220496
GPR[SSUN]-1659918220496
-546582215
GPR[SPVATF]-1659918220706
GPR[EPVATF]-1659918222298
GPR[SPS]-1659918222298
[5094072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:76.
GPR[EPS]-1659918222834
GPR[ESUN]-1659918222834
GPR[SSUN]-1659918222835
-546582215
GPR[SPVATF]-1659918223040
GPR[EPVATF]-1659918225123
GPR[SPS]-1659918225123
[5096871] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:70.
GPR[EPS]-1659918225633
GPR[SPVATF]-1659918225633
GPR[EPVATF]-1659918227209
GPR[SPS]-1659918227209
[5098942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:70.
GPR[EPS]-1659918227704
GPR[ESUN]-1659918227704
GPR[SSUN]-1659918227704
-546582215
GPR[SPVATF]-1659918227908
GPR[EPVATF]-1659918229490
GPR[SPS]-1659918229490
[5101240] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:69.
GPR[EPS]-1659918230002
GPR[ESUN]-1659918230002
GPR[SSUN]-1659918230002
79711797
GPR[ESUN]-1659918230239
GPR[SSUN]-1659918230239
1331276989
GPR[ESUN]-1659918230449
GPR[SSUN]-1659918230449
1331276989
GPR[SPVATF]-1659918230658
GPR[EPVATF]-1659918232278
GPR[SPS]-1659918232278
[5104061] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:606.
GPR[EPS]-1659918232823
GPR[ESUN]-1659918232823
GPR[SSUN]-1659918232823
1331276989
GPR[SPVATF]-1659918233032
GPR[EPVATF]-1659918235197
GPR[SPS]-1659918235197
[5106951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:604.
GPR[EPS]-1659918235713
GPR[ESUN]-1659918235713
GPR[SSUN]-1659918235713
1331276989
GPR[SPVATF]-1659918235924
GPR[EPVATF]-1659918237604
GPR[SPS]-1659918237604
[5109370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:603.
GPR[EPS]-1659918238132
GPR[ESUN]-1659918238132
GPR[SSUN]-1659918238132
1331276989
GPR[SPVATF]-1659918238341
GPR[EPVATF]-1659918240101
GPR[SPS]-1659918240101
[5111861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:602.
GPR[EPS]-1659918240623
GPR[ESUN]-1659918240623
GPR[SSUN]-1659918240623
1331276989
GPR[ESUN]-1659918240832
GPR[SSUN]-1659918240832
561857265
GPR[ESUN]-1659918241017
GPR[SSUN]-1659918241017
1187751237
GPR[ESUN]-1659918241294
GPR[SSUN]-1659918241294
1331276989
GPR[SPVATF]-1659918241504
GPR[EPVATF]-1659918243914
GPR[SPS]-1659918243914
[5115695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:597.
GPR[EPS]-1659918244457
GPR[SPVATF]-1659918244458
GPR[EPVATF]-1659918246393
GPR[SPS]-1659918246393
[5118133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:597.
GPR[EPS]-1659918246895
GPR[ESUN]-1659918246895
GPR[SSUN]-1659918246895
1331276989
GPR[ESUN]-1659918247098
GPR[SSUN]-1659918247098
1187751237
GPR[ESUN]-1659918247369
GPR[SSUN]-1659918247369
1187751237
GPR[ESUN]-1659918247639
GPR[SSUN]-1659918247639
646738083
GPR[ESUN]-1659918247918
GPR[SSUN]-1659918247918
GPR[ESUN]-1659918247918
GPR[SSUN]-1659918247918
GPR[ESUN]-1659918247918
GPR[SSUN]-1659918247918
1187751237
GPR[ESUN]-1659918248189
GPR[SSUN]-1659918248189
1187751237
GPR[SPVATF]-1659918248459
GPR[EPVATF]-1659918250571
GPR[SPS]-1659918250571
[5122497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2815.
GPR[EPS]-1659918251259
GPR[SPVATF]-1659918251260
GPR[EPVATF]-1659918253952
GPR[SPS]-1659918253952
[5125876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2815.
GPR[EPS]-1659918254638
GPR[ESUN]-1659918254638
GPR[SSUN]-1659918254638
1187751237
GPR[ESUN]-1659918254925
GPR[SSUN]-1659918254925
1187751237
GPR[SPVATF]-1659918255199
GPR[EPVATF]-1659918257364
GPR[SPS]-1659918257364
[5129417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2813.
GPR[EPS]-1659918258179
GPR[ESUN]-1659918258179
GPR[SSUN]-1659918258179
1331276989
GPR[ESUN]-1659918258388
GPR[SSUN]-1659918258389
1331276989
GPR[SPVATF]-1659918258597
GPR[EPVATF]-1659918260783
GPR[SPS]-1659918260783
[5132532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:544.
GPR[EPS]-1659918261294
GPR[ESUN]-1659918261294
GPR[SSUN]-1659918261294
1331276989
GPR[SPVATF]-1659918261501
GPR[EPVATF]-1659918264206
GPR[SPS]-1659918264206
GPR[EPS]-1659918757688
GPR[ESUN]-1659918757688
GPR[SSUN]-1659918757688
1331276989
GPR[SPVATF]-1659918758046
GPR[EPVATF]-1659918760261
GPR[SPS]-1659918760261
[5632005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:540.
GPR[EPS]-1659918760768
GPR[ESUN]-1659918760768
GPR[SSUN]-1659918760768
1331276989
GPR[SPVATF]-1659918760975
GPR[EPVATF]-1659918763223
GPR[SPS]-1659918763223
[5634979] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:537.
GPR[EPS]-1659918763741
GPR[ESUN]-1659918763741
GPR[SSUN]-1659918763742
1331276989
GPR[ESUN]-1659918763952
GPR[SSUN]-1659918763952
1331276989
GPR[ESUN]-1659918764162
GPR[SSUN]-1659918764162
1331276989
GPR[SPVATF]-1659918764371
GPR[EPVATF]-1659918766589
GPR[SPS]-1659918766589
[5638354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:527.
GPR[EPS]-1659918767116
GPR[SPVATF]-1659918767117
GPR[EPVATF]-1659918769858
GPR[SPS]-1659918769858
[5641620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:527.
GPR[EPS]-1659918770382
GPR[ESUN]-1659918770382
GPR[SSUN]-1659918770382
1331276989
GPR[SPVATF]-1659918770592
GPR[EPVATF]-1659918772846
GPR[SPS]-1659918772846
[5644601] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:525.
GPR[EPS]-1659918773363
GPR[ESUN]-1659918773363
GPR[SSUN]-1659918773363
1331276989
GPR[SPVATF]-1659918773593
GPR[EPVATF]-1659918775844
GPR[SPS]-1659918775844
[5647684] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:524.
GPR[EPS]-1659918776446
GPR[ESUN]-1659918776446
GPR[SSUN]-1659918776446
1331276989
GPR[SPVATF]-1659918776662
GPR[EPVATF]-1659918778879
GPR[SPS]-1659918778879
[5650670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:519.
GPR[EPS]-1659918779432
GPR[SPVATF]-1659918779432
GPR[EPVATF]-1659918782219
GPR[SPS]-1659918782219
[5655332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:519.
GPR[EPS]-1659918784095
GPR[ESUN]-1659918784095
GPR[SSUN]-1659918784095
1331276989
GPR[ESUN]-1659918784321
GPR[SSUN]-1659918784321
1331276989
GPR[ESUN]-1659918784533
GPR[SSUN]-1659918784533
1331276989
GPR[SPVATF]-1659918784743
GPR[EPVATF]-1659918786859
GPR[SPS]-1659918786859
[5658668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:512.
GPR[EPS]-1659918787430
GPR[ESUN]-1659918787431
GPR[SSUN]-1659918787431
1331276989
GPR[SPVATF]-1659918787647
GPR[EPVATF]-1659918789180
GPR[SPS]-1659918789180
[5660979] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:511.
GPR[EPS]-1659918789743
GPR[ESUN]-1659918789743
GPR[SSUN]-1659918789743
1331276989
GPR[SPVATF]-1659918789961
GPR[EPVATF]-1659918791477
GPR[SPS]-1659918791477
[5663248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:490.
GPR[EPS]-1659918792010
GPR[ESUN]-1659918792010
GPR[SSUN]-1659918792010
1331276989
GPR[SPVATF]-1659918792220
GPR[EPVATF]-1659918793732
GPR[SPS]-1659918793732
GPR[EPS]-1659919007036
GPR[ESUN]-1659919007036
GPR[SSUN]-1659919007036
704176156
GPR[ESUN]-1659919007389
GPR[SSUN]-1659919007389
704176156
GPR[ESUN]-1659919007594
GPR[SSUN]-1659919007594
704176156
GPR[SPVATF]-1659919007799
GPR[EPVATF]-1659919009327
GPR[SPS]-1659919009327
[5881069] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:229.
GPR[EPS]-1659919009831
GPR[ESUN]-1659919009831
GPR[SSUN]-1659919009831
704176156
GPR[ESUN]-1659919010037
GPR[SSUN]-1659919010037
704176156
GPR[ESUN]-1659919010244
GPR[SSUN]-1659919010244
704176156
GPR[ESUN]-1659919010463
GPR[SSUN]-1659919010463
704176156
GPR[SPVATF]-1659919010673
GPR[EPVATF]-1659919012269
GPR[SPS]-1659919012269
[5884029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:187.
GPR[EPS]-1659919012791
GPR[SPVATF]-1659919012792
GPR[EPVATF]-1659919014401
GPR[SPS]-1659919014401
[5886155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:187.
GPR[EPS]-1659919014917
GPR[ESUN]-1659919014917
GPR[SSUN]-1659919014917
704176156
GPR[SPVATF]-1659919015128
GPR[EPVATF]-1659919016804
GPR[SPS]-1659919016804
[5888594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:186.
GPR[EPS]-1659919017356
GPR[ESUN]-1659919017356
GPR[SSUN]-1659919017356
704176156
GPR[SPVATF]-1659919017564
GPR[EPVATF]-1659919019255
GPR[SPS]-1659919019255
[5891071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:146.
GPR[EPS]-1659919019833
GPR[ESUN]-1659919019833
GPR[SSUN]-1659919019833
704176156
GPR[SPVATF]-1659919020042
GPR[EPVATF]-1659919021812
GPR[SPS]-1659919021812
[5893598] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:145.
GPR[EPS]-1659919022360
GPR[ESUN]-1659919022360
GPR[SSUN]-1659919022360
1331276989
GPR[ESUN]-1659919022570
GPR[SSUN]-1659919022570
1187751237
GPR[ESUN]-1659919022852
GPR[SSUN]-1659919022852
GPR[ESUN]-1659919022852
GPR[SSUN]-1659919022852
1187751237
GPR[ESUN]-1659919023156
GPR[SSUN]-1659919023156
GPR[ESUN]-1659919023156
GPR[SSUN]-1659919023156
GPR[ESUN]-1659919023156
GPR[SSUN]-1659919023156
GPR[ESUN]-1659919023156
GPR[SSUN]-1659919023156
1537627151
GPR[ESUN]-1659919023363
GPR[SSUN]-1659919023363
-1345859678
GPR[ESUN]-1659919023612
GPR[SSUN]-1659919023612
-1345859678
GPR[SPVATF]-1659919023858
GPR[EPVATF]-1659919025696
GPR[SPS]-1659919025696
[5897541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:675.
GPR[EPS]-1659919026303
GPR[ESUN]-1659919026303
GPR[SSUN]-1659919026303
-1345859678
GPR[SPVATF]-1659919026551
GPR[EPVATF]-1659919028463
GPR[SPS]-1659919028463
[5900284] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:674.
GPR[EPS]-1659919029046
GPR[ESUN]-1659919029046
GPR[SSUN]-1659919029046
-1345859678
GPR[SPVATF]-1659919029291
GPR[EPVATF]-1659919031365
GPR[SPS]-1659919031365
[5903199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:667.
GPR[EPS]-1659919031961
GPR[SPVATF]-1659919031961
GPR[EPVATF]-1659919034174
GPR[SPS]-1659919034174
[5905989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:667.
GPR[EPS]-1659919034751
GPR[ESUN]-1659919034751
GPR[SSUN]-1659919034751
-1345859678
GPR[ESUN]-1659919034997
GPR[SSUN]-1659919034997
-1345859678
GPR[SPVATF]-1659919035244
GPR[EPVATF]-1659919037454
GPR[SPS]-1659919037454
[5909292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:664.
GPR[EPS]-1659919038054
GPR[ESUN]-1659919038054
GPR[SSUN]-1659919038054
-1345859678
GPR[SPVATF]-1659919038299
GPR[EPVATF]-1659919040478
GPR[SPS]-1659919040478
[5912304] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:661.
GPR[EPS]-1659919041066
GPR[ESUN]-1659919041066
GPR[SSUN]-1659919041066
-1345859678
GPR[SPVATF]-1659919041311
GPR[EPVATF]-1659919043492
GPR[SPS]-1659919043492
[5915313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:660.
GPR[EPS]-1659919044075
GPR[ESUN]-1659919044075
GPR[SSUN]-1659919044075
-1345859678
GPR[ESUN]-1659919044320
GPR[SSUN]-1659919044320
-1345859678
GPR[SPVATF]-1659919044603
GPR[EPVATF]-1659919046816
GPR[SPS]-1659919046816
[5918635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:652.
GPR[EPS]-1659919047397
GPR[SPVATF]-1659919047397
GPR[EPVATF]-1659919049657
GPR[SPS]-1659919049657
[5921478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:652.
GPR[EPS]-1659919050241
GPR[ESUN]-1659919050241
GPR[SSUN]-1659919050241
-1345859678
GPR[ESUN]-1659919050488
GPR[SSUN]-1659919050488
-1345859678
GPR[ESUN]-1659919050735
GPR[SSUN]-1659919050735
-1345859678
GPR[SPVATF]-1659919050980
GPR[EPVATF]-1659919053206
GPR[SPS]-1659919053206
[5925026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:643.
GPR[EPS]-1659919053788
GPR[ESUN]-1659919053788
GPR[SSUN]-1659919053788
-1345859678
GPR[SPVATF]-1659919054031
GPR[EPVATF]-1659919056303
GPR[SPS]-1659919056303
[5928125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:630.
GPR[EPS]-1659919056887
GPR[SPVATF]-1659919056887
GPR[EPVATF]-1659919059202
GPR[SPS]-1659919059202
[5931034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:630.
GPR[EPS]-1659919059796
GPR[ESUN]-1659919059796
GPR[SSUN]-1659919059796
-1345859678
GPR[ESUN]-1659919060041
GPR[SSUN]-1659919060041
-1345859678
GPR[ESUN]-1659919060287
GPR[SSUN]-1659919060287
-1345859678
GPR[SPVATF]-1659919060533
GPR[EPVATF]-1659919062801
GPR[SPS]-1659919062801
[5934630] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:613.
GPR[EPS]-1659919063392
GPR[SPVATF]-1659919063392
GPR[EPVATF]-1659919065627
GPR[SPS]-1659919065627
[5937423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:613.
GPR[EPS]-1659919066185
GPR[ESUN]-1659919066185
GPR[SSUN]-1659919066185
-1345859678
GPR[ESUN]-1659919066428
GPR[SSUN]-1659919066428
-1345859678
GPR[ESUN]-1659919066721
GPR[SSUN]-1659919066721
GPR[ESUN]-1659919066721
GPR[SSUN]-1659919066721
2433571
GPR[ESUN]-1659919066959
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066960
GPR[ESUN]-1659919066960
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
GPR[ESUN]-1659919066961
GPR[SSUN]-1659919066961
1537627151
GPR[SPVATF]-1659919067199
GPR[EPVATF]-1659919069454
GPR[SPS]-1659919069454
[5942173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:172.
GPR[EPS]-1659919070935
GPR[ESUN]-1659919070936
GPR[SSUN]-1659919070936
-1345859678
GPR[ESUN]-1659919071188
GPR[SSUN]-1659919071188
-534884160
GPR[SPVATF]-1659919071516
GPR[EPVATF]-1659919073734
GPR[SPS]-1659919073734
[5945960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:248.
GPR[EPS]-1659919074723
GPR[ESUN]-1659919074723
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
GPR[ESUN]-1659919074724
GPR[SSUN]-1659919074724
-754411459
GPR[SPVATF]-1659919074920
GPR[EPVATF]-1659919076498
GPR[SPS]-1659919076498
[5948337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ComposeWarningsGuard:143.
GPR[EPS]-1659919077099
GPR[ESUN]-1659919077099
GPR[SSUN]-1659919077099
1629010039
GPR[SPVATF]-1659919077276
GPR[EPVATF]-1659919078780
GPR[SPS]-1659919078780
[5950528] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroupWarningsGuard:53.
GPR[EPS]-1659919079290
GPR[ESUN]-1659919079291
GPR[SSUN]-1659919079291
2433571
GPR[ESUN]-1659919079529
GPR[SSUN]-1659919079529
1629010039
GPR[ESUN]-1659919079707
GPR[SSUN]-1659919079707
1629010039
GPR[SPVATF]-1659919079912
GPR[EPVATF]-1659919081419
GPR[SPS]-1659919081419
[5953148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroupWarningsGuard:52.
GPR[EPS]-1659919081910
GPR[SPVATF]-1659919081911
GPR[EPVATF]-1659919083424
GPR[SPS]-1659919083424
[5955186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroupWarningsGuard:52.
GPR[EPS]-1659919083949
GPR[ESUN]-1659919083949
GPR[SSUN]-1659919083949
1629010039
GPR[SPVATF]-1659919084126
GPR[EPVATF]-1659919085655
GPR[SPS]-1659919085655
[5957378] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroupWarningsGuard:51.
GPR[EPS]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
GPR[ESUN]-1659919086140
GPR[SSUN]-1659919086140
646738083
GPR[SPVATF]-1659919086420
GPR[EPVATF]-1659919087897
GPR[SPS]-1659919087897
[5959894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:1270.
GPR[EPS]-1659919088656
GPR[SPVATF]-1659919088656
GPR[EPVATF]-1659919090180
GPR[SPS]-1659919090180
[5962117] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:1270.
GPR[EPS]-1659919090879
GPR[ESUN]-1659919090880
GPR[SSUN]-1659919090880
1187751237
GPR[ESUN]-1659919091152
GPR[SSUN]-1659919091152
1187751237
GPR[SPVATF]-1659919091421
GPR[EPVATF]-1659919092939
GPR[SPS]-1659919092939
[5964920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1710.
GPR[EPS]-1659919093682
GPR[ESUN]-1659919093682
GPR[SSUN]-1659919093683
1187751237
GPR[ESUN]-1659919093954
GPR[SSUN]-1659919093954
1290590094
GPR[ESUN]-1659919094180
GPR[SSUN]-1659919094180
1290590094
GPR[SPVATF]-1659919094401
GPR[EPVATF]-1659919095860
GPR[SPS]-1659919095860
[5967670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:107.
GPR[EPS]-1659919096432
GPR[ESUN]-1659919096432
GPR[SSUN]-1659919096432
1290590094
GPR[SPVATF]-1659919096730
GPR[EPVATF]-1659919098232
GPR[SPS]-1659919098232
[5970127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:106.
GPR[EPS]-1659919098889
GPR[ESUN]-1659919098889
GPR[SSUN]-1659919098889
1290590094
GPR[SPVATF]-1659919099114
GPR[EPVATF]-1659919100588
GPR[SPS]-1659919100588
[5972395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:105.
GPR[EPS]-1659919101157
GPR[ESUN]-1659919101157
GPR[SSUN]-1659919101157
1290590094
GPR[SPVATF]-1659919101385
GPR[EPVATF]-1659919102886
GPR[SPS]-1659919102886
[5974704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:104.
GPR[EPS]-1659919103466
GPR[ESUN]-1659919103466
GPR[SSUN]-1659919103466
-1345859678
GPR[ESUN]-1659919103713
GPR[SSUN]-1659919103713
1537627151
GPR[SPVATF]-1659919103917
GPR[EPVATF]-1659919105594
GPR[SPS]-1659919105594
[5977356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:171.
GPR[EPS]-1659919106118
GPR[SPVATF]-1659919106118
GPR[EPVATF]-1659919107730
GPR[SPS]-1659919107730
[5979449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:171.
GPR[EPS]-1659919108211
GPR[ESUN]-1659919108212
GPR[SSUN]-1659919108212
-1345859678
GPR[ESUN]-1659919108454
GPR[SSUN]-1659919108454
-1345859678
GPR[SPVATF]-1659919108692
GPR[EPVATF]-1659919110338
GPR[SPS]-1659919110338
[7779930] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659920908692
GPR[SSUN]-1659920908692
-1345859678
GPR[ESUN]-1659920909094
GPR[SSUN]-1659920909094
GPR[ESUN]-1659920909094
GPR[SSUN]-1659920909094
GPR[ESUN]-1659920909094
GPR[SSUN]-1659920909094
GPR[ESUN]-1659920909094
GPR[SSUN]-1659920909094
GPR[ESUN]-1659920909094
GPR[SSUN]-1659920909094
GPR[ESUN]-1659920909094
GPR[SSUN]-1659920909094
GPR[ESUN]-1659920909094
GPR[SSUN]-1659920909094
2433571
GPR[SPVATF]-1659920909334
GPR[EPVATF]-1659920911297
GPR[SPS]-1659920911297
[7783181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:819.
GPR[EPS]-1659920911943
GPR[ESUN]-1659920911943
GPR[SSUN]-1659920911943
GPR[ESUN]-1659920911943
GPR[SSUN]-1659920911943
GPR[ESUN]-1659920911943
GPR[SSUN]-1659920911943
GPR[ESUN]-1659920911943
GPR[SSUN]-1659920911943
GPR[ESUN]-1659920911943
GPR[SSUN]-1659920911943
GPR[ESUN]-1659920911943
GPR[SSUN]-1659920911943
-600752576
GPR[ESUN]-1659920912144
GPR[SSUN]-1659920912144
GPR[ESUN]-1659920912144
GPR[SSUN]-1659920912144
GPR[ESUN]-1659920912144
GPR[SSUN]-1659920912144
GPR[ESUN]-1659920912144
GPR[SSUN]-1659920912144
GPR[ESUN]-1659920912144
GPR[SSUN]-1659920912144
GPR[ESUN]-1659920912144
GPR[SSUN]-1659920912144
GPR[ESUN]-1659920912144
GPR[SSUN]-1659920912144
GPR[ESUN]-1659920912144
GPR[SSUN]-1659920912144
-534884160
GPR[SPVATF]-1659920912482
GPR[EPVATF]-1659920914613
GPR[SPS]-1659920914613
[7786654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1922.
GPR[EPS]-1659920915416
GPR[ESUN]-1659920915416
GPR[SSUN]-1659920915416
-534884160
GPR[SPVATF]-1659920915757
GPR[EPVATF]-1659920918013
GPR[SPS]-1659920918013
[7790013] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Compiler extends com.google.javascript.jscomp.AbstractCompiler {
    static final java.lang.String SINGLETON_MODULE_NAME = "[singleton]";

    static final com.google.javascript.jscomp.DiagnosticType MODULE_DEPENDENCY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MODULE_DEPENDENCY_ERROR", "Bad dependency: {0} -> {1}. " + "Modules must be listed in dependency order.");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_ENTRY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_ENTRY_ERROR", "required entry point \"{0}\" never provided");

    com.google.javascript.jscomp.CompilerOptions options = null;

    private com.google.javascript.jscomp.PassConfig passes = null;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

    private java.util.List<com.google.javascript.jscomp.JSModule> modules;

    private com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

    private com.google.javascript.jscomp.ErrorManager errorManager;

    private com.google.javascript.jscomp.WarningsGuard warningsGuard;

    com.google.javascript.rhino.Node externsRoot;

    com.google.javascript.rhino.Node jsRoot;

    com.google.javascript.rhino.Node externAndJsRoot;

    private java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> inputsById;

    private com.google.javascript.jscomp.SourceMap sourceMap;

    private java.lang.String externExports = null;

    private int uniqueNameId = 0;

    private boolean useThreads = true;

    private boolean hasRegExpGlobalReferences = true;

    private com.google.javascript.jscomp.FunctionInformationMap functionInformationMap;

    private final java.lang.StringBuilder debugLog = new java.lang.StringBuilder();

    com.google.javascript.jscomp.CodingConvention defaultCodingConvention = new com.google.javascript.jscomp.ClosureCodingConvention();

    private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.parsing.Config parserConfig = null;

    private com.google.javascript.jscomp.ReverseAbstractInterpreter abstractInterpreter;

    private com.google.javascript.jscomp.TypeValidator typeValidator;

    public com.google.javascript.jscomp.PerformanceTracker tracker;

    private final com.google.javascript.rhino.ErrorReporter oldErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(this);

    private final com.google.javascript.rhino.head.ErrorReporter defaultErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(this);

    public static final com.google.javascript.jscomp.DiagnosticType OPTIMIZE_LOOP_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of optimization iterations: {0}");

    public static final com.google.javascript.jscomp.DiagnosticType MOTION_ITERATIONS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of code motion iterations: {0}");

    private static final long COMPILER_STACK_SIZE = 1048576L;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("com.google.javascript.jscomp");

    private final java.io.PrintStream outStream;

    private com.google.javascript.jscomp.GlobalVarReferenceMap globalRefMap = null;

    private volatile double progress = 0.0;

    public Compiler() {
        this(((java.io.PrintStream) (null)));
    }

    public Compiler(java.io.PrintStream stream) {
        addChangeHandler(recentChange);
        outStream = stream;
    }

    public Compiler(com.google.javascript.jscomp.ErrorManager errorManager) {
        this();
        setErrorManager(errorManager);
    }

    public void setErrorManager(com.google.javascript.jscomp.ErrorManager errorManager) {
        com.google.common.base.Preconditions.checkNotNull(errorManager, "the error manager cannot be null");
        this.errorManager = errorManager;
    }

    private com.google.javascript.jscomp.MessageFormatter createMessageFormatter() {
        boolean colorize = options.shouldColorizeErrorOutput();
        return options.errorFormat.toFormatter(this, colorize);
    }

    public void initOptions(com.google.javascript.jscomp.CompilerOptions options) {
        this.options = options;
        if (errorManager == null) {
            if (outStream == null) {
                setErrorManager(new com.google.javascript.jscomp.LoggerErrorManager(createMessageFormatter(), com.google.javascript.jscomp.Compiler.logger));
            } else {
                com.google.javascript.jscomp.PrintStreamErrorManager printer = new com.google.javascript.jscomp.PrintStreamErrorManager(createMessageFormatter(), outStream);
                printer.setSummaryDetailLevel(options.summaryDetailLevel);
                setErrorManager(printer);
            }
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = true;
        } else if (options.disables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = false;
        } else if (!options.checkTypes) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR), com.google.javascript.jscomp.CheckLevel.OFF);
        }
        if (options.checkGlobalThisLevel.isOn() && (!options.disables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS))) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
        }
        if (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT, com.google.javascript.jscomp.CheckLevel.ERROR);
        }
        java.util.List<com.google.javascript.jscomp.WarningsGuard> guards = com.google.common.collect.Lists.newArrayList();
        guards.add(new com.google.javascript.jscomp.SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
        guards.add(options.getWarningsGuard());
        com.google.javascript.jscomp.ComposeWarningsGuard composedGuards = new com.google.javascript.jscomp.ComposeWarningsGuard(guards);
        if ((!options.checkSymbols) && (!composedGuards.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES))) {
            composedGuards.addGuard(new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES, com.google.javascript.jscomp.CheckLevel.OFF));
        }
        this.warningsGuard = composedGuards;
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        init(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(inputs), options);
    }

    public void init(java.util.List<com.google.javascript.jscomp.JSSourceFile> externs, java.util.List<com.google.javascript.jscomp.JSSourceFile> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);
        for (com.google.javascript.jscomp.JSSourceFile input : inputs) {
            module.add(input);
        }
        initModules(externs, com.google.common.collect.Lists.newArrayList(module), options);
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        initModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public void initModules(java.util.List<com.google.javascript.jscomp.JSSourceFile> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        initOptions(options);
        checkFirstModule(modules);
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        this.externs = makeCompilerInput(externs, true);
        this.modules = modules;
        if (modules.size() > 1) {
            try {
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (com.google.javascript.jscomp.JSModuleGraph.ModuleDependenceException e) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR, e.getModule().getName(), e.getDependentModule().getName()));
                return;
            }
        } else {
            this.moduleGraph = null;
        }
        this.inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initBasedOnOptions();
        initInputsByIdMap();
    }

    private void initBasedOnOptions() {
        if (options.sourceMapOutputPath != null) {
            sourceMap = options.sourceMapFormat.getInstance();
            sourceMap.setPrefixMappings(options.sourceMapLocationMappings);
        }
    }

    private java.util.List<com.google.javascript.jscomp.CompilerInput> makeCompilerInput(java.util.List<com.google.javascript.jscomp.JSSourceFile> files, boolean isExtern) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        for (com.google.javascript.jscomp.JSSourceFile file : files) {
            inputs.add(new com.google.javascript.jscomp.CompilerInput(file, isExtern));
        }
        return inputs;
    }

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_MODULE_LIST_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_MODULE_LIST_ERROR", "At least one module must be provided");

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_ROOT_MODULE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_ROOT_MODULE_ERROR", "Root module '{0}' must contain at least one source code input");

    private void checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        if (modules.isEmpty()) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR));
        } else if (modules.get(0).getInputs().isEmpty() && (modules.size() > 1)) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR, modules.get(0).getName()));
        }
    }

    static java.lang.String createFillFileName(java.lang.String moduleName) {
        return ("[" + moduleName) + "]";
    }

    private static void fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        for (com.google.javascript.jscomp.JSModule module : modules) {
            if (module.getInputs().isEmpty()) {
                module.add(com.google.javascript.jscomp.JSSourceFile.fromCode(com.google.javascript.jscomp.Compiler.createFillFileName(module.getName()), ""));
            }
        }
    }

    public void rebuildInputsFromModules() {
        inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initInputsByIdMap();
    }

    private static java.util.List<com.google.javascript.jscomp.CompilerInput> getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> inputMap = com.google.common.collect.Maps.newHashMap();
        for (com.google.javascript.jscomp.JSModule module : modules) {
            for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                java.lang.String inputName = input.getName();
                inputs.add(input);
                inputMap.put(inputName, module);
            }
        }
        return inputs;
    }

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_INPUT", "Duplicate input: {0}");

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_EXTERN_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_EXTERN_INPUT", "Duplicate extern input: {0}");

    void initInputsByIdMap() {
        inputsById = new java.util.HashMap<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput>();
        for (com.google.javascript.jscomp.CompilerInput input : externs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = inputsById.put(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT, input.getName()));
            }
        }
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = inputsById.put(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT, input.getName()));
            }
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile extern, com.google.javascript.jscomp.JSSourceFile input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(extern, new com.google.javascript.jscomp.JSSourceFile[]{ input }, options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile extern, com.google.javascript.jscomp.JSSourceFile[] input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(new com.google.javascript.jscomp.JSSourceFile[]{ extern }, input, options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile extern, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(new com.google.javascript.jscomp.JSSourceFile[]{ extern }, modules, options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(inputs), options);
    }

    public com.google.javascript.jscomp.Result compile(java.util.List<com.google.javascript.jscomp.JSSourceFile> externs, java.util.List<com.google.javascript.jscomp.JSSourceFile> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            init(externs, inputs, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public com.google.javascript.jscomp.Result compileModules(java.util.List<com.google.javascript.jscomp.JSSourceFile> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            initModules(externs, modules, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    private com.google.javascript.jscomp.Result compile() {
        return runInCompilerThread(new java.util.concurrent.Callable<com.google.javascript.jscomp.Result>() {
            @java.lang.Override
            public com.google.javascript.jscomp.Result call() throws java.lang.Exception {
                compileInternal();
                return getResult();
            }
        });
    }

    public void disableThreads() {
        useThreads = false;
    }

    private <T> T runInCompilerThread(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, useThreads, options.tracer.isOn());
    }

    static <T> T runCallableWithLargeStack(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, true, false);
    }

    @java.lang.SuppressWarnings("unchecked")
    static <T> T runCallable(final java.util.concurrent.Callable<T> callable, boolean useLargeStackThread, boolean trace) {
        final boolean dumpTraceReport = trace;
        final java.lang.Object[] result = new java.lang.Object[1];
        final java.lang.Throwable[] exception = new java.lang.Throwable[1];
        java.lang.Runnable runnable = new java.lang.Runnable() {
            @java.lang.Override
            public void run() {
                try {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.initCurrentThreadTrace();
                    }
                    result[0] = callable.call();
                } catch (java.lang.Throwable e) {
                    exception[0] = e;
                } finally {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.logAndClearCurrentThreadTrace();
                    }
                }
            }
        };
        if (useLargeStackThread) {
            java.lang.Thread th = new java.lang.Thread(null, runnable, "jscompiler", com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);
            th.start();
            while (true) {
                try {
                    th.join();
                    break;
                } catch (java.lang.InterruptedException ignore) {
                }
            } 
        } else {
            runnable.run();
        }
        if (exception[0] != null) {
            throw new java.lang.RuntimeException(exception[0]);
        }
        return ((T) (result[0]));
    }

    private void compileInternal() {
        setProgress(0.0);
        parse();
        setProgress(0.15);
        if (hasErrors()) {
            return;
        }
        if (!precheck()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            check();
            return;
        }
        if (!options.skipAllPasses) {
            check();
            if (hasErrors()) {
                return;
            }
            if (options.isExternExportsEnabled() || (options.externExportsPath != null)) {
                externExports();
            }
            if (!options.ideMode) {
                optimize();
            }
        }
        if (options.recordFunctionInformation) {
            recordFunctionInformation();
        }
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.START_AND_END) {
            runSanityCheck();
        }
        setProgress(1.0);
    }

    public void parse() {
        parseInputs();
    }

    com.google.javascript.jscomp.PassConfig getPassConfig() {
        if (passes == null) {
            passes = createPassConfigInternal();
        }
        return passes;
    }

    com.google.javascript.jscomp.PassConfig createPassConfigInternal() {
        return new com.google.javascript.jscomp.DefaultPassConfig(options);
    }

    public void setPassConfig(com.google.javascript.jscomp.PassConfig passes) {
        com.google.common.base.Preconditions.checkNotNull(passes);
        if (this.passes != null) {
            throw new java.lang.IllegalStateException("this.passes has already been assigned");
        }
        this.passes = passes;
    }

    boolean precheck() {
        return true;
    }

    public void check() {
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_CHECKS);
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, new com.google.javascript.jscomp.PhaseOptimizer.ProgressRange(getProgress(), 1.0));
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getChecks());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            return;
        }
        if (options.removeTryCatchFinally) {
            removeTryCatchFinally();
        }
        if ((((options.getTweakProcessing().shouldStrip() || (!options.stripTypes.isEmpty())) || (!options.stripNameSuffixes.isEmpty())) || (!options.stripTypePrefixes.isEmpty())) || (!options.stripNamePrefixes.isEmpty())) {
            stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);
        }
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
    }

    private void externExports() {
        com.google.javascript.jscomp.Compiler.logger.fine("Creating extern file for exports");
        startPass("externExports");
        com.google.javascript.jscomp.ExternExportsPass pass = new com.google.javascript.jscomp.ExternExportsPass(this);
        process(pass);
        externExports = pass.getGeneratedExterns();
        endPass();
    }

    @java.lang.Override
    void process(com.google.javascript.jscomp.CompilerPass p) {
        p.process(externsRoot, jsRoot);
    }

    private final com.google.javascript.jscomp.PassFactory sanityCheck = new com.google.javascript.jscomp.PassFactory("sanityCheck", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SanityCheck(compiler);
        }
    };

    private void maybeSanityCheck() {
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            runSanityCheck();
        }
    }

    private void runSanityCheck() {
        sanityCheck.create(this).process(externsRoot, jsRoot);
    }

    void removeTryCatchFinally() {
        com.google.javascript.jscomp.Compiler.logger.fine("Remove try/catch/finally");
        startPass("removeTryCatchFinally");
        com.google.javascript.jscomp.RemoveTryCatch r = new com.google.javascript.jscomp.RemoveTryCatch(this);
        process(r);
        endPass();
    }

    void stripCode(java.util.Set<java.lang.String> stripTypes, java.util.Set<java.lang.String> stripNameSuffixes, java.util.Set<java.lang.String> stripTypePrefixes, java.util.Set<java.lang.String> stripNamePrefixes) {
        com.google.javascript.jscomp.Compiler.logger.fine("Strip code");
        startPass("stripCode");
        com.google.javascript.jscomp.StripCode r = new com.google.javascript.jscomp.StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
        if (options.getTweakProcessing().shouldStrip()) {
            r.enableTweakStripping();
        }
        process(r);
        endPass();
    }

    private void runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        if (options.customPasses != null) {
            com.google.javascript.jscomp.Tracer t = newTracer("runCustomPasses");
            try {
                for (com.google.javascript.jscomp.CompilerPass p : options.customPasses.get(executionTime)) {
                    process(p);
                }
            } finally {
                stopTracer(t, "runCustomPasses");
            }
        }
    }

    private com.google.javascript.jscomp.Tracer currentTracer = null;

    private java.lang.String currentPassName = null;

    void startPass(java.lang.String passName) {
        com.google.common.base.Preconditions.checkState(currentTracer == null);
        currentPassName = passName;
        currentTracer = newTracer(passName);
    }

    void endPass() {
        com.google.common.base.Preconditions.checkState(currentTracer != null, "Tracer should not be null at the end of a pass.");
        stopTracer(currentTracer, currentPassName);
        java.lang.String passToCheck = currentPassName;
        currentPassName = null;
        currentTracer = null;
        maybeSanityCheck();
    }

    com.google.javascript.jscomp.Tracer newTracer(java.lang.String passName) {
        java.lang.String comment = passName + (recentChange.hasCodeChanged() ? " on recently changed AST" : "");
        if (options.tracer.isOn()) {
            tracker.recordPassStart(passName);
        }
        return new com.google.javascript.jscomp.Tracer("Compiler", comment);
    }

    void stopTracer(com.google.javascript.jscomp.Tracer t, java.lang.String passName) {
        long result = t.stop();
        if (options.tracer.isOn()) {
            tracker.recordPassStop(passName, result);
        }
    }

    public com.google.javascript.jscomp.Result getResult() {
        com.google.javascript.jscomp.PassConfig.State state = getPassConfig().getIntermediateState();
        return new com.google.javascript.jscomp.Result(getErrors(), getWarnings(), debugLog.toString(), state.variableMap, state.propertyMap, state.anonymousFunctionNameMap, state.stringMap, functionInformationMap, sourceMap, externExports, state.cssNames, state.idGeneratorMap);
    }

    public com.google.javascript.jscomp.JSError[] getMessages() {
        return getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getErrors() {
        return errorManager.getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getWarnings() {
        return errorManager.getWarnings();
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRoot() {
        return externAndJsRoot;
    }

    private int nextUniqueNameId() {
        return uniqueNameId++;
    }

    @com.google.common.annotations.VisibleForTesting
    void resetUniqueNameId() {
        uniqueNameId = 0;
    }

    @java.lang.Override
    com.google.common.base.Supplier<java.lang.String> getUniqueNameIdSupplier() {
        final com.google.javascript.jscomp.Compiler self = this;
        return new com.google.common.base.Supplier<java.lang.String>() {
            @java.lang.Override
            public java.lang.String get() {
                return java.lang.String.valueOf(self.nextUniqueNameId());
            }
        };
    }

    @java.lang.Override
    boolean areNodesEqualForInlining(com.google.javascript.rhino.Node n1, com.google.javascript.rhino.Node n2) {
        if (options.ambiguateProperties || options.disambiguateProperties) {
            return n1.isEquivalentToTyped(n2);
        } else {
            return n1.isEquivalentTo(n2);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput getInput(com.google.javascript.rhino.InputId id) {
        return inputsById.get(id);
    }

    protected void removeExternInput(com.google.javascript.rhino.InputId id) {
        com.google.javascript.jscomp.CompilerInput input = getInput(id);
        if (input == null) {
            return;
        }
        com.google.common.base.Preconditions.checkState(input.isExtern(), "Not an extern input: %s", input.getName());
        inputsById.remove(id);
        externs.remove(input);
        com.google.javascript.rhino.Node root = input.getAstRoot(this);
        if (root != null) {
            root.detachFromParent();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput newExternInput(java.lang.String name) {
        com.google.javascript.jscomp.SourceAst ast = new com.google.javascript.jscomp.SyntheticAst(name);
        if (inputsById.containsKey(ast.getInputId())) {
            throw new java.lang.IllegalArgumentException("Conflicting externs name: " + name);
        }
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(ast, true);
        inputsById.put(input.getInputId(), input);
        externsRoot.addChildToFront(ast.getAstRoot(this));
        externs.add(0, input);
        return input;
    }

    void addIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.rhino.InputId id = ast.getInputId();
        com.google.common.base.Preconditions.checkState(getInput(id) == null, "Duplicate input %s", id.getIdName());
        inputsById.put(id, new com.google.javascript.jscomp.CompilerInput(ast));
    }

    boolean replaceIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        com.google.common.base.Preconditions.checkNotNull(oldInput, "No input to replace: %s", ast.getInputId().getIdName());
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        com.google.javascript.rhino.Node oldRoot = oldInput.getAstRoot(this);
        if (oldRoot != null) {
            oldRoot.getParent().replaceChild(oldRoot, newRoot);
        } else {
            getRoot().getLastChild().addChildToBack(newRoot);
        }
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        inputsById.put(ast.getInputId(), newInput);
        com.google.javascript.jscomp.JSModule module = oldInput.getModule();
        if (module != null) {
            module.addAfter(newInput, oldInput);
            module.remove(oldInput);
        }
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(oldInput.getInputId()));
        com.google.javascript.rhino.InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));
        inputs.remove(oldInput);
        return true;
    }

    boolean addNewSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        if (oldInput != null) {
            throw new java.lang.IllegalStateException("Input already exists: " + ast.getInputId().getIdName());
        }
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        getRoot().getLastChild().addChildToBack(newRoot);
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        if ((moduleGraph == null) && (!modules.isEmpty())) {
            modules.get(0).add(newInput);
        }
        inputsById.put(ast.getInputId(), newInput);
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.JSModuleGraph getModuleGraph() {
        return moduleGraph;
    }

    com.google.javascript.jscomp.JSModuleGraph getDegenerateModuleGraph() {
        return moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSTypeRegistry getTypeRegistry() {
        if (typeRegistry == null) {
            typeRegistry = new com.google.javascript.rhino.jstype.JSTypeRegistry(oldErrorReporter, options.looseTypes);
        }
        return typeRegistry;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.MemoizedScopeCreator getTypedScopeCreator() {
        return getPassConfig().getTypedScopeCreator();
    }

    @java.lang.SuppressWarnings("unchecked")
    com.google.javascript.jscomp.DefaultPassConfig ensureDefaultPassConfig() {
        com.google.javascript.jscomp.PassConfig passes = getPassConfig().getBasePassConfig();
        com.google.common.base.Preconditions.checkState(passes instanceof com.google.javascript.jscomp.DefaultPassConfig, "PassConfigs must eventually delegate to the DefaultPassConfig");
        return ((com.google.javascript.jscomp.DefaultPassConfig) (passes));
    }

    public com.google.javascript.jscomp.SymbolTable buildKnownSymbolTable() {
        com.google.javascript.jscomp.SymbolTable symbolTable = new com.google.javascript.jscomp.SymbolTable(getTypeRegistry());
        com.google.javascript.jscomp.MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
        if (typedScopeCreator != null) {
            symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());
            symbolTable.addSymbolsFrom(typedScopeCreator);
        } else {
            symbolTable.findScopes(this, externsRoot, jsRoot);
        }
        com.google.javascript.jscomp.GlobalNamespace globalNamespace = ensureDefaultPassConfig().getGlobalNamespace();
        if (globalNamespace != null) {
            symbolTable.addSymbolsFrom(globalNamespace);
        }
        com.google.javascript.jscomp.ReferenceCollectingCallback refCollector = new com.google.javascript.jscomp.ReferenceCollectingCallback(this, com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);
        com.google.javascript.jscomp.NodeTraversal.traverse(this, getRoot(), refCollector);
        symbolTable.addSymbolsFrom(refCollector);
        com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = ensureDefaultPassConfig().getPreprocessorSymbolTable();
        if (preprocessorSymbolTable != null) {
            symbolTable.addSymbolsFrom(preprocessorSymbolTable);
        }
        symbolTable.fillNamespaceReferences();
        symbolTable.fillPropertyScopes();
        symbolTable.fillThisReferences(this, externsRoot, jsRoot);
        symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);
        symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);
        return symbolTable;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getTopScope() {
        return getPassConfig().getTopScope();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ReverseAbstractInterpreter getReverseAbstractInterpreter() {
        if (abstractInterpreter == null) {
            com.google.javascript.jscomp.ChainableReverseAbstractInterpreter interpreter = new com.google.javascript.jscomp.SemanticReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry());
            if (options.closurePass) {
                interpreter = new com.google.javascript.jscomp.ClosureReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry()).append(interpreter).getFirst();
            }
            abstractInterpreter = interpreter;
        }
        return abstractInterpreter;
    }

    @java.lang.Override
    com.google.javascript.jscomp.TypeValidator getTypeValidator() {
        if (typeValidator == null) {
            typeValidator = new com.google.javascript.jscomp.TypeValidator(this);
        }
        return typeValidator;
    }

    com.google.javascript.rhino.Node parseInputs() {
        boolean devMode = options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF;
        if (externsRoot != null) {
            externsRoot.detachChildren();
        }
        if (jsRoot != null) {
            jsRoot.detachChildren();
        }
        jsRoot = com.google.javascript.rhino.IR.block();
        jsRoot.setIsSyntheticBlock(true);
        externsRoot = com.google.javascript.rhino.IR.block();
        externsRoot.setIsSyntheticBlock(true);
        externAndJsRoot = com.google.javascript.rhino.IR.block(externsRoot, jsRoot);
        externAndJsRoot.setIsSyntheticBlock(true);
        if (options.tracer.isOn()) {
            tracker = new com.google.javascript.jscomp.PerformanceTracker(jsRoot, options.tracer == com.google.javascript.jscomp.CompilerOptions.TracerMode.ALL);
            addChangeHandler(tracker.getCodeChangeHandler());
        }
        com.google.javascript.jscomp.Tracer tracer = newTracer("parseInputs");
        try {
            for (com.google.javascript.jscomp.CompilerInput input : externs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (hasErrors()) {
                    return null;
                }
                externsRoot.addChildToBack(n);
            }
            if (options.transformAMDToCJSModules || options.processCommonJSModules) {
                processAMDAndCommonJSModules();
            }
            if (options.dependencyOptions.needsManagement()) {
                for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                    input.setCompiler(this);
                    for (java.lang.String provide : input.getProvides()) {
                        getTypeRegistry().forwardDeclareType(provide);
                    }
                }
                try {
                    inputs = (moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph).manageDependencies(options.dependencyOptions, inputs);
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                }
            }
            boolean staleInputs = false;
            for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (n == null) {
                    continue;
                }
                if (n.getJSDocInfo() != null) {
                    com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                    if (info.isExterns()) {
                        externsRoot.addChildToBack(n);
                        input.setIsExtern(true);
                        input.getModule().remove(input);
                        externs.add(input);
                        staleInputs = true;
                    } else if (info.isNoCompile()) {
                        input.getModule().remove(input);
                        staleInputs = true;
                    }
                }
            }
            if (staleInputs) {
                com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
                rebuildInputsFromModules();
            }
            for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (n == null) {
                    continue;
                }
                if (devMode) {
                    runSanityCheck();
                    if (hasErrors()) {
                        return null;
                    }
                }
                if ((options.sourceMapOutputPath != null) || (options.nameReferenceReportPath != null)) {
                    com.google.javascript.jscomp.SourceInformationAnnotator sia = new com.google.javascript.jscomp.SourceInformationAnnotator(input.getName(), options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF);
                    com.google.javascript.jscomp.NodeTraversal.traverse(this, n, sia);
                }
                jsRoot.addChildToBack(n);
            }
            if (hasErrors()) {
                return null;
            }
            return externAndJsRoot;
        } finally {
            stopTracer(tracer, "parseInputs");
        }
    }

    private void processAMDAndCommonJSModules() {
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();
        java.util.Map<com.google.javascript.jscomp.CompilerInput, com.google.javascript.jscomp.JSModule> modulesByInput = com.google.common.collect.Maps.newLinkedHashMap();
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            input.setCompiler(this);
            com.google.javascript.rhino.Node root = input.getAstRoot(this);
            if (root == null) {
                continue;
            }
            if (options.transformAMDToCJSModules) {
                new com.google.javascript.jscomp.TransformAMDToCJSModule(this).process(null, root);
            }
            if (options.processCommonJSModules) {
                com.google.javascript.jscomp.ProcessCommonJSModules cjs = new com.google.javascript.jscomp.ProcessCommonJSModules(this, options.commonJSModulePathPrefix);
                cjs.process(null, root);
                com.google.javascript.jscomp.JSModule m = cjs.getModule();
                if (m != null) {
                    modulesByName.put(m.getName(), m);
                    modulesByInput.put(input, m);
                }
            }
        }
        if (options.processCommonJSModules) {
            java.util.List<com.google.javascript.jscomp.JSModule> modules = com.google.common.collect.Lists.newArrayList(modulesByName.values());
            if (!modules.isEmpty()) {
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(this.modules);
            }
            for (com.google.javascript.jscomp.JSModule module : modules) {
                for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                    for (java.lang.String require : input.getRequires()) {
                        module.addDependency(modulesByName.get(require));
                    }
                }
            }
            try {
                modules = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.jscomp.CompilerInput input : this.moduleGraph.manageDependencies(options.dependencyOptions, inputs)) {
                    modules.add(modulesByInput.get(input));
                }
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (java.lang.Exception e) {
                com.google.common.base.Throwables.propagate(e);
            }
        }
    }

    public com.google.javascript.rhino.Node parse(com.google.javascript.jscomp.JSSourceFile file) {
        initCompilerOptionsIfTesting();
        addToDebugLog("Parsing: " + file.getName());
        return new com.google.javascript.jscomp.JsAst(file).getAstRoot(this);
    }

    private int syntheticCodeId = 0;

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String js) {
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.JSSourceFile.fromCode((" [synthetic:" + (++syntheticCodeId)) + "] ", js));
        inputsById.put(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    protected com.google.javascript.jscomp.CompilerOptions newCompilerOptions() {
        return new com.google.javascript.jscomp.CompilerOptions();
    }

    void initCompilerOptionsIfTesting() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String fileName, java.lang.String js) {
        initCompilerOptionsIfTesting();
        return parse(com.google.javascript.jscomp.JSSourceFile.fromCode(fileName, js));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseTestCode(java.lang.String js) {
        initCompilerOptionsIfTesting();
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.JSSourceFile.fromCode(" [testcode] ", js));
        if (inputsById == null) {
            inputsById = com.google.common.collect.Maps.newHashMap();
        }
        inputsById.put(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    @java.lang.Override
    com.google.javascript.rhino.head.ErrorReporter getDefaultErrorReporter() {
        return defaultErrorReporter;
    }

    public java.lang.String toSource() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSource");
                try {
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    if (jsRoot != null) {
                        int i = 0;
                        for (com.google.javascript.rhino.Node scriptNode = jsRoot.getFirstChild(); scriptNode != null; scriptNode = scriptNode.getNext()) {
                            toSource(cb, i++, scriptNode);
                        }
                    }
                    return cb.toString();
                } finally {
                    stopTracer(tracer, "toSource");
                }
            }
        });
    }

    public java.lang.String[] toSourceArray() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSourceArray");
                try {
                    int numInputs = inputs.size();
                    java.lang.String[] sources = new java.lang.String[numInputs];
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    for (int i = 0; i < numInputs; i++) {
                        com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                        cb.reset();
                        toSource(cb, i, scriptNode);
                        sources[i] = cb.toString();
                    }
                    return sources;
                } finally {
                    stopTracer(tracer, "toSourceArray");
                }
            }
        });
    }

    public java.lang.String toSource(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return "";
                }
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module: " + module.getName());
                    }
                    toSource(cb, i, scriptNode);
                }
                return cb.toString();
            }
        });
    }

    public java.lang.String[] toSourceArray(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return new java.lang.String[0];
                }
                java.lang.String[] sources = new java.lang.String[numInputs];
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module input: " + inputs.get(i).getName());
                    }
                    cb.reset();
                    toSource(cb, i, scriptNode);
                    sources[i] = cb.toString();
                }
                return sources;
            }
        });
    }

    public void toSource(final com.google.javascript.jscomp.Compiler.CodeBuilder cb, final int inputSeqNum, final com.google.javascript.rhino.Node root) {
        runInCompilerThread(new java.util.concurrent.Callable<java.lang.Void>() {
            @java.lang.Override
            public java.lang.Void call() throws java.lang.Exception {
                if (options.printInputDelimiter) {
                    if ((cb.getLength() > 0) && (!cb.endsWith("\n"))) {
                        cb.append("\n");
                    }
                    com.google.common.base.Preconditions.checkState(root.isScript());
                    java.lang.String delimiter = options.inputDelimiter;
                    java.lang.String inputName = root.getInputId().getIdName();
                    java.lang.String sourceName = root.getSourceFileName();
                    com.google.common.base.Preconditions.checkState(sourceName != null);
                    com.google.common.base.Preconditions.checkState(!sourceName.isEmpty());
                    delimiter = delimiter.replaceAll("%name%", java.util.regex.Matcher.quoteReplacement(inputName)).replaceAll("%num%", java.lang.String.valueOf(inputSeqNum));
                    cb.append(delimiter).append("\n");
                }
                if ((root.getJSDocInfo() != null) && (root.getJSDocInfo().getLicense() != null)) {
                    cb.append("/*\n").append(root.getJSDocInfo().getLicense()).append("*/\n");
                }
                if (options.sourceMapOutputPath != null) {
                    sourceMap.setStartingPosition(cb.getLineIndex(), cb.getColumnIndex());
                }
                java.lang.String code = toSource(root, sourceMap, inputSeqNum == 0);
                if (!code.isEmpty()) {
                    cb.append(code);
                    int length = code.length();
                    char lastChar = code.charAt(length - 1);
                    char secondLastChar = (length >= 2) ? code.charAt(length - 2) : '\u0000';
                    boolean hasSemiColon = (lastChar == ';') || ((lastChar == '\n') && (secondLastChar == ';'));
                    if (!hasSemiColon) {
                        cb.append(";");
                    }
                }
                return null;
            }
        });
    }

    @java.lang.Override
    java.lang.String toSource(com.google.javascript.rhino.Node n) {
        initCompilerOptionsIfTesting();
        return toSource(n, null, true);
    }

    private java.lang.String toSource(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.SourceMap sourceMap, boolean firstOutput) {
        com.google.javascript.jscomp.CodePrinter.Builder builder = new com.google.javascript.jscomp.CodePrinter.Builder(n);
        builder.setPrettyPrint(options.prettyPrint);
        builder.setLineBreak(options.lineBreak);
        builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);
        builder.setSourceMap(sourceMap);
        builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);
        builder.setTagAsStrict(firstOutput && (options.getLanguageOut() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        builder.setLineLengthThreshold(options.lineLengthThreshold);
        java.nio.charset.Charset charset = (options.outputCharset != null) ? java.nio.charset.Charset.forName(options.outputCharset) : null;
        builder.setOutputCharset(charset);
        return builder.build();
    }

    public static class CodeBuilder {
        private final java.lang.StringBuilder sb = new java.lang.StringBuilder();

        private int lineCount = 0;

        private int colCount = 0;

        void reset() {
            sb.setLength(0);
        }

        com.google.javascript.jscomp.Compiler.CodeBuilder append(java.lang.String str) {
            sb.append(str);
            int index = -1;
            int lastIndex = index;
            while ((index = str.indexOf('\n', index + 1)) >= 0) {
                ++lineCount;
                lastIndex = index;
            } 
            if (lastIndex == (-1)) {
                colCount += str.length();
            } else {
                colCount = str.length() - (lastIndex + 1);
            }
            return this;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return sb.toString();
        }

        public int getLength() {
            return sb.length();
        }

        int getLineIndex() {
            return lineCount;
        }

        int getColumnIndex() {
            return colCount;
        }

        boolean endsWith(java.lang.String suffix) {
            return (sb.length() > suffix.length()) && suffix.equals(sb.substring(sb.length() - suffix.length()));
        }
    }

    public void optimize() {
        normalize();
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, null);
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getOptimizations());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
    }

    @java.lang.Override
    void setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap map) {
        options.cssRenamingMap = map;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CssRenamingMap getCssRenamingMap() {
        return options.cssRenamingMap;
    }

    public void processDefines() {
        new com.google.javascript.jscomp.DefaultPassConfig(options).processDefines.create(this).process(externsRoot, jsRoot);
    }

    boolean isInliningForbidden() {
        return (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> computeCFG() {
        com.google.javascript.jscomp.Compiler.logger.fine("Computing Control Flow Graph");
        com.google.javascript.jscomp.Tracer tracer = newTracer("computeCFG");
        com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
        process(cfa);
        stopTracer(tracer, "computeCFG");
        return cfa.getCfg();
    }

    public void normalize() {
        com.google.javascript.jscomp.Compiler.logger.fine("Normalizing");
        startPass("normalize");
        process(new com.google.javascript.jscomp.Normalize(this, false));
        endPass();
    }

    @java.lang.Override
    void prepareAst(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.CompilerPass pass = new com.google.javascript.jscomp.PrepareAst(this);
        pass.process(null, root);
    }

    void recordFunctionInformation() {
        com.google.javascript.jscomp.Compiler.logger.fine("Recording function information");
        startPass("recordFunctionInformation");
        com.google.javascript.jscomp.RecordFunctionInformation recordFunctionInfoPass = new com.google.javascript.jscomp.RecordFunctionInformation(this, getPassConfig().getIntermediateState().functionNames);
        process(recordFunctionInfoPass);
        functionInformationMap = recordFunctionInfoPass.getMap();
        endPass();
    }

    protected final com.google.javascript.jscomp.CodeChangeHandler.RecentChange recentChange = new com.google.javascript.jscomp.CodeChangeHandler.RecentChange();

    private final java.util.List<com.google.javascript.jscomp.CodeChangeHandler> codeChangeHandlers = com.google.common.collect.Lists.<com.google.javascript.jscomp.CodeChangeHandler>newArrayList();

    static final java.lang.String SYNTHETIC_EXTERNS = "{SyntheticVarsDeclar}";

    private com.google.javascript.jscomp.CompilerInput synthesizedExternsInput = null;

    @java.lang.Override
    void addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.add(handler);
    }

    @java.lang.Override
    void removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.remove(handler);
    }

    @java.lang.Override
    public void reportCodeChange() {
        for (com.google.javascript.jscomp.CodeChangeHandler handler : codeChangeHandlers) {
            handler.reportChange();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CodingConvention getCodingConvention() {
        com.google.javascript.jscomp.CodingConvention convention = options.getCodingConvention();
        convention = (convention != null) ? convention : defaultCodingConvention;
        return convention;
    }

    @java.lang.Override
    public boolean isIdeMode() {
        return options.ideMode;
    }

    @java.lang.Override
    public boolean acceptEcmaScript5() {
        switch (options.getLanguageIn()) {
            case ECMASCRIPT5 :
            case ECMASCRIPT5_STRICT :
                return true;
        }
        return false;
    }

    public com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode() {
        return options.getLanguageIn();
    }

    @java.lang.Override
    public boolean acceptConstKeyword() {
        return options.acceptConstKeyword;
    }

    @java.lang.Override
    com.google.javascript.jscomp.parsing.Config getParserConfig() {
        if (parserConfig == null) {
            com.google.javascript.jscomp.parsing.Config.LanguageMode mode;
            switch (options.getLanguageIn()) {
                case ECMASCRIPT3 :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3;
                    break;
                case ECMASCRIPT5 :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(560).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.oldErrorReporter",com.google.javascript.jscomp.Compiler.this.oldErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.abstractInterpreter",com.google.javascript.jscomp.Compiler.this.abstractInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.errorManager",com.google.javascript.jscomp.Compiler.this.errorManager);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.uniqueNameId",com.google.javascript.jscomp.Compiler.this.uniqueNameId);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.sourceMap",com.google.javascript.jscomp.Compiler.this.sourceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.tracker",com.google.javascript.jscomp.Compiler.this.tracker);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.recentChange",com.google.javascript.jscomp.Compiler.this.recentChange);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.progress",com.google.javascript.jscomp.Compiler.this.progress);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.sanityCheck",com.google.javascript.jscomp.Compiler.this.sanityCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.defaultCodingConvention",com.google.javascript.jscomp.Compiler.this.defaultCodingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.codeChangeHandlers",com.google.javascript.jscomp.Compiler.this.codeChangeHandlers);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.syntheticCodeId",com.google.javascript.jscomp.Compiler.this.syntheticCodeId);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.moduleGraph",com.google.javascript.jscomp.Compiler.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.parserConfig",com.google.javascript.jscomp.Compiler.this.parserConfig);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput",com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences",com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.externs",com.google.javascript.jscomp.Compiler.this.externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.passes",com.google.javascript.jscomp.Compiler.this.passes);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.typeRegistry",com.google.javascript.jscomp.Compiler.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.logger",com.google.javascript.jscomp.Compiler.logger);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.jsRoot",com.google.javascript.jscomp.Compiler.this.jsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.currentPassName",com.google.javascript.jscomp.Compiler.this.currentPassName);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.externAndJsRoot",com.google.javascript.jscomp.Compiler.this.externAndJsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.functionInformationMap",com.google.javascript.jscomp.Compiler.this.functionInformationMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.externExports",com.google.javascript.jscomp.Compiler.this.externExports);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.typeValidator",com.google.javascript.jscomp.Compiler.this.typeValidator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.outStream",com.google.javascript.jscomp.Compiler.this.outStream);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.debugLog",com.google.javascript.jscomp.Compiler.this.debugLog);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.defaultErrorReporter",com.google.javascript.jscomp.Compiler.this.defaultErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.globalRefMap",com.google.javascript.jscomp.Compiler.this.globalRefMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.useThreads",com.google.javascript.jscomp.Compiler.this.useThreads);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.inputsById",com.google.javascript.jscomp.Compiler.this.inputsById);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.options",com.google.javascript.jscomp.Compiler.this.options);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.modules",com.google.javascript.jscomp.Compiler.this.modules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.warningsGuard",com.google.javascript.jscomp.Compiler.this.warningsGuard);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.inputs",com.google.javascript.jscomp.Compiler.this.inputs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.externsRoot",com.google.javascript.jscomp.Compiler.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectInput("com.google.javascript.jscomp.Compiler.this.currentTracer",com.google.javascript.jscomp.Compiler.this.currentTracer);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(560).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5;

                    break;
                case ECMASCRIPT5_STRICT :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5_STRICT;
                    break;
                default :
                    throw new java.lang.IllegalStateException("unexpected language mode");
            }
            parserConfig = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(isIdeMode(), mode, acceptConstKeyword(), options.extraAnnotationNames);
        }
        return parserConfig;
    }

    @java.lang.Override
    public boolean isTypeCheckingEnabled() {
        return options.checkTypes;
    }

    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {
        return new com.google.javascript.jscomp.DiagnosticGroups();
    }

    @java.lang.Override
    public void report(com.google.javascript.jscomp.JSError error) {
        com.google.javascript.jscomp.CheckLevel level = error.getDefaultLevel();
        if (warningsGuard != null) {
            com.google.javascript.jscomp.CheckLevel newLevel = warningsGuard.level(error);
            if (newLevel != null) {
                level = newLevel;
            }
        }
        if (level.isOn()) {
            errorManager.report(level, error);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CheckLevel getErrorLevel(com.google.javascript.jscomp.JSError error) {
        com.google.common.base.Preconditions.checkNotNull(options);
        return warningsGuard.level(error);
    }

    @java.lang.Override
    void throwInternalError(java.lang.String message, java.lang.Exception cause) {
        java.lang.String finalMessage = ("INTERNAL COMPILER ERROR.\n" + "Please report this problem.\n") + message;
        java.lang.RuntimeException e = new java.lang.RuntimeException(finalMessage, cause);
        if (cause != null) {
            e.setStackTrace(cause.getStackTrace());
        }
        throw e;
    }

    public int getErrorCount() {
        return errorManager.getErrorCount();
    }

    public int getWarningCount() {
        return errorManager.getWarningCount();
    }

    @java.lang.Override
    boolean hasHaltingErrors() {
        return (!isIdeMode()) && (getErrorCount() > 0);
    }

    public boolean hasErrors() {
        return hasHaltingErrors();
    }

    @java.lang.Override
    void addToDebugLog(java.lang.String str) {
        debugLog.append(str);
        debugLog.append('\n');
        com.google.javascript.jscomp.Compiler.logger.fine(str);
    }

    private com.google.javascript.jscomp.SourceFile getSourceFileByName(java.lang.String sourceName) {
        if (sourceName != null) {
            com.google.javascript.jscomp.CompilerInput input = inputsById.get(new com.google.javascript.rhino.InputId(sourceName));
            if (input != null) {
                return input.getSourceFile();
            }
        }
        return null;
    }

    @java.lang.Override
    public java.lang.String getSourceLine(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getLine(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Region getSourceRegion(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getRegion(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule module) {
        if (module == null) {
            if (inputs.isEmpty()) {
                throw new java.lang.IllegalStateException("No inputs");
            }
            return inputs.get(0).getAstRoot(this);
        }
        java.util.List<com.google.javascript.jscomp.CompilerInput> moduleInputs = module.getInputs();
        if (moduleInputs.size() > 0) {
            return moduleInputs.get(0).getAstRoot(this);
        }
        throw new java.lang.IllegalStateException("Root module has no inputs");
    }

    public com.google.javascript.jscomp.SourceMap getSourceMap() {
        return sourceMap;
    }

    com.google.javascript.jscomp.VariableMap getVariableMap() {
        return getPassConfig().getIntermediateState().variableMap;
    }

    com.google.javascript.jscomp.VariableMap getPropertyMap() {
        return getPassConfig().getIntermediateState().propertyMap;
    }

    com.google.javascript.jscomp.CompilerOptions getOptions() {
        return options;
    }

    com.google.javascript.jscomp.FunctionInformationMap getFunctionalInformationMap() {
        return functionInformationMap;
    }

    public static void setLoggingLevel(java.util.logging.Level level) {
        com.google.javascript.jscomp.Compiler.logger.setLevel(level);
    }

    public java.lang.String getAstDotGraph() throws java.io.IOException {
        if (jsRoot != null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
            cfa.process(null, jsRoot);
            return com.google.javascript.jscomp.DotFormatter.toDot(jsRoot, cfa.getCfg());
        } else {
            return "";
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ErrorManager getErrorManager() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
        return errorManager;
    }

    @java.lang.Override
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(inputs);
    }

    public java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> getInputsById() {
        return java.util.Collections.unmodifiableMap(inputsById);
    }

    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(externs);
    }

    public static class IntermediateState implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        com.google.javascript.rhino.Node externsRoot;

        private com.google.javascript.rhino.Node jsRoot;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

        private java.util.List<com.google.javascript.jscomp.JSModule> modules;

        private com.google.javascript.jscomp.PassConfig.State passConfigState;

        private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

        private com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage lifeCycleStage;

        private IntermediateState() {
        }
    }

    public com.google.javascript.jscomp.Compiler.IntermediateState getState() {
        com.google.javascript.jscomp.Compiler.IntermediateState state = new com.google.javascript.jscomp.Compiler.IntermediateState();
        state.externsRoot = externsRoot;
        state.jsRoot = jsRoot;
        state.externs = externs;
        state.inputs = inputs;
        state.modules = modules;
        state.passConfigState = getPassConfig().getIntermediateState();
        state.typeRegistry = typeRegistry;
        state.lifeCycleStage = getLifeCycleStage();
        return state;
    }

    public void setState(com.google.javascript.jscomp.Compiler.IntermediateState state) {
        externsRoot = state.externsRoot;
        jsRoot = state.jsRoot;
        externs = state.externs;
        inputs = state.inputs;
        modules = state.modules;
        passes = createPassConfigInternal();
        getPassConfig().setIntermediateState(state.passConfigState);
        typeRegistry = state.typeRegistry;
        setLifeCycleStage(state.lifeCycleStage);
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsForTesting() {
        return inputs;
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsForTesting() {
        return externs;
    }

    @java.lang.Override
    boolean hasRegExpGlobalReferences() {
        return hasRegExpGlobalReferences;
    }

    @java.lang.Override
    void setHasRegExpGlobalReferences(boolean references) {
        hasRegExpGlobalReferences = references;
    }

    @java.lang.Override
    void updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> refMapPatch, com.google.javascript.rhino.Node collectionRoot) {
        com.google.common.base.Preconditions.checkState(collectionRoot.isScript() || collectionRoot.isBlock());
        if (globalRefMap == null) {
            globalRefMap = new com.google.javascript.jscomp.GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
        }
        globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
    }

    @java.lang.Override
    com.google.javascript.jscomp.GlobalVarReferenceMap getGlobalVarReferences() {
        return globalRefMap;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CompilerInput getSynthesizedExternsInput() {
        if (synthesizedExternsInput == null) {
            synthesizedExternsInput = newExternInput(com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);
        }
        return synthesizedExternsInput;
    }

    @java.lang.Override
    public double getProgress() {
        return progress;
    }

    @java.lang.Override
    void setProgress(double newProgress) {
        if (newProgress > 1.0) {
            progress = 1.0;
        } else if (newProgress < 0.0) {
            progress = 0.0;
        } else {
            progress = newProgress;
        }
    }

    public void replaceScript(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput input = this.getInput(ast.getInputId());
        if (!replaceIncrementalSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node originalRoot = input.getAstRoot(this);
        processNewScript(ast, originalRoot);
    }

    public void addNewScript(com.google.javascript.jscomp.JsAst ast) {
        if (!addNewSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node emptyScript = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        com.google.javascript.rhino.InputId inputId = ast.getInputId();
        emptyScript.setInputId(inputId);
        emptyScript.setStaticSourceFile(com.google.javascript.jscomp.JSSourceFile.fromCode(inputId.getIdName(), ""));
        processNewScript(ast, emptyScript);
    }

    private void processNewScript(com.google.javascript.jscomp.JsAst ast, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.rhino.Node js = ast.getAstRoot(this);
        com.google.common.base.Preconditions.checkNotNull(js);
        runHotSwap(originalRoot, js, this.getCleanupPassConfig());
        runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);
        this.getTypeRegistry().clearNamedTypes();
        this.removeSyntheticVarsInput();
        runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());
    }

    private void runHotSwap(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassConfig passConfig) {
        for (com.google.javascript.jscomp.PassFactory passFactory : passConfig.getChecks()) {
            runHotSwapPass(originalRoot, js, passFactory);
        }
    }

    private void runHotSwapPass(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassFactory passFactory) {
        com.google.javascript.jscomp.HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);
        if (pass != null) {
            com.google.javascript.jscomp.Compiler.logger.info("Performing HotSwap for pass " + passFactory.getName());
            pass.hotSwapScript(js, originalRoot);
        }
    }

    private com.google.javascript.jscomp.PassConfig getCleanupPassConfig() {
        return new com.google.javascript.jscomp.CleanupPasses(getOptions());
    }

    private void removeSyntheticVarsInput() {
        java.lang.String sourceName = com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS;
        removeExternInput(new com.google.javascript.rhino.InputId(sourceName));
    }
}
[7790013] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659920918775
GPR[SSUN]-1659920918775
-534884160
GPR[ESUN]-1659920919116
GPR[SSUN]-1659920919116
-534884160
GPR[SPVATF]-1659920919453
GPR[EPVATF]-1659920921704
GPR[SPS]-1659920921704
[7793742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:313.
GPR[EPS]-1659920922504
GPR[ESUN]-1659920922504
GPR[SSUN]-1659920922504
-534884160
GPR[ESUN]-1659920922845
GPR[SSUN]-1659920922845
-534884160
GPR[SPVATF]-1659920923178
GPR[EPVATF]-1659920925464
GPR[SPS]-1659920925464
[7797562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:316.
GPR[EPS]-1659920926324
GPR[ESUN]-1659920926324
GPR[SSUN]-1659920926324
-534884160
GPR[SPVATF]-1659920926666
GPR[EPVATF]-1659920928943
GPR[SPS]-1659920928943
[7801012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:312.
GPR[EPS]-1659920929774
GPR[ESUN]-1659920929775
GPR[SSUN]-1659920929775
-534884160
GPR[ESUN]-1659920930127
GPR[SSUN]-1659920930127
-534884160
GPR[ESUN]-1659920930469
GPR[SSUN]-1659920930469
-534884160
GPR[SPVATF]-1659920930811
GPR[EPVATF]-1659920933148
GPR[SPS]-1659920933148
[7805290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:476.
GPR[EPS]-1659920934052
GPR[SPVATF]-1659920934053
GPR[EPVATF]-1659920936366
GPR[SPS]-1659920936366
[7808433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:476.
GPR[EPS]-1659920937195
GPR[ESUN]-1659920937195
GPR[SSUN]-1659920937196
-534884160
GPR[ESUN]-1659920937535
GPR[SSUN]-1659920937535
-534884160
GPR[ESUN]-1659920937874
GPR[SSUN]-1659920937874
-534884160
GPR[ESUN]-1659920938213
GPR[SSUN]-1659920938214
-534884160
GPR[SPVATF]-1659920938553
GPR[EPVATF]-1659920940897
GPR[SPS]-1659920940897
[7813058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:381.
GPR[EPS]-1659920941820
GPR[ESUN]-1659920941820
GPR[SSUN]-1659920941820
-534884160
GPR[SPVATF]-1659920942166
GPR[EPVATF]-1659920944495
GPR[SPS]-1659920944495
[7816556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:357.
GPR[EPS]-1659920945318
GPR[ESUN]-1659920945318
GPR[SSUN]-1659920945318
2433571
GPR[ESUN]-1659920945561
GPR[SSUN]-1659920945561
2433571
GPR[ESUN]-1659920945799
GPR[SSUN]-1659920945799
-534884160
GPR[ESUN]-1659920946136
GPR[SSUN]-1659920946136
-534884160
GPR[ESUN]-1659920946473
GPR[SSUN]-1659920946473
-534884160
GPR[SPVATF]-1659920946808
GPR[EPVATF]-1659920949122
GPR[SPS]-1659920949122
[7821215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:483.
GPR[EPS]-1659920949978
GPR[SPVATF]-1659920949978
GPR[EPVATF]-1659920952263
GPR[SPS]-1659920952263
[7824323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:483.
GPR[EPS]-1659920953085
GPR[ESUN]-1659920953085
GPR[SSUN]-1659920953085
-534884160
GPR[ESUN]-1659920953431
GPR[SSUN]-1659920953431
-534884160
GPR[ESUN]-1659920953766
GPR[SSUN]-1659920953766
-534884160
GPR[SPVATF]-1659920954102
GPR[EPVATF]-1659920956437
GPR[SPS]-1659920956437
[7832380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:480.
GPR[EPS]-1659920961142
GPR[ESUN]-1659920961142
GPR[SSUN]-1659920961142
-534884160
GPR[SPVATF]-1659920961492
GPR[EPVATF]-1659920963745
GPR[SPS]-1659920963745
[7835829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:473.
GPR[EPS]-1659920964591
GPR[ESUN]-1659920964591
GPR[SSUN]-1659920964592
-534884160
GPR[SPVATF]-1659920964926
GPR[EPVATF]-1659920966572
GPR[SPS]-1659920966572
[7838676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:472.
GPR[EPS]-1659920967438
GPR[ESUN]-1659920967438
GPR[SSUN]-1659920967438
-534884160
GPR[ESUN]-1659920967773
GPR[SSUN]-1659920967773
-534884160
GPR[ESUN]-1659920968112
GPR[SSUN]-1659920968112
-534884160
GPR[ESUN]-1659920968469
GPR[SSUN]-1659920968469
-534884160
GPR[SPVATF]-1659920968803
GPR[EPVATF]-1659920970394
GPR[SPS]-1659920970394
[7842588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:455.
GPR[EPS]-1659920971350
GPR[ESUN]-1659920971350
GPR[SSUN]-1659920971351
-534884160
GPR[SPVATF]-1659920971683
GPR[EPVATF]-1659920973285
GPR[SPS]-1659920973285
[7845348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:454.
GPR[EPS]-1659920974110
GPR[ESUN]-1659920974110
GPR[SSUN]-1659920974111
-534884160
GPR[ESUN]-1659920974450
GPR[SSUN]-1659920974450
-534884160
GPR[SPVATF]-1659920974814
GPR[EPVATF]-1659920976402
GPR[SPS]-1659920976402
[7848466] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:448.
GPR[EPS]-1659920977228
GPR[ESUN]-1659920977228
GPR[SSUN]-1659920977228
-534884160
GPR[SPVATF]-1659920977561
GPR[EPVATF]-1659920979146
GPR[SPS]-1659920979146
[7851236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:447.
GPR[EPS]-1659920979998
GPR[ESUN]-1659920979998
GPR[SSUN]-1659920979998
-534884160
GPR[ESUN]-1659920980331
GPR[SSUN]-1659920980331
-534884160
GPR[ESUN]-1659920980663
GPR[SSUN]-1659920980663
-534884160
GPR[ESUN]-1659920980997
GPR[SSUN]-1659920980997
-534884160
GPR[ESUN]-1659920981360
GPR[SSUN]-1659920981360
-534884160
GPR[SPVATF]-1659920981691
GPR[EPVATF]-1659920983289
GPR[SPS]-1659920983289
[7855340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:422.
GPR[EPS]-1659920984102
GPR[SPVATF]-1659920984102
GPR[EPVATF]-1659920985685
GPR[SPS]-1659920985685
[7857790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:422.
GPR[EPS]-1659920986552
GPR[ESUN]-1659920986552
GPR[SSUN]-1659920986552
-534884160
GPR[SPVATF]-1659920986889
GPR[EPVATF]-1659920988490
GPR[SPS]-1659920988490
[7860589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:421.
GPR[EPS]-1659920989351
GPR[ESUN]-1659920989351
GPR[SSUN]-1659920989351
-534884160
GPR[ESUN]-1659920989686
GPR[SSUN]-1659920989686
-534884160
GPR[SPVATF]-1659920990018
GPR[EPVATF]-1659920991576
GPR[SPS]-1659920991576
[7863625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:401.
GPR[EPS]-1659920992387
GPR[SPVATF]-1659920992387
GPR[EPVATF]-1659920994017
GPR[SPS]-1659920994017
[7866075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:401.
GPR[EPS]-1659920994837
GPR[ESUN]-1659920994837
GPR[SSUN]-1659920994837
-534884160
GPR[SPVATF]-1659920995175
GPR[EPVATF]-1659920996896
GPR[SPS]-1659920996896
[7868943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:399.
GPR[EPS]-1659920997705
GPR[SPVATF]-1659920997705
GPR[EPVATF]-1659920999463
GPR[SPS]-1659920999463
[7871513] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:399.
GPR[EPS]-1659921000275
GPR[ESUN]-1659921000275
GPR[SSUN]-1659921000275
-534884160
GPR[ESUN]-1659921000610
GPR[SSUN]-1659921000610
-534884160
GPR[SPVATF]-1659921000947
GPR[EPVATF]-1659921002616
GPR[SPS]-1659921002616
[7874706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:380.
GPR[EPS]-1659921003468
GPR[ESUN]-1659921003468
GPR[SSUN]-1659921003468
-534884160
GPR[ESUN]-1659921003803
GPR[SSUN]-1659921003804
-534884160
GPR[ESUN]-1659921004140
GPR[SSUN]-1659921004140
-534884160
GPR[SPVATF]-1659921004475
GPR[EPVATF]-1659921006194
GPR[SPS]-1659921006194
[7878237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:371.
GPR[EPS]-1659921006999
GPR[SPVATF]-1659921006999
GPR[EPVATF]-1659921008697
GPR[SPS]-1659921008697
[7880748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:371.
GPR[EPS]-1659921009510
GPR[ESUN]-1659921009510
GPR[SSUN]-1659921009510
-534884160
GPR[ESUN]-1659921009915
GPR[SSUN]-1659921009915
-534884160
GPR[SPVATF]-1659921010248
GPR[EPVATF]-1659921012092
GPR[SPS]-1659921012092
[7884140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:363.
GPR[EPS]-1659921012902
GPR[ESUN]-1659921012902
GPR[SSUN]-1659921012902
-534884160
GPR[SPVATF]-1659921013236
GPR[EPVATF]-1659921015173
GPR[SPS]-1659921015173
[7887204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:361.
GPR[EPS]-1659921015966
GPR[ESUN]-1659921015966
GPR[SSUN]-1659921015966
-534884160
GPR[SPVATF]-1659921016298
GPR[EPVATF]-1659921018376
GPR[SPS]-1659921018376
[7890399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:360.
GPR[EPS]-1659921019161
GPR[ESUN]-1659921019161
GPR[SSUN]-1659921019161
-534884160
GPR[SPVATF]-1659921019500
GPR[EPVATF]-1659921021653
GPR[SPS]-1659921021653
[7893688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:346.
GPR[EPS]-1659921022450
GPR[SPVATF]-1659921022450
GPR[EPVATF]-1659921024676
GPR[SPS]-1659921024676
[7896809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:346.
GPR[EPS]-1659921025571
GPR[ESUN]-1659921025571
GPR[SSUN]-1659921025571
-534884160
GPR[SPVATF]-1659921025987
GPR[EPVATF]-1659921028237
GPR[SPS]-1659921028237
[7900569] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:345.
GPR[EPS]-1659921029331
GPR[ESUN]-1659921029331
GPR[SSUN]-1659921029331
-534884160
GPR[SPVATF]-1659921029709
GPR[EPVATF]-1659921031958
GPR[SPS]-1659921031958
[7904147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:341.
GPR[EPS]-1659921032909
GPR[ESUN]-1659921032909
GPR[SSUN]-1659921032910
-534884160
GPR[SPVATF]-1659921033250
GPR[EPVATF]-1659921035561
GPR[SPS]-1659921035561
[7907688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:339.
GPR[EPS]-1659921036450
GPR[ESUN]-1659921036450
GPR[SSUN]-1659921036450
-534884160
GPR[SPVATF]-1659921036793
GPR[EPVATF]-1659921039184
GPR[SPS]-1659921039184
[7911232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:338.
GPR[EPS]-1659921039994
GPR[ESUN]-1659921039994
GPR[SSUN]-1659921039994
-534884160
GPR[SPVATF]-1659921040338
GPR[EPVATF]-1659921042687
GPR[SPS]-1659921042687
[7914735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:336.
GPR[EPS]-1659921043497
GPR[ESUN]-1659921043497
GPR[SSUN]-1659921043497
-1217609450
GPR[ESUN]-1659921043711
GPR[SSUN]-1659921043711
-1217609450
GPR[SPVATF]-1659921043922
GPR[EPVATF]-1659921046340
GPR[SPS]-1659921046340
[7918106] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModule:94.
GPR[EPS]-1659921046868
GPR[ESUN]-1659921046868
GPR[SSUN]-1659921046868
1350153804
GPR[ESUN]-1659921047093
GPR[SSUN]-1659921047093
1350153804
GPR[SPVATF]-1659921047315
GPR[EPVATF]-1659921054569
GPR[SPS]-1659921054569
[7926554] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:330.
GPR[EPS]-1659921055316
GPR[ESUN]-1659921055316
GPR[SSUN]-1659921055316
1350153804
GPR[SPVATF]-1659921055543
GPR[EPVATF]-1659921057143
GPR[SPS]-1659921057143
[7928994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:328.
GPR[EPS]-1659921057756
GPR[ESUN]-1659921057756
GPR[SSUN]-1659921057756
-1217609450
GPR[ESUN]-1659921057970
GPR[SSUN]-1659921057970
-1217609450
GPR[SPVATF]-1659921058178
GPR[EPVATF]-1659921059787
GPR[SPS]-1659921059787
[7931594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModule:105.
GPR[EPS]-1659921060356
GPR[ESUN]-1659921060356
GPR[SSUN]-1659921060356
-1217609450
GPR[SPVATF]-1659921060568
GPR[EPVATF]-1659921062136
GPR[SPS]-1659921062136
[7933944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModule:104.
GPR[EPS]-1659921062706
GPR[ESUN]-1659921062706
GPR[SSUN]-1659921062706
-1217609450
GPR[ESUN]-1659921062960
GPR[SSUN]-1659921062960
-1605808871
GPR[SPVATF]-1659921063207
GPR[EPVATF]-1659921064723
GPR[SPS]-1659921064723
GPR[EPS]-1659921127028
GPR[SPVATF]-1659921127028
GPR[EPVATF]-1659921128522
GPR[SPS]-1659921128522
GPR[EPS]-1659921173619
GPR[ESUN]-1659921173619
GPR[SSUN]-1659921173619
1508981886
GPR[SPVATF]-1659921173899
GPR[EPVATF]-1659921175485
GPR[SPS]-1659921175485
[8047249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1417.
GPR[EPS]-1659921176011
GPR[ESUN]-1659921176011
GPR[SSUN]-1659921176011
1350153804
GPR[ESUN]-1659921176233
GPR[SSUN]-1659921176234
1508329696
GPR[ESUN]-1659921176484
GPR[SSUN]-1659921176484
1508329696
GPR[SPVATF]-1659921176732
GPR[EPVATF]-1659921178330
GPR[SPS]-1659921178330
[8050294] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1256.
GPR[EPS]-1659921179056
GPR[ESUN]-1659921179056
GPR[SSUN]-1659921179056
-675467674
GPR[ESUN]-1659921179239
GPR[SSUN]-1659921179239
1508329696
GPR[ESUN]-1659921179486
GPR[SSUN]-1659921179486
1508329696
GPR[SPVATF]-1659921179736
GPR[EPVATF]-1659921181346
GPR[SPS]-1659921181346
[8053298] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1347.
GPR[EPS]-1659921182060
GPR[ESUN]-1659921182060
GPR[SSUN]-1659921182060
1508329696
GPR[SPVATF]-1659921182308
GPR[EPVATF]-1659921183951
GPR[SPS]-1659921183951
[8055888] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1346.
GPR[EPS]-1659921184650
GPR[ESUN]-1659921184650
GPR[SSUN]-1659921184651
2433571
GPR[ESUN]-1659921184898
GPR[SSUN]-1659921184898
2433571
GPR[ESUN]-1659921185137
GPR[SSUN]-1659921185137
GPR[ESUN]-1659921185137
GPR[SSUN]-1659921185138
1508981886
GPR[SPVATF]-1659921185352
GPR[EPVATF]-1659921187020
GPR[SPS]-1659921187020
[8058766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:973.
GPR[EPS]-1659921187528
GPR[ESUN]-1659921187528
GPR[SSUN]-1659921187528
-861565004
GPR[SPVATF]-1659921187720
GPR[EPVATF]-1659921189475
GPR[SPS]-1659921189475
GPR[EPS]-1659921235369
GPR[ESUN]-1659921235369
GPR[SSUN]-1659921235369
GPR[ESUN]-1659921235369
GPR[SSUN]-1659921235369
GPR[ESUN]-1659921235369
GPR[SSUN]-1659921235369
GPR[ESUN]-1659921235369
GPR[SSUN]-1659921235369
-1345859678
GPR[ESUN]-1659921235723
GPR[SSUN]-1659921235723
1537627151
GPR[SPVATF]-1659921235930
GPR[EPVATF]-1659921237758
GPR[SPS]-1659921237758
[8109510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:201.
GPR[EPS]-1659921238272
GPR[ESUN]-1659921238272
GPR[SSUN]-1659921238272
-1345859678
GPR[ESUN]-1659921238524
GPR[SSUN]-1659921238524
-1345859678
GPR[SPVATF]-1659921238775
GPR[EPVATF]-1659921240731
GPR[SPS]-1659921240731
[8112588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:562.
GPR[EPS]-1659921241350
GPR[ESUN]-1659921241350
GPR[SSUN]-1659921241351
-1345859678
GPR[ESUN]-1659921241601
GPR[SSUN]-1659921241601
GPR[ESUN]-1659921241601
GPR[SSUN]-1659921241601
GPR[ESUN]-1659921241601
GPR[SSUN]-1659921241601
GPR[ESUN]-1659921241601
GPR[SSUN]-1659921241601
GPR[ESUN]-1659921241601
GPR[SSUN]-1659921241601
GPR[ESUN]-1659921241601
GPR[SSUN]-1659921241601
1537627151
GPR[SPVATF]-1659921241811
GPR[EPVATF]-1659921243865
GPR[SPS]-1659921243865
[8115907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:200.
GPR[EPS]-1659921244669
GPR[SPVATF]-1659921244669
GPR[EPVATF]-1659921246952
GPR[SPS]-1659921246952
[8118925] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:200.
GPR[EPS]-1659921247687
GPR[ESUN]-1659921247687
GPR[SSUN]-1659921247688
-1448841897
GPR[ESUN]-1659921247944
GPR[SSUN]-1659921247944
-1448841897
GPR[SPVATF]-1659921248185
GPR[EPVATF]-1659921250542
GPR[SPS]-1659921250542
[8122380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:386.
GPR[EPS]-1659921251142
GPR[ESUN]-1659921251143
GPR[SSUN]-1659921251143
-1448841897
GPR[ESUN]-1659921251398
GPR[SSUN]-1659921251398
-1448841897
GPR[SPVATF]-1659921251636
GPR[EPVATF]-1659921253985
GPR[SPS]-1659921253985
[8125724] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:380.
GPR[EPS]-1659921254487
GPR[ESUN]-1659921254487
GPR[SSUN]-1659921254487
-1448841897
GPR[SPVATF]-1659921254715
GPR[EPVATF]-1659921256965
GPR[SPS]-1659921256965
[8128792] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:379.
GPR[EPS]-1659921257554
GPR[ESUN]-1659921257554
GPR[SSUN]-1659921257554
-1448841897
GPR[SPVATF]-1659921257796
GPR[EPVATF]-1659921260094
GPR[SPS]-1659921260094
[8131835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:378.
GPR[EPS]-1659921260597
GPR[ESUN]-1659921260597
GPR[SSUN]-1659921260597
-1448841897
GPR[SPVATF]-1659921260839
GPR[EPVATF]-1659921263228
GPR[SPS]-1659921263228
[8134965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:377.
GPR[EPS]-1659921263727
GPR[ESUN]-1659921263727
GPR[SSUN]-1659921263727
-1448841897
GPR[SPVATF]-1659921263956
GPR[EPVATF]-1659921266265
GPR[SPS]-1659921266265
[8138012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:376.
GPR[EPS]-1659921266774
GPR[ESUN]-1659921266774
GPR[SSUN]-1659921266774
-1448841897
GPR[SPVATF]-1659921267003
GPR[EPVATF]-1659921269340
GPR[SPS]-1659921269340
[8141076] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:375.
GPR[EPS]-1659921269838
GPR[ESUN]-1659921269838
GPR[SSUN]-1659921269838
-1448841897
GPR[SPVATF]-1659921270070
GPR[EPVATF]-1659921272435
GPR[SPS]-1659921272435
[8144150] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:374.
GPR[EPS]-1659921272912
GPR[ESUN]-1659921272912
GPR[SSUN]-1659921272912
-1448841897
GPR[SPVATF]-1659921273143
GPR[EPVATF]-1659921275429
GPR[SPS]-1659921275429
[8147161] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:373.
GPR[EPS]-1659921275923
GPR[ESUN]-1659921275923
GPR[SSUN]-1659921275923
-1448841897
GPR[SPVATF]-1659921276160
GPR[EPVATF]-1659921278523
GPR[SPS]-1659921278523
[8150234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:372.
GPR[EPS]-1659921278996
GPR[ESUN]-1659921278996
GPR[SSUN]-1659921278996
-1448841897
GPR[SPVATF]-1659921279224
GPR[EPVATF]-1659921281542
GPR[SPS]-1659921281542
[8153267] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:371.
GPR[EPS]-1659921282029
GPR[ESUN]-1659921282029
GPR[SSUN]-1659921282029
-1448841897
GPR[SPVATF]-1659921282261
GPR[EPVATF]-1659921284587
GPR[SPS]-1659921284587
[8156313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:369.
GPR[EPS]-1659921285075
GPR[ESUN]-1659921285075
GPR[SSUN]-1659921285075
-1448841897
GPR[SPVATF]-1659921285303
GPR[EPVATF]-1659921287651
GPR[SPS]-1659921287651
[8159373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:368.
GPR[EPS]-1659921288135
GPR[ESUN]-1659921288135
GPR[SSUN]-1659921288135
-1448841897
GPR[SPVATF]-1659921288371
GPR[EPVATF]-1659921290756
GPR[SPS]-1659921290756
[8162547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:367.
GPR[EPS]-1659921291309
GPR[ESUN]-1659921291309
GPR[SSUN]-1659921291309
-1448841897
GPR[SPVATF]-1659921291555
GPR[EPVATF]-1659921294998
GPR[SPS]-1659921294998
[8167145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:366.
GPR[EPS]-1659921295907
GPR[ESUN]-1659921295907
GPR[SSUN]-1659921295907
-1448841897
GPR[SPVATF]-1659921296234
GPR[EPVATF]-1659921298017
GPR[SPS]-1659921298017
[8169771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:365.
GPR[EPS]-1659921298534
GPR[ESUN]-1659921298534
GPR[SSUN]-1659921298534
-1448841897
GPR[SPVATF]-1659921298760
GPR[EPVATF]-1659921300412
GPR[SPS]-1659921300412
[8172146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:364.
GPR[EPS]-1659921300908
GPR[ESUN]-1659921300908
GPR[SSUN]-1659921300908
-1448841897
GPR[SPVATF]-1659921301135
GPR[EPVATF]-1659921302790
GPR[SPS]-1659921302790
[8174559] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:363.
GPR[EPS]-1659921303321
GPR[ESUN]-1659921303321
GPR[SSUN]-1659921303321
-1448841897
GPR[SPVATF]-1659921303549
GPR[EPVATF]-1659921305189
GPR[SPS]-1659921305189
[8176926] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:362.
GPR[EPS]-1659921305688
GPR[ESUN]-1659921305688
GPR[SSUN]-1659921305688
-1448841897
GPR[SPVATF]-1659921305912
GPR[EPVATF]-1659921307627
GPR[SPS]-1659921307627
[8179426] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:361.
GPR[EPS]-1659921308188
GPR[ESUN]-1659921308188
GPR[SSUN]-1659921308188
-1448841897
GPR[SPVATF]-1659921308416
GPR[EPVATF]-1659921310038
GPR[SPS]-1659921310038
[8181783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:360.
GPR[EPS]-1659921310545
GPR[ESUN]-1659921310545
GPR[SSUN]-1659921310545
-1448841897
GPR[ESUN]-1659921310801
GPR[SSUN]-1659921310801
-1448841897
GPR[SPVATF]-1659921311024
GPR[EPVATF]-1659921312717
GPR[SPS]-1659921312717
[8184485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:355.
GPR[EPS]-1659921313247
GPR[ESUN]-1659921313247
GPR[SSUN]-1659921313247
-1448841897
GPR[SPVATF]-1659921313469
GPR[EPVATF]-1659921315188
GPR[SPS]-1659921315188
[8186923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:354.
GPR[EPS]-1659921315685
GPR[ESUN]-1659921315685
GPR[SSUN]-1659921315685
-1448841897
GPR[SPVATF]-1659921315908
GPR[EPVATF]-1659921317559
GPR[SPS]-1659921317559
[8189275] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:353.
GPR[EPS]-1659921318037
GPR[ESUN]-1659921318037
GPR[SSUN]-1659921318037
-1448841897
GPR[SPVATF]-1659921318261
GPR[EPVATF]-1659921319944
GPR[SPS]-1659921319944
[8191700] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:352.
GPR[EPS]-1659921320462
GPR[ESUN]-1659921320462
GPR[SSUN]-1659921320462
-1448841897
GPR[SPVATF]-1659921320687
GPR[EPVATF]-1659921322506
GPR[SPS]-1659921322506
[8194223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:351.
GPR[EPS]-1659921322985
GPR[ESUN]-1659921322985
GPR[SSUN]-1659921322985
-1448841897
GPR[SPVATF]-1659921323211
GPR[EPVATF]-1659921325056
GPR[SPS]-1659921325056
[8196771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:350.
GPR[EPS]-1659921325533
GPR[ESUN]-1659921325533
GPR[SSUN]-1659921325533
-1448841897
GPR[SPVATF]-1659921325760
GPR[EPVATF]-1659921327504
GPR[SPS]-1659921327504
[8199223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:349.
GPR[EPS]-1659921327985
GPR[ESUN]-1659921327985
GPR[SSUN]-1659921327985
-1448841897
GPR[SPVATF]-1659921328214
GPR[EPVATF]-1659921330048
GPR[SPS]-1659921330048
[8201765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:347.
GPR[EPS]-1659921330527
GPR[ESUN]-1659921330527
GPR[SSUN]-1659921330527
-1448841897
GPR[SPVATF]-1659921330752
GPR[EPVATF]-1659921332648
GPR[SPS]-1659921332648
[8204374] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:346.
GPR[EPS]-1659921333136
GPR[ESUN]-1659921333136
GPR[SSUN]-1659921333137
-1448841897
GPR[ESUN]-1659921333366
GPR[SSUN]-1659921333366
-1448841897
GPR[SPVATF]-1659921333593
GPR[EPVATF]-1659921335698
GPR[SPS]-1659921335698
[8207415] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:341.
GPR[EPS]-1659921336177
GPR[ESUN]-1659921336177
GPR[SSUN]-1659921336177
-1448841897
GPR[SPVATF]-1659921336402
GPR[EPVATF]-1659921338518
GPR[SPS]-1659921338518
[8210266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:340.
GPR[EPS]-1659921339028
GPR[ESUN]-1659921339028
GPR[SSUN]-1659921339029
-1448841897
GPR[SPVATF]-1659921339254
GPR[EPVATF]-1659921341576
GPR[SPS]-1659921341576
[8213302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:339.
GPR[EPS]-1659921342064
GPR[ESUN]-1659921342064
GPR[SSUN]-1659921342064
-1448841897
GPR[SPVATF]-1659921342290
GPR[EPVATF]-1659921344555
GPR[SPS]-1659921344555
[8216265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:338.
GPR[EPS]-1659921345027
GPR[ESUN]-1659921345028
GPR[SSUN]-1659921345028
-1448841897
GPR[SPVATF]-1659921345252
GPR[EPVATF]-1659921347655
GPR[SPS]-1659921347655
[8219426] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:337.
GPR[EPS]-1659921348188
GPR[ESUN]-1659921348188
GPR[SSUN]-1659921348189
-1448841897
GPR[SPVATF]-1659921348412
GPR[EPVATF]-1659921350721
GPR[SPS]-1659921350721
[8222452] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:336.
GPR[EPS]-1659921351214
GPR[ESUN]-1659921351214
GPR[SSUN]-1659921351214
-1448841897
GPR[SPVATF]-1659921351441
GPR[EPVATF]-1659921353803
GPR[SPS]-1659921353803
[8225511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:335.
GPR[EPS]-1659921354273
GPR[ESUN]-1659921354273
GPR[SSUN]-1659921354273
-1448841897
GPR[ESUN]-1659921354500
GPR[SSUN]-1659921354500
-1448841897
GPR[SPVATF]-1659921354725
GPR[EPVATF]-1659921357076
GPR[SPS]-1659921357076
[8228966] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:330.
GPR[EPS]-1659921357728
GPR[ESUN]-1659921357728
GPR[SSUN]-1659921357728
-1448841897
GPR[SPVATF]-1659921357954
GPR[EPVATF]-1659921360292
GPR[SPS]-1659921360292
[8232014] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:329.
GPR[EPS]-1659921360776
GPR[ESUN]-1659921360776
GPR[SSUN]-1659921360776
-1448841897
GPR[SPVATF]-1659921361002
GPR[EPVATF]-1659921363471
GPR[SPS]-1659921363471
[8235198] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:328.
GPR[EPS]-1659921363960
GPR[ESUN]-1659921363960
GPR[SSUN]-1659921363960
-1448841897
GPR[SPVATF]-1659921364185
GPR[EPVATF]-1659921366579
GPR[SPS]-1659921366579
[8238316] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:327.
GPR[EPS]-1659921367078
GPR[ESUN]-1659921367078
GPR[SSUN]-1659921367078
-1448841897
GPR[SPVATF]-1659921367307
GPR[EPVATF]-1659921369768
GPR[SPS]-1659921369768
[8241488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:326.
GPR[EPS]-1659921370250
GPR[ESUN]-1659921370250
GPR[SSUN]-1659921370250
-1448841897
GPR[SPVATF]-1659921370472
GPR[EPVATF]-1659921372812
GPR[SPS]-1659921372812
[8244595] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:325.
GPR[EPS]-1659921373357
GPR[ESUN]-1659921373357
GPR[SSUN]-1659921373358
-1448841897
GPR[SPVATF]-1659921373602
GPR[EPVATF]-1659921375973
GPR[SPS]-1659921375973
[8247793] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:324.
GPR[EPS]-1659921376555
GPR[ESUN]-1659921376555
GPR[SSUN]-1659921376555
-1448841897
GPR[SPVATF]-1659921376791
GPR[EPVATF]-1659921379170
GPR[SPS]-1659921379170
[8250927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:323.
GPR[EPS]-1659921379689
GPR[ESUN]-1659921379689
GPR[SSUN]-1659921379689
-1448841897
GPR[SPVATF]-1659921379919
GPR[EPVATF]-1659921382360
GPR[SPS]-1659921382360
[8254124] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:322.
GPR[EPS]-1659921382886
GPR[ESUN]-1659921382886
GPR[SSUN]-1659921382886
-1448841897
GPR[SPVATF]-1659921383143
GPR[EPVATF]-1659921385585
GPR[SPS]-1659921385585
[8257366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:321.
GPR[EPS]-1659921386128
GPR[ESUN]-1659921386128
GPR[SSUN]-1659921386128
-1448841897
GPR[SPVATF]-1659921386369
GPR[EPVATF]-1659921388725
GPR[SPS]-1659921388725
[8261505] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:320.
GPR[EPS]-1659921390267
GPR[ESUN]-1659921390267
GPR[SSUN]-1659921390267
-1448841897
GPR[SPVATF]-1659921390529
GPR[EPVATF]-1659921392905
GPR[SPS]-1659921392905
[8264998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:319.
GPR[EPS]-1659921393760
GPR[ESUN]-1659921393760
GPR[SSUN]-1659921393760
-1448841897
GPR[SPVATF]-1659921393989
GPR[EPVATF]-1659921395675
GPR[SPS]-1659921395675
[8267424] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:318.
GPR[EPS]-1659921396186
GPR[ESUN]-1659921396186
GPR[SSUN]-1659921396186
-1448841897
GPR[SPVATF]-1659921396412
GPR[EPVATF]-1659921398052
GPR[SPS]-1659921398052
[8269814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:317.
GPR[EPS]-1659921398576
GPR[ESUN]-1659921398576
GPR[SSUN]-1659921398576
-1448841897
GPR[SPVATF]-1659921398802
GPR[EPVATF]-1659921400473
GPR[SPS]-1659921400473
[8272259] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:316.
GPR[EPS]-1659921401021
GPR[ESUN]-1659921401021
GPR[SSUN]-1659921401021
-1448841897
GPR[SPVATF]-1659921401251
GPR[EPVATF]-1659921402873
GPR[SPS]-1659921402873
[8274637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:315.
GPR[EPS]-1659921403399
GPR[ESUN]-1659921403399
GPR[SSUN]-1659921403399
-1448841897
GPR[SPVATF]-1659921403629
GPR[EPVATF]-1659921405232
GPR[SPS]-1659921405232
[8276993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:314.
GPR[EPS]-1659921405755
GPR[ESUN]-1659921405755
GPR[SSUN]-1659921405755
-1448841897
GPR[SPVATF]-1659921405980
GPR[EPVATF]-1659921407582
GPR[SPS]-1659921407582
[8279385] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:313.
GPR[EPS]-1659921408147
GPR[ESUN]-1659921408147
GPR[SSUN]-1659921408147
-1448841897
GPR[SPVATF]-1659921408373
GPR[EPVATF]-1659921409982
GPR[SPS]-1659921409982
[8281731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:312.
GPR[EPS]-1659921410493
GPR[ESUN]-1659921410493
GPR[SSUN]-1659921410493
-1448841897
GPR[SPVATF]-1659921410722
GPR[EPVATF]-1659921412321
GPR[SPS]-1659921412321
[8284063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:311.
GPR[EPS]-1659921412825
GPR[ESUN]-1659921412825
GPR[SSUN]-1659921412826
-1448841897
GPR[SPVATF]-1659921413077
GPR[EPVATF]-1659921414794
GPR[SPS]-1659921414794
[8286526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:310.
GPR[EPS]-1659921415289
GPR[ESUN]-1659921415289
GPR[SSUN]-1659921415289
-1448841897
GPR[SPVATF]-1659921415518
GPR[EPVATF]-1659921417199
GPR[SPS]-1659921417199
[8289020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:309.
GPR[EPS]-1659921417783
GPR[ESUN]-1659921417783
GPR[SSUN]-1659921417783
-1448841897
GPR[SPVATF]-1659921418007
GPR[EPVATF]-1659921419668
GPR[SPS]-1659921419668
[8291419] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:308.
GPR[EPS]-1659921420181
GPR[ESUN]-1659921420181
GPR[SSUN]-1659921420182
-1448841897
GPR[SPVATF]-1659921420415
GPR[EPVATF]-1659921422169
GPR[SPS]-1659921422169
[8293886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:307.
GPR[EPS]-1659921422648
GPR[ESUN]-1659921422648
GPR[SSUN]-1659921422648
-1448841897
GPR[SPVATF]-1659921422877
GPR[EPVATF]-1659921424607
GPR[SPS]-1659921424607
[8296418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:306.
GPR[EPS]-1659921425180
GPR[ESUN]-1659921425180
GPR[SSUN]-1659921425180
-1448841897
GPR[SPVATF]-1659921425410
GPR[EPVATF]-1659921427136
GPR[SPS]-1659921427136
[8298890] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:305.
GPR[EPS]-1659921427652
GPR[ESUN]-1659921427652
GPR[SSUN]-1659921427652
-1448841897
GPR[SPVATF]-1659921427876
GPR[EPVATF]-1659921429707
GPR[SPS]-1659921429707
[8301438] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:304.
GPR[EPS]-1659921430200
GPR[ESUN]-1659921430200
GPR[SSUN]-1659921430200
-1448841897
GPR[SPVATF]-1659921430429
GPR[EPVATF]-1659921432264
GPR[SPS]-1659921432264
[8304002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:303.
GPR[EPS]-1659921432764
GPR[ESUN]-1659921432764
GPR[SSUN]-1659921432764
-1448841897
GPR[SPVATF]-1659921433020
GPR[EPVATF]-1659921434912
GPR[SPS]-1659921434912
[8306620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:302.
GPR[EPS]-1659921435382
GPR[ESUN]-1659921435382
GPR[SSUN]-1659921435382
-1448841897
GPR[SPVATF]-1659921435609
GPR[EPVATF]-1659921437548
GPR[SPS]-1659921437548
[8309257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:301.
GPR[EPS]-1659921438019
GPR[ESUN]-1659921438019
GPR[SSUN]-1659921438019
-1448841897
GPR[SPVATF]-1659921438248
GPR[EPVATF]-1659921440312
GPR[SPS]-1659921440312
[8312025] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:300.
GPR[EPS]-1659921440787
GPR[ESUN]-1659921440787
GPR[SSUN]-1659921440788
-1448841897
GPR[SPVATF]-1659921441014
GPR[EPVATF]-1659921443216
GPR[SPS]-1659921443216
[8315026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:299.
GPR[EPS]-1659921443788
GPR[ESUN]-1659921443788
GPR[SSUN]-1659921443788
-1448841897
GPR[SPVATF]-1659921444019
GPR[EPVATF]-1659921446324
GPR[SPS]-1659921446324
[8318046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:298.
GPR[EPS]-1659921446808
GPR[ESUN]-1659921446808
GPR[SSUN]-1659921446808
-1448841897
GPR[SPVATF]-1659921447055
GPR[EPVATF]-1659921449345
GPR[SPS]-1659921449345
[8321062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:297.
GPR[EPS]-1659921449824
GPR[ESUN]-1659921449824
GPR[SSUN]-1659921449824
-1448841897
GPR[SPVATF]-1659921450051
GPR[EPVATF]-1659921452359
GPR[SPS]-1659921452359
[8324075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:296.
GPR[EPS]-1659921452838
GPR[ESUN]-1659921452838
GPR[SSUN]-1659921452838
-1448841897
GPR[SPVATF]-1659921453068
GPR[EPVATF]-1659921455483
GPR[SPS]-1659921455483
[8327228] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:295.
GPR[EPS]-1659921455990
GPR[ESUN]-1659921455990
GPR[SSUN]-1659921455990
-1448841897
GPR[SPVATF]-1659921456223
GPR[EPVATF]-1659921458547
GPR[SPS]-1659921458547
[8330276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:294.
GPR[EPS]-1659921459039
GPR[ESUN]-1659921459039
GPR[SSUN]-1659921459039
-1448841897
GPR[SPVATF]-1659921459295
GPR[EPVATF]-1659921461633
GPR[SPS]-1659921461633
[8333348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:293.
GPR[EPS]-1659921462110
GPR[ESUN]-1659921462110
GPR[SSUN]-1659921462110
-1448841897
GPR[SPVATF]-1659921462344
GPR[EPVATF]-1659921464717
GPR[SPS]-1659921464717
[8336435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:292.
GPR[EPS]-1659921465197
GPR[ESUN]-1659921465197
GPR[SSUN]-1659921465197
-1448841897
GPR[SPVATF]-1659921465522
GPR[EPVATF]-1659921467950
GPR[SPS]-1659921467950
[8339666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:291.
GPR[EPS]-1659921468428
GPR[ESUN]-1659921468428
GPR[SSUN]-1659921468428
-1448841897
GPR[SPVATF]-1659921468655
GPR[EPVATF]-1659921471051
GPR[SPS]-1659921471051
[8342773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:290.
GPR[EPS]-1659921471535
GPR[ESUN]-1659921471535
GPR[SSUN]-1659921471536
-1448841897
GPR[SPVATF]-1659921471767
GPR[EPVATF]-1659921474134
GPR[SPS]-1659921474134
[8345867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:289.
GPR[EPS]-1659921474629
GPR[ESUN]-1659921474629
GPR[SSUN]-1659921474629
-1448841897
GPR[SPVATF]-1659921474856
GPR[EPVATF]-1659921477252
GPR[SPS]-1659921477252
[8349193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:288.
GPR[EPS]-1659921477955
GPR[ESUN]-1659921477955
GPR[SSUN]-1659921477955
-1448841897
GPR[ESUN]-1659921478185
GPR[SSUN]-1659921478185
-1448841897
GPR[SPVATF]-1659921478413
GPR[EPVATF]-1659921480739
GPR[SPS]-1659921480739
[8352477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:283.
GPR[EPS]-1659921481239
GPR[ESUN]-1659921481239
GPR[SSUN]-1659921481239
-1448841897
GPR[SPVATF]-1659921481471
GPR[EPVATF]-1659921483863
GPR[SPS]-1659921483863
[8355667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:282.
GPR[EPS]-1659921484429
GPR[ESUN]-1659921484429
GPR[SSUN]-1659921484429
-1448841897
GPR[SPVATF]-1659921484692
GPR[EPVATF]-1659921487040
GPR[SPS]-1659921487040
[8358821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:281.
GPR[EPS]-1659921487583
GPR[ESUN]-1659921487583
GPR[SSUN]-1659921487583
-1448841897
GPR[ESUN]-1659921487817
GPR[SSUN]-1659921487817
-1448841897
GPR[SPVATF]-1659921488166
GPR[EPVATF]-1659921490582
GPR[SPS]-1659921490582
[8362563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:276.
GPR[EPS]-1659921491325
GPR[ESUN]-1659921491325
GPR[SSUN]-1659921491326
-1448841897
GPR[SPVATF]-1659921491621
GPR[EPVATF]-1659921495361
GPR[SPS]-1659921495361
[8367431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:275.
GPR[EPS]-1659921496193
GPR[ESUN]-1659921496196
GPR[SSUN]-1659921496196
-1448841897
GPR[SPVATF]-1659921496522
GPR[EPVATF]-1659921498162
GPR[SPS]-1659921498162
[8369916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:274.
GPR[EPS]-1659921498678
GPR[ESUN]-1659921498678
GPR[SSUN]-1659921498679
-1448841897
GPR[SPVATF]-1659921498908
GPR[EPVATF]-1659921500490
GPR[SPS]-1659921500490
[8372279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:273.
GPR[EPS]-1659921501041
GPR[ESUN]-1659921501041
GPR[SSUN]-1659921501041
-1448841897
GPR[SPVATF]-1659921501271
GPR[EPVATF]-1659921502819
GPR[SPS]-1659921502819
[8374608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:272.
GPR[EPS]-1659921503371
GPR[ESUN]-1659921503371
GPR[SSUN]-1659921503371
-1448841897
GPR[SPVATF]-1659921503628
GPR[EPVATF]-1659921505192
GPR[SPS]-1659921505192
[8376955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:271.
GPR[EPS]-1659921505717
GPR[ESUN]-1659921505717
GPR[SSUN]-1659921505717
-1448841897
GPR[SPVATF]-1659921505947
GPR[EPVATF]-1659921507529
GPR[SPS]-1659921507529
[8379305] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:270.
GPR[EPS]-1659921508067
GPR[ESUN]-1659921508067
GPR[SSUN]-1659921508067
-1448841897
GPR[SPVATF]-1659921508303
GPR[EPVATF]-1659921509884
GPR[SPS]-1659921509884
[8381648] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:269.
GPR[EPS]-1659921510410
GPR[ESUN]-1659921510410
GPR[SSUN]-1659921510410
-1448841897
GPR[SPVATF]-1659921510643
GPR[EPVATF]-1659921512236
GPR[SPS]-1659921512236
[8383989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:268.
GPR[EPS]-1659921512751
GPR[ESUN]-1659921512751
GPR[SSUN]-1659921512752
-1448841897
GPR[SPVATF]-1659921512981
GPR[EPVATF]-1659921514561
GPR[SPS]-1659921514561
[8386349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:267.
GPR[EPS]-1659921515111
GPR[ESUN]-1659921515111
GPR[SSUN]-1659921515111
-1448841897
GPR[SPVATF]-1659921515338
GPR[EPVATF]-1659921516933
GPR[SPS]-1659921516933
[8388680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:266.
GPR[EPS]-1659921517442
GPR[ESUN]-1659921517442
GPR[SSUN]-1659921517442
-1448841897
GPR[SPVATF]-1659921517668
GPR[EPVATF]-1659921519265
GPR[SPS]-1659921519265
[8390997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:265.
GPR[EPS]-1659921519759
GPR[ESUN]-1659921519760
GPR[SSUN]-1659921519760
-1448841897
GPR[SPVATF]-1659921520046
GPR[EPVATF]-1659921521617
GPR[SPS]-1659921521617
[8393343] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:264.
GPR[EPS]-1659921522105
GPR[ESUN]-1659921522105
GPR[SSUN]-1659921522105
-1448841897
GPR[SPVATF]-1659921522334
GPR[EPVATF]-1659921523933
GPR[SPS]-1659921523933
[8395675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:263.
GPR[EPS]-1659921524437
GPR[ESUN]-1659921524437
GPR[SSUN]-1659921524437
-1448841897
GPR[ESUN]-1659921524670
GPR[SSUN]-1659921524670
-1448841897
GPR[SPVATF]-1659921524893
GPR[EPVATF]-1659921526546
GPR[SPS]-1659921526546
[8398284] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:258.
GPR[EPS]-1659921527046
GPR[ESUN]-1659921527046
GPR[SSUN]-1659921527046
-1448841897
GPR[SPVATF]-1659921527274
GPR[EPVATF]-1659921529052
GPR[SPS]-1659921529052
[8400811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:257.
GPR[EPS]-1659921529573
GPR[ESUN]-1659921529573
GPR[SSUN]-1659921529574
-1448841897
GPR[SPVATF]-1659921529798
GPR[EPVATF]-1659921531462
GPR[SPS]-1659921531462
[8403193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:256.
GPR[EPS]-1659921531955
GPR[ESUN]-1659921531955
GPR[SSUN]-1659921531955
-1448841897
GPR[SPVATF]-1659921532184
GPR[EPVATF]-1659921533914
GPR[SPS]-1659921533914
[8405646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:255.
GPR[EPS]-1659921534408
GPR[ESUN]-1659921534408
GPR[SSUN]-1659921534408
-1448841897
GPR[SPVATF]-1659921534646
GPR[EPVATF]-1659921536396
GPR[SPS]-1659921536396
[8408126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:254.
GPR[EPS]-1659921536888
GPR[ESUN]-1659921536888
GPR[SSUN]-1659921536888
-1448841897
GPR[SPVATF]-1659921537122
GPR[EPVATF]-1659921538997
GPR[SPS]-1659921538997
[8410826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:253.
GPR[EPS]-1659921539588
GPR[ESUN]-1659921539588
GPR[SSUN]-1659921539588
-1448841897
GPR[SPVATF]-1659921539818
GPR[EPVATF]-1659921541690
GPR[SPS]-1659921541690
[8413408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:252.
GPR[EPS]-1659921542170
GPR[ESUN]-1659921542170
GPR[SSUN]-1659921542170
-1448841897
GPR[ESUN]-1659921542399
GPR[SSUN]-1659921542400
-1448841897
GPR[ESUN]-1659921542623
GPR[SSUN]-1659921542623
-1448841897
GPR[ESUN]-1659921542848
GPR[SSUN]-1659921542849
-1448841897
GPR[ESUN]-1659921543072
GPR[SSUN]-1659921543072
-1448841897
GPR[ESUN]-1659921543296
GPR[SSUN]-1659921543296
-1448841897
GPR[ESUN]-1659921543522
GPR[SSUN]-1659921543523
-1448841897
GPR[ESUN]-1659921543754
GPR[SSUN]-1659921543754
-1448841897
GPR[ESUN]-1659921543982
GPR[SSUN]-1659921543982
-1448841897
GPR[ESUN]-1659921544208
GPR[SSUN]-1659921544208
-1448841897
GPR[ESUN]-1659921544436
GPR[SSUN]-1659921544436
-1448841897
GPR[ESUN]-1659921544664
GPR[SSUN]-1659921544664
-1448841897
GPR[ESUN]-1659921544891
GPR[SSUN]-1659921544891
GPR[ESUN]-1659921544891
GPR[SSUN]-1659921544891
GPR[ESUN]-1659921544891
GPR[SSUN]-1659921544891
GPR[ESUN]-1659921544891
GPR[SSUN]-1659921544891
GPR[ESUN]-1659921544891
GPR[SSUN]-1659921544891
GPR[ESUN]-1659921544891
GPR[SSUN]-1659921544891
GPR[ESUN]-1659921544891
GPR[SSUN]-1659921544891
GPR[ESUN]-1659921544891
GPR[SSUN]-1659921544891
79711797
GPR[ESUN]-1659921545194
GPR[SSUN]-1659921545194
1187751237
GPR[SPVATF]-1659921545638
GPR[EPVATF]-1659921547547
GPR[SPS]-1659921547547
GPR[EPS]-1659922172781
[10227126] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659923355888
GPR[SSUN]-1659923355888
GPR[EPS]-1659926113068
-534884160
GPR[ESUN]-1659926193018
GPR[SSUN]-1659926193019
-861565004
GPR[ESUN]-1659928877079
GPR[SSUN]-1659928877079
-861565004
GPR[ESUN]-1659930602598
GPR[SSUN]-1659930602598
\n\nNode: host-51\n
\n\nDate: Sun 07 Aug 2022 08:58:52 PM PDT\n
End running Nopol Closure/35 results at /experiment_home///results/Nopol/Closure/35/seed_263/
Removing checked out dir script/workingdir/Nopol/Closure_35
GPR[SSLE]-1659931132991
GPR[ESLE]-1659931192995
