Sleep 1m start
GPR[SSLI]-1659782651872
GPR[ESLI]-1659782711875
Running Nopol Closure 5b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/5/seed_260/
The file script/workingdir/Nopol/Closure_5 does not exist!
script/workingdir/Nopol/Closure_5
script/workingdir/Nopol/Closure_5
classpath:  script/workingdir/Nopol/Closure_5/build/classes:script/workingdir/Nopol/Closure_5/lib/args4j.jar:script/workingdir/Nopol/Closure_5/lib/guava.jar:script/workingdir/Nopol/Closure_5/lib/json.jar:script/workingdir/Nopol/Closure_5/lib/jsr305.jar:script/workingdir/Nopol/Closure_5/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_5/build/lib/rhino.jar:script/workingdir/Nopol/Closure_5/lib/ant.jar:script/workingdir/Nopol/Closure_5/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_5/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_5/lib/jarjar.jar:script/workingdir/Nopol/Closure_5/lib/junit.jar:script/workingdir/Nopol/Closure_5/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659782730651
GPR[ESLB]-1659782790672
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_5//build/classes:script/workingdir/Nopol/Closure_5//build/test:script/workingdir/Nopol/Closure_5/build/classes:script/workingdir/Nopol/Closure_5/lib/args4j.jar:script/workingdir/Nopol/Closure_5/lib/guava.jar:script/workingdir/Nopol/Closure_5/lib/json.jar:script/workingdir/Nopol/Closure_5/lib/jsr305.jar:script/workingdir/Nopol/Closure_5/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_5/build/lib/rhino.jar:script/workingdir/Nopol/Closure_5/lib/ant.jar:script/workingdir/Nopol/Closure_5/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_5/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_5/lib/jarjar.jar:script/workingdir/Nopol/Closure_5/lib/junit.jar:script/workingdir/Nopol/Closure_5/build/test
Node: host-53
Date init: Sat 06 Aug 2022 03:46:30 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_5/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_5/build/classes/, file:script/workingdir/Nopol/Closure_5/build/test/, file:script/workingdir/Nopol/Closure_5/build/classes/, file:script/workingdir/Nopol/Closure_5/lib/args4j.jar, file:script/workingdir/Nopol/Closure_5/lib/guava.jar, file:script/workingdir/Nopol/Closure_5/lib/json.jar, file:script/workingdir/Nopol/Closure_5/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_5/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_5/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_5/lib/ant.jar, file:script/workingdir/Nopol/Closure_5/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_5/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_5/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_5/lib/junit.jar, file:script/workingdir/Nopol/Closure_5/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_5/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/5/seed_260/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[9] INFO NoPol - Free memory: 1 GB
[9] INFO NoPol - Maximum memory: 7 GB
[9] INFO NoPol - Total memory available to JVM: 1 GB
[12] INFO NoPol - Java version: 1.8.0_45
[13] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[13] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659782802345
GPR[ESUP]-1659782802345
GPR[SFL]-1659782802345
GPR[EFL]-1659782844961
GPR[SFP]-1659782844961
GPR[SSUN]-1659782852228
-283827935
GPR[SPVATF]-1659782852826
GPR[EPVATF]-1659782852877
[57602] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782852878
GPR[SSUN]-1659782852878
-283827935
GPR[ESUN]-1659782853090
GPR[SSUN]-1659782853090
-283827935
GPR[ESUN]-1659782853300
GPR[SSUN]-1659782853300
-283827935
GPR[ESUN]-1659782853511
GPR[SSUN]-1659782853512
-283827935
GPR[SPVATF]-1659782853724
GPR[EPVATF]-1659782853746
[58470] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782853747
GPR[SSUN]-1659782853747
-283827935
GPR[ESUN]-1659782853959
GPR[SSUN]-1659782853959
-283827935
GPR[SPVATF]-1659782854154
GPR[EPVATF]-1659782854177
[58901] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782854177
GPR[SSUN]-1659782854177
-283827935
GPR[SPVATF]-1659782854382
GPR[EPVATF]-1659782854404
[59128] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782854404
GPR[SSUN]-1659782854404
-283827935
GPR[SPVATF]-1659782854601
GPR[EPVATF]-1659782854623
[59347] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782854623
GPR[SSUN]-1659782854623
-283827935
GPR[SPVATF]-1659782854825
GPR[EPVATF]-1659782854844
[59569] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782854845
GPR[SSUN]-1659782854845
-283827935
GPR[SPVATF]-1659782855048
GPR[EPVATF]-1659782855069
[59793] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782855069
GPR[SSUN]-1659782855069
-283827935
GPR[ESUN]-1659782855280
GPR[SSUN]-1659782855280
-283827935
GPR[ESUN]-1659782855559
GPR[SSUN]-1659782855559
-1966087783
GPR[ESUN]-1659782855779
GPR[SSUN]-1659782855779
-1966087783
GPR[SPVATF]-1659782855995
GPR[EPVATF]-1659782856074
[60798] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782856074
GPR[SSUN]-1659782856074
-1659631726
GPR[ESUN]-1659782856281
GPR[SSUN]-1659782856281
130004992
GPR[ESUN]-1659782856477
GPR[SSUN]-1659782856477
130004992
GPR[SPVATF]-1659782856662
GPR[EPVATF]-1659782856739
[61463] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782856739
GPR[SSUN]-1659782856739
130004992
GPR[ESUN]-1659782856938
GPR[SSUN]-1659782856938
80988634
GPR[ESUN]-1659782857127
GPR[SSUN]-1659782857127
-1966087783
GPR[SPVATF]-1659782857338
GPR[EPVATF]-1659782857409
[62133] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782857409
GPR[SSUN]-1659782857409
-1966087783
GPR[SPVATF]-1659782857616
GPR[EPVATF]-1659782857685
[62409] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782857685
GPR[SSUN]-1659782857685
890942016
GPR[ESUN]-1659782857893
GPR[SSUN]-1659782857893
890942016
GPR[SPVATF]-1659782858086
GPR[EPVATF]-1659782858160
[62884] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782858160
GPR[SSUN]-1659782858160
890942016
GPR[SPVATF]-1659782858359
GPR[EPVATF]-1659782858429
[63153] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782858430
GPR[EPVATF]-1659782858497
[63221] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782858497
GPR[SSUN]-1659782858497
890942016
GPR[ESUN]-1659782858708
GPR[SSUN]-1659782858708
890942016
GPR[ESUN]-1659782858989
GPR[SSUN]-1659782858989
-1966087783
GPR[ESUN]-1659782859185
GPR[SSUN]-1659782859185
-1966087783
GPR[SPVATF]-1659782859391
GPR[EPVATF]-1659782859460
[64184] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782859460
GPR[EPVATF]-1659782859529
[64253] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782859529
GPR[SSUN]-1659782859529
-1966087783
GPR[ESUN]-1659782859741
GPR[SSUN]-1659782859741
-1966087783
GPR[SPVATF]-1659782859943
GPR[EPVATF]-1659782860011
[64735] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782860011
GPR[EPVATF]-1659782860078
[64802] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782860078
GPR[SSUN]-1659782860078
-1966087783
GPR[ESUN]-1659782860281
GPR[SSUN]-1659782860281
-1966087783
GPR[ESUN]-1659782860500
GPR[SSUN]-1659782860500
-1966087783
GPR[ESUN]-1659782860703
GPR[SSUN]-1659782860703
80988634
GPR[ESUN]-1659782860880
GPR[SSUN]-1659782860880
1613130706
GPR[ESUN]-1659782861101
GPR[SSUN]-1659782861101
1613130706
GPR[ESUN]-1659782861321
GPR[SSUN]-1659782861321
1613130706
GPR[SPVATF]-1659782861542
GPR[EPVATF]-1659782861798
[66523] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782861799
GPR[SSUN]-1659782861799
234947553
GPR[ESUN]-1659782862008
GPR[SSUN]-1659782862008
234947553
GPR[SPVATF]-1659782862219
GPR[EPVATF]-1659782862285
[67009] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782862285
GPR[EPVATF]-1659782862349
[67074] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782862350
GPR[SSUN]-1659782862350
234947553
GPR[ESUN]-1659782862548
GPR[SSUN]-1659782862548
234947553
GPR[SPVATF]-1659782862749
GPR[EPVATF]-1659782862812
[67536] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782862812
GPR[EPVATF]-1659782862872
[67596] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782862872
GPR[SSUN]-1659782862872
234947553
GPR[SPVATF]-1659782863086
GPR[EPVATF]-1659782863148
[67872] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782863148
GPR[SSUN]-1659782863148
234947553
GPR[ESUN]-1659782863351
GPR[SSUN]-1659782863351
234947553
GPR[ESUN]-1659782863550
GPR[SSUN]-1659782863550
234947553
GPR[SPVATF]-1659782863758
GPR[EPVATF]-1659782863820
[68544] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782863820
GPR[SSUN]-1659782863820
234947553
GPR[SPVATF]-1659782864016
GPR[EPVATF]-1659782864083
[68807] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782864083
GPR[SSUN]-1659782864083
234947553
GPR[SPVATF]-1659782864282
GPR[EPVATF]-1659782864344
[69068] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782864344
GPR[SSUN]-1659782864344
234947553
GPR[ESUN]-1659782864553
GPR[SSUN]-1659782864553
234947553
GPR[ESUN]-1659782864752
GPR[SSUN]-1659782864752
234947553
GPR[SPVATF]-1659782864961
GPR[EPVATF]-1659782865027
[69751] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782865027
GPR[SSUN]-1659782865027
234947553
GPR[SPVATF]-1659782865236
GPR[EPVATF]-1659782865299
[70023] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782865299
GPR[SSUN]-1659782865299
234947553
GPR[ESUN]-1659782865516
GPR[SSUN]-1659782865516
234947553
GPR[SPVATF]-1659782865727
GPR[EPVATF]-1659782865791
[70515] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782865791
GPR[SSUN]-1659782865791
234947553
GPR[SPVATF]-1659782866005
GPR[EPVATF]-1659782866066
[70790] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782866067
GPR[SSUN]-1659782866067
234947553
GPR[ESUN]-1659782866272
GPR[SSUN]-1659782866272
890942016
GPR[SPVATF]-1659782866471
GPR[EPVATF]-1659782866536
[71260] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782866536
GPR[EPVATF]-1659782866605
[71329] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782866605
GPR[SSUN]-1659782866605
890942016
GPR[SPVATF]-1659782866811
GPR[EPVATF]-1659782866878
[71603] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782866879
GPR[SSUN]-1659782866879
890942016
GPR[ESUN]-1659782867096
GPR[SSUN]-1659782867096
890942016
GPR[SPVATF]-1659782867298
GPR[EPVATF]-1659782867369
[72093] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782867369
GPR[SSUN]-1659782867369
890942016
GPR[SPVATF]-1659782867581
GPR[EPVATF]-1659782867648
[72372] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782867648
GPR[EPVATF]-1659782867717
[72441] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782867718
GPR[SSUN]-1659782867718
890942016
GPR[SPVATF]-1659782867915
GPR[EPVATF]-1659782867981
[72705] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782867981
GPR[SSUN]-1659782867981
890942016
GPR[SPVATF]-1659782868197
GPR[EPVATF]-1659782869330
[74054] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782869330
GPR[EPVATF]-1659782869396
[74120] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782869396
GPR[SSUN]-1659782869396
890942016
GPR[ESUN]-1659782869607
GPR[SSUN]-1659782869607
890942016
GPR[SPVATF]-1659782869805
GPR[EPVATF]-1659782869871
[74595] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782869871
GPR[SSUN]-1659782869871
890942016
GPR[SPVATF]-1659782870094
GPR[EPVATF]-1659782870159
[74883] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782870159
GPR[SSUN]-1659782870159
890942016
GPR[SPVATF]-1659782870373
GPR[EPVATF]-1659782870439
[75163] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782870439
GPR[SSUN]-1659782870439
890942016
GPR[ESUN]-1659782870652
GPR[SSUN]-1659782870652
1613130706
GPR[SPVATF]-1659782870878
GPR[EPVATF]-1659782871098
[75822] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782871099
GPR[EPVATF]-1659782871326
[76050] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782871326
GPR[SSUN]-1659782871326
1613130706
GPR[SPVATF]-1659782871547
GPR[EPVATF]-1659782871786
[76510] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782871787
GPR[EPVATF]-1659782872025
[76749] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782872025
GPR[SSUN]-1659782872025
1613130706
GPR[SPVATF]-1659782872254
GPR[EPVATF]-1659782872478
[77203] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782872479
GPR[SSUN]-1659782872479
80988634
GPR[ESUN]-1659782872682
GPR[SSUN]-1659782872682
2433571
GPR[SPVATF]-1659782872938
GPR[EPVATF]-1659782873270
GPR[SPS]-1659782873270
[79275] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1440.
GPR[EPS]-1659782874551
GPR[ESUN]-1659782874551
GPR[SSUN]-1659782874551
2433571
GPR[SPVATF]-1659782874805
GPR[EPVATF]-1659782875145
GPR[SPS]-1659782875145
GPR[EPS]-1659782876449
GPR[SPVATR]-1659782876449
[81173] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1411: PRECONDITION node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME
[81941] INFO TestPatch - Running test suite to check the patch "node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME" is working
GPR[EPVATR]-1659782877482
[82206] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659782877482
[82235] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1410,7 +1410,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/5/seed_260/patch_75166_1ts_1659782877511.diff
GPR[ESUN]-1659782877512
GPR[SSUN]-1659782877512
80988634
GPR[ESUN]-1659782877707
GPR[SSUN]-1659782877707
1613130706
GPR[SPVATF]-1659782877934
GPR[EPVATF]-1659782878797
[83522] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782878798
GPR[EPVATF]-1659782879044
[83768] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782879044
GPR[SSUN]-1659782879045
1613130706
GPR[SPVATF]-1659782879289
GPR[EPVATF]-1659782879537
[84261] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782879537
GPR[EPVATF]-1659782879774
[84498] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782879774
GPR[SSUN]-1659782879774
1613130706
GPR[ESUN]-1659782879996
GPR[SSUN]-1659782879996
1613130706
GPR[ESUN]-1659782880211
GPR[SSUN]-1659782880211
1613130706
GPR[ESUN]-1659782880433
GPR[SSUN]-1659782880433
1613130706
GPR[ESUN]-1659782880657
GPR[SSUN]-1659782880657
1613130706
GPR[SPVATF]-1659782880873
GPR[EPVATF]-1659782881122
[85846] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782881122
GPR[EPVATF]-1659782881366
[86090] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782881366
GPR[SSUN]-1659782881367
-1966087783
GPR[ESUN]-1659782881566
GPR[SSUN]-1659782881566
-1966087783
GPR[SPVATF]-1659782881770
GPR[EPVATF]-1659782881839
[86563] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782881839
GPR[EPVATF]-1659782881910
[86634] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782881910
GPR[SSUN]-1659782881910
-1966087783
GPR[SPVATF]-1659782882116
GPR[EPVATF]-1659782882184
[86908] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782882184
GPR[SSUN]-1659782882184
1613130706
GPR[SPVATF]-1659782882427
GPR[EPVATF]-1659782882661
[87385] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782882661
GPR[SSUN]-1659782882661
1613130706
GPR[ESUN]-1659782882909
GPR[SSUN]-1659782882909
1613130706
GPR[SPVATF]-1659782883128
GPR[EPVATF]-1659782883369
[88093] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782883369
GPR[EPVATF]-1659782883602
[88326] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782883602
GPR[SSUN]-1659782883602
1613130706
GPR[ESUN]-1659782883849
GPR[SSUN]-1659782883849
1613130706
GPR[SPVATF]-1659782884080
GPR[EPVATF]-1659782884325
[89049] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782884325
GPR[EPVATF]-1659782884562
[89286] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782884562
GPR[SSUN]-1659782884562
2433571
GPR[SPVATF]-1659782884830
GPR[EPVATF]-1659782885141
GPR[SPS]-1659782885141
[90572] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1427.
GPR[EPS]-1659782885849
GPR[ESUN]-1659782885849
GPR[SSUN]-1659782885849
-1966087783
GPR[SPVATF]-1659782886051
GPR[EPVATF]-1659782886121
[90845] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782886122
GPR[EPVATF]-1659782886191
[90916] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782886192
GPR[SSUN]-1659782886192
-1966087783
GPR[SPVATF]-1659782886412
GPR[EPVATF]-1659782886484
[91208] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782886484
GPR[EPVATF]-1659782886555
[91279] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782886555
GPR[SSUN]-1659782886555
-1966087783
GPR[SPVATF]-1659782886756
GPR[EPVATF]-1659782886825
[91549] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782886825
GPR[EPVATF]-1659782886894
[91618] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782886894
GPR[SSUN]-1659782886894
-1966087783
GPR[ESUN]-1659782887096
GPR[SSUN]-1659782887096
-1966087783
GPR[ESUN]-1659782887294
GPR[SSUN]-1659782887294
-1966087783
GPR[SPVATF]-1659782887507
GPR[EPVATF]-1659782887580
[92304] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782887581
GPR[EPVATF]-1659782887649
[92373] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782887649
GPR[SSUN]-1659782887649
-1966087783
GPR[SPVATF]-1659782887856
GPR[EPVATF]-1659782887930
[92654] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659782887931
GPR[EPVATF]-1659782888003
[92727] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782888003
GPR[SSUN]-1659782888003
-1966087783
GPR[ESUN]-1659782888212
GPR[SSUN]-1659782888212
-1966087783
GPR[SPVATF]-1659782888436
GPR[EPVATF]-1659782888511
[93235] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782888511
GPR[SSUN]-1659782888511
-1147408099
GPR[SPVATF]-1659782888800
GPR[EPVATF]-1659782889137
GPR[SPS]-1659782889137
[94482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:426.
GPR[EPS]-1659782889758
GPR[ESUN]-1659782889758
GPR[SSUN]-1659782889758
-1147408099
GPR[SPVATF]-1659782890014
GPR[EPVATF]-1659782890332
GPR[SPS]-1659782890332
[96315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:319.
GPR[EPS]-1659782891591
GPR[ESUN]-1659782891591
GPR[SSUN]-1659782891591
-1966087783
GPR[SPVATF]-1659782891800
GPR[EPVATF]-1659782891866
[96590] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782891866
GPR[SSUN]-1659782891866
-1966087783
GPR[ESUN]-1659782892061
GPR[SSUN]-1659782892061
-1966087783
GPR[SPVATF]-1659782892257
GPR[EPVATF]-1659782892331
[97055] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782892331
GPR[SSUN]-1659782892331
-1966087783
GPR[ESUN]-1659782892527
GPR[SSUN]-1659782892527
-1966087783
GPR[ESUN]-1659782892724
GPR[SSUN]-1659782892724
-1966087783
GPR[SPVATF]-1659782892924
GPR[EPVATF]-1659782892998
[97722] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782892998
GPR[SSUN]-1659782892998
-1966087783
GPR[SPVATF]-1659782893198
GPR[EPVATF]-1659782893268
[97992] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782893269
GPR[SSUN]-1659782893269
-1147408099
GPR[SPVATF]-1659782893526
GPR[EPVATF]-1659782893840
GPR[SPS]-1659782893840
[99180] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:298.
GPR[EPS]-1659782894456
GPR[ESUN]-1659782894456
GPR[SSUN]-1659782894456
-1147408099
GPR[SPVATF]-1659782894696
GPR[EPVATF]-1659782895025
GPR[SPS]-1659782895025
[100344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:286.
GPR[EPS]-1659782895620
GPR[ESUN]-1659782895620
GPR[SSUN]-1659782895620
-1147408099
GPR[ESUN]-1659782895870
GPR[SSUN]-1659782895870
-1147408099
GPR[SPVATF]-1659782896125
GPR[EPVATF]-1659782896441
GPR[SPS]-1659782896441
[101753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:280.
GPR[EPS]-1659782897029
GPR[SPVATF]-1659782897029
GPR[EPVATF]-1659782897354
GPR[SPS]-1659782897354
[102678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:280.
GPR[EPS]-1659782897954
GPR[ESUN]-1659782897954
GPR[SSUN]-1659782897954
-1147408099
GPR[ESUN]-1659782898232
GPR[SSUN]-1659782898232
-1147408099
GPR[ESUN]-1659782898472
GPR[SSUN]-1659782898472
-1147408099
GPR[SPVATF]-1659782898722
GPR[EPVATF]-1659782899052
GPR[SPS]-1659782899052
[104376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior$1:119.
GPR[EPS]-1659782899652
GPR[SPVATF]-1659782899652
GPR[EPVATF]-1659782899984
GPR[SPS]-1659782899984
[105352] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior$1:119.
GPR[EPS]-1659782900628
GPR[ESUN]-1659782900628
GPR[SSUN]-1659782900628
-1147408099
GPR[ESUN]-1659782900894
GPR[SSUN]-1659782900894
-1147408099
GPR[SPVATF]-1659782901168
GPR[EPVATF]-1659782901526
GPR[SPS]-1659782901526
[106857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:116.
GPR[EPS]-1659782902133
GPR[ESUN]-1659782902133
GPR[SSUN]-1659782902133
-1147408099
GPR[SPVATF]-1659782902384
GPR[EPVATF]-1659782902731
GPR[SPS]-1659782902731
[108075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:462.
GPR[EPS]-1659782903351
GPR[ESUN]-1659782903351
GPR[SSUN]-1659782903351
-1147408099
GPR[SPVATF]-1659782903603
GPR[EPVATF]-1659782903928
GPR[SPS]-1659782903928
[109276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:461.
GPR[EPS]-1659782904552
GPR[ESUN]-1659782904552
GPR[SSUN]-1659782904552
-1147408099
GPR[ESUN]-1659782904826
GPR[SSUN]-1659782904826
-1147408099
GPR[SPVATF]-1659782905069
GPR[EPVATF]-1659782905403
GPR[SPS]-1659782905403
[110727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:457.
GPR[EPS]-1659782906003
GPR[ESUN]-1659782906003
GPR[SSUN]-1659782906003
-1147408099
GPR[ESUN]-1659782906247
GPR[SSUN]-1659782906247
-1147408099
GPR[SPVATF]-1659782906503
GPR[EPVATF]-1659782906841
GPR[SPS]-1659782906841
[112171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:450.
GPR[EPS]-1659782907447
GPR[ESUN]-1659782907447
GPR[SSUN]-1659782907447
-1147408099
GPR[ESUN]-1659782907693
GPR[SSUN]-1659782907693
-1147408099
GPR[SPVATF]-1659782907955
GPR[EPVATF]-1659782908297
GPR[SPS]-1659782908297
[113711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:432.
GPR[EPS]-1659782908987
GPR[ESUN]-1659782908987
GPR[SSUN]-1659782908987
-1147408099
GPR[SPVATF]-1659782909244
GPR[EPVATF]-1659782909580
GPR[SPS]-1659782909580
[114913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:412.
GPR[EPS]-1659782910189
GPR[ESUN]-1659782910189
GPR[SSUN]-1659782910189
-1147408099
GPR[SPVATF]-1659782910430
GPR[EPVATF]-1659782910767
GPR[SPS]-1659782910767
[115879] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineObjectLiterals implements com.google.javascript.jscomp.CompilerPass {
    public static final java.lang.String VAR_PREFIX = "JSCompiler_object_inline_";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior());
        callback.process(externs, root);
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                if (isVarInlineForbidden(v)) {
                    continue;
                }
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if (isInlinableObject(referenceInfo.references)) {
                    staleVars.add(v);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                    splitObject(v, declaration, init, referenceInfo);
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, final com.google.javascript.jscomp.Scope scope) {
            com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, new com.google.javascript.jscomp.NodeUtil.Visitor() {
                @java.lang.Override
                public void visit(com.google.javascript.rhino.Node node) {
                    if (node.isName()) {
                        staleVars.add(scope.getVar(node.getString()));
                    }
                }
            }, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.isGlobal() || var.isExtern()) || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private boolean isInlinableObject(java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            boolean ret = false;
            java.util.Set<java.lang.String> validProperties = com.google.common.collect.Sets.newHashSet();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs) {
                com.google.javascript.rhino.Node name = ref.getNode();
                com.google.javascript.rhino.Node parent = ref.getParent();
                com.google.javascript.rhino.Node gramps = ref.getGrandparent();
                if (parent.isGetProp()) {
                    com.google.common.base.Preconditions.checkState(parent.getFirstChild() == name);
                    if (gramps.isCall() && (gramps.getFirstChild() == parent)) {
                        return false;
                    }
                    java.lang.String propName = parent.getLastChild().getString();
                    if (!validProperties.contains(propName)) {
                        if (com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
                            validProperties.add(propName);
                        } else {
                            return false;
                        }
                    }
                    continue;
                }
                if (!isVarOrAssignExprLhs(name)) {
                    return false;
                }
                com.google.javascript.rhino.Node val = ref.getAssignedValue();
                if (val == null) {
                    continue;
                }
                if (!val.isObjectLit()) {
                    return false;
                }
                for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                    if (child.isGetterDef() || child.isSetterDef()) {
                        return false;
                    }
                    validProperties.add(child.getString());
                    com.google.javascript.rhino.Node childVal = child.getFirstChild();
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference t : refs) {
                        com.google.javascript.rhino.Node refNode = t.getParent();
                        while (!com.google.javascript.jscomp.NodeUtil.isStatementBlock(refNode)) {
                            if (refNode == childVal) {
                                return false;
                            }
                            refNode = refNode.getParent();
                        } 
                    }
                }
                ret = true;
            }
            return ret;
        }

        private boolean isVarOrAssignExprLhs(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return parent.isVar() || ((parent.isAssign() && (parent.getFirstChild() == n)) && parent.getParent().isExprResult());
        }

        private java.util.Map<java.lang.String, java.lang.String> computeVarList(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = com.google.common.collect.Maps.newLinkedHashMap();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    com.google.javascript.rhino.Node val = ref.getAssignedValue();
                    if (val != null) {
                        com.google.common.base.Preconditions.checkState(val.isObjectLit());
                        for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                            java.lang.String varname = child.getString();
                            if (varmap.containsKey(varname)) {
                                continue;
                            }
                            java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                            varmap.put(varname, var);
                        }
                    }
                } else if (ref.getParent().isVar()) {
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String varname = getprop.getLastChild().getString();
                    if (varmap.containsKey(varname)) {
                        continue;
                    }
                    java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                    varmap.put(varname, var);
                }
            }
            return varmap;
        }

        private void fillInitialValues(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals) {
            com.google.javascript.rhino.Node object = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(object.isObjectLit());
            for (com.google.javascript.rhino.Node key = object.getFirstChild(); key != null; key = key.getNext()) {
                initvals.put(key.getString(), key.removeFirstChild());
            }
        }

        private void replaceAssignmentExpression(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, java.util.Map<java.lang.String, java.lang.String> varmap) {
            java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.rhino.Node val = ref.getAssignedValue();
            blacklistVarReferencesInTree(val, v.scope);
            com.google.common.base.Preconditions.checkState(val.isObjectLit());
            java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());
            for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {
                java.lang.String var = key.getString();
                com.google.javascript.rhino.Node value = key.removeFirstChild();
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), value));
                all.remove(var);
            }
            for (java.lang.String var : all) {
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));
            }
            com.google.javascript.rhino.Node replacement;
            if (nodes.isEmpty()) {
                replacement = com.google.javascript.rhino.IR.trueNode();
            } else {
                nodes.add(com.google.javascript.rhino.IR.trueNode());
                nodes = com.google.common.collect.Lists.reverse(nodes);
                replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                com.google.javascript.rhino.Node cur = replacement;
                int i;
                for (i = 0; i < (nodes.size() - 2); i++) {
                    cur.addChildToFront(nodes.get(i));
                    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                    cur.addChildToFront(t);
                    cur = t;
                }
                cur.addChildToFront(nodes.get(i));
                cur.addChildToFront(nodes.get(i + 1));
            }
            com.google.javascript.rhino.Node replace = ref.getParent();
            replacement.copyInformationFromForTree(replace);
            if (replace.isVar()) {
                replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));
            } else {
                replace.getParent().replaceChild(replace, replacement);
            }
        }

        private void splitObject(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = computeVarList(v, referenceInfo);
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals = com.google.common.collect.Maps.newHashMap();
            com.google.javascript.rhino.Node vnode;
            boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar();
            if (defined) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(18).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier",com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("initvals",initvals);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("declaration",declaration);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("varmap",varmap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("defined",defined);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("referenceInfo",referenceInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.compiler",com.google.javascript.jscomp.InlineObjectLiterals.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionEnds();
                }
                if (runtimeAngelicValue)
                    vnode = init.getParent();

                fillInitialValues(init, initvals);
            } else {
                vnode = v.getScope().getRootNode().getLastChild().getFirstChild();
            }
            for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : varmap.entrySet()) {
                com.google.javascript.rhino.Node val = initvals.get(entry.getKey());
                com.google.javascript.rhino.Node varnode = com.google.javascript.jscomp.NodeUtil.newVarNode(entry.getValue(), val);
                if (val == null) {
                    varnode.copyInformationFromForTree(vnode);
                } else {
                    blacklistVarReferencesInTree(val, v.scope);
                }
                vnode.getParent().addChildBefore(varnode, vnode);
            }
            if (defined) {
                vnode.getParent().removeChild(vnode);
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (defined && (ref == init)) {
                    continue;
                }
                if (ref.isLvalue()) {
                    replaceAssignmentExpression(v, ref, varmap);
                } else if (ref.getParent().isVar()) {
                    ref.getGrandparent().removeChild(ref.getParent());
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String var = getprop.getChildAtIndex(1).getString();
                    com.google.common.base.Preconditions.checkState(varmap.containsKey(var));
                    com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.name(varmap.get(var));
                    replacement.copyInformationFrom(getprop);
                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                }
            }
            compiler.reportCodeChange();
        }
    }
}
[115879] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659782911155
GPR[SSUN]-1659782911155
-1147408099
GPR[ESUN]-1659782911426
GPR[SSUN]-1659782911426
-1147408099
GPR[SPVATF]-1659782911679
GPR[EPVATF]-1659782912028
GPR[SPS]-1659782912028
[117353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:317.
GPR[EPS]-1659782912629
GPR[ESUN]-1659782912629
GPR[SSUN]-1659782912629
-1147408099
GPR[SPVATF]-1659782912893
GPR[EPVATF]-1659782913987
GPR[SPS]-1659782913987
[119360] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:316.
GPR[EPS]-1659782914636
GPR[ESUN]-1659782914636
GPR[SSUN]-1659782914636
-1147408099
GPR[ESUN]-1659782914879
GPR[SSUN]-1659782914879
-1147408099
GPR[SPVATF]-1659782915134
GPR[EPVATF]-1659782915491
GPR[SPS]-1659782915491
[120789] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:297.
GPR[EPS]-1659782916065
GPR[SPVATF]-1659782916065
GPR[EPVATF]-1659782916392
GPR[SPS]-1659782916392
[121718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:297.
GPR[EPS]-1659782916994
GPR[ESUN]-1659782916994
GPR[SSUN]-1659782916994
-1147408099
GPR[ESUN]-1659782917248
GPR[SSUN]-1659782917248
-1147408099
GPR[SPVATF]-1659782917508
GPR[EPVATF]-1659782917836
GPR[SPS]-1659782917836
[123155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:293.
GPR[EPS]-1659782918431
GPR[ESUN]-1659782918431
GPR[SSUN]-1659782918431
-1147408099
GPR[ESUN]-1659782918675
GPR[SSUN]-1659782918675
-1147408099
GPR[ESUN]-1659782918916
GPR[SSUN]-1659782918916
-1147408099
GPR[SPVATF]-1659782919152
GPR[EPVATF]-1659782919482
GPR[SPS]-1659782919482
[124792] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:443.
GPR[EPS]-1659782920068
GPR[SPVATF]-1659782920068
GPR[EPVATF]-1659782920404
GPR[SPS]-1659782920404
[125727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:443.
GPR[EPS]-1659782921003
GPR[ESUN]-1659782921003
GPR[SSUN]-1659782921003
-1147408099
GPR[SPVATF]-1659782921261
GPR[EPVATF]-1659782921586
GPR[SPS]-1659782921586
[126921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:439.
GPR[EPS]-1659782922197
GPR[SPVATF]-1659782922197
GPR[EPVATF]-1659782922531
GPR[SPS]-1659782922531
[127830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:439.
GPR[EPS]-1659782923106
GPR[ESUN]-1659782923106
GPR[SSUN]-1659782923106
-1147408099
GPR[ESUN]-1659782923353
GPR[SSUN]-1659782923353
-1147408099
GPR[SPVATF]-1659782923624
GPR[EPVATF]-1659782923960
GPR[SPS]-1659782923960
[129292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:428.
GPR[EPS]-1659782924568
GPR[ESUN]-1659782924568
GPR[SSUN]-1659782924568
-1147408099
GPR[SPVATF]-1659782925044
GPR[EPVATF]-1659782925365
GPR[SPS]-1659782925365
[130670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:422.
GPR[EPS]-1659782925946
GPR[SPVATF]-1659782925947
GPR[EPVATF]-1659782926280
GPR[SPS]-1659782926280
[131594] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:422.
GPR[EPS]-1659782926870
GPR[ESUN]-1659782926870
GPR[SSUN]-1659782926870
-1147408099
GPR[ESUN]-1659782927120
GPR[SSUN]-1659782927120
-1147408099
GPR[ESUN]-1659782927359
GPR[SSUN]-1659782927359
-1147408099
GPR[ESUN]-1659782927599
GPR[SSUN]-1659782927599
-1966087783
GPR[SPVATF]-1659782927807
GPR[EPVATF]-1659782927876
[132600] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659782927876
GPR[SSUN]-1659782927876
-1147408099
GPR[ESUN]-1659782928145
GPR[SSUN]-1659782928145
-1147408099
GPR[SPVATF]-1659782928387
GPR[EPVATF]-1659782928749
GPR[SPS]-1659782928749
[134073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:466.
GPR[EPS]-1659782929349
GPR[ESUN]-1659782929349
GPR[SSUN]-1659782929349
-1147408099
GPR[SPVATF]-1659782929600
GPR[EPVATF]-1659782929929
GPR[SPS]-1659782929929
[135249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:437.
GPR[EPS]-1659782930525
GPR[ESUN]-1659782930525
GPR[SSUN]-1659782930525
-1147408099
GPR[SPVATF]-1659782930778
GPR[EPVATF]-1659782931114
GPR[SPS]-1659782931114
[136432] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:435.
GPR[EPS]-1659782931708
GPR[ESUN]-1659782931708
GPR[SSUN]-1659782931708
-1147408099
GPR[SPVATF]-1659782931937
GPR[EPVATF]-1659782932254
GPR[SPS]-1659782932254
[137521] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:431.
GPR[EPS]-1659782932797
GPR[SPVATF]-1659782932797
GPR[EPVATF]-1659782933116
GPR[SPS]-1659782933116
[138389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:431.
GPR[EPS]-1659782933665
GPR[ESUN]-1659782933665
GPR[SSUN]-1659782933665
-1147408099
GPR[SPVATF]-1659782933900
GPR[EPVATF]-1659782934222
GPR[SPS]-1659782934222
[139495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:419.
GPR[EPS]-1659782934771
GPR[ESUN]-1659782934771
GPR[SSUN]-1659782934771
-1147408099
GPR[SPVATF]-1659782935030
GPR[EPVATF]-1659782935351
GPR[SPS]-1659782935351
[140435] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineObjectLiterals implements com.google.javascript.jscomp.CompilerPass {
    public static final java.lang.String VAR_PREFIX = "JSCompiler_object_inline_";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior());
        callback.process(externs, root);
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                if (isVarInlineForbidden(v)) {
                    continue;
                }
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if (isInlinableObject(referenceInfo.references)) {
                    staleVars.add(v);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                    splitObject(v, declaration, init, referenceInfo);
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, final com.google.javascript.jscomp.Scope scope) {
            com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, new com.google.javascript.jscomp.NodeUtil.Visitor() {
                @java.lang.Override
                public void visit(com.google.javascript.rhino.Node node) {
                    if (node.isName()) {
                        staleVars.add(scope.getVar(node.getString()));
                    }
                }
            }, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.isGlobal() || var.isExtern()) || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private boolean isInlinableObject(java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            boolean ret = false;
            java.util.Set<java.lang.String> validProperties = com.google.common.collect.Sets.newHashSet();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs) {
                com.google.javascript.rhino.Node name = ref.getNode();
                com.google.javascript.rhino.Node parent = ref.getParent();
                com.google.javascript.rhino.Node gramps = ref.getGrandparent();
                if (parent.isGetProp()) {
                    com.google.common.base.Preconditions.checkState(parent.getFirstChild() == name);
                    if (gramps.isCall() && (gramps.getFirstChild() == parent)) {
                        return false;
                    }
                    java.lang.String propName = parent.getLastChild().getString();
                    if (!validProperties.contains(propName)) {
                        if (com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
                            validProperties.add(propName);
                        } else {
                            return false;
                        }
                    }
                    continue;
                }
                if (!isVarOrAssignExprLhs(name)) {
                    return false;
                }
                com.google.javascript.rhino.Node val = ref.getAssignedValue();
                if (val == null) {
                    continue;
                }
                if (!val.isObjectLit()) {
                    return false;
                }
                for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                    if (child.isGetterDef() || child.isSetterDef()) {
                        return false;
                    }
                    validProperties.add(child.getString());
                    com.google.javascript.rhino.Node childVal = child.getFirstChild();
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference t : refs) {
                        com.google.javascript.rhino.Node refNode = t.getParent();
                        while (!com.google.javascript.jscomp.NodeUtil.isStatementBlock(refNode)) {
                            if (refNode == childVal) {
                                return false;
                            }
                            refNode = refNode.getParent();
                        } 
                    }
                }
                ret = true;
            }
            return ret;
        }

        private boolean isVarOrAssignExprLhs(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return parent.isVar() || ((parent.isAssign() && (parent.getFirstChild() == n)) && parent.getParent().isExprResult());
        }

        private java.util.Map<java.lang.String, java.lang.String> computeVarList(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = com.google.common.collect.Maps.newLinkedHashMap();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    com.google.javascript.rhino.Node val = ref.getAssignedValue();
                    if (val != null) {
                        com.google.common.base.Preconditions.checkState(val.isObjectLit());
                        for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                            java.lang.String varname = child.getString();
                            if (varmap.containsKey(varname)) {
                                continue;
                            }
                            java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                            varmap.put(varname, var);
                        }
                    }
                } else if (ref.getParent().isVar()) {
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String varname = getprop.getLastChild().getString();
                    if (varmap.containsKey(varname)) {
                        continue;
                    }
                    java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                    varmap.put(varname, var);
                }
            }
            return varmap;
        }

        private void fillInitialValues(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals) {
            com.google.javascript.rhino.Node object = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(object.isObjectLit());
            for (com.google.javascript.rhino.Node key = object.getFirstChild(); key != null; key = key.getNext()) {
                initvals.put(key.getString(), key.removeFirstChild());
            }
        }

        private void replaceAssignmentExpression(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, java.util.Map<java.lang.String, java.lang.String> varmap) {
            java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.rhino.Node val = ref.getAssignedValue();
            blacklistVarReferencesInTree(val, v.scope);
            com.google.common.base.Preconditions.checkState(val.isObjectLit());
            java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());
            for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {
                java.lang.String var = key.getString();
                com.google.javascript.rhino.Node value = key.removeFirstChild();
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), value));
                all.remove(var);
            }
            for (java.lang.String var : all) {
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));
            }
            com.google.javascript.rhino.Node replacement;
            if (nodes.isEmpty()) {
                replacement = com.google.javascript.rhino.IR.trueNode();
            } else {
                nodes.add(com.google.javascript.rhino.IR.trueNode());
                nodes = com.google.common.collect.Lists.reverse(nodes);
                replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                com.google.javascript.rhino.Node cur = replacement;
                int i;
                for (i = 0; i < (nodes.size() - 2); i++) {
                    cur.addChildToFront(nodes.get(i));
                    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                    cur.addChildToFront(t);
                    cur = t;
                }
                cur.addChildToFront(nodes.get(i));
                cur.addChildToFront(nodes.get(i + 1));
            }
            com.google.javascript.rhino.Node replace = ref.getParent();
            replacement.copyInformationFromForTree(replace);
            if (replace.isVar()) {
                replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));
            } else {
                replace.getParent().replaceChild(replace, replacement);
            }
        }

        private void splitObject(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = computeVarList(v, referenceInfo);
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals = com.google.common.collect.Maps.newHashMap();
            com.google.javascript.rhino.Node vnode;
            boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar();
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(37).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier",com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("initvals",initvals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("declaration",declaration);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("varmap",varmap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("defined",defined);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("referenceInfo",referenceInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.compiler",com.google.javascript.jscomp.InlineObjectLiterals.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(37).collectionEnds();
            }
            if (runtimeAngelicValue) if (defined) {
                vnode = init.getParent();
                fillInitialValues(init, initvals);
            } else {
                vnode = v.getScope().getRootNode().getLastChild().getFirstChild();
            }
            for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : varmap.entrySet()) {
                com.google.javascript.rhino.Node val = initvals.get(entry.getKey());
                com.google.javascript.rhino.Node varnode = com.google.javascript.jscomp.NodeUtil.newVarNode(entry.getValue(), val);
                if (val == null) {
                    varnode.copyInformationFromForTree(vnode);
                } else {
                    blacklistVarReferencesInTree(val, v.scope);
                }
                vnode.getParent().addChildBefore(varnode, vnode);
            }
            if (defined) {
                vnode.getParent().removeChild(vnode);
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (defined && (ref == init)) {
                    continue;
                }
                if (ref.isLvalue()) {
                    replaceAssignmentExpression(v, ref, varmap);
                } else if (ref.getParent().isVar()) {
                    ref.getGrandparent().removeChild(ref.getParent());
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String var = getprop.getChildAtIndex(1).getString();
                    com.google.common.base.Preconditions.checkState(varmap.containsKey(var));
                    com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.name(varmap.get(var));
                    replacement.copyInformationFrom(getprop);
                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                }
            }
            compiler.reportCodeChange();
        }
    }
}
[140436] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659782935712
GPR[EPVATF]-1659782936037
GPR[SPS]-1659782936037
[141310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:410.
GPR[EPS]-1659782936587
GPR[ESUN]-1659782936587
GPR[SSUN]-1659782936587
-1147408099
GPR[ESUN]-1659782936814
GPR[SSUN]-1659782936814
-1147408099
GPR[ESUN]-1659782937038
GPR[SSUN]-1659782937038
-1147408099
GPR[ESUN]-1659782937262
GPR[SSUN]-1659782937262
-1147408099
GPR[ESUN]-1659782937483
GPR[SSUN]-1659782937483
-1147408099
GPR[ESUN]-1659782937708
GPR[SSUN]-1659782937708
-1147408099
GPR[SPVATF]-1659782937957
GPR[EPVATF]-1659782938287
GPR[SPS]-1659782938287
[143566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:289.
GPR[EPS]-1659782938842
GPR[SPVATF]-1659782938843
GPR[EPVATF]-1659782939169
GPR[SPS]-1659782939169
[144444] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:289.
GPR[EPS]-1659782939720
GPR[ESUN]-1659782939720
GPR[SSUN]-1659782939720
-1147408099
GPR[SPVATF]-1659782939946
GPR[EPVATF]-1659782940273
GPR[SPS]-1659782940273
[145559] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:277.
GPR[EPS]-1659782940835
GPR[ESUN]-1659782940835
GPR[SSUN]-1659782940835
-1147408099
GPR[SPVATF]-1659782941066
GPR[EPVATF]-1659782941395
GPR[SPS]-1659782941395
[146705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:276.
GPR[EPS]-1659782941981
GPR[ESUN]-1659782941981
GPR[SSUN]-1659782941981
-1147408099
GPR[SPVATF]-1659782942209
GPR[EPVATF]-1659782942539
GPR[SPS]-1659782942539
[147813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:275.
GPR[EPS]-1659782943089
GPR[SPVATF]-1659782943089
GPR[EPVATF]-1659782944239
GPR[SPS]-1659782944239
[149642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:275.
GPR[EPS]-1659782944918
GPR[ESUN]-1659782944918
GPR[SSUN]-1659782944918
-1147408099
GPR[ESUN]-1659782945144
GPR[SSUN]-1659782945144
-1147408099
GPR[SPVATF]-1659782945373
GPR[EPVATF]-1659782945696
GPR[SPS]-1659782945696
[150966] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:273.
GPR[EPS]-1659782946242
GPR[SPVATF]-1659782946242
GPR[EPVATF]-1659782946559
GPR[SPS]-1659782946559
[151830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:273.
GPR[EPS]-1659782947106
GPR[ESUN]-1659782947106
GPR[SSUN]-1659782947106
-1147408099
GPR[SPVATF]-1659782947337
GPR[EPVATF]-1659782947661
GPR[SPS]-1659782947661
[152953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:272.
GPR[EPS]-1659782948229
GPR[ESUN]-1659782948229
GPR[SSUN]-1659782948230
-1147408099
GPR[ESUN]-1659782948460
GPR[SSUN]-1659782948460
-1147408099
GPR[ESUN]-1659782948684
GPR[SSUN]-1659782948684
-1147408099
GPR[SPVATF]-1659782948911
GPR[EPVATF]-1659782949225
GPR[SPS]-1659782949225
GPR[EPS]-1659782955174
GPR[ESUN]-1659782955174
GPR[SSUN]-1659782955174
-1147408099
GPR[ESUN]-1659782955406
GPR[SSUN]-1659782955406
-1147408099
GPR[ESUN]-1659782955632
GPR[SSUN]-1659782955632
-1147408099
GPR[SPVATF]-1659782955855
GPR[EPVATF]-1659782956179
GPR[SPS]-1659782956179
[161509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:97.
GPR[EPS]-1659782956785
GPR[ESUN]-1659782956785
GPR[SSUN]-1659782956785
2433571
GPR[SPVATF]-1659782957024
GPR[EPVATF]-1659782957349
GPR[SPS]-1659782957349
[162729] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:946.
GPR[EPS]-1659782958005
GPR[ESUN]-1659782958005
GPR[SSUN]-1659782958005
80988634
GPR[ESUN]-1659782958179
GPR[SSUN]-1659782958179
-1147408099
GPR[SPVATF]-1659782958402
GPR[EPVATF]-1659782958741
GPR[SPS]-1659782958741
[164024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:186.
GPR[EPS]-1659782959300
GPR[SPVATF]-1659782959300
GPR[EPVATF]-1659782959644
GPR[SPS]-1659782959644
GPR[EPS]-1659783005538
GPR[ESUN]-1659783005539
GPR[SSUN]-1659783005539
-1147408099
GPR[ESUN]-1659783005867
GPR[SSUN]-1659783005867
-1966087783
GPR[SPVATF]-1659783006054
GPR[EPVATF]-1659783006120
[210844] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783006120
GPR[SSUN]-1659783006120
-1966087783
GPR[SPVATF]-1659783006307
GPR[EPVATF]-1659783006372
[211096] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783006372
GPR[SSUN]-1659783006372
-1966087783
GPR[SPVATF]-1659783006558
GPR[EPVATF]-1659783006624
[211348] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783006624
GPR[SSUN]-1659783006624
-1966087783
GPR[SPVATF]-1659783006836
GPR[EPVATF]-1659783006901
[211625] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783006901
GPR[SSUN]-1659783006901
-1966087783
GPR[SPVATF]-1659783007090
GPR[EPVATF]-1659783007155
[211879] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783007155
GPR[SSUN]-1659783007155
-1966087783
GPR[SPVATF]-1659783007345
GPR[EPVATF]-1659783007410
[212134] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659783007410
GPR[EPVATF]-1659783007472
[212197] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783007473
GPR[SSUN]-1659783007473
-1966087783
GPR[ESUN]-1659783007661
GPR[SSUN]-1659783007661
2433571
GPR[SPVATF]-1659783007896
GPR[EPVATF]-1659783008213
GPR[SPS]-1659783008213
[213579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659783008855
GPR[SPVATF]-1659783008855
GPR[EPVATF]-1659783009170
GPR[SPS]-1659783009170
[214542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659783009818
GPR[ESUN]-1659783009818
GPR[SSUN]-1659783009818
2433571
GPR[SPVATF]-1659783010053
GPR[EPVATF]-1659783010370
GPR[SPS]-1659783010370
[215749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:939.
GPR[EPS]-1659783011025
GPR[ESUN]-1659783011025
GPR[SSUN]-1659783011025
2433571
GPR[ESUN]-1659783011258
GPR[SSUN]-1659783011258
2433571
GPR[ESUN]-1659783011487
GPR[SSUN]-1659783011487
-675467674
GPR[ESUN]-1659783011659
GPR[SSUN]-1659783011659
2433571
GPR[SPVATF]-1659783011887
GPR[EPVATF]-1659783012205
GPR[SPS]-1659783012205
[217565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:950.
GPR[EPS]-1659783012841
GPR[ESUN]-1659783012841
GPR[SSUN]-1659783012841
2433571
GPR[SPVATF]-1659783013076
GPR[EPVATF]-1659783013398
GPR[SPS]-1659783013398
[218776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:949.
GPR[EPS]-1659783014052
GPR[ESUN]-1659783014052
GPR[SSUN]-1659783014052
-1147408099
GPR[SPVATF]-1659783014276
GPR[EPVATF]-1659783014597
GPR[SPS]-1659783014597
[219860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:169.
GPR[EPS]-1659783015136
GPR[SPVATF]-1659783015136
GPR[EPVATF]-1659783015461
GPR[SPS]-1659783015461
GPR[EPS]-1659783031953
GPR[ESUN]-1659783031953
GPR[SSUN]-1659783031953
-1147408099
GPR[SPVATF]-1659783032240
GPR[EPVATF]-1659783032577
GPR[SPS]-1659783032577
[237844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:167.
GPR[EPS]-1659783033120
GPR[ESUN]-1659783033120
GPR[SSUN]-1659783033120
80988634
GPR[ESUN]-1659783033295
GPR[SSUN]-1659783033295
-1147408099
GPR[ESUN]-1659783033528
GPR[SSUN]-1659783033528
-1147408099
GPR[SPVATF]-1659783033753
GPR[EPVATF]-1659783034087
GPR[SPS]-1659783034087
[612496] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659783407772
GPR[SSUN]-1659783407772
-1147408099
GPR[SPVATF]-1659783408164
GPR[EPVATF]-1659783408497
GPR[SPS]-1659783408497
[614006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:237.
GPR[EPS]-1659783409282
GPR[SPVATF]-1659783409282
GPR[EPVATF]-1659783409904
GPR[SPS]-1659783409904
GPR[EPS]-1659783423354
GPR[ESUN]-1659783423354
GPR[SSUN]-1659783423354
-1147408099
GPR[SPVATF]-1659783423585
GPR[EPVATF]-1659783423900
GPR[SPS]-1659783423900
[629172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:236.
GPR[EPS]-1659783424448
GPR[ESUN]-1659783424448
GPR[SSUN]-1659783424448
-1147408099
GPR[ESUN]-1659783424676
GPR[SSUN]-1659783424676
-1147408099
GPR[SPVATF]-1659783424923
GPR[EPVATF]-1659783425238
GPR[SPS]-1659783425238
[630495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:234.
GPR[EPS]-1659783425771
GPR[ESUN]-1659783425772
GPR[SSUN]-1659783425772
-1147408099
GPR[ESUN]-1659783425997
GPR[SSUN]-1659783425997
-1147408099
GPR[SPVATF]-1659783426220
GPR[EPVATF]-1659783426527
GPR[SPS]-1659783426527
GPR[EPS]-1659783439258
GPR[ESUN]-1659783439258
GPR[SSUN]-1659783439258
-1147408099
GPR[SPVATF]-1659783439487
GPR[EPVATF]-1659783439796
GPR[SPS]-1659783439796
[645066] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:222.
GPR[EPS]-1659783440342
GPR[SPVATF]-1659783440342
GPR[EPVATF]-1659783440648
GPR[SPS]-1659783440648
GPR[EPS]-1659783450639
GPR[ESUN]-1659783450639
GPR[SSUN]-1659783450639
-1147408099
GPR[SPVATF]-1659783450865
GPR[EPVATF]-1659783451174
GPR[SPS]-1659783451174
[656434] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:209.
GPR[EPS]-1659783451710
GPR[ESUN]-1659783451710
GPR[SSUN]-1659783451710
-718432441
GPR[SPVATF]-1659783451927
GPR[EPVATF]-1659783452233
GPR[SPS]-1659783452233
[657770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:647.
GPR[EPS]-1659783453046
GPR[ESUN]-1659783453046
GPR[SSUN]-1659783453046
-718432441
GPR[SPVATF]-1659783453262
GPR[EPVATF]-1659783453573
GPR[SPS]-1659783453573
[659001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:646.
GPR[EPS]-1659783454277
GPR[ESUN]-1659783454277
GPR[SSUN]-1659783454277
-718432441
GPR[SPVATF]-1659783454490
GPR[EPVATF]-1659783454801
GPR[SPS]-1659783454801
[660222] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:645.
GPR[EPS]-1659783455498
GPR[ESUN]-1659783455498
GPR[SSUN]-1659783455498
-718432441
GPR[SPVATF]-1659783455734
GPR[EPVATF]-1659783456040
GPR[SPS]-1659783456040
[661475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:644.
GPR[EPS]-1659783456751
GPR[ESUN]-1659783456751
GPR[SSUN]-1659783456751
-1147408099
GPR[ESUN]-1659783456980
GPR[SSUN]-1659783456980
-1147408099
GPR[SPVATF]-1659783457204
GPR[EPVATF]-1659783457530
GPR[SPS]-1659783457530
GPR[EPS]-1659783474903
GPR[ESUN]-1659783474903
GPR[SSUN]-1659783474903
-1147408099
GPR[SPVATF]-1659783475252
GPR[EPVATF]-1659783475564
GPR[SPS]-1659783475564
GPR[EPS]-1659783485368
GPR[ESUN]-1659783485369
GPR[SSUN]-1659783485369
-132053243
GPR[SPVATF]-1659783485562
GPR[EPVATF]-1659783485626
[690350] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783485626
GPR[SSUN]-1659783485626
-132053243
GPR[SPVATF]-1659783485814
GPR[EPVATF]-1659783485880
[690604] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783485880
GPR[SSUN]-1659783485880
-132053243
GPR[SPVATF]-1659783486069
GPR[EPVATF]-1659783486135
[690859] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783486135
GPR[SSUN]-1659783486135
-132053243
GPR[SPVATF]-1659783486325
GPR[EPVATF]-1659783486390
[691114] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659783486390
GPR[EPVATF]-1659783486454
[691179] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783486455
GPR[SSUN]-1659783486455
-132053243
GPR[ESUN]-1659783486641
GPR[SSUN]-1659783486641
80988634
GPR[ESUN]-1659783486813
GPR[SSUN]-1659783486813
-132053243
GPR[ESUN]-1659783486998
GPR[SSUN]-1659783486998
-132053243
GPR[SPVATF]-1659783487185
GPR[EPVATF]-1659783487252
[691976] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659783487252
GPR[EPVATF]-1659783487315
[692040] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783487316
GPR[SSUN]-1659783487316
-132053243
GPR[ESUN]-1659783487504
GPR[SSUN]-1659783487504
-132053243
GPR[ESUN]-1659783487690
GPR[SSUN]-1659783487690
-132053243
GPR[ESUN]-1659783487888
GPR[SSUN]-1659783487888
-132053243
GPR[SPVATF]-1659783488078
GPR[EPVATF]-1659783488142
[692866] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659783488142
GPR[EPVATF]-1659783488207
[692931] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783488207
GPR[SSUN]-1659783488207
-132053243
GPR[SPVATF]-1659783488413
GPR[EPVATF]-1659783488479
[693203] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783488479
GPR[SSUN]-1659783488479
2433571
GPR[ESUN]-1659783488733
GPR[SSUN]-1659783488733
-1147408099
GPR[SPVATF]-1659783488990
GPR[EPVATF]-1659783489320
GPR[SPS]-1659783489320
[694692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:208.
GPR[EPS]-1659783489968
GPR[SPVATF]-1659783489969
GPR[EPVATF]-1659783490404
GPR[SPS]-1659783490404
GPR[EPS]-1659783504355
GPR[ESUN]-1659783504356
GPR[SSUN]-1659783504356
-1147408099
GPR[SPVATF]-1659783504588
GPR[EPVATF]-1659783504908
GPR[SPS]-1659783504908
[710181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:202.
GPR[EPS]-1659783505457
GPR[SPVATF]-1659783505457
GPR[EPVATF]-1659783505770
GPR[SPS]-1659783505770
GPR[EPS]-1659783517523
GPR[ESUN]-1659783517523
GPR[SSUN]-1659783517523
-1147408099
GPR[ESUN]-1659783517907
GPR[SSUN]-1659783517907
80988634
GPR[ESUN]-1659783518220
GPR[SSUN]-1659783518220
-132053243
GPR[SPVATF]-1659783518588
GPR[EPVATF]-1659783518677
[723401] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783518677
GPR[SSUN]-1659783518677
-132053243
GPR[SPVATF]-1659783519026
GPR[EPVATF]-1659783519112
[723836] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783519112
GPR[SSUN]-1659783519112
-132053243
GPR[SPVATF]-1659783519475
GPR[EPVATF]-1659783519558
[724282] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659783519558
GPR[EPVATF]-1659783519641
[724365] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783519641
GPR[SSUN]-1659783519641
GPR[ESUN]-1659783519641
GPR[SSUN]-1659783519641
GPR[ESUN]-1659783519641
GPR[SSUN]-1659783519641
GPR[ESUN]-1659783519641
GPR[SSUN]-1659783519641
GPR[ESUN]-1659783519641
GPR[SSUN]-1659783519641
-1345859678
GPR[ESUN]-1659783520170
GPR[SSUN]-1659783520170
80988634
GPR[ESUN]-1659783520746
GPR[SSUN]-1659783520746
-132053243
GPR[ESUN]-1659783521318
GPR[SSUN]-1659783521318
-132053243
GPR[SPVATF]-1659783521507
GPR[EPVATF]-1659783521573
[726297] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659783521574
GPR[EPVATF]-1659783521637
[726361] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783521637
GPR[SSUN]-1659783521637
-132053243
GPR[ESUN]-1659783521827
GPR[SSUN]-1659783521827
2433571
GPR[SPVATF]-1659783522061
GPR[EPVATF]-1659783522414
GPR[SPS]-1659783522414
[728540] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:975.
GPR[EPS]-1659783523816
GPR[ESUN]-1659783523816
GPR[SSUN]-1659783523816
2433571
GPR[SPVATF]-1659783524068
GPR[EPVATF]-1659783524399
GPR[SPS]-1659783524399
[729776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659783525052
GPR[ESUN]-1659783525052
GPR[SSUN]-1659783525052
2433571
GPR[SPVATF]-1659783525292
GPR[EPVATF]-1659783525613
GPR[SPS]-1659783525613
[730985] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(82).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(82).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[730985] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659783526261
GPR[SSUN]-1659783526261
2433571
GPR[SPVATF]-1659783526510
GPR[EPVATF]-1659783526835
GPR[SPS]-1659783526835
[732181] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(83).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[732182] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659783527458
GPR[SSUN]-1659783527458
2433571
GPR[SPVATF]-1659783527739
GPR[EPVATF]-1659783528228
GPR[SPS]-1659783528228
[734441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659783529717
GPR[ESUN]-1659783529717
GPR[SSUN]-1659783529717
2433571
GPR[SPVATF]-1659783530149
GPR[EPVATF]-1659783530661
GPR[SPS]-1659783530661
[736497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:966.
GPR[EPS]-1659783531773
GPR[ESUN]-1659783531773
GPR[SSUN]-1659783531773
2433571
GPR[SPVATF]-1659783532200
GPR[EPVATF]-1659783532714
GPR[SPS]-1659783532714
[738527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659783533803
GPR[ESUN]-1659783533803
GPR[SSUN]-1659783533803
2433571
GPR[ESUN]-1659783534044
GPR[SSUN]-1659783534044
2433571
GPR[ESUN]-1659783534291
GPR[SSUN]-1659783534291
2433571
GPR[SPVATF]-1659783534533
GPR[EPVATF]-1659783535119
GPR[SPS]-1659783535119
[744389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659783539665
GPR[ESUN]-1659783539665
GPR[SSUN]-1659783539665
2433571
GPR[SPVATF]-1659783540074
GPR[EPVATF]-1659783540584
GPR[SPS]-1659783540584
[746380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659783541656
GPR[ESUN]-1659783541656
GPR[SSUN]-1659783541656
2433571
GPR[SPVATF]-1659783541983
GPR[EPVATF]-1659783542304
GPR[SPS]-1659783542304
[747681] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:868.
GPR[EPS]-1659783542957
GPR[ESUN]-1659783542957
GPR[SSUN]-1659783542957
2433571
GPR[SPVATF]-1659783543196
GPR[EPVATF]-1659783543521
GPR[SPS]-1659783543521
[748867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:867.
GPR[EPS]-1659783544143
GPR[ESUN]-1659783544143
GPR[SSUN]-1659783544143
2433571
GPR[SPVATF]-1659783544396
GPR[EPVATF]-1659783544721
GPR[SPS]-1659783544721
[750090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:862.
GPR[EPS]-1659783545366
GPR[ESUN]-1659783545366
GPR[SSUN]-1659783545366
2433571
GPR[ESUN]-1659783545602
GPR[SSUN]-1659783545602
2433571
GPR[ESUN]-1659783545844
GPR[SSUN]-1659783545844
2433571
GPR[ESUN]-1659783546086
GPR[SSUN]-1659783546086
881600600
GPR[ESUN]-1659783546286
GPR[SSUN]-1659783546286
-132053243
GPR[SPVATF]-1659783546485
GPR[EPVATF]-1659783546552
[751276] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783546552
GPR[SSUN]-1659783546553
-132053243
GPR[SPVATF]-1659783546747
GPR[EPVATF]-1659783546817
[751541] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783546817
GPR[SSUN]-1659783546817
-132053243
GPR[SPVATF]-1659783547024
GPR[EPVATF]-1659783547089
[751813] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783547090
GPR[SSUN]-1659783547090
-132053243
GPR[SPVATF]-1659783547285
GPR[EPVATF]-1659783547351
[752075] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783547351
GPR[SSUN]-1659783547351
-132053243
GPR[SPVATF]-1659783547551
GPR[EPVATF]-1659783547618
[752342] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783547618
GPR[SSUN]-1659783547618
-132053243
GPR[ESUN]-1659783547816
GPR[SSUN]-1659783547816
-1966087783
GPR[ESUN]-1659783548006
GPR[SSUN]-1659783548006
80988634
GPR[ESUN]-1659783548187
GPR[SSUN]-1659783548187
-1966087783
GPR[SPVATF]-1659783548380
GPR[EPVATF]-1659783548450
[753174] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659783548450
GPR[EPVATF]-1659783548517
[753241] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783548517
GPR[SSUN]-1659783548517
2433571
GPR[SPVATF]-1659783548761
GPR[EPVATF]-1659783549096
GPR[SPS]-1659783549096
[754442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1019.
GPR[EPS]-1659783549718
GPR[ESUN]-1659783549718
GPR[SSUN]-1659783549718
2433571
GPR[SPVATF]-1659783549975
GPR[EPVATF]-1659783550311
GPR[SPS]-1659783550311
[755658] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1012.
GPR[EPS]-1659783550934
GPR[ESUN]-1659783550934
GPR[SSUN]-1659783550934
2433571
GPR[ESUN]-1659783551178
GPR[SSUN]-1659783551178
2433571
GPR[ESUN]-1659783551429
GPR[SSUN]-1659783551429
2433571
GPR[SPVATF]-1659783551670
GPR[EPVATF]-1659783552011
GPR[SPS]-1659783552011
[757357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1016.
GPR[EPS]-1659783552633
GPR[ESUN]-1659783552633
GPR[SSUN]-1659783552633
2433571
GPR[SPVATF]-1659783552882
GPR[EPVATF]-1659783553234
GPR[SPS]-1659783553234
[758561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1015.
GPR[EPS]-1659783553838
GPR[ESUN]-1659783553838
GPR[SSUN]-1659783553838
2433571
GPR[SPVATF]-1659783554082
GPR[EPVATF]-1659783554425
GPR[SPS]-1659783554425
[759762] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1014.
GPR[EPS]-1659783555038
GPR[ESUN]-1659783555038
GPR[SSUN]-1659783555038
2433571
GPR[SPVATF]-1659783555281
GPR[EPVATF]-1659783555650
GPR[SPS]-1659783555650
[761000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1011.
GPR[EPS]-1659783556276
GPR[ESUN]-1659783556276
GPR[SSUN]-1659783556276
2433571
GPR[ESUN]-1659783556522
GPR[SSUN]-1659783556522
2433571
GPR[SPVATF]-1659783556764
GPR[EPVATF]-1659783557115
GPR[SPS]-1659783557115
[762477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1006.
GPR[EPS]-1659783557753
GPR[ESUN]-1659783557754
GPR[SSUN]-1659783557754
2433571
GPR[ESUN]-1659783557996
GPR[SSUN]-1659783557996
2433571
GPR[SPVATF]-1659783558261
GPR[EPVATF]-1659783558618
GPR[SPS]-1659783558618
[764031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659783559307
GPR[ESUN]-1659783559307
GPR[SSUN]-1659783559308
2433571
GPR[ESUN]-1659783559552
GPR[SSUN]-1659783559552
2433571
GPR[ESUN]-1659783559790
GPR[SSUN]-1659783559790
-1147408099
GPR[ESUN]-1659783560025
GPR[SSUN]-1659783560025
-1147408099
GPR[ESUN]-1659783560257
GPR[SSUN]-1659783560257
-1147408099
GPR[SPVATF]-1659783560487
GPR[EPVATF]-1659783560864
GPR[SPS]-1659783560864
[766165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:197.
GPR[EPS]-1659783561441
GPR[SPVATF]-1659783561442
GPR[EPVATF]-1659783561795
GPR[SPS]-1659783561795
GPR[EPS]-1659783573850
GPR[ESUN]-1659783573851
GPR[SSUN]-1659783573851
-1147408099
GPR[SPVATF]-1659783574095
GPR[EPVATF]-1659783574457
GPR[SPS]-1659783574457
GPR[EPS]-1659783594873
GPR[SPVATF]-1659783594873
GPR[EPVATF]-1659783595252
GPR[SPS]-1659783595252
GPR[EPS]-1659783610709
GPR[ESUN]-1659783610709
GPR[SSUN]-1659783610709
-1147408099
GPR[ESUN]-1659783611071
GPR[SSUN]-1659783611071
-1147408099
GPR[ESUN]-1659783611308
GPR[SSUN]-1659783611308
-1147408099
GPR[ESUN]-1659783611549
GPR[SSUN]-1659783611549
-1147408099
GPR[SPVATF]-1659783611789
GPR[EPVATF]-1659783612174
GPR[SPS]-1659783612175
GPR[EPS]-1659783668150
GPR[ESUN]-1659783668150
GPR[SSUN]-1659783668150
-1147408099
GPR[ESUN]-1659783668428
GPR[SSUN]-1659783668428
-1147408099
GPR[ESUN]-1659783668655
GPR[SSUN]-1659783668655
-1147408099
GPR[ESUN]-1659783668884
GPR[SSUN]-1659783668884
-1147408099
GPR[SPVATF]-1659783669144
GPR[EPVATF]-1659783669500
GPR[SPS]-1659783669500
GPR[EPS]-1659783679018
GPR[SPVATF]-1659783679018
GPR[EPVATF]-1659783679409
GPR[SPS]-1659783679409
GPR[EPS]-1659783698487
GPR[ESUN]-1659783698487
GPR[SSUN]-1659783698488
-1147408099
GPR[ESUN]-1659783698721
GPR[SSUN]-1659783698721
80988634
GPR[ESUN]-1659783698897
GPR[SSUN]-1659783698897
2433571
GPR[SPVATF]-1659783699166
GPR[EPVATF]-1659783699567
GPR[SPS]-1659783699567
[904918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:937.
GPR[EPS]-1659783700194
GPR[ESUN]-1659783700194
GPR[SSUN]-1659783700194
2433571
GPR[SPVATF]-1659783700434
GPR[EPVATF]-1659783700840
GPR[SPS]-1659783700840
[913327] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:936.
GPR[EPS]-1659783708603
GPR[ESUN]-1659783708603
GPR[SSUN]-1659783708603
2433571
GPR[SPVATF]-1659783708854
GPR[EPVATF]-1659783709258
GPR[SPS]-1659783709258
[914628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:980.
GPR[EPS]-1659783709904
GPR[SPVATF]-1659783709904
GPR[EPVATF]-1659783710307
GPR[SPS]-1659783710307
[915663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:980.
GPR[EPS]-1659783710939
GPR[ESUN]-1659783710939
GPR[SSUN]-1659783710939
2433571
GPR[SPVATF]-1659783711174
GPR[EPVATF]-1659783711587
GPR[SPS]-1659783711587
[916950] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659783712226
GPR[ESUN]-1659783712227
GPR[SSUN]-1659783712227
2433571
GPR[ESUN]-1659783712462
GPR[SSUN]-1659783712462
2433571
GPR[SPVATF]-1659783712697
GPR[EPVATF]-1659783713107
GPR[SPS]-1659783713107
[918462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659783713738
GPR[SPVATF]-1659783713739
GPR[EPVATF]-1659783714148
GPR[SPS]-1659783714148
[919532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659783714808
GPR[ESUN]-1659783714808
GPR[SSUN]-1659783714808
2433571
GPR[ESUN]-1659783715044
GPR[SSUN]-1659783715045
2433571
GPR[ESUN]-1659783715277
GPR[SSUN]-1659783715277
2433571
GPR[ESUN]-1659783715509
GPR[SSUN]-1659783715509
2433571
GPR[SPVATF]-1659783715742
GPR[EPVATF]-1659783716164
GPR[SPS]-1659783716164
[921530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:871.
GPR[EPS]-1659783716806
GPR[ESUN]-1659783716806
GPR[SSUN]-1659783716806
2433571
GPR[SPVATF]-1659783717057
GPR[EPVATF]-1659783717481
GPR[SPS]-1659783717481
[922837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:866.
GPR[EPS]-1659783718113
GPR[ESUN]-1659783718114
GPR[SSUN]-1659783718114
2433571
GPR[ESUN]-1659783718349
GPR[SSUN]-1659783718349
2433571
GPR[SPVATF]-1659783718582
GPR[EPVATF]-1659783719010
GPR[SPS]-1659783719010
[924366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:861.
GPR[EPS]-1659783719642
GPR[ESUN]-1659783719642
GPR[SSUN]-1659783719642
2433571
GPR[ESUN]-1659783719896
GPR[SSUN]-1659783719896
175865530
GPR[SPVATF]-1659783720072
GPR[EPVATF]-1659783720505
GPR[SPS]-1659783720505
[925631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:94.
GPR[EPS]-1659783720908
GPR[ESUN]-1659783720908
GPR[SSUN]-1659783720908
1187751237
GPR[ESUN]-1659783721199
GPR[SSUN]-1659783721199
1187751237
GPR[SPVATF]-1659783721482
GPR[EPVATF]-1659783721902
GPR[SPS]-1659783721902
[927395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2725.
GPR[EPS]-1659783722671
GPR[ESUN]-1659783722671
GPR[SSUN]-1659783722671
1187751237
GPR[SPVATF]-1659783722952
GPR[EPVATF]-1659783723377
GPR[SPS]-1659783723377
[928825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2724.
GPR[EPS]-1659783724101
GPR[SPVATF]-1659783724102
GPR[EPVATF]-1659783724530
GPR[SPS]-1659783724530
[929987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2724.
GPR[EPS]-1659783725263
GPR[ESUN]-1659783725264
GPR[SSUN]-1659783725264
1187751237
GPR[SPVATF]-1659783725546
GPR[EPVATF]-1659783725977
GPR[SPS]-1659783725977
[931414] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2722.
GPR[EPS]-1659783726690
GPR[ESUN]-1659783726690
GPR[SSUN]-1659783726690
2433571
GPR[SPVATF]-1659783726929
GPR[EPVATF]-1659783727367
GPR[SPS]-1659783727367
[932761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:948.
GPR[EPS]-1659783728037
GPR[SPVATF]-1659783728037
GPR[EPVATF]-1659783728468
GPR[SPS]-1659783728468
[933912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:948.
GPR[EPS]-1659783729188
GPR[ESUN]-1659783729188
GPR[SSUN]-1659783729188
2433571
GPR[SPVATF]-1659783729425
GPR[EPVATF]-1659783729858
GPR[SPS]-1659783729858
[935225] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:938.
GPR[EPS]-1659783730501
GPR[SPVATF]-1659783730501
GPR[EPVATF]-1659783730930
GPR[SPS]-1659783730930
[936338] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:938.
GPR[EPS]-1659783731614
GPR[ESUN]-1659783731614
GPR[SSUN]-1659783731614
80988634
GPR[ESUN]-1659783731867
GPR[SSUN]-1659783731867
2433571
GPR[ESUN]-1659783732104
GPR[SSUN]-1659783732104
2433571
GPR[SPVATF]-1659783732339
GPR[EPVATF]-1659783732770
GPR[SPS]-1659783732770
[938148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659783733424
GPR[SPVATF]-1659783733424
GPR[EPVATF]-1659783733882
GPR[SPS]-1659783733882
[939263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659783734539
GPR[ESUN]-1659783734539
GPR[SSUN]-1659783734539
2433571
GPR[SPVATF]-1659783734778
GPR[EPVATF]-1659783735209
GPR[SPS]-1659783735209
[940607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659783735883
GPR[SPVATF]-1659783735883
GPR[EPVATF]-1659783736316
GPR[SPS]-1659783736316
[941703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659783736979
GPR[ESUN]-1659783736979
GPR[SSUN]-1659783736979
2433571
GPR[SPVATF]-1659783737216
GPR[EPVATF]-1659783737651
GPR[SPS]-1659783737652
[943012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:952.
GPR[EPS]-1659783738288
GPR[SPVATF]-1659783738288
GPR[EPVATF]-1659783738718
GPR[SPS]-1659783738718
[944081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:952.
GPR[EPS]-1659783739357
GPR[ESUN]-1659783739358
GPR[SSUN]-1659783739358
2433571
GPR[SPVATF]-1659783739611
GPR[EPVATF]-1659783740038
GPR[SPS]-1659783740038
[945442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:935.
GPR[EPS]-1659783740718
GPR[SPVATF]-1659783740719
GPR[EPVATF]-1659783741150
GPR[SPS]-1659783741150
[946557] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:935.
GPR[EPS]-1659783741833
GPR[ESUN]-1659783741833
GPR[SSUN]-1659783741833
2433571
GPR[SPVATF]-1659783742070
GPR[EPVATF]-1659783742498
GPR[SPS]-1659783742498
[947904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:934.
GPR[EPS]-1659783743180
GPR[ESUN]-1659783743180
GPR[SSUN]-1659783743180
2433571
GPR[ESUN]-1659783743421
GPR[SSUN]-1659783743421
2433571
GPR[SPVATF]-1659783743660
GPR[EPVATF]-1659783744090
GPR[SPS]-1659783744090
[949453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:925.
GPR[EPS]-1659783744729
GPR[ESUN]-1659783744729
GPR[SSUN]-1659783744729
2433571
GPR[ESUN]-1659783744965
GPR[SSUN]-1659783744965
-1966087783
GPR[SPVATF]-1659783745157
GPR[EPVATF]-1659783745232
[949956] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659783745232
GPR[EPVATF]-1659783745304
[950028] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659783745304
GPR[SSUN]-1659783745304
-1966087783
GPR[ESUN]-1659783745496
GPR[SSUN]-1659783745496
175865530
GPR[SPVATF]-1659783745670
GPR[EPVATF]-1659783746126
GPR[SPS]-1659783746126
[951268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:73.
GPR[EPS]-1659783746544
GPR[ESUN]-1659783746544
GPR[SSUN]-1659783746544
-1117079791
GPR[ESUN]-1659783746742
GPR[SSUN]-1659783746742
-1117079791
GPR[SPVATF]-1659783746940
GPR[EPVATF]-1659783747415
GPR[SPS]-1659783747415
[952640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:726.
GPR[EPS]-1659783747916
GPR[ESUN]-1659783747916
GPR[SSUN]-1659783747916
-1117079791
GPR[SPVATF]-1659783748116
GPR[EPVATF]-1659783748594
GPR[SPS]-1659783748594
[953831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:725.
GPR[EPS]-1659783749107
GPR[ESUN]-1659783749107
GPR[SSUN]-1659783749107
-1117079791
GPR[SPVATF]-1659783749306
GPR[EPVATF]-1659783749806
GPR[SPS]-1659783749806
[955057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:724.
GPR[EPS]-1659783750333
GPR[ESUN]-1659783750333
GPR[SSUN]-1659783750333
-1117079791
GPR[SPVATF]-1659783750555
GPR[EPVATF]-1659783751029
GPR[SPS]-1659783751029
[956261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:723.
GPR[EPS]-1659783751537
GPR[ESUN]-1659783751537
GPR[SSUN]-1659783751537
-1117079791
GPR[ESUN]-1659783751738
GPR[SSUN]-1659783751738
-1117079791
GPR[SPVATF]-1659783751937
GPR[EPVATF]-1659783752415
GPR[SPS]-1659783752415
[957645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:682.
GPR[EPS]-1659783752921
GPR[ESUN]-1659783752921
GPR[SSUN]-1659783752921
-1117079791
GPR[SPVATF]-1659783753122
GPR[EPVATF]-1659783753603
GPR[SPS]-1659783753603
[958861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:738.
GPR[EPS]-1659783754137
GPR[ESUN]-1659783754137
GPR[SSUN]-1659783754137
-1117079791
GPR[ESUN]-1659783754341
GPR[SSUN]-1659783754341
-1117079791
GPR[SPVATF]-1659783754542
GPR[EPVATF]-1659783755025
GPR[SPS]-1659783755025
[960253] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:730.
GPR[EPS]-1659783755530
GPR[SPVATF]-1659783755530
GPR[EPVATF]-1659783756019
GPR[SPS]-1659783756019
[961249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:730.
GPR[EPS]-1659783756525
GPR[ESUN]-1659783756525
GPR[SSUN]-1659783756525
-1117079791
GPR[SPVATF]-1659783756724
GPR[EPVATF]-1659783757206
GPR[SPS]-1659783757206
[962434] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:674.
GPR[EPS]-1659783757710
GPR[ESUN]-1659783757710
GPR[SSUN]-1659783757710
-1117079791
GPR[SPVATF]-1659783757911
GPR[EPVATF]-1659783758436
GPR[SPS]-1659783758436
[963668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:669.
GPR[EPS]-1659783758944
GPR[ESUN]-1659783758944
GPR[SSUN]-1659783758944
2433571
GPR[ESUN]-1659783759183
GPR[SSUN]-1659783759183
-1147408099
GPR[ESUN]-1659783759417
GPR[SSUN]-1659783759417
-1147408099
GPR[SPVATF]-1659783759647
GPR[EPVATF]-1659783760106
GPR[SPS]-1659783760106
GPR[EPS]-1659783768160
GPR[ESUN]-1659783768160
GPR[SSUN]-1659783768160
-1147408099
GPR[ESUN]-1659783768396
GPR[SSUN]-1659783768396
-1147408099
GPR[ESUN]-1659783768628
GPR[SSUN]-1659783768628
-1147408099
GPR[ESUN]-1659783768860
GPR[SSUN]-1659783768860
-1147408099
GPR[SPVATF]-1659783769091
GPR[EPVATF]-1659783769556
GPR[SPS]-1659783769556
[974857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:89.
GPR[EPS]-1659783770134
GPR[ESUN]-1659783770134
GPR[SSUN]-1659783770134
-1147408099
GPR[SPVATF]-1659783770368
GPR[EPVATF]-1659783770810
GPR[SPS]-1659783770810
[976108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:88.
GPR[EPS]-1659783771385
GPR[SPVATF]-1659783771385
GPR[EPVATF]-1659783771822
GPR[SPS]-1659783771822
GPR[EPS]-1659783972377
GPR[ESUN]-1659783972377
GPR[SSUN]-1659783972377
-1147408099
GPR[ESUN]-1659783972916
GPR[SSUN]-1659783972916
-1147408099
GPR[SPVATF]-1659783973165
GPR[EPVATF]-1659783973618
GPR[SPS]-1659783973618
GPR[EPS]-1659783988715
GPR[ESUN]-1659783988715
GPR[SSUN]-1659783988715
1187751237
GPR[SPVATF]-1659783989033
GPR[EPVATF]-1659783989484
GPR[SPS]-1659783989484
[1194959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2555.
GPR[EPS]-1659783990235
GPR[ESUN]-1659783990235
GPR[SSUN]-1659783990236
1187751237
GPR[SPVATF]-1659783990533
GPR[EPVATF]-1659783990992
GPR[SPS]-1659783990992
[1201198] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2554.
GPR[EPS]-1659783996474
GPR[ESUN]-1659783996474
GPR[SSUN]-1659783996474
1187751237
GPR[SPVATF]-1659783996769
GPR[EPVATF]-1659783997208
GPR[SPS]-1659783997208
[1202751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2553.
GPR[EPS]-1659783998027
GPR[ESUN]-1659783998027
GPR[SSUN]-1659783998028
GPR[ESUN]-1659783998028
GPR[SSUN]-1659783998028
GPR[ESUN]-1659783998028
GPR[SSUN]-1659783998028
GPR[ESUN]-1659783998028
GPR[SSUN]-1659783998028
-1117079791
GPR[SPVATF]-1659783998241
GPR[EPVATF]-1659783999687
GPR[SPS]-1659783999687
[1204958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659784000234
GPR[ESUN]-1659784000234
GPR[SSUN]-1659784000234
1187751237
GPR[ESUN]-1659784000521
GPR[SSUN]-1659784000521
1187751237
GPR[ESUN]-1659784000808
GPR[SSUN]-1659784000808
1187751237
GPR[SPVATF]-1659784001108
GPR[EPVATF]-1659784001512
GPR[SPS]-1659784001512
[1206974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2552.
GPR[EPS]-1659784002250
GPR[SPVATF]-1659784002250
GPR[EPVATF]-1659784002652
GPR[SPS]-1659784002652
[1208129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2552.
GPR[EPS]-1659784003405
GPR[ESUN]-1659784003405
GPR[SSUN]-1659784003405
1187751237
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003697
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003697
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003697
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003697
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003697
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003697
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003697
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003697
GPR[ESUN]-1659784003697
GPR[SSUN]-1659784003698
GPR[ESUN]-1659784003698
GPR[SSUN]-1659784003698
GPR[ESUN]-1659784003698
GPR[SSUN]-1659784003698
GPR[ESUN]-1659784003698
GPR[SSUN]-1659784003698
711965926
GPR[ESUN]-1659784003895
GPR[SSUN]-1659784003895
711965926
GPR[SPVATF]-1659784004082
GPR[EPVATF]-1659784004509
GPR[SPS]-1659784004509
[1209739] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659784005015
GPR[ESUN]-1659784005015
GPR[SSUN]-1659784005015
-132053243
GPR[ESUN]-1659784005250
GPR[SSUN]-1659784005250
-132053243
GPR[SPVATF]-1659784005448
GPR[EPVATF]-1659784005552
[1210276] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659784005552
GPR[SSUN]-1659784005552
GPR[ESUN]-1659784005552
GPR[SSUN]-1659784005552
GPR[ESUN]-1659784005552
GPR[SSUN]-1659784005552
GPR[ESUN]-1659784005552
GPR[SSUN]-1659784005552
-1117079791
GPR[ESUN]-1659784005758
GPR[SSUN]-1659784005759
-1117079791
GPR[SPVATF]-1659784005967
GPR[EPVATF]-1659784006376
GPR[SPS]-1659784006376
[1211624] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659784006900
GPR[SPVATF]-1659784006900
GPR[EPVATF]-1659784007305
GPR[SPS]-1659784007305
[1212564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659784007840
GPR[ESUN]-1659784007840
GPR[SSUN]-1659784007840
-1117079791
GPR[SPVATF]-1659784008049
GPR[EPVATF]-1659784008454
GPR[SPS]-1659784008454
[1213708] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:480.
GPR[EPS]-1659784008984
GPR[ESUN]-1659784008984
GPR[SSUN]-1659784008984
-1117079791
GPR[SPVATF]-1659784009198
GPR[EPVATF]-1659784009606
GPR[SPS]-1659784009606
[1214882] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:479.
GPR[EPS]-1659784010158
GPR[ESUN]-1659784010158
GPR[SSUN]-1659784010158
-1117079791
GPR[ESUN]-1659784010363
GPR[SSUN]-1659784010363
-1117079791
GPR[SPVATF]-1659784010575
GPR[EPVATF]-1659784010980
GPR[SPS]-1659784010981
[1216243] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:128.
GPR[EPS]-1659784011519
GPR[ESUN]-1659784011519
GPR[SSUN]-1659784011519
1187751237
GPR[SPVATF]-1659784011818
GPR[EPVATF]-1659784012198
GPR[SPS]-1659784012198
[1217597] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(164).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.getFirstChild();

        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    static boolean isCallOrNewTarget(com.google.javascript.rhino.Node target) {
        com.google.javascript.rhino.Node parent = target.getParent();
        return ((parent != null) && com.google.javascript.jscomp.NodeUtil.isCallOrNew(parent)) && (parent.getFirstChild() == target);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[1217597] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659784012873
GPR[SSUN]-1659784012873
-1345859678
GPR[SPVATF]-1659784013146
GPR[EPVATF]-1659784013556
GPR[SPS]-1659784013556
[1218930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:912.
GPR[EPS]-1659784014206
GPR[SPVATF]-1659784014207
GPR[EPVATF]-1659784014596
GPR[SPS]-1659784014596
[1219947] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:912.
GPR[EPS]-1659784015223
GPR[ESUN]-1659784015223
GPR[SSUN]-1659784015224
GPR[ESUN]-1659784015224
GPR[SSUN]-1659784015224
704176156
GPR[ESUN]-1659784015423
GPR[SSUN]-1659784015423
704176156
GPR[SPVATF]-1659784015642
GPR[EPVATF]-1659784016048
GPR[SPS]-1659784016048
[1221284] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:208.
GPR[EPS]-1659784016560
GPR[SPVATF]-1659784016561
GPR[EPVATF]-1659784016950
GPR[SPS]-1659784016950
[1222193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:208.
GPR[EPS]-1659784017469
GPR[ESUN]-1659784017469
GPR[SSUN]-1659784017469
704176156
GPR[SPVATF]-1659784017681
GPR[EPVATF]-1659784018099
GPR[SPS]-1659784018099
[1223342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:207.
GPR[EPS]-1659784018618
GPR[ESUN]-1659784018618
GPR[SSUN]-1659784018618
704176156
GPR[SPVATF]-1659784018822
GPR[EPVATF]-1659784019214
GPR[SPS]-1659784019214
[1224475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:150.
GPR[EPS]-1659784019751
GPR[ESUN]-1659784019751
GPR[SSUN]-1659784019751
704176156
GPR[ESUN]-1659784019950
GPR[SSUN]-1659784019950
1795686761
GPR[SPVATF]-1659784020188
GPR[EPVATF]-1659784020542
GPR[SPS]-1659784020542
[1225880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock:716.
GPR[EPS]-1659784021156
GPR[ESUN]-1659784021156
GPR[SSUN]-1659784021156
1795686761
GPR[SPVATF]-1659784021398
GPR[EPVATF]-1659784021759
GPR[SPS]-1659784021759
[1227093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:326.
GPR[EPS]-1659784022369
GPR[SPVATF]-1659784022369
GPR[EPVATF]-1659784022723
GPR[SPS]-1659784022723
[1228095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:326.
GPR[EPS]-1659784023371
GPR[ESUN]-1659784023371
GPR[SSUN]-1659784023371
1795686761
GPR[ESUN]-1659784023609
GPR[SSUN]-1659784023609
-1345859678
GPR[ESUN]-1659784023860
GPR[SSUN]-1659784023860
-1345859678
GPR[SPVATF]-1659784024112
GPR[EPVATF]-1659784024501
GPR[SPS]-1659784024501
GPR[EPS]-1659784394396
GPR[ESUN]-1659784394396
GPR[SSUN]-1659784394396
-1345859678
GPR[SPVATF]-1659784394807
GPR[EPVATF]-1659784395214
GPR[SPS]-1659784395214
[1600578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:919.
GPR[EPS]-1659784395854
GPR[ESUN]-1659784395854
GPR[SSUN]-1659784395854
-1345859678
GPR[SPVATF]-1659784396137
GPR[EPVATF]-1659784396555
GPR[SPS]-1659784396555
[1601913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:906.
GPR[EPS]-1659784397189
GPR[SPVATF]-1659784397189
GPR[EPVATF]-1659784397583
GPR[SPS]-1659784397583
[1602934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:906.
GPR[EPS]-1659784398210
GPR[ESUN]-1659784398210
GPR[SSUN]-1659784398210
-1345859678
GPR[ESUN]-1659784398463
GPR[SSUN]-1659784398463
-1345859678
GPR[SPVATF]-1659784398713
GPR[EPVATF]-1659784399102
GPR[SPS]-1659784399102
[1604488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:903.
GPR[EPS]-1659784399764
GPR[ESUN]-1659784399764
GPR[SSUN]-1659784399764
-1345859678
GPR[ESUN]-1659784400016
GPR[SSUN]-1659784400016
1795686761
GPR[SPVATF]-1659784400253
GPR[EPVATF]-1659784400600
GPR[SPS]-1659784400600
[1605938] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:397.
GPR[EPS]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
GPR[ESUN]-1659784401214
GPR[SSUN]-1659784401214
-1345859678
GPR[SPVATF]-1659784401466
GPR[EPVATF]-1659784401865
GPR[SPS]-1659784401865
[1607258] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:892.
GPR[EPS]-1659784402534
GPR[SPVATF]-1659784402534
GPR[EPVATF]-1659784402941
GPR[SPS]-1659784402941
[1608289] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:892.
GPR[EPS]-1659784403565
GPR[ESUN]-1659784403565
GPR[SSUN]-1659784403565
GPR[ESUN]-1659784403565
GPR[SSUN]-1659784403565
1795686761
GPR[SPVATF]-1659784403806
GPR[EPVATF]-1659784404189
GPR[SPS]-1659784404189
[1609530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock:715.
GPR[EPS]-1659784404806
GPR[SPVATF]-1659784404806
GPR[EPVATF]-1659784405177
GPR[SPS]-1659784405177
[1610520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock:715.
GPR[EPS]-1659784405796
GPR[ESUN]-1659784405796
GPR[SSUN]-1659784405796
1795686761
GPR[SPVATF]-1659784406070
GPR[EPVATF]-1659784406442
GPR[SPS]-1659784406442
[1611790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:325.
GPR[EPS]-1659784407066
GPR[ESUN]-1659784407066
GPR[SSUN]-1659784407066
1795686761
GPR[ESUN]-1659784407310
GPR[SSUN]-1659784407310
1795686761
GPR[SPVATF]-1659784407551
GPR[EPVATF]-1659784407933
GPR[SPS]-1659784407933
[1613272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:323.
GPR[EPS]-1659784408548
GPR[ESUN]-1659784408549
GPR[SSUN]-1659784408549
1795686761
GPR[ESUN]-1659784408796
GPR[SSUN]-1659784408796
1795686761
GPR[SPVATF]-1659784409064
GPR[EPVATF]-1659784409434
GPR[SPS]-1659784409434
[1614625] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceCollectingCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback , com.google.javascript.jscomp.HotSwapCompilerPass , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
    private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap = com.google.common.collect.Maps.newHashMap();

    private final java.util.Deque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock> blockStack = new java.util.ArrayDeque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock>();

    private final com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter;

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior) {
        this(compiler, behavior, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue());
    }

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter) {
        this.compiler = compiler;
        this.behavior = behavior;
        this.varFilter = varFilter;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeTraversal.traverseRoots(compiler, com.google.common.collect.Lists.newArrayList(externs, root), this);
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, scriptRoot, this);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return referenceMap.keySet();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var v) {
        return referenceMap.get(v);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (n.isName()) {
            com.google.javascript.jscomp.Scope.Var v;
            if (n.getString().equals("arguments")) {
                v = t.getScope().getArgumentsVar();
            } else {
                v = t.getScope().getVar(n.getString());
            }
            if ((v != null) && varFilter.apply(v)) {
                addReference(t, v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, t, blockStack.peek()));
            }
        }
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.pop();
        }
    }

    @java.lang.Override
    public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node n = t.getScope().getRootNode();
        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent = (blockStack.isEmpty()) ? null : blockStack.peek();
        blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(parent, n));
    }

    @java.lang.Override
    public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        blockStack.pop();
        if (t.getScope().isGlobal()) {
            compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());
            behavior.afterExitScope(t, compiler.getGlobalVarReferences());
        } else {
            behavior.afterExitScope(t, new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper(referenceMap));
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(blockStack.peek(), n));
        }
        return true;
    }

    private static boolean isBlockBoundary(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DO :
                case com.google.javascript.rhino.Token.FOR :
                case com.google.javascript.rhino.Token.TRY :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return true;
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.OR :
                    return n != parent.getFirstChild();
            }
        }
        return n.isCase();
    }

    private void addReference(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);
        if (referenceInfo == null) {
            referenceInfo = new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection();
            referenceMap.put(v, referenceInfo);
        }
        referenceInfo.add(reference, t, v);
    }

    interface ReferenceMap {
        public abstract com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var);
    }

    private static class ReferenceMapWrapper implements com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap {
        private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap;

        public ReferenceMapWrapper(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {
            this.referenceMap = referenceMap;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var) {
            return referenceMap.get(var);
        }
    }

    interface Behavior {
        public abstract void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap);
    }

    static com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior DO_NOTHING_BEHAVIOR = new com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior() {
        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
        }
    };

    static class ReferenceCollection implements java.lang.Iterable<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> references = com.google.common.collect.Lists.newArrayList();

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> iterator() {
            return references.iterator();
        }

        void add(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.Scope.Var v) {
            references.add(reference);
        }

        protected boolean isWellDefined() {
            int size = references.size();
            if (size == 0) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = getInitializingReference();
            if (init == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(references.get(0).isDeclaration());
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock initBlock = init.getBasicBlock();
            for (int i = 1; i < size; i++) {
                if (!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())) {
                    return false;
                }
            }
            return true;
        }

        boolean isEscaped() {
            com.google.javascript.jscomp.Scope scope = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : references) {
                if (scope == null) {
                    scope = ref.scope;
                } else if (scope != ref.scope) {
                    return true;
                }
            }
            return false;
        }

        private boolean isInitializingDeclarationAt(int index) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
            if (maybeInit.isInitializingDeclaration()) {
                return true;
            }
            return false;
        }

        private boolean isInitializingAssignmentAt(int index) {
            if ((index < references.size()) && (index > 0)) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeDecl = references.get(index - 1);
                if (maybeDecl.isVarDeclaration()) {
                    com.google.common.base.Preconditions.checkState(!maybeDecl.isInitializingDeclaration());
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
                    if (maybeInit.isSimpleAssignmentToName()) {
                        return true;
                    }
                }
            }
            return false;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReference() {
            if (isInitializingDeclarationAt(0)) {
                return references.get(0);
            } else if (isInitializingAssignmentAt(1)) {
                return references.get(1);
            }
            return null;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReferenceForConstants() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {
                    return references.get(i);
                }
            }
            return null;
        }

        boolean isAssignedOnceInLifetime() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = getOneAndOnlyAssignment();
            if (ref == null) {
                return false;
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {
                if (block.isFunction) {
                    break;
                } else if (block.isLoop) {
                    return false;
                }
            }
            return true;
        }

        private com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getOneAndOnlyAssignment() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference assignment = null;
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    if (assignment == null) {
                        assignment = ref;
                    } else {
                        return null;
                    }
                }
            }
            return assignment;
        }

        boolean isNeverAssigned() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    return false;
                }
            }
            return true;
        }

        boolean firstReferenceIsAssigningDeclaration() {
            int size = references.size();
            if ((size > 0) && references.get(0).isInitializingDeclaration()) {
                return true;
            }
            return false;
        }
    }

    static final class Reference implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        private static final java.util.Set<java.lang.Integer> DECLARATION_PARENTS = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.FUNCTION, com.google.javascript.rhino.Token.CATCH);

        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock;

        private final com.google.javascript.jscomp.Scope scope;

        private final com.google.javascript.rhino.InputId inputId;

        private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

        Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock) {
            this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());
        }

        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference newBleedingFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.rhino.Node func) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(func.getFirstChild(), basicBlock, t.getScope(), t.getInput().getInputId());
        }

        @com.google.common.annotations.VisibleForTesting
        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference createRefForTest(com.google.javascript.jscomp.CompilerInput input) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NAME), null, null, input.getInputId());
        }

        private Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.jscomp.Scope scope, com.google.javascript.rhino.InputId inputId) {
            this.nameNode = nameNode;
            this.basicBlock = basicBlock;
            this.scope = scope;
            this.inputId = inputId;
            this.sourceFile = nameNode.getStaticSourceFile();
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference cloneWithNewScope(com.google.javascript.jscomp.Scope newScope) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(nameNode, basicBlock, newScope, inputId);
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return scope.getVar(nameNode.getString());
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.InputId getInputId() {
            return inputId;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return sourceFile;
        }

        boolean isDeclaration() {
            com.google.javascript.rhino.Node parent = getParent();
            com.google.javascript.rhino.Node grandparent = parent.getParent();
            return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.DECLARATION_PARENTS.contains(parent.getType()) || (parent.isParamList() && grandparent.isFunction());
        }

        boolean isVarDeclaration() {
            return getParent().isVar();
        }

        boolean isHoistedFunction() {
            return com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(getParent());
        }

        boolean isInitializingDeclaration() {
            return (isDeclaration() && (!getParent().isVar())) || (nameNode.getFirstChild() != null);
        }

        com.google.javascript.rhino.Node getAssignedValue() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isFunction() ? parent : com.google.javascript.jscomp.NodeUtil.getAssignedValue(nameNode);
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getBasicBlock() {
            return basicBlock;
        }

        com.google.javascript.rhino.Node getParent() {
            return getNode().getParent();
        }

        com.google.javascript.rhino.Node getGrandparent() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent == null ? null : parent.getParent();
        }

        private static boolean isLhsOfForInExpression(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isVar()) {
                return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);
            }
            return com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n);
        }

        boolean isSimpleAssignmentToName() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isAssign() && (parent.getFirstChild() == nameNode);
        }

        boolean isLvalue() {
            com.google.javascript.rhino.Node parent = getParent();
            int parentType = parent.getType();
            return (((((parentType == com.google.javascript.rhino.Token.VAR) && (nameNode.getFirstChild() != null)) || (parentType == com.google.javascript.rhino.Token.INC)) || (parentType == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == nameNode))) || com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(nameNode);
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }
    }

    static final class BasicBlock {
        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent;

        private final boolean isHoisted;

        private final boolean isFunction;

        private final boolean isLoop;

        BasicBlock(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent, com.google.javascript.rhino.Node root) {
            this.parent = parent;
            this.isHoisted = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(root);
            this.isFunction = root.isFunction();
            if (root.getParent() != null) {
                int pType = root.getParent().getType();
                this.isLoop = ((pType == com.google.javascript.rhino.Token.DO) || (pType == com.google.javascript.rhino.Token.WHILE)) || (pType == com.google.javascript.rhino.Token.FOR);
            } else {
                this.isLoop = false;
            }
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getParent() {
            return parent;
        }

        boolean isGlobalScopeBlock() {
            return getParent() == null;
        }

        boolean provablyExecutesBefore(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock thatBlock) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock currentBlock;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(186).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectInput("thatBlock.parent",thatBlock.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectInput("thatBlock",thatBlock);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectInput("thatBlock.isLoop",thatBlock.isLoop);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectInput("thatBlock.isHoisted",thatBlock.isHoisted);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectInput("thatBlock.isFunction",thatBlock.isFunction);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(186).collectionEnds();
            }
            if (runtimeAngelicValue)
                for (currentBlock = thatBlock; (currentBlock != null) && (currentBlock != this); currentBlock = currentBlock.getParent()) {
                    if (currentBlock.isHoisted) {
                        return false;
                    }
                }

            if (currentBlock == this) {
                return true;
            }
            if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock()) {
                return true;
            }
            return false;
        }
    }
}
[1614625] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659784409901
GPR[SSUN]-1659784409901
1795686761
GPR[ESUN]-1659784410146
GPR[SSUN]-1659784410146
1795686761
GPR[SPVATF]-1659784410390
GPR[EPVATF]-1659784410765
GPR[SPS]-1659784410765
[1616111] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$Reference:608.
GPR[EPS]-1659784411388
GPR[SPVATF]-1659784411388
GPR[EPVATF]-1659784411760
GPR[SPS]-1659784411760
[1617130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$Reference:608.
GPR[EPS]-1659784412406
GPR[ESUN]-1659784412406
GPR[SSUN]-1659784412406
1795686761
GPR[ESUN]-1659784412654
GPR[SSUN]-1659784412654
1795686761
GPR[SPVATF]-1659784412895
GPR[EPVATF]-1659784413252
GPR[SPS]-1659784413252
[1618589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:363.
GPR[EPS]-1659784413865
GPR[ESUN]-1659784413865
GPR[SSUN]-1659784413865
1795686761
GPR[ESUN]-1659784414107
GPR[SSUN]-1659784414107
1795686761
GPR[ESUN]-1659784414346
GPR[SSUN]-1659784414346
1795686761
GPR[ESUN]-1659784414584
GPR[SSUN]-1659784414584
1795686761
GPR[ESUN]-1659784414822
GPR[SSUN]-1659784414822
1795686761
GPR[SPVATF]-1659784415088
GPR[EPVATF]-1659784415453
GPR[SPS]-1659784415453
[1620787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:396.
GPR[EPS]-1659784416063
GPR[SPVATF]-1659784416063
GPR[EPVATF]-1659784416437
GPR[SPS]-1659784416437
[1621778] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:396.
GPR[EPS]-1659784417055
GPR[ESUN]-1659784417055
GPR[SSUN]-1659784417055
1795686761
GPR[SPVATF]-1659784417298
GPR[EPVATF]-1659784417674
GPR[SPS]-1659784417674
[1623039] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:319.
GPR[EPS]-1659784418315
GPR[SPVATF]-1659784418316
GPR[EPVATF]-1659784418697
GPR[SPS]-1659784418697
[1624032] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:319.
GPR[EPS]-1659784419308
GPR[ESUN]-1659784419308
GPR[SSUN]-1659784419308
1795686761
GPR[ESUN]-1659784419548
GPR[SSUN]-1659784419548
1795686761
GPR[SPVATF]-1659784419785
GPR[EPVATF]-1659784420165
GPR[SPS]-1659784420165
[1625499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:312.
GPR[EPS]-1659784420775
GPR[SPVATF]-1659784420776
GPR[EPVATF]-1659784421143
GPR[SPS]-1659784421143
[1626517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:312.
GPR[EPS]-1659784421793
GPR[ESUN]-1659784421793
GPR[SSUN]-1659784421793
1795686761
GPR[ESUN]-1659784422032
GPR[SSUN]-1659784422032
1187751237
GPR[SPVATF]-1659784422314
GPR[EPVATF]-1659784422687
GPR[SPS]-1659784422687
GPR[EPS]-1659784437230
GPR[ESUN]-1659784437230
GPR[SSUN]-1659784437230
1187751237
GPR[ESUN]-1659784437544
GPR[SSUN]-1659784437545
1187751237
GPR[SPVATF]-1659784437829
GPR[EPVATF]-1659784438228
GPR[SPS]-1659784438228
[1643674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1554.
GPR[EPS]-1659784438950
GPR[ESUN]-1659784438950
GPR[SSUN]-1659784438950
1795686761
GPR[ESUN]-1659784439194
GPR[SSUN]-1659784439194
1795686761
GPR[ESUN]-1659784439435
GPR[SSUN]-1659784439435
1795686761
GPR[ESUN]-1659784439676
GPR[SSUN]-1659784439676
1795686761
GPR[ESUN]-1659784439947
GPR[SSUN]-1659784439947
1795686761
GPR[SPVATF]-1659784440186
GPR[EPVATF]-1659784440592
GPR[SPS]-1659784440592
[1645946] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:359.
GPR[EPS]-1659784441222
GPR[SPVATF]-1659784441222
GPR[EPVATF]-1659784441620
GPR[SPS]-1659784441620
[1646959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:359.
GPR[EPS]-1659784442235
GPR[ESUN]-1659784442235
GPR[SSUN]-1659784442235
1795686761
GPR[ESUN]-1659784442480
GPR[SSUN]-1659784442480
2433571
GPR[ESUN]-1659784442718
GPR[SSUN]-1659784442718
2433571
GPR[SPVATF]-1659784442988
GPR[EPVATF]-1659784443422
GPR[SPS]-1659784443422
[1648792] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:524.
GPR[EPS]-1659784444068
GPR[ESUN]-1659784444068
GPR[SSUN]-1659784444069
-534884160
GPR[ESUN]-1659784444425
GPR[SSUN]-1659784444425
-534884160
GPR[ESUN]-1659784444776
GPR[SSUN]-1659784444776
-534884160
GPR[ESUN]-1659784445156
GPR[SSUN]-1659784445156
-534884160
GPR[ESUN]-1659784445503
GPR[SSUN]-1659784445503
1795686761
GPR[ESUN]-1659784445746
GPR[SSUN]-1659784445746
-718432441
GPR[SPVATF]-1659784445967
GPR[EPVATF]-1659784446375
GPR[SPS]-1659784446375
[1651802] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:673.
GPR[EPS]-1659784447078
GPR[ESUN]-1659784447078
GPR[SSUN]-1659784447078
-1117079791
GPR[ESUN]-1659784447279
GPR[SSUN]-1659784447279
-1117079791
GPR[SPVATF]-1659784447477
GPR[EPVATF]-1659784447919
GPR[SPS]-1659784447919
[1653178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:668.
GPR[EPS]-1659784448454
GPR[ESUN]-1659784448454
GPR[SSUN]-1659784448454
-1117079791
GPR[SPVATF]-1659784448655
GPR[EPVATF]-1659784449101
GPR[SPS]-1659784449101
[1654329] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:667.
GPR[EPS]-1659784449605
GPR[ESUN]-1659784449605
GPR[SSUN]-1659784449605
-1117079791
GPR[ESUN]-1659784449804
GPR[SSUN]-1659784449804
-1117079791
GPR[SPVATF]-1659784449999
GPR[EPVATF]-1659784450448
GPR[SPS]-1659784450448
[1655682] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:251.
GPR[EPS]-1659784450958
GPR[ESUN]-1659784450958
GPR[SSUN]-1659784450958
GPR[ESUN]-1659784450958
GPR[SSUN]-1659784450958
GPR[ESUN]-1659784450958
GPR[SSUN]-1659784450958
1795686761
GPR[ESUN]-1659784451203
GPR[SSUN]-1659784451203
1187751237
GPR[SPVATF]-1659784451490
GPR[EPVATF]-1659784451940
GPR[SPS]-1659784451940
[1657287] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(205).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("convention",convention);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(205).collectionEnds();
            }
            if (runtimeAngelicValue)
                return convention.isConstantKey(name);

        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    static boolean isCallOrNewTarget(com.google.javascript.rhino.Node target) {
        com.google.javascript.rhino.Node parent = target.getParent();
        return ((parent != null) && com.google.javascript.jscomp.NodeUtil.isCallOrNew(parent)) && (parent.getFirstChild() == target);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[1657288] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659784452564
GPR[SSUN]-1659784452564
1795686761
GPR[ESUN]-1659784452809
GPR[SSUN]-1659784452809
1795686761
GPR[ESUN]-1659784453052
GPR[SSUN]-1659784453052
1795686761
GPR[ESUN]-1659784453294
GPR[SSUN]-1659784453294
1795686761
GPR[SPVATF]-1659784453535
GPR[EPVATF]-1659784453957
GPR[SPS]-1659784453957
GPR[EPS]-1659784468412
GPR[ESUN]-1659784468412
GPR[SSUN]-1659784468412
2433571
GPR[SPVATF]-1659784468658
GPR[EPVATF]-1659784469134
GPR[SPS]-1659784469134
[1674512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:595.
GPR[EPS]-1659784469788
GPR[ESUN]-1659784469788
GPR[SSUN]-1659784469788
-718432441
GPR[SPVATF]-1659784470016
GPR[EPVATF]-1659784470453
GPR[SPS]-1659784470453
[1675916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:684.
GPR[EPS]-1659784471192
GPR[ESUN]-1659784471192
GPR[SSUN]-1659784471192
-718432441
GPR[SPVATF]-1659784471416
GPR[EPVATF]-1659784471854
GPR[SPS]-1659784471854
[1677291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:683.
GPR[EPS]-1659784472567
GPR[ESUN]-1659784472567
GPR[SSUN]-1659784472567
-718432441
GPR[SPVATF]-1659784472795
GPR[EPVATF]-1659784473233
GPR[SPS]-1659784473233
[1678668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:667.
GPR[EPS]-1659784473944
GPR[SPVATF]-1659784473944
GPR[EPVATF]-1659784474372
GPR[SPS]-1659784474372
[1679822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:667.
GPR[EPS]-1659784475098
GPR[ESUN]-1659784475098
GPR[SSUN]-1659784475098
-718432441
GPR[ESUN]-1659784475317
GPR[SSUN]-1659784475317
-718432441
GPR[SPVATF]-1659784475534
GPR[EPVATF]-1659784475968
GPR[SPS]-1659784475968
[1681395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:663.
GPR[EPS]-1659784476671
GPR[ESUN]-1659784476671
GPR[SSUN]-1659784476671
1795686761
GPR[ESUN]-1659784476917
GPR[SSUN]-1659784476917
175865530
GPR[SPVATF]-1659784477092
GPR[EPVATF]-1659784477530
GPR[SPS]-1659784477530
[1682681] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:197.
GPR[EPS]-1659784477957
GPR[SPVATF]-1659784477957
GPR[EPVATF]-1659784478405
GPR[SPS]-1659784478405
[1683581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:197.
GPR[EPS]-1659784478857
GPR[ESUN]-1659784478857
GPR[SSUN]-1659784478857
1795686761
GPR[ESUN]-1659784479104
GPR[SSUN]-1659784479104
-1117079791
GPR[ESUN]-1659784479303
GPR[SSUN]-1659784479303
-1117079791
GPR[SPVATF]-1659784479500
GPR[EPVATF]-1659784479940
GPR[SPS]-1659784479940
[1685169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:744.
GPR[EPS]-1659784480445
GPR[ESUN]-1659784480445
GPR[SSUN]-1659784480445
-1117079791
GPR[SPVATF]-1659784480645
GPR[EPVATF]-1659784481093
GPR[SPS]-1659784481093
[1686327] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:743.
GPR[EPS]-1659784481603
GPR[ESUN]-1659784481604
GPR[SSUN]-1659784481604
-1117079791
GPR[ESUN]-1659784481803
GPR[SSUN]-1659784481803
-1117079791
GPR[SPVATF]-1659784481997
GPR[EPVATF]-1659784482443
GPR[SPS]-1659784482443
[1687716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:174.
GPR[EPS]-1659784482992
GPR[ESUN]-1659784482992
GPR[SSUN]-1659784482992
-718432441
GPR[SPVATF]-1659784483220
GPR[EPVATF]-1659784483665
GPR[SPS]-1659784483665
[1689101] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:660.
GPR[EPS]-1659784484377
GPR[SPVATF]-1659784484377
GPR[EPVATF]-1659784484824
GPR[SPS]-1659784484824
[1690268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:660.
GPR[EPS]-1659784485544
GPR[ESUN]-1659784485544
GPR[SSUN]-1659784485544
-718432441
GPR[SPVATF]-1659784485768
GPR[EPVATF]-1659784486221
GPR[SPS]-1659784486221
[1691672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:656.
GPR[EPS]-1659784486948
GPR[SPVATF]-1659784486948
GPR[EPVATF]-1659784487394
GPR[SPS]-1659784487394
[1692827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:656.
GPR[EPS]-1659784488103
GPR[ESUN]-1659784488103
GPR[SSUN]-1659784488103
1795686761
GPR[ESUN]-1659784488347
GPR[SSUN]-1659784488347
1795686761
GPR[SPVATF]-1659784488589
GPR[EPVATF]-1659784489042
GPR[SPS]-1659784489042
GPR[EPS]-1659784498074
GPR[ESUN]-1659784498074
GPR[SSUN]-1659784498074
2433571
GPR[ESUN]-1659784498316
GPR[SSUN]-1659784498316
2433571
GPR[SPVATF]-1659784498551
GPR[EPVATF]-1659784499035
GPR[SPS]-1659784499035
[1704488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:594.
GPR[EPS]-1659784499764
GPR[SPVATF]-1659784499765
GPR[EPVATF]-1659784500241
GPR[SPS]-1659784500241
[1705621] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:594.
GPR[EPS]-1659784500897
GPR[ESUN]-1659784500897
GPR[SSUN]-1659784500897
2433571
GPR[SPVATF]-1659784501134
GPR[EPVATF]-1659784501621
GPR[SPS]-1659784501621
[1707008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:593.
GPR[EPS]-1659784502284
GPR[ESUN]-1659784502284
GPR[SSUN]-1659784502284
2433571
GPR[SPVATF]-1659784502549
GPR[EPVATF]-1659784503054
GPR[SPS]-1659784503054
[1708443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:592.
GPR[EPS]-1659784503719
GPR[ESUN]-1659784503719
GPR[SSUN]-1659784503719
2433571
GPR[SPVATF]-1659784503958
GPR[EPVATF]-1659784504441
GPR[SPS]-1659784504441
[1709820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:591.
GPR[EPS]-1659784505096
GPR[ESUN]-1659784505096
GPR[SSUN]-1659784505096
2433571
GPR[SPVATF]-1659784505333
GPR[EPVATF]-1659784505818
GPR[SPS]-1659784505818
[1711224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:590.
GPR[EPS]-1659784506500
GPR[ESUN]-1659784506501
GPR[SSUN]-1659784506501
2433571
GPR[SPVATF]-1659784506738
GPR[EPVATF]-1659784507222
GPR[SPS]-1659784507222
[1712610] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:589.
GPR[EPS]-1659784507886
GPR[ESUN]-1659784507886
GPR[SSUN]-1659784507886
1145120918
GPR[SPVATF]-1659784508113
GPR[EPVATF]-1659784508561
GPR[SPS]-1659784508561
[1713863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:84.
GPR[EPS]-1659784509139
GPR[ESUN]-1659784509139
GPR[SSUN]-1659784509139
1145120918
GPR[ESUN]-1659784509365
GPR[SSUN]-1659784509365
1145120918
GPR[SPVATF]-1659784509590
GPR[EPVATF]-1659784510077
GPR[SPS]-1659784510077
[1715368] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:83.
GPR[EPS]-1659784510644
GPR[SPVATF]-1659784510644
GPR[EPVATF]-1659784511097
GPR[SPS]-1659784511097
[1716394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:83.
GPR[EPS]-1659784511670
GPR[ESUN]-1659784511670
GPR[SSUN]-1659784511671
1145120918
GPR[ESUN]-1659784511900
GPR[SSUN]-1659784511900
-534884160
GPR[ESUN]-1659784516707
GPR[SSUN]-1659784516707
-534884160
GPR[ESUN]-1659784517066
GPR[SSUN]-1659784517066
-534884160
GPR[SPVATF]-1659784517409
GPR[EPVATF]-1659784517858
GPR[SPS]-1659784517858
[1723608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2364.
GPR[EPS]-1659784518884
GPR[ESUN]-1659784518884
GPR[SSUN]-1659784518884
-534884160
GPR[SPVATF]-1659784519335
GPR[EPVATF]-1659784520070
GPR[SPS]-1659784520070
[1725653] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2361.
GPR[EPS]-1659784520929
GPR[ESUN]-1659784520929
GPR[SSUN]-1659784520929
-534884160
GPR[SPVATF]-1659784521277
GPR[EPVATF]-1659784521685
GPR[SPS]-1659784521685
[1727266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2360.
GPR[EPS]-1659784522542
GPR[SPVATF]-1659784522543
GPR[EPVATF]-1659784522955
GPR[SPS]-1659784522955
[1728510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2360.
GPR[EPS]-1659784523786
GPR[ESUN]-1659784523786
GPR[SSUN]-1659784523786
-534884160
GPR[SPVATF]-1659784524134
GPR[EPVATF]-1659784524540
GPR[SPS]-1659784524540
[1730098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2358.
GPR[EPS]-1659784525374
GPR[ESUN]-1659784525374
GPR[SSUN]-1659784525374
-534884160
GPR[ESUN]-1659784525715
GPR[SSUN]-1659784525715
-534884160
GPR[ESUN]-1659784526062
GPR[SSUN]-1659784526062
1795686761
GPR[SPVATF]-1659784526309
GPR[EPVATF]-1659784526742
GPR[SPS]-1659784526742
[1732083] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:185.
GPR[EPS]-1659784527359
GPR[ESUN]-1659784527359
GPR[SSUN]-1659784527359
1795686761
GPR[SPVATF]-1659784527618
GPR[EPVATF]-1659784528040
GPR[SPS]-1659784528040
[1733375] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:184.
GPR[EPS]-1659784528651
GPR[ESUN]-1659784528651
GPR[SSUN]-1659784528651
-1345859678
GPR[SPVATF]-1659784528904
GPR[EPVATF]-1659784529365
GPR[SPS]-1659784529365
[1734715] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:979.
GPR[EPS]-1659784529991
GPR[ESUN]-1659784529991
GPR[SSUN]-1659784529991
GPR[ESUN]-1659784529991
GPR[SSUN]-1659784529991
GPR[ESUN]-1659784529991
GPR[SSUN]-1659784529991
GPR[ESUN]-1659784529991
GPR[SSUN]-1659784529991
1145120918
GPR[SPVATF]-1659784530216
GPR[EPVATF]-1659784530644
GPR[SPS]-1659784530644
[1735909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:104.
GPR[EPS]-1659784531185
GPR[ESUN]-1659784531185
GPR[SSUN]-1659784531185
1145120918
GPR[SPVATF]-1659784531434
GPR[EPVATF]-1659784531859
GPR[SPS]-1659784531859
[1737127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:103.
GPR[EPS]-1659784532403
GPR[ESUN]-1659784532403
GPR[SSUN]-1659784532403
1145120918
GPR[SPVATF]-1659784532628
GPR[EPVATF]-1659784533048
GPR[SPS]-1659784533048
[1738315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:102.
GPR[EPS]-1659784533591
GPR[SPVATF]-1659784533591
GPR[EPVATF]-1659784534024
GPR[SPS]-1659784534024
[1739286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:102.
GPR[EPS]-1659784534562
GPR[ESUN]-1659784534562
GPR[SSUN]-1659784534562
1145120918
GPR[ESUN]-1659784534786
GPR[SSUN]-1659784534786
1145120918
GPR[SPVATF]-1659784535010
GPR[EPVATF]-1659784535444
GPR[SPS]-1659784535444
[1740751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:81.
GPR[EPS]-1659784536027
GPR[ESUN]-1659784536027
GPR[SSUN]-1659784536027
1145120918
GPR[SPVATF]-1659784536252
GPR[EPVATF]-1659784536687
GPR[SPS]-1659784536687
[1741953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalVarReferenceMap:80.
GPR[EPS]-1659784537229
GPR[ESUN]-1659784537229
GPR[SSUN]-1659784537229
1795686761
GPR[ESUN]-1659784537473
GPR[SSUN]-1659784537473
1795686761
GPR[SPVATF]-1659784537713
GPR[EPVATF]-1659784538155
GPR[SPS]-1659784538155
GPR[EPS]-1659784565723
GPR[ESUN]-1659784565724
GPR[SSUN]-1659784565724
1795686761
GPR[SPVATF]-1659784565996
GPR[EPVATF]-1659784566432
GPR[SPS]-1659784566432
[1771771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:244.
GPR[EPS]-1659784567047
GPR[ESUN]-1659784567047
GPR[SSUN]-1659784567047
1795686761
GPR[SPVATF]-1659784567301
GPR[EPVATF]-1659784567755
GPR[SPS]-1659784567755
[1773099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:243.
GPR[EPS]-1659784568375
GPR[ESUN]-1659784568375
GPR[SSUN]-1659784568375
1795686761
GPR[SPVATF]-1659784568618
GPR[EPVATF]-1659784569064
GPR[SPS]-1659784569064
[1774422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:242.
GPR[EPS]-1659784569698
GPR[SPVATF]-1659784569698
GPR[EPVATF]-1659784570129
GPR[SPS]-1659784570129
GPR[EPS]-1659784654389
GPR[ESUN]-1659784654389
GPR[SSUN]-1659784654389
1795686761
GPR[ESUN]-1659784654865
GPR[SSUN]-1659784654865
1795686761
GPR[SPVATF]-1659784655109
GPR[EPVATF]-1659784655574
GPR[SPS]-1659784655574
[1860969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:157.
GPR[EPS]-1659784656245
GPR[ESUN]-1659784656245
GPR[SSUN]-1659784656246
1795686761
GPR[ESUN]-1659784656495
GPR[SSUN]-1659784656495
1795686761
GPR[SPVATF]-1659784656744
GPR[EPVATF]-1659784657204
GPR[SPS]-1659784657204
GPR[EPS]-1659784666856
GPR[ESUN]-1659784666856
GPR[SSUN]-1659784666856
2433571
GPR[SPVATF]-1659784667115
GPR[EPVATF]-1659784667582
GPR[SPS]-1659784667582
[1873004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1620.
GPR[EPS]-1659784668280
GPR[ESUN]-1659784668280
GPR[SSUN]-1659784668280
2433571
GPR[ESUN]-1659784668537
GPR[SSUN]-1659784668537
2433571
GPR[SPVATF]-1659784668790
GPR[EPVATF]-1659784669276
GPR[SPS]-1659784669276
[1874696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1619.
GPR[EPS]-1659784669972
GPR[SPVATF]-1659784669973
GPR[EPVATF]-1659784670441
GPR[SPS]-1659784670441
[1875885] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1619.
GPR[EPS]-1659784671161
GPR[ESUN]-1659784671161
GPR[SSUN]-1659784671161
2433571
GPR[ESUN]-1659784671416
GPR[SSUN]-1659784671416
1795686761
GPR[ESUN]-1659784671680
GPR[SSUN]-1659784671680
1795686761
GPR[SPVATF]-1659784671939
GPR[EPVATF]-1659784672412
GPR[SPS]-1659784672412
[1877813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:209.
GPR[EPS]-1659784673089
GPR[ESUN]-1659784673089
GPR[SSUN]-1659784673089
1795686761
GPR[SPVATF]-1659784673350
GPR[EPVATF]-1659784673818
GPR[SPS]-1659784673818
[1879227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:208.
GPR[EPS]-1659784674503
GPR[SPVATF]-1659784674503
GPR[EPVATF]-1659784674969
GPR[SPS]-1659784674969
[1880393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:208.
GPR[EPS]-1659784675669
GPR[ESUN]-1659784675669
GPR[SSUN]-1659784675669
1795686761
GPR[ESUN]-1659784675936
GPR[SSUN]-1659784675936
1795686761
GPR[SPVATF]-1659784676204
GPR[EPVATF]-1659784676675
GPR[SPS]-1659784676675
[1882062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:198.
GPR[EPS]-1659784677338
GPR[SPVATF]-1659784677338
GPR[EPVATF]-1659784677803
GPR[SPS]-1659784677803
[1883204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:198.
GPR[EPS]-1659784678480
GPR[ESUN]-1659784678480
GPR[SSUN]-1659784678480
1795686761
GPR[ESUN]-1659784678743
GPR[SSUN]-1659784678743
1795686761
GPR[SPVATF]-1659784679007
GPR[EPVATF]-1659784679483
GPR[SPS]-1659784679483
GPR[EPS]-1659784699709
GPR[SPVATF]-1659784699710
GPR[EPVATF]-1659784700190
GPR[SPS]-1659784700190
[1905602] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:182.
GPR[EPS]-1659784700878
GPR[ESUN]-1659784700878
GPR[SSUN]-1659784700878
1795686761
GPR[SPVATF]-1659784701145
GPR[EPVATF]-1659784701611
GPR[SPS]-1659784701611
[1907014] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:181.
GPR[EPS]-1659784702291
GPR[ESUN]-1659784702291
GPR[SSUN]-1659784702291
1795686761
GPR[ESUN]-1659784702545
GPR[SSUN]-1659784702545
1795686761
GPR[SPVATF]-1659784702805
GPR[EPVATF]-1659784703275
GPR[SPS]-1659784703275
[1908716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:173.
GPR[EPS]-1659784703992
GPR[ESUN]-1659784703993
GPR[SSUN]-1659784703993
1795686761
GPR[ESUN]-1659784704251
GPR[SSUN]-1659784704251
1795686761
GPR[ESUN]-1659784704506
GPR[SSUN]-1659784704506
1795686761
GPR[ESUN]-1659784704755
GPR[SSUN]-1659784704755
1795686761
GPR[SPVATF]-1659784705003
GPR[EPVATF]-1659784705473
GPR[SPS]-1659784705473
[1910886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:161.
GPR[EPS]-1659784706162
GPR[SPVATF]-1659784706162
GPR[EPVATF]-1659784706624
GPR[SPS]-1659784706624
[1912027] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:161.
GPR[EPS]-1659784707303
GPR[ESUN]-1659784707303
GPR[SSUN]-1659784707303
1795686761
GPR[SPVATF]-1659784707574
GPR[EPVATF]-1659784708050
GPR[SPS]-1659784708050
[1913501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:156.
GPR[EPS]-1659784708777
GPR[SPVATF]-1659784708777
GPR[EPVATF]-1659784709252
GPR[SPS]-1659784709252
[1914657] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:156.
GPR[EPS]-1659784709933
GPR[ESUN]-1659784709933
GPR[SSUN]-1659784709933
1795686761
GPR[SPVATF]-1659784710196
GPR[EPVATF]-1659784710670
GPR[SPS]-1659784710670
[1915857] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceCollectingCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback , com.google.javascript.jscomp.HotSwapCompilerPass , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
    private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap = com.google.common.collect.Maps.newHashMap();

    private final java.util.Deque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock> blockStack = new java.util.ArrayDeque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock>();

    private final com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter;

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior) {
        this(compiler, behavior, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue());
    }

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter) {
        this.compiler = compiler;
        this.behavior = behavior;
        this.varFilter = varFilter;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeTraversal.traverseRoots(compiler, com.google.common.collect.Lists.newArrayList(externs, root), this);
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, scriptRoot, this);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return referenceMap.keySet();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var v) {
        return referenceMap.get(v);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (n.isName()) {
            com.google.javascript.jscomp.Scope.Var v;
            if (n.getString().equals("arguments")) {
                v = t.getScope().getArgumentsVar();
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(270).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior",com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter",com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack",com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap",com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler",com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(270).collectionEnds();
                }
                if (runtimeAngelicValue)
                    v = t.getScope().getVar(n.getString());

            }
            if ((v != null) && varFilter.apply(v)) {
                addReference(t, v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, t, blockStack.peek()));
            }
        }
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.pop();
        }
    }

    @java.lang.Override
    public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node n = t.getScope().getRootNode();
        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent = (blockStack.isEmpty()) ? null : blockStack.peek();
        blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(parent, n));
    }

    @java.lang.Override
    public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        blockStack.pop();
        if (t.getScope().isGlobal()) {
            compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());
            behavior.afterExitScope(t, compiler.getGlobalVarReferences());
        } else {
            behavior.afterExitScope(t, new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper(referenceMap));
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(blockStack.peek(), n));
        }
        return true;
    }

    private static boolean isBlockBoundary(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DO :
                case com.google.javascript.rhino.Token.FOR :
                case com.google.javascript.rhino.Token.TRY :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return true;
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.OR :
                    return n != parent.getFirstChild();
            }
        }
        return n.isCase();
    }

    private void addReference(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);
        if (referenceInfo == null) {
            referenceInfo = new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection();
            referenceMap.put(v, referenceInfo);
        }
        referenceInfo.add(reference, t, v);
    }

    interface ReferenceMap {
        public abstract com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var);
    }

    private static class ReferenceMapWrapper implements com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap {
        private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap;

        public ReferenceMapWrapper(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {
            this.referenceMap = referenceMap;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var) {
            return referenceMap.get(var);
        }
    }

    interface Behavior {
        public abstract void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap);
    }

    static com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior DO_NOTHING_BEHAVIOR = new com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior() {
        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
        }
    };

    static class ReferenceCollection implements java.lang.Iterable<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> references = com.google.common.collect.Lists.newArrayList();

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> iterator() {
            return references.iterator();
        }

        void add(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.Scope.Var v) {
            references.add(reference);
        }

        protected boolean isWellDefined() {
            int size = references.size();
            if (size == 0) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = getInitializingReference();
            if (init == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(references.get(0).isDeclaration());
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock initBlock = init.getBasicBlock();
            for (int i = 1; i < size; i++) {
                if (!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())) {
                    return false;
                }
            }
            return true;
        }

        boolean isEscaped() {
            com.google.javascript.jscomp.Scope scope = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : references) {
                if (scope == null) {
                    scope = ref.scope;
                } else if (scope != ref.scope) {
                    return true;
                }
            }
            return false;
        }

        private boolean isInitializingDeclarationAt(int index) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
            if (maybeInit.isInitializingDeclaration()) {
                return true;
            }
            return false;
        }

        private boolean isInitializingAssignmentAt(int index) {
            if ((index < references.size()) && (index > 0)) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeDecl = references.get(index - 1);
                if (maybeDecl.isVarDeclaration()) {
                    com.google.common.base.Preconditions.checkState(!maybeDecl.isInitializingDeclaration());
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
                    if (maybeInit.isSimpleAssignmentToName()) {
                        return true;
                    }
                }
            }
            return false;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReference() {
            if (isInitializingDeclarationAt(0)) {
                return references.get(0);
            } else if (isInitializingAssignmentAt(1)) {
                return references.get(1);
            }
            return null;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReferenceForConstants() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {
                    return references.get(i);
                }
            }
            return null;
        }

        boolean isAssignedOnceInLifetime() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = getOneAndOnlyAssignment();
            if (ref == null) {
                return false;
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {
                if (block.isFunction) {
                    break;
                } else if (block.isLoop) {
                    return false;
                }
            }
            return true;
        }

        private com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getOneAndOnlyAssignment() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference assignment = null;
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    if (assignment == null) {
                        assignment = ref;
                    } else {
                        return null;
                    }
                }
            }
            return assignment;
        }

        boolean isNeverAssigned() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    return false;
                }
            }
            return true;
        }

        boolean firstReferenceIsAssigningDeclaration() {
            int size = references.size();
            if ((size > 0) && references.get(0).isInitializingDeclaration()) {
                return true;
            }
            return false;
        }
    }

    static final class Reference implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        private static final java.util.Set<java.lang.Integer> DECLARATION_PARENTS = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.FUNCTION, com.google.javascript.rhino.Token.CATCH);

        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock;

        private final com.google.javascript.jscomp.Scope scope;

        private final com.google.javascript.rhino.InputId inputId;

        private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

        Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock) {
            this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());
        }

        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference newBleedingFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.rhino.Node func) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(func.getFirstChild(), basicBlock, t.getScope(), t.getInput().getInputId());
        }

        @com.google.common.annotations.VisibleForTesting
        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference createRefForTest(com.google.javascript.jscomp.CompilerInput input) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NAME), null, null, input.getInputId());
        }

        private Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.jscomp.Scope scope, com.google.javascript.rhino.InputId inputId) {
            this.nameNode = nameNode;
            this.basicBlock = basicBlock;
            this.scope = scope;
            this.inputId = inputId;
            this.sourceFile = nameNode.getStaticSourceFile();
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference cloneWithNewScope(com.google.javascript.jscomp.Scope newScope) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(nameNode, basicBlock, newScope, inputId);
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return scope.getVar(nameNode.getString());
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.InputId getInputId() {
            return inputId;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return sourceFile;
        }

        boolean isDeclaration() {
            com.google.javascript.rhino.Node parent = getParent();
            com.google.javascript.rhino.Node grandparent = parent.getParent();
            return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.DECLARATION_PARENTS.contains(parent.getType()) || (parent.isParamList() && grandparent.isFunction());
        }

        boolean isVarDeclaration() {
            return getParent().isVar();
        }

        boolean isHoistedFunction() {
            return com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(getParent());
        }

        boolean isInitializingDeclaration() {
            return (isDeclaration() && (!getParent().isVar())) || (nameNode.getFirstChild() != null);
        }

        com.google.javascript.rhino.Node getAssignedValue() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isFunction() ? parent : com.google.javascript.jscomp.NodeUtil.getAssignedValue(nameNode);
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getBasicBlock() {
            return basicBlock;
        }

        com.google.javascript.rhino.Node getParent() {
            return getNode().getParent();
        }

        com.google.javascript.rhino.Node getGrandparent() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent == null ? null : parent.getParent();
        }

        private static boolean isLhsOfForInExpression(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isVar()) {
                return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);
            }
            return com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n);
        }

        boolean isSimpleAssignmentToName() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isAssign() && (parent.getFirstChild() == nameNode);
        }

        boolean isLvalue() {
            com.google.javascript.rhino.Node parent = getParent();
            int parentType = parent.getType();
            return (((((parentType == com.google.javascript.rhino.Token.VAR) && (nameNode.getFirstChild() != null)) || (parentType == com.google.javascript.rhino.Token.INC)) || (parentType == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == nameNode))) || com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(nameNode);
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }
    }

    static final class BasicBlock {
        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent;

        private final boolean isHoisted;

        private final boolean isFunction;

        private final boolean isLoop;

        BasicBlock(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent, com.google.javascript.rhino.Node root) {
            this.parent = parent;
            this.isHoisted = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(root);
            this.isFunction = root.isFunction();
            if (root.getParent() != null) {
                int pType = root.getParent().getType();
                this.isLoop = ((pType == com.google.javascript.rhino.Token.DO) || (pType == com.google.javascript.rhino.Token.WHILE)) || (pType == com.google.javascript.rhino.Token.FOR);
            } else {
                this.isLoop = false;
            }
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getParent() {
            return parent;
        }

        boolean isGlobalScopeBlock() {
            return getParent() == null;
        }

        boolean provablyExecutesBefore(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock thatBlock) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock currentBlock;
            for (currentBlock = thatBlock; (currentBlock != null) && (currentBlock != this); currentBlock = currentBlock.getParent()) {
                if (currentBlock.isHoisted) {
                    return false;
                }
            }
            if (currentBlock == this) {
                return true;
            }
            if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock()) {
                return true;
            }
            return false;
        }
    }
}
[1915857] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659784711133
GPR[SSUN]-1659784711133
1795686761
GPR[SPVATF]-1659784711377
GPR[EPVATF]-1659784711831
GPR[SPS]-1659784711831
[1917054] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ReferenceCollectingCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback , com.google.javascript.jscomp.HotSwapCompilerPass , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
    private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap = com.google.common.collect.Maps.newHashMap();

    private final java.util.Deque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock> blockStack = new java.util.ArrayDeque<com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock>();

    private final com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter;

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior) {
        this(compiler, behavior, com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue());
    }

    ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> varFilter) {
        this.compiler = compiler;
        this.behavior = behavior;
        this.varFilter = varFilter;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeTraversal.traverseRoots(compiler, com.google.common.collect.Lists.newArrayList(externs, root), this);
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, scriptRoot, this);
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return referenceMap.keySet();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var v) {
        return referenceMap.get(v);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (n.isName()) {
            com.google.javascript.jscomp.Scope.Var v;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(271).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior",com.google.javascript.jscomp.ReferenceCollectingCallback.this.behavior);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter",com.google.javascript.jscomp.ReferenceCollectingCallback.this.varFilter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack",com.google.javascript.jscomp.ReferenceCollectingCallback.this.blockStack);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap",com.google.javascript.jscomp.ReferenceCollectingCallback.this.referenceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("\"arguments\"","arguments");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler",com.google.javascript.jscomp.ReferenceCollectingCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectInput("com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(271).collectionEnds();
            }
            if (runtimeAngelicValue) if (n.getString().equals("arguments")) {
                v = t.getScope().getArgumentsVar();
            } else {
                v = t.getScope().getVar(n.getString());
            }
            if ((v != null) && varFilter.apply(v)) {
                addReference(t, v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, t, blockStack.peek()));
            }
        }
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.pop();
        }
    }

    @java.lang.Override
    public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node n = t.getScope().getRootNode();
        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent = (blockStack.isEmpty()) ? null : blockStack.peek();
        blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(parent, n));
    }

    @java.lang.Override
    public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        blockStack.pop();
        if (t.getScope().isGlobal()) {
            compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());
            behavior.afterExitScope(t, compiler.getGlobalVarReferences());
        } else {
            behavior.afterExitScope(t, new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMapWrapper(referenceMap));
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.ReferenceCollectingCallback.isBlockBoundary(n, parent)) {
            blockStack.push(new com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock(blockStack.peek(), n));
        }
        return true;
    }

    private static boolean isBlockBoundary(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DO :
                case com.google.javascript.rhino.Token.FOR :
                case com.google.javascript.rhino.Token.TRY :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return true;
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.OR :
                    return n != parent.getFirstChild();
            }
        }
        return n.isCase();
    }

    private void addReference(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);
        if (referenceInfo == null) {
            referenceInfo = new com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection();
            referenceMap.put(v, referenceInfo);
        }
        referenceInfo.add(reference, t, v);
    }

    interface ReferenceMap {
        public abstract com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var);
    }

    private static class ReferenceMapWrapper implements com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap {
        private final java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap;

        public ReferenceMapWrapper(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {
            this.referenceMap = referenceMap;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection getReferences(com.google.javascript.jscomp.Scope.Var var) {
            return referenceMap.get(var);
        }
    }

    interface Behavior {
        public abstract void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap);
    }

    static com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior DO_NOTHING_BEHAVIOR = new com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior() {
        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
        }
    };

    static class ReferenceCollection implements java.lang.Iterable<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> {
        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> references = com.google.common.collect.Lists.newArrayList();

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> iterator() {
            return references.iterator();
        }

        void add(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.Scope.Var v) {
            references.add(reference);
        }

        protected boolean isWellDefined() {
            int size = references.size();
            if (size == 0) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = getInitializingReference();
            if (init == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(references.get(0).isDeclaration());
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock initBlock = init.getBasicBlock();
            for (int i = 1; i < size; i++) {
                if (!initBlock.provablyExecutesBefore(references.get(i).getBasicBlock())) {
                    return false;
                }
            }
            return true;
        }

        boolean isEscaped() {
            com.google.javascript.jscomp.Scope scope = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : references) {
                if (scope == null) {
                    scope = ref.scope;
                } else if (scope != ref.scope) {
                    return true;
                }
            }
            return false;
        }

        private boolean isInitializingDeclarationAt(int index) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
            if (maybeInit.isInitializingDeclaration()) {
                return true;
            }
            return false;
        }

        private boolean isInitializingAssignmentAt(int index) {
            if ((index < references.size()) && (index > 0)) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeDecl = references.get(index - 1);
                if (maybeDecl.isVarDeclaration()) {
                    com.google.common.base.Preconditions.checkState(!maybeDecl.isInitializingDeclaration());
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference maybeInit = references.get(index);
                    if (maybeInit.isSimpleAssignmentToName()) {
                        return true;
                    }
                }
            }
            return false;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReference() {
            if (isInitializingDeclarationAt(0)) {
                return references.get(0);
            } else if (isInitializingAssignmentAt(1)) {
                return references.get(1);
            }
            return null;
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getInitializingReferenceForConstants() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {
                    return references.get(i);
                }
            }
            return null;
        }

        boolean isAssignedOnceInLifetime() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = getOneAndOnlyAssignment();
            if (ref == null) {
                return false;
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {
                if (block.isFunction) {
                    break;
                } else if (block.isLoop) {
                    return false;
                }
            }
            return true;
        }

        private com.google.javascript.jscomp.ReferenceCollectingCallback.Reference getOneAndOnlyAssignment() {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference assignment = null;
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    if (assignment == null) {
                        assignment = ref;
                    } else {
                        return null;
                    }
                }
            }
            return assignment;
        }

        boolean isNeverAssigned() {
            int size = references.size();
            for (int i = 0; i < size; i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = references.get(i);
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    return false;
                }
            }
            return true;
        }

        boolean firstReferenceIsAssigningDeclaration() {
            int size = references.size();
            if ((size > 0) && references.get(0).isInitializingDeclaration()) {
                return true;
            }
            return false;
        }
    }

    static final class Reference implements com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        private static final java.util.Set<java.lang.Integer> DECLARATION_PARENTS = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.FUNCTION, com.google.javascript.rhino.Token.CATCH);

        private final com.google.javascript.rhino.Node nameNode;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock;

        private final com.google.javascript.jscomp.Scope scope;

        private final com.google.javascript.rhino.InputId inputId;

        private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

        Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock) {
            this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId());
        }

        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference newBleedingFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.rhino.Node func) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(func.getFirstChild(), basicBlock, t.getScope(), t.getInput().getInputId());
        }

        @com.google.common.annotations.VisibleForTesting
        static com.google.javascript.jscomp.ReferenceCollectingCallback.Reference createRefForTest(com.google.javascript.jscomp.CompilerInput input) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NAME), null, null, input.getInputId());
        }

        private Reference(com.google.javascript.rhino.Node nameNode, com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock basicBlock, com.google.javascript.jscomp.Scope scope, com.google.javascript.rhino.InputId inputId) {
            this.nameNode = nameNode;
            this.basicBlock = basicBlock;
            this.scope = scope;
            this.inputId = inputId;
            this.sourceFile = nameNode.getStaticSourceFile();
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference cloneWithNewScope(com.google.javascript.jscomp.Scope newScope) {
            return new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(nameNode, basicBlock, newScope, inputId);
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return scope.getVar(nameNode.getString());
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        public com.google.javascript.rhino.InputId getInputId() {
            return inputId;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return sourceFile;
        }

        boolean isDeclaration() {
            com.google.javascript.rhino.Node parent = getParent();
            com.google.javascript.rhino.Node grandparent = parent.getParent();
            return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.DECLARATION_PARENTS.contains(parent.getType()) || (parent.isParamList() && grandparent.isFunction());
        }

        boolean isVarDeclaration() {
            return getParent().isVar();
        }

        boolean isHoistedFunction() {
            return com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(getParent());
        }

        boolean isInitializingDeclaration() {
            return (isDeclaration() && (!getParent().isVar())) || (nameNode.getFirstChild() != null);
        }

        com.google.javascript.rhino.Node getAssignedValue() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isFunction() ? parent : com.google.javascript.jscomp.NodeUtil.getAssignedValue(nameNode);
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getBasicBlock() {
            return basicBlock;
        }

        com.google.javascript.rhino.Node getParent() {
            return getNode().getParent();
        }

        com.google.javascript.rhino.Node getGrandparent() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent == null ? null : parent.getParent();
        }

        private static boolean isLhsOfForInExpression(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isVar()) {
                return com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(parent);
            }
            return com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n);
        }

        boolean isSimpleAssignmentToName() {
            com.google.javascript.rhino.Node parent = getParent();
            return parent.isAssign() && (parent.getFirstChild() == nameNode);
        }

        boolean isLvalue() {
            com.google.javascript.rhino.Node parent = getParent();
            int parentType = parent.getType();
            return (((((parentType == com.google.javascript.rhino.Token.VAR) && (nameNode.getFirstChild() != null)) || (parentType == com.google.javascript.rhino.Token.INC)) || (parentType == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == nameNode))) || com.google.javascript.jscomp.ReferenceCollectingCallback.Reference.isLhsOfForInExpression(nameNode);
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }
    }

    static final class BasicBlock {
        private final com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent;

        private final boolean isHoisted;

        private final boolean isFunction;

        private final boolean isLoop;

        BasicBlock(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock parent, com.google.javascript.rhino.Node root) {
            this.parent = parent;
            this.isHoisted = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(root);
            this.isFunction = root.isFunction();
            if (root.getParent() != null) {
                int pType = root.getParent().getType();
                this.isLoop = ((pType == com.google.javascript.rhino.Token.DO) || (pType == com.google.javascript.rhino.Token.WHILE)) || (pType == com.google.javascript.rhino.Token.FOR);
            } else {
                this.isLoop = false;
            }
        }

        com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock getParent() {
            return parent;
        }

        boolean isGlobalScopeBlock() {
            return getParent() == null;
        }

        boolean provablyExecutesBefore(com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock thatBlock) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.BasicBlock currentBlock;
            for (currentBlock = thatBlock; (currentBlock != null) && (currentBlock != this); currentBlock = currentBlock.getParent()) {
                if (currentBlock.isHoisted) {
                    return false;
                }
            }
            if (currentBlock == this) {
                return true;
            }
            if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock()) {
                return true;
            }
            return false;
        }
    }
}
[1917054] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659784712331
GPR[EPVATF]-1659784712798
GPR[SPS]-1659784712798
[1918153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:151.
GPR[EPS]-1659784713429
GPR[ESUN]-1659784713430
GPR[SSUN]-1659784713430
1795686761
GPR[SPVATF]-1659784713676
GPR[EPVATF]-1659784714134
GPR[SPS]-1659784714134
[1919502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:149.
GPR[EPS]-1659784714778
GPR[SPVATF]-1659784714779
GPR[EPVATF]-1659784715233
GPR[SPS]-1659784715233
[1920667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:149.
GPR[EPS]-1659784715943
GPR[ESUN]-1659784715943
GPR[SSUN]-1659784715944
GPR[ESUN]-1659784715944
GPR[SSUN]-1659784715944
1537627151
GPR[ESUN]-1659784716157
GPR[SSUN]-1659784716158
-1345859678
GPR[ESUN]-1659784716417
GPR[SSUN]-1659784716417
-1345859678
GPR[ESUN]-1659784716675
GPR[SSUN]-1659784716675
-1345859678
GPR[SPVATF]-1659784716963
GPR[EPVATF]-1659784717487
GPR[SPS]-1659784717487
[1922873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:978.
GPR[EPS]-1659784718149
GPR[SPVATF]-1659784718149
GPR[EPVATF]-1659784718656
GPR[SPS]-1659784718656
[1924036] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:978.
GPR[EPS]-1659784719312
GPR[ESUN]-1659784719312
GPR[SSUN]-1659784719313
-1345859678
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
GPR[ESUN]-1659784719571
GPR[SSUN]-1659784719571
2433571
GPR[ESUN]-1659784719814
GPR[SSUN]-1659784719814
2433571
GPR[ESUN]-1659784720054
GPR[SSUN]-1659784720054
GPR[ESUN]-1659784720054
GPR[SSUN]-1659784720054
704176156
GPR[ESUN]-1659784720252
GPR[SSUN]-1659784720252
704176156
GPR[ESUN]-1659784720451
GPR[SSUN]-1659784720451
704176156
GPR[SPVATF]-1659784720683
GPR[EPVATF]-1659784721192
GPR[SPS]-1659784721192
[1926444] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:147.
GPR[EPS]-1659784721720
GPR[ESUN]-1659784721720
GPR[SSUN]-1659784721720
704176156
GPR[SPVATF]-1659784721921
GPR[EPVATF]-1659784722428
GPR[SPS]-1659784722428
[1927685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:146.
GPR[EPS]-1659784722961
GPR[ESUN]-1659784722961
GPR[SSUN]-1659784722961
704176156
GPR[SPVATF]-1659784723164
GPR[EPVATF]-1659784723680
GPR[SPS]-1659784723680
[1928933] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:127.
GPR[EPS]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724209
GPR[SSUN]-1659784724209
GPR[ESUN]-1659784724210
GPR[SSUN]-1659784724210
GPR[ESUN]-1659784724210
GPR[SSUN]-1659784724210
1537627151
GPR[ESUN]-1659784724420
GPR[SSUN]-1659784724420
-1345859678
GPR[ESUN]-1659784724677
GPR[SSUN]-1659784724677
-1345859678
GPR[SPVATF]-1659784724935
GPR[EPVATF]-1659784725428
GPR[SPS]-1659784725428
GPR[EPS]-1659785458777
GPR[ESUN]-1659785458778
GPR[SSUN]-1659785458778
-1345859678
GPR[ESUN]-1659785459206
GPR[SSUN]-1659785459206
-1345859678
GPR[SPVATF]-1659785459463
GPR[EPVATF]-1659785459997
GPR[SPS]-1659785459997
[2665408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:886.
GPR[EPS]-1659785460684
GPR[SPVATF]-1659785460684
GPR[EPVATF]-1659785461196
GPR[SPS]-1659785461196
[2666571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:886.
GPR[EPS]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
GPR[ESUN]-1659785461847
GPR[SSUN]-1659785461847
-1117079791
GPR[ESUN]-1659785462047
GPR[SSUN]-1659785462047
-1117079791
GPR[ESUN]-1659785462245
GPR[SSUN]-1659785462245
-1117079791
GPR[SPVATF]-1659785462443
GPR[EPVATF]-1659785462954
GPR[SPS]-1659785462954
[2668271] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:652.
GPR[EPS]-1659785463547
GPR[ESUN]-1659785463548
GPR[SSUN]-1659785463548
-1117079791
GPR[SPVATF]-1659785463748
GPR[EPVATF]-1659785464265
GPR[SPS]-1659785464265
[2669520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:649.
GPR[EPS]-1659785464796
GPR[ESUN]-1659785464796
GPR[SSUN]-1659785464796
-1117079791
GPR[SPVATF]-1659785464998
GPR[EPVATF]-1659785465506
GPR[SPS]-1659785465506
[2670761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:648.
GPR[EPS]-1659785466037
GPR[ESUN]-1659785466037
GPR[SSUN]-1659785466037
-1117079791
GPR[ESUN]-1659785466235
GPR[SSUN]-1659785466235
-1117079791
GPR[SPVATF]-1659785466429
GPR[EPVATF]-1659785466968
GPR[SPS]-1659785466968
[2672261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:231.
GPR[EPS]-1659785467537
GPR[ESUN]-1659785467537
GPR[SSUN]-1659785467537
-1117079791
GPR[SPVATF]-1659785467737
GPR[EPVATF]-1659785468256
GPR[SPS]-1659785468256
[2673508] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:279.
GPR[EPS]-1659785468784
GPR[ESUN]-1659785468785
GPR[SSUN]-1659785468785
2433571
GPR[ESUN]-1659785469022
GPR[SSUN]-1659785469022
-1345859678
GPR[SPVATF]-1659785469280
GPR[EPVATF]-1659785469750
GPR[SPS]-1659785469750
[2674905] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    static final java.lang.String MISPLACED_TYPE_ANNOTATION = "Type annotations are not allowed here. Are you missing parentheses?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                com.google.javascript.rhino.JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();
                if (info != null) {
                    validateTypeAnnotations(info, node, irNode);
                }
                return info;
            }
        }
        return null;
    }

    private void validateTypeAnnotations(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        if (info.getType() != null) {
            boolean valid = false;
            switch (node.getType()) {
                case com.google.javascript.rhino.head.Token.LP :
                    valid = node instanceof com.google.javascript.rhino.head.ast.ParenthesizedExpression;
                    break;
                case com.google.javascript.rhino.head.Token.VAR :
                    valid = true;
                    break;
                case com.google.javascript.rhino.head.Token.FUNCTION :
                    com.google.javascript.rhino.head.ast.FunctionNode fnNode = ((com.google.javascript.rhino.head.ast.FunctionNode) (node));
                    valid = fnNode.getFunctionType() == com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_STATEMENT;
                    break;
                case com.google.javascript.rhino.head.Token.NAME :
                    valid = ((node.getParent() instanceof com.google.javascript.rhino.head.ast.ObjectProperty) || (node.getParent() instanceof com.google.javascript.rhino.head.ast.CatchClause)) || (node.getParent() instanceof com.google.javascript.rhino.head.ast.FunctionNode);
                    break;
                case com.google.javascript.rhino.head.Token.GET :
                case com.google.javascript.rhino.head.Token.SET :
                case com.google.javascript.rhino.head.Token.NUMBER :
                case com.google.javascript.rhino.head.Token.STRING :
                    valid = node.getParent() instanceof com.google.javascript.rhino.head.ast.ObjectProperty;
                    break;
                case com.google.javascript.rhino.head.Token.ASSIGN :
                    if (node instanceof com.google.javascript.rhino.head.ast.Assignment) {
                        valid = isExprStmt(node.getParent()) && isPropAccess(((com.google.javascript.rhino.head.ast.Assignment) (node)).getLeft());
                    }
                    break;
                case com.google.javascript.rhino.head.Token.GETPROP :
                case com.google.javascript.rhino.head.Token.GETELEM :
                    valid = isExprStmt(node.getParent());
                    break;
            }
            if (!valid) {
                errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), "", 0);
            }
        }
    }

    private boolean isPropAccess(com.google.javascript.rhino.head.ast.AstNode node) {
        return (node.getType() == com.google.javascript.rhino.head.Token.GETPROP) || (node.getType() == com.google.javascript.rhino.head.Token.GETELEM);
    }

    private boolean isExprStmt(com.google.javascript.rhino.head.ast.AstNode node) {
        return (node.getType() == com.google.javascript.rhino.head.Token.EXPR_RESULT) || (node.getType() == com.google.javascript.rhino.head.Token.EXPR_VOID);
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transform(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : exprNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(exprNode.getLineno());
            node.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(node, exprNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(288).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION",com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("exprNode",exprNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("operand",operand);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(288).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return node;

            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[2674905] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659785470181
GPR[SSUN]-1659785470181
-1345859678
GPR[SPVATF]-1659785470444
GPR[EPVATF]-1659785470916
GPR[SPS]-1659785470916
[2676309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1123.
GPR[EPS]-1659785471585
GPR[SPVATF]-1659785471586
GPR[EPVATF]-1659785472052
GPR[SPS]-1659785472052
[2677530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1123.
GPR[EPS]-1659785472806
GPR[ESUN]-1659785472806
GPR[SSUN]-1659785472806
-1345859678
GPR[ESUN]-1659785473448
GPR[SSUN]-1659785473448
CodeCache: size=245760Kb used=243130Kb max_used=243158Kb free=2629Kb
 bounds [0x00007fbca9000000, 0x00007fbcb8000000, 0x00007fbcb8000000]
 total_blobs=79883 nmethods=79360 adapters=421
 compilation: disabled (not enough contiguous free space left)
-1345859678
GPR[SPVATF]-1659785473822
GPR[EPVATF]-1659785474993
GPR[SPS]-1659785474994
[2682637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1100.
GPR[EPS]-1659785477913
GPR[SPVATF]-1659785477914
GPR[EPVATF]-1659785480725
GPR[SPS]-1659785480725
[2687439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1100.
GPR[EPS]-1659785482715
GPR[ESUN]-1659785482715
GPR[SSUN]-1659785482715
GPR[ESUN]-1659785482715
GPR[SSUN]-1659785482716
80988634
GPR[ESUN]-1659785482926
GPR[SSUN]-1659785482926
GPR[ESUN]-1659785482926
GPR[SSUN]-1659785482926
1537627151
GPR[ESUN]-1659785483213
GPR[SSUN]-1659785483213
-1345859678
GPR[SPVATF]-1659785483693
GPR[EPVATF]-1659785484111
GPR[SPS]-1659785484111
[2689713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1096.
GPR[EPS]-1659785484989
GPR[ESUN]-1659785484989
GPR[SSUN]-1659785484989
-1345859678
GPR[ESUN]-1659785485296
GPR[SSUN]-1659785485296
-1345859678
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
GPR[ESUN]-1659785485624
GPR[SSUN]-1659785485624
175865530
GPR[ESUN]-1659785485809
GPR[SSUN]-1659785485809
-534884160
GPR[ESUN]-1659785486279
GPR[SSUN]-1659785486280
-534884160
GPR[ESUN]-1659785486700
GPR[SSUN]-1659785486700
1187751237
GPR[ESUN]-1659785487052
GPR[SSUN]-1659785487052
175865530
GPR[SPVATF]-1659785487246
GPR[EPVATF]-1659785487602
GPR[SPS]-1659785487602
[2692884] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:185.
GPR[EPS]-1659785488161
GPR[ESUN]-1659785488161
GPR[SSUN]-1659785488161
175865530
GPR[SPVATF]-1659785488359
GPR[EPVATF]-1659785488734
GPR[SPS]-1659785488734
[2693966] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:63.
GPR[EPS]-1659785489242
GPR[ESUN]-1659785489242
GPR[SSUN]-1659785489242
175865530
GPR[ESUN]-1659785489423
GPR[SSUN]-1659785489423
175865530
GPR[ESUN]-1659785489603
GPR[SSUN]-1659785489603
175865530
GPR[ESUN]-1659785489783
GPR[SSUN]-1659785489783
175865530
GPR[ESUN]-1659785489966
GPR[SSUN]-1659785489966
175865530
GPR[SPVATF]-1659785490145
GPR[EPVATF]-1659785490524
GPR[SPS]-1659785490524
[2695760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:196.
GPR[EPS]-1659785491036
GPR[ESUN]-1659785491036
GPR[SSUN]-1659785491037
175865530
GPR[SPVATF]-1659785491224
GPR[EPVATF]-1659785491583
GPR[SPS]-1659785491583
[2696786] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:193.
GPR[EPS]-1659785492063
GPR[SPVATF]-1659785492063
GPR[EPVATF]-1659785492438
GPR[SPS]-1659785492438
[2697676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:193.
GPR[EPS]-1659785492952
GPR[ESUN]-1659785492952
GPR[SSUN]-1659785492952
175865530
GPR[ESUN]-1659785493135
GPR[SSUN]-1659785493135
2433571
GPR[SPVATF]-1659785493404
GPR[EPVATF]-1659785493760
GPR[SPS]-1659785493760
[2699339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:643.
GPR[EPS]-1659785494615
GPR[ESUN]-1659785494615
GPR[SSUN]-1659785494615
2433571
GPR[SPVATF]-1659785494877
GPR[EPVATF]-1659785495227
GPR[SPS]-1659785495227
[2700736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:642.
GPR[EPS]-1659785496012
GPR[ESUN]-1659785496012
GPR[SSUN]-1659785496013
2433571
GPR[SPVATF]-1659785496270
GPR[EPVATF]-1659785496615
GPR[SPS]-1659785496615
[2702085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:641.
GPR[EPS]-1659785497361
GPR[ESUN]-1659785497361
GPR[SSUN]-1659785497361
2433571
GPR[SPVATF]-1659785497657
GPR[EPVATF]-1659785498014
GPR[SPS]-1659785498014
[2703483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:640.
GPR[EPS]-1659785498760
GPR[ESUN]-1659785498760
GPR[SSUN]-1659785498760
-718432441
GPR[SPVATF]-1659785498992
GPR[EPVATF]-1659785499346
GPR[SPS]-1659785499346
[2704825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:173.
GPR[EPS]-1659785500101
GPR[ESUN]-1659785500101
GPR[SSUN]-1659785500101
GPR[ESUN]-1659785500101
GPR[SSUN]-1659785500101
GPR[ESUN]-1659785500101
GPR[SSUN]-1659785500101
GPR[ESUN]-1659785500101
GPR[SSUN]-1659785500101
-718432441
GPR[SPVATF]-1659785500331
GPR[EPVATF]-1659785500685
GPR[SPS]-1659785500685
[2706200] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:178.
GPR[EPS]-1659785501476
GPR[ESUN]-1659785501476
GPR[SSUN]-1659785501476
-718432441
GPR[SPVATF]-1659785501703
GPR[EPVATF]-1659785502053
GPR[SPS]-1659785502053
[2707496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:177.
GPR[EPS]-1659785502772
GPR[ESUN]-1659785502772
GPR[SSUN]-1659785502772
-718432441
GPR[SPVATF]-1659785502997
GPR[EPVATF]-1659785503352
GPR[SPS]-1659785503352
[2708809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:172.
GPR[EPS]-1659785504085
GPR[SPVATF]-1659785504085
GPR[EPVATF]-1659785504439
GPR[SPS]-1659785504439
[2709947] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:172.
GPR[EPS]-1659785505223
GPR[ESUN]-1659785505223
GPR[SSUN]-1659785505223
-718432441
GPR[SPVATF]-1659785505448
GPR[EPVATF]-1659785505818
GPR[SPS]-1659785505818
[2711268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:171.
GPR[EPS]-1659785506544
GPR[ESUN]-1659785506544
GPR[SSUN]-1659785506544
GPR[ESUN]-1659785506544
GPR[SSUN]-1659785506544
GPR[ESUN]-1659785506544
GPR[SSUN]-1659785506544
-2054390034
GPR[ESUN]-1659785506810
GPR[SSUN]-1659785506810
-2054390034
GPR[ESUN]-1659785507073
GPR[SSUN]-1659785507073
2433571
GPR[SPVATF]-1659785507321
GPR[EPVATF]-1659785507682
GPR[SPS]-1659785507682
[2713113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:639.
GPR[EPS]-1659785508389
GPR[SPVATF]-1659785508389
GPR[EPVATF]-1659785508747
GPR[SPS]-1659785508747
[2714240] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:639.
GPR[EPS]-1659785509516
GPR[ESUN]-1659785509516
GPR[SSUN]-1659785509516
2433571
GPR[SPVATF]-1659785509771
GPR[EPVATF]-1659785510130
GPR[SPS]-1659785510130
[2715551] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:637.
GPR[EPS]-1659785510827
GPR[ESUN]-1659785510827
GPR[SSUN]-1659785510827
2433571
GPR[SPVATF]-1659785511074
GPR[EPVATF]-1659785511429
GPR[SPS]-1659785511430
[2716873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:635.
GPR[EPS]-1659785512149
GPR[ESUN]-1659785512149
GPR[SSUN]-1659785512149
2433571
GPR[SPVATF]-1659785512396
GPR[EPVATF]-1659785512749
GPR[SPS]-1659785512749
[2718154] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:633.
GPR[EPS]-1659785513430
GPR[ESUN]-1659785513430
GPR[SSUN]-1659785513430
GPR[ESUN]-1659785513430
GPR[SSUN]-1659785513430
-1117079791
GPR[ESUN]-1659785513687
GPR[SSUN]-1659785513687
-1117079791
GPR[SPVATF]-1659785513891
GPR[EPVATF]-1659785514277
GPR[SPS]-1659785514277
[2719534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:367.
GPR[EPS]-1659785514810
GPR[ESUN]-1659785514810
GPR[SSUN]-1659785514810
-1117079791
GPR[SPVATF]-1659785515015
GPR[EPVATF]-1659785515399
GPR[SPS]-1659785515400
[2720685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:366.
GPR[EPS]-1659785515961
GPR[ESUN]-1659785515961
GPR[SSUN]-1659785515962
-1345859678
GPR[ESUN]-1659785516229
GPR[SSUN]-1659785516229
-1345859678
GPR[ESUN]-1659785516497
GPR[SSUN]-1659785516497
1537627151
GPR[ESUN]-1659785516714
GPR[SSUN]-1659785516714
-1345859678
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
GPR[ESUN]-1659785516976
GPR[SSUN]-1659785516976
2433571
GPR[ESUN]-1659785517223
GPR[SSUN]-1659785517223
GPR[ESUN]-1659785517223
GPR[SSUN]-1659785517223
GPR[ESUN]-1659785517223
GPR[SSUN]-1659785517223
GPR[ESUN]-1659785517223
GPR[SSUN]-1659785517223
2346
GPR[ESUN]-1659785517408
GPR[SSUN]-1659785517408
GPR[ESUN]-1659785517408
GPR[SSUN]-1659785517408
2433571
GPR[ESUN]-1659785517653
GPR[SSUN]-1659785517653
-1117079791
GPR[ESUN]-1659785517855
GPR[SSUN]-1659785517855
-1117079791
GPR[SPVATF]-1659785518059
GPR[EPVATF]-1659785518447
GPR[SPS]-1659785518447
[2723748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:278.
GPR[EPS]-1659785519024
GPR[ESUN]-1659785519024
GPR[SSUN]-1659785519024
-1117079791
GPR[SPVATF]-1659785519361
GPR[EPVATF]-1659785519752
GPR[SPS]-1659785519752
[2725007] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:277.
GPR[EPS]-1659785520283
GPR[ESUN]-1659785520283
GPR[SSUN]-1659785520283
GPR[ESUN]-1659785520283
GPR[SSUN]-1659785520283
GPR[ESUN]-1659785520283
GPR[SSUN]-1659785520283
GPR[ESUN]-1659785520283
GPR[SSUN]-1659785520283
GPR[ESUN]-1659785520284
GPR[SSUN]-1659785520284
GPR[ESUN]-1659785520284
GPR[SSUN]-1659785520284
GPR[ESUN]-1659785520284
GPR[SSUN]-1659785520284
GPR[ESUN]-1659785520284
GPR[SSUN]-1659785520284
GPR[ESUN]-1659785520284
GPR[SSUN]-1659785520284
GPR[ESUN]-1659785520284
GPR[SSUN]-1659785520284
GPR[ESUN]-1659785520284
GPR[SSUN]-1659785520284
-718432441
GPR[SPVATF]-1659785520510
GPR[EPVATF]-1659785520864
GPR[SPS]-1659785520864
[2726325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:688.
GPR[EPS]-1659785521601
GPR[SPVATF]-1659785521601
GPR[EPVATF]-1659785521958
GPR[SPS]-1659785521958
[2727412] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:688.
GPR[EPS]-1659785522688
GPR[ESUN]-1659785522688
GPR[SSUN]-1659785522688
-718432441
GPR[SPVATF]-1659785522915
GPR[EPVATF]-1659785523283
GPR[SPS]-1659785523283
[2728777] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:687.
GPR[EPS]-1659785524053
GPR[ESUN]-1659785524053
GPR[SSUN]-1659785524053
-718432441
GPR[SPVATF]-1659785524286
GPR[EPVATF]-1659785524656
GPR[SPS]-1659785524656
[2730105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:655.
GPR[EPS]-1659785525381
GPR[ESUN]-1659785525381
GPR[SSUN]-1659785525381
-718432441
GPR[SPVATF]-1659785525608
GPR[EPVATF]-1659785525974
GPR[SPS]-1659785525974
[2731420] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:654.
GPR[EPS]-1659785526696
GPR[ESUN]-1659785526696
GPR[SSUN]-1659785526696
-718432441
GPR[SPVATF]-1659785526929
GPR[EPVATF]-1659785527347
GPR[SPS]-1659785527347
[2732786] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:651.
GPR[EPS]-1659785528062
GPR[SPVATF]-1659785528063
GPR[EPVATF]-1659785528422
GPR[SPS]-1659785528422
[2733859] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:651.
GPR[EPS]-1659785529135
GPR[ESUN]-1659785529135
GPR[SSUN]-1659785529135
-718432441
GPR[ESUN]-1659785529365
GPR[SSUN]-1659785529365
-1117079791
GPR[SPVATF]-1659785529568
GPR[EPVATF]-1659785529959
GPR[SPS]-1659785529959
[2735233] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:809.
GPR[EPS]-1659785530509
GPR[ESUN]-1659785530509
GPR[SSUN]-1659785530509
-1117079791
GPR[ESUN]-1659785530714
GPR[SSUN]-1659785530714
-1117079791
GPR[SPVATF]-1659785530915
GPR[EPVATF]-1659785531313
GPR[SPS]-1659785531313
[2736633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:813.
GPR[EPS]-1659785531909
GPR[SPVATF]-1659785531909
GPR[EPVATF]-1659785532303
GPR[SPS]-1659785532303
[2737562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:813.
GPR[EPS]-1659785532838
GPR[ESUN]-1659785532838
GPR[SSUN]-1659785532838
-1117079791
GPR[SPVATF]-1659785533043
GPR[EPVATF]-1659785533438
GPR[SPS]-1659785533438
[2738711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:808.
GPR[EPS]-1659785533987
GPR[SPVATF]-1659785533988
GPR[EPVATF]-1659785534374
GPR[SPS]-1659785534374
[2739633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:808.
GPR[EPS]-1659785534909
GPR[ESUN]-1659785534909
GPR[SSUN]-1659785534909
-1117079791
GPR[ESUN]-1659785535115
GPR[SSUN]-1659785535115
79711797
GPR[ESUN]-1659785535364
GPR[SSUN]-1659785535364
GPR[ESUN]-1659785535364
GPR[SSUN]-1659785535364
-1117079791
GPR[ESUN]-1659785535564
GPR[SSUN]-1659785535565
-1117079791
GPR[SPVATF]-1659785535765
GPR[EPVATF]-1659785536188
GPR[SPS]-1659785536188
[2741445] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:475.
GPR[EPS]-1659785536721
GPR[ESUN]-1659785536721
GPR[SSUN]-1659785536721
-1117079791
GPR[SPVATF]-1659785536924
GPR[EPVATF]-1659785537321
GPR[SPS]-1659785537321
[2742589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:474.
GPR[EPS]-1659785537865
GPR[ESUN]-1659785537865
GPR[SSUN]-1659785537865
-1117079791
GPR[SPVATF]-1659785538068
GPR[EPVATF]-1659785538566
GPR[SPS]-1659785538566
[2743826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:473.
GPR[EPS]-1659785539102
GPR[ESUN]-1659785539102
GPR[SSUN]-1659785539102
-1117079791
GPR[ESUN]-1659785539304
GPR[SSUN]-1659785539304
-1117079791
GPR[SPVATF]-1659785539504
GPR[EPVATF]-1659785539897
GPR[SPS]-1659785539897
[2745155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:125.
GPR[EPS]-1659785540431
GPR[ESUN]-1659785540431
GPR[SSUN]-1659785540431
GPR[ESUN]-1659785540431
GPR[SSUN]-1659785540431
GPR[ESUN]-1659785540431
GPR[SSUN]-1659785540431
GPR[ESUN]-1659785540431
GPR[SSUN]-1659785540431
GPR[ESUN]-1659785540431
GPR[SSUN]-1659785540431
GPR[ESUN]-1659785540432
GPR[SSUN]-1659785540432
GPR[ESUN]-1659785540432
GPR[SSUN]-1659785540432
GPR[ESUN]-1659785540432
GPR[SSUN]-1659785540432
GPR[ESUN]-1659785540432
GPR[SSUN]-1659785540432
GPR[ESUN]-1659785540432
GPR[SSUN]-1659785540432
80988634
GPR[ESUN]-1659785540611
GPR[SSUN]-1659785540611
-1345859678
GPR[ESUN]-1659785540877
GPR[SSUN]-1659785540877
-1345859678
GPR[SPVATF]-1659785541141
GPR[EPVATF]-1659785541548
GPR[SPS]-1659785541548
[4545869] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659787341152
GPR[SSUN]-1659787341152
GPR[ESUN]-1659787341152
GPR[SSUN]-1659787341152
GPR[ESUN]-1659787341152
GPR[SSUN]-1659787341152
GPR[ESUN]-1659787341152
GPR[SSUN]-1659787341152
GPR[ESUN]-1659787341152
GPR[SSUN]-1659787341152
GPR[ESUN]-1659787341152
GPR[SSUN]-1659787341152
GPR[ESUN]-1659787341152
GPR[SSUN]-1659787341152
GPR[ESUN]-1659787341152
GPR[SSUN]-1659787341152
-2054390034
GPR[ESUN]-1659787341636
GPR[SSUN]-1659787341636
-2054390034
GPR[SPVATF]-1659787341906
GPR[EPVATF]-1659787342313
GPR[SPS]-1659787342313
[4781501] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659787587913
GPR[SSUN]-1659787587914
\n\nNode: host-53\n
\n\nDate: Sat 06 Aug 2022 05:06:57 AM PDT\n
End running Nopol Closure/5 results at /experiment_home///results/Nopol/Closure/5/seed_260/
Removing checked out dir script/workingdir/Nopol/Closure_5
GPR[SSLE]-1659787618388
GPR[ESLE]-1659787678393
