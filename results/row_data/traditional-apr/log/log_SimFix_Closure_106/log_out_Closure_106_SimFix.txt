Sleep 1m start
GPR[SSLI]-1659874817899
GPR[ESLI]-1659874877904
Running SimFix Closure 106b
Timezone: America/Los_Angeles
Seed 261
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Closure/106/seed_261/
Project lc: closure
New out script/workingdir/SimFix/closure/closure_106_buggy
The file script/workingdir/SimFix/closure/closure_106_buggy does not exist!
script/workingdir/SimFix/closure/closure_106_buggy
Current directory: script/workingdir/SimFix/closure/closure_106_buggy
classpath:  script/workingdir/SimFix/closure/closure_106_buggy/build/classes:script/workingdir/SimFix/closure/closure_106_buggy/lib/google_common_deploy.jar:script/workingdir/SimFix/closure/closure_106_buggy/lib/google_compiled_protos_deploy.jar:script/workingdir/SimFix/closure/closure_106_buggy/lib/junit.jar:script/workingdir/SimFix/closure/closure_106_buggy/lib/libtrunk_rhino_parser_jarjared.jar:script/workingdir/SimFix/closure/closure_106_buggy/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659874890022
GPR[ESLB]-1659874950027
Calling SimFix: at script/workingdir/SimFix/closure/closure_106_buggy
build
build.xml
COPYING
d4j-info
defects4j.build.properties
externs
javadoc
lib
README
src
test
tools
content current dir: build build.xml COPYING d4j-info defects4j.build.properties externs javadoc lib README src test tools
Node: host-45
Date init: Sun 07 Aug 2022 05:22:32 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659874952297
=================================================
Project : closure_106	start : 22/08/07 05:22

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : JSType and Type
Field type inconsistancy 'THIS' with types : Token and int
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
TESTING : com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInCommaOperator
TESTING : com.google.javascript.jscomp.CollapsePropertiesTest::testTwinReferenceCancelsChildCollapsing
TESTING : com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInNestedAssign
GPR[ESUP]-1659874960736
GPR[SFL]-1659874961096
GPR[EFL]-1659874961100
GPR[SFP]-1659874961100
TIMEOUT : 4500000
GPR[SSUN]-1659874961115
com.google.javascript.rhino.Node,221
GPR[ESUN]-1659874964179
GPR[SSUN]-1659874964179
com.google.javascript.rhino.Node,1323
GPR[ESUN]-1659874965239
GPR[SSUN]-1659874965239
com.google.javascript.rhino.Node,742
========
if(prev!=null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874966409
GPR[SPVAP]-1659874966409
GPR[EPVAP]-1659874969979
GPR[SPVATF]-1659874969979
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659874971063
GPR[EPVS]-1659874971063
========
if(item==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874971066
GPR[SPVAP]-1659874971066
GPR[EPVAP]-1659874971797
GPR[EPVS]-1659874971797
========
if(prev==null){
item=new PropListItem();
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874971799
GPR[SPVAP]-1659874971799
GPR[EPVAP]-1659874972531
GPR[EPVS]-1659874972531
========
if(prev==null){
item.type=propType;
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874972533
GPR[SPVAP]-1659874972533
GPR[EPVAP]-1659874973279
GPR[EPVS]-1659874973279
========
if(prev==null){
item.next=propListHead;
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874973281
GPR[SPVAP]-1659874973281
GPR[EPVAP]-1659874974006
GPR[EPVS]-1659874974007
========
if(prev==null){
item=new PropListItem();
item.type=propType;
item.next=propListHead;

propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874974009
GPR[SPVAP]-1659874974009
GPR[EPVAP]-1659874974743
GPR[EPVS]-1659874974743
========
if(prev==null){
propListHead=x.next;
}else {
item=new PropListItem();
prev.next=x.next;
}

========
GPR[SPVS]-1659874974745
GPR[SPVAP]-1659874974745
GPR[EPVAP]-1659874975493
GPR[EPVS]-1659874975493
========
if(prev==null){
propListHead=x.next;
}else {
item.type=propType;
prev.next=x.next;
}

========
GPR[SPVS]-1659874975495
GPR[SPVAP]-1659874975495
GPR[EPVAP]-1659874976219
GPR[EPVS]-1659874976220
========
if(prev==null){
propListHead=x.next;
}else {
propListHead=prev;
prev.next=x.next;
}

========
GPR[SPVS]-1659874976221
GPR[SPVAP]-1659874976221
GPR[EPVAP]-1659874977394
GPR[SPVATF]-1659874977394
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659874978473
GPR[EPVS]-1659874978473
========
if(prev==null){
propListHead=x.next;
}else {
item=new PropListItem();
item.type=propType;
propListHead=prev;

prev.next=x.next;
}

========
GPR[SPVS]-1659874978475
GPR[SPVAP]-1659874978475
GPR[EPVAP]-1659874979210
GPR[EPVS]-1659874979210
========
if(null!=this.last.next){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874979213
GPR[SPVAP]-1659874979213
GPR[EPVAP]-1659874980395
GPR[SPVATF]-1659874980395
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659874981486
GPR[EPVS]-1659874981486
========
if(prev==this.last.next){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874981488
GPR[SPVAP]-1659874981489
GPR[EPVAP]-1659874982213
GPR[EPVS]-1659874982213
========
case Token.ERROR :

if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874982216
GPR[SPVAP]-1659874982216
GPR[EPVAP]-1659874982787
GPR[EPVS]-1659874982787
========
if(prev==null){
propListHead=first;
}else {
prev.next=first;
}

========
GPR[SPVS]-1659874982791
GPR[SPVAP]-1659874982791
GPR[EPVAP]-1659874983517
GPR[EPVS]-1659874983517
========
if(prev==parent){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874983520
GPR[SPVAP]-1659874983520
GPR[EPVAP]-1659874984246
GPR[EPVS]-1659874984246
========
if(prev==null){
propListHead=first;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874984248
GPR[SPVAP]-1659874984248
GPR[EPVAP]-1659874984971
GPR[EPVS]-1659874984971
========
if(prev==null){
propListHead=x.next;
}else {
prev.next=first;
}

========
GPR[SPVS]-1659874984973
GPR[SPVAP]-1659874984973
GPR[EPVAP]-1659874985710
GPR[EPVS]-1659874985710
========
if(prev==null){
newChild.parent=this;
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874985712
GPR[SPVAP]-1659874985712
GPR[EPVAP]-1659874986472
GPR[EPVS]-1659874986472
========
if(prev==null){
first=parent;
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874986474
GPR[SPVAP]-1659874986474
GPR[EPVAP]-1659874987676
GPR[SPVATF]-1659874987676
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659874988760
GPR[EPVS]-1659874988760
========
if(prev==null){
return ;
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874988762
GPR[SPVAP]-1659874988762
GPR[EPVAP]-1659874989512
GPR[EPVS]-1659874989512
========
if(prev==null){
newChild.parent=this;
first=parent;
return ;

propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874989514
GPR[SPVAP]-1659874989514
GPR[EPVAP]-1659874990247
GPR[EPVS]-1659874990247
========
if(prev==null){
propListHead=x.next;
}else {
newChild.parent=this;
prev.next=x.next;
}

========
GPR[SPVS]-1659874990249
GPR[SPVAP]-1659874990249
GPR[EPVAP]-1659874990977
GPR[EPVS]-1659874990977
========
if(prev==null){
propListHead=x.next;
}else {
first=parent;
prev.next=x.next;
}

========
GPR[SPVS]-1659874990979
GPR[SPVAP]-1659874990979
GPR[EPVAP]-1659874992185
GPR[SPVATF]-1659874992185
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659874993269
GPR[EPVS]-1659874993269
========
if(prev==null){
propListHead=x.next;
}else {
return ;
prev.next=x.next;
}

========
GPR[SPVS]-1659874993271
GPR[SPVAP]-1659874993271
GPR[EPVAP]-1659874994004
GPR[EPVS]-1659874994004
========
if(prev==null){
propListHead=x.next;
}else {
newChild.parent=this;
first=parent;
return ;

prev.next=x.next;
}

========
GPR[SPVS]-1659874994006
GPR[SPVAP]-1659874994006
GPR[EPVAP]-1659874994736
GPR[EPVS]-1659874994736
========
if(prev==null){
first=parent;
propListHead=x.next;
}else {
first=parent;
prev.next=x.next;
}

========
GPR[SPVS]-1659874994738
GPR[SPVAP]-1659874994738
GPR[EPVAP]-1659874995907
GPR[SPVATF]-1659874995907
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659874997010
GPR[EPVS]-1659874997010
========
if(prev==last){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874997012
GPR[SPVAP]-1659874997012
GPR[EPVAP]-1659874997757
GPR[EPVS]-1659874997757
========
newChild.next=child.next;
if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874997759
GPR[SPVAP]-1659874997759
GPR[EPVAP]-1659874998495
GPR[EPVS]-1659874998495
========
newChild.parent=this;
if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874998497
GPR[SPVAP]-1659874998497
GPR[EPVAP]-1659874999230
GPR[EPVS]-1659874999230
========
prevChild.next=next;
if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874999232
GPR[SPVAP]-1659874999232
GPR[EPVAP]-1659874999965
GPR[EPVS]-1659874999965
========
child.next=null;
if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659874999967
GPR[SPVAP]-1659874999967
GPR[EPVAP]-1659875000695
GPR[EPVS]-1659875000695
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659875000698
GPR[SPVAP]-1659875000698
GPR[EPVAP]-1659875001429
GPR[EPVS]-1659875001429
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659875001430
GPR[SPVAP]-1659875001430
GPR[EPVAP]-1659875002189
GPR[EPVS]-1659875002189
========
newChild.next=node.next;
if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659875002191
GPR[SPVAP]-1659875002191
GPR[EPVAP]-1659875002917
GPR[EPVS]-1659875002917
========
node.next=next;
if(prev==null){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659875002918
GPR[SPVAP]-1659875002918
GPR[EPVAP]-1659875003654
GPR[EPVS]-1659875003654
========
newChild.parent=this;
if(prev==parent){
propListHead=x.next;
}else {
prev.next=x.next;
}

========
GPR[SPVS]-1659875003656
GPR[SPVAP]-1659875003656
GPR[EPVAP]-1659875004395
GPR[EPVS]-1659875004395
GPR[ESUN]-1659875004398
GPR[SSUN]-1659875004398
com.google.javascript.rhino.Node,915
========
if(type!=Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875006052
GPR[SPVAP]-1659875006052
GPR[EPVAP]-1659875009708
GPR[SPVATF]-1659875009708
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875010802
GPR[EPVS]-1659875010802
========
if(type!=-1){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875010805
GPR[SPVAP]-1659875010805
GPR[EPVAP]-1659875012010
GPR[SPVATF]-1659875012010
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875013104
GPR[EPVS]-1659875013104
========
if(type==-1){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875013106
GPR[SPVAP]-1659875013106
GPR[EPVAP]-1659875014284
GPR[SPVATF]-1659875014284
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875015366
GPR[EPVS]-1659875015366
========
if(lineno==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875015368
GPR[SPVAP]-1659875015368
GPR[EPVAP]-1659875016101
GPR[EPVS]-1659875016101
========
if(type==Token.NUMBER){
b.append(' ');
b.append(getDouble());
}

========
GPR[SPVS]-1659875016103
GPR[SPVAP]-1659875016103
GPR[EPVAP]-1659875016849
GPR[EPVS]-1659875016849
========
if(type==call.returnType){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875016851
GPR[SPVAP]-1659875016851
GPR[EPVAP]-1659875017587
GPR[EPVS]-1659875017587
========
if(type==Token.NUMBER){
b.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875017589
GPR[SPVAP]-1659875017589
GPR[EPVAP]-1659875018320
GPR[EPVS]-1659875018320
========
if(type==Token.NUMBER){
sb.append(' ');
b.append(getDouble());
}

========
GPR[SPVS]-1659875018322
GPR[SPVAP]-1659875018322
GPR[EPVAP]-1659875019069
GPR[EPVS]-1659875019069
========
sb.append(")");
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875019070
GPR[SPVAP]-1659875019070
GPR[EPVAP]-1659875020297
GPR[SPVATF]-1659875020297
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875021388
GPR[EPVS]-1659875021388
========
if(i==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875021390
GPR[SPVAP]-1659875021390
GPR[EPVAP]-1659875022121
GPR[EPVS]-1659875022122
========
if(lineNumber==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875022123
GPR[SPVAP]-1659875022123
GPR[EPVAP]-1659875022852
GPR[EPVS]-1659875022852
========
if(nDigits==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875022855
GPR[SPVAP]-1659875022855
GPR[EPVAP]-1659875023599
GPR[EPVS]-1659875023599
========
if(type==null){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875023601
GPR[SPVAP]-1659875023601
GPR[EPVAP]-1659875024337
GPR[EPVS]-1659875024337
========
if(c==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875024339
GPR[SPVAP]-1659875024339
GPR[EPVAP]-1659875025063
GPR[EPVS]-1659875025063
========
if(type==Token.NUMBER){
hexSize=2;
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875025065
GPR[SPVAP]-1659875025065
GPR[EPVAP]-1659875025832
GPR[EPVS]-1659875025832
========
if(type==Token.NUMBER){
hexSize=4;
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875025834
GPR[SPVAP]-1659875025834
GPR[EPVAP]-1659875026557
GPR[EPVS]-1659875026557
========
if(type!=null){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875026559
GPR[SPVAP]-1659875026559
GPR[EPVAP]-1659875027286
GPR[EPVS]-1659875027286
========
sb.append(") {}");
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875027289
GPR[SPVAP]-1659875027289
GPR[EPVAP]-1659875028488
GPR[SPVATF]-1659875028488
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875029576
GPR[EPVS]-1659875029576
========
sb.append(") {}");
if(i==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875029578
GPR[SPVAP]-1659875029578
GPR[EPVAP]-1659875030303
GPR[EPVS]-1659875030303
========
if(type=='9'){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875030305
GPR[SPVAP]-1659875030305
GPR[EPVAP]-1659875031995
GPR[SPVATF]-1659875031995
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875033304
GPR[EPVS]-1659875033304
========
if(token==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875033306
GPR[SPVAP]-1659875033306
GPR[EPVAP]-1659875034073
GPR[EPVS]-1659875034073
========
if(type==Token.LAST_TOKEN){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875034075
GPR[SPVAP]-1659875034075
GPR[EPVAP]-1659875035337
GPR[SPVATF]-1659875035337
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875036435
GPR[EPVS]-1659875036435
========
append((char)type);
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875036436
GPR[SPVAP]-1659875036436
GPR[EPVAP]-1659875037158
GPR[EPVS]-1659875037158
========
append((char)Token.EOL);
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875037160
GPR[SPVAP]-1659875037160
GPR[EPVAP]-1659875037884
GPR[EPVS]-1659875037885
========
if(ilim==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875037887
GPR[SPVAP]-1659875037887
GPR[EPVAP]-1659875038629
GPR[EPVS]-1659875038629
========
if(d==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875038631
GPR[SPVAP]-1659875038631
GPR[EPVAP]-1659875039383
GPR[EPVS]-1659875039383
========
if(ds==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875039384
GPR[SPVAP]-1659875039384
GPR[EPVAP]-1659875040113
GPR[EPVS]-1659875040113
========
if(type==Token.NUMBER){
sb.setLength(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875040115
GPR[SPVAP]-1659875040115
GPR[EPVAP]-1659875041284
GPR[SPVATF]-1659875041284
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875042391
GPR[EPVS]-1659875042391
========
COLUMN_BITS++;
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875042403
GPR[SPVAP]-1659875042403
GPR[EPVAP]-1659875043147
GPR[EPVS]-1659875043147
========
if(type==WhitespaceOption.SINGLE_LINE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875043150
GPR[SPVAP]-1659875043150
GPR[EPVAP]-1659875043878
GPR[EPVS]-1659875043878
========
if(type==Token.NUMBER){
builder.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875043879
GPR[SPVAP]-1659875043879
GPR[EPVAP]-1659875044617
GPR[EPVS]-1659875044617
========
if(type!=WhitespaceOption.SINGLE_LINE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875044618
GPR[SPVAP]-1659875044618
GPR[EPVAP]-1659875045342
GPR[EPVS]-1659875045342
========
if(j==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875045344
GPR[SPVAP]-1659875045344
GPR[EPVAP]-1659875046078
GPR[EPVS]-1659875046078
========
if(type==FunctionNode.FUNCTION_EXPRESSION){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875046080
GPR[SPVAP]-1659875046080
GPR[EPVAP]-1659875047257
GPR[SPVATF]-1659875047257
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875048374
GPR[EPVS]-1659875048374
========
if(topFunctionType==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875048376
GPR[SPVAP]-1659875048376
GPR[EPVAP]-1659875049113
GPR[EPVS]-1659875049113
========
if(topFunctionType==FunctionNode.FUNCTION_EXPRESSION){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875049115
GPR[SPVAP]-1659875049115
GPR[EPVAP]-1659875049841
GPR[EPVS]-1659875049841
========
if(lineLength==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875049843
GPR[SPVAP]-1659875049843
GPR[EPVAP]-1659875050571
GPR[EPVS]-1659875050571
========
if(type==Token.NUMBER){
code.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875050572
GPR[SPVAP]-1659875050572
GPR[EPVAP]-1659875051310
GPR[EPVS]-1659875051310
========
if(type==Token.NUMBER){
COLUMN_BITS++;
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875051312
GPR[SPVAP]-1659875051312
GPR[EPVAP]-1659875052048
GPR[EPVS]-1659875052048
========
if(type==Token.NUMBER){
lineLength=0;
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875052050
GPR[SPVAP]-1659875052050
GPR[EPVAP]-1659875052799
GPR[EPVS]-1659875052799
========
if(type==Token.NUMBER){
COLUMN_BITS++;
lineLength=0;

sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875052801
GPR[SPVAP]-1659875052801
GPR[EPVAP]-1659875053531
GPR[EPVS]-1659875053531
========
if(ilim==Token.NUMBER){
sb.setLength(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875053533
GPR[SPVAP]-1659875053533
GPR[EPVAP]-1659875054265
GPR[EPVS]-1659875054265
========
COLUMN_BITS++;
if(ilim==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875054267
GPR[SPVAP]-1659875054267
GPR[EPVAP]-1659875055014
GPR[EPVS]-1659875055014
========
COLUMN_BITS++;
if(type==Token.NUMBER){
sb.setLength(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875055015
GPR[SPVAP]-1659875055015
GPR[EPVAP]-1659875055743
GPR[EPVS]-1659875055743
========
COLUMN_BITS++;
if(ilim==Token.NUMBER){
sb.setLength(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875055745
GPR[SPVAP]-1659875055745
GPR[EPVAP]-1659875056479
GPR[EPVS]-1659875056479
========
if(d==Token.NUMBER){
COLUMN_BITS++;
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875056481
GPR[SPVAP]-1659875056481
GPR[EPVAP]-1659875057227
GPR[EPVS]-1659875057227
========
if(d==Token.NUMBER){
sb.setLength(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875057230
GPR[SPVAP]-1659875057230
GPR[EPVAP]-1659875057973
GPR[EPVS]-1659875057973
========
if(token==Token.LAST_TOKEN){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875057976
GPR[SPVAP]-1659875057976
GPR[EPVAP]-1659875058701
GPR[EPVS]-1659875058701
========
append((char)type);
if(token==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875058703
GPR[SPVAP]-1659875058703
GPR[EPVAP]-1659875059430
GPR[EPVS]-1659875059430
========
append((char)type);
if(type==Token.LAST_TOKEN){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875059431
GPR[SPVAP]-1659875059431
GPR[EPVAP]-1659875060158
GPR[EPVS]-1659875060158
========
append((char)type);
if(token==Token.LAST_TOKEN){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875060160
GPR[SPVAP]-1659875060160
GPR[EPVAP]-1659875060887
GPR[EPVS]-1659875060887
========
maybeEndStatement();
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875060890
GPR[SPVAP]-1659875060890
GPR[EPVAP]-1659875061631
GPR[EPVS]-1659875061631
========
if(str.length()==0){
return ;
}
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875061632
GPR[SPVAP]-1659875061632
GPR[EPVAP]-1659875062367
GPR[EPVS]-1659875062367
========
append(str);
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875062368
GPR[SPVAP]-1659875062368
GPR[EPVAP]-1659875063098
GPR[EPVS]-1659875063098
========
if(type==Token.NUMBER){
code.append(' ');
code.append(getDouble());
}

========
GPR[SPVS]-1659875063101
GPR[SPVAP]-1659875063101
GPR[EPVAP]-1659875063830
GPR[EPVS]-1659875063830
========
if(type==Token.NUMBER){
sb.append(' ');
code.append(getDouble());
}

========
GPR[SPVS]-1659875063832
GPR[SPVAP]-1659875063832
GPR[EPVAP]-1659875064571
GPR[EPVS]-1659875064571
========
if(type==Token.NUMBER){
sb.append(' ');
lineLength=0;
sb.append(getDouble());
}

========
GPR[SPVS]-1659875064572
GPR[SPVAP]-1659875064572
GPR[EPVAP]-1659875065309
GPR[EPVS]-1659875065309
========
if(type==Token.NUMBER){
sb.append(' ');
COLUMN_BITS++;
sb.append(getDouble());
}

========
GPR[SPVS]-1659875065310
GPR[SPVAP]-1659875065310
GPR[EPVAP]-1659875066039
GPR[EPVS]-1659875066039
========
if(type==Token.NUMBER){
sb.append(' ');
lineLength=0;
COLUMN_BITS++;

sb.append(getDouble());
}

========
GPR[SPVS]-1659875066041
GPR[SPVAP]-1659875066041
GPR[EPVAP]-1659875066796
GPR[EPVS]-1659875066796
========
if(lineLength==Token.NUMBER){
code.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875066797
GPR[SPVAP]-1659875066797
GPR[EPVAP]-1659875067527
GPR[EPVS]-1659875067527
========
if(type==WhitespaceOption.PRESERVE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875067529
GPR[SPVAP]-1659875067529
GPR[EPVAP]-1659875068263
GPR[EPVS]-1659875068263
========
sb.append(str);
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875068265
GPR[SPVAP]-1659875068265
GPR[EPVAP]-1659875068996
GPR[EPVS]-1659875068996
========
if(type!=WhitespaceOption.PRESERVE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875068998
GPR[SPVAP]-1659875068998
GPR[EPVAP]-1659875069739
GPR[EPVS]-1659875069739
========
if(options.externExportsPath!=null){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875069741
GPR[SPVAP]-1659875069741
GPR[EPVAP]-1659875070471
GPR[EPVS]-1659875070471
========
if(options.externExportsPath==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875070472
GPR[SPVAP]-1659875070472
GPR[EPVAP]-1659875071201
GPR[EPVS]-1659875071201
========
if(externExportsPath==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875071203
GPR[SPVAP]-1659875071203
GPR[EPVAP]-1659875071953
GPR[EPVS]-1659875071953
========
if(type==COLUMN_BITS){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875071955
GPR[SPVAP]-1659875071955
GPR[EPVAP]-1659875073133
GPR[SPVATF]-1659875073133
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875074212
GPR[EPVS]-1659875074212
========
if(length==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875074213
GPR[SPVAP]-1659875074213
GPR[EPVAP]-1659875074937
GPR[EPVS]-1659875074937
========
sb.append(str);
if(type==WhitespaceOption.PRESERVE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875074940
GPR[SPVAP]-1659875074940
GPR[EPVAP]-1659875075688
GPR[EPVS]-1659875075688
========
sb.append(str);
if(type!=Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875075690
GPR[SPVAP]-1659875075690
GPR[EPVAP]-1659875076421
GPR[EPVS]-1659875076421
========
sb.append(str);
if(type!=WhitespaceOption.PRESERVE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875076422
GPR[SPVAP]-1659875076422
GPR[EPVAP]-1659875077150
GPR[EPVS]-1659875077150
========
if(type==Token.SCRIPT){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875077157
GPR[SPVAP]-1659875077157
GPR[EPVAP]-1659875078343
GPR[SPVATF]-1659875078343
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875079419
GPR[EPVS]-1659875079419
========
if(type==Token.NAME){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875079422
GPR[SPVAP]-1659875079422
GPR[EPVAP]-1659875080608
GPR[SPVATF]-1659875080608
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875081682
GPR[EPVS]-1659875081682
========
if(type==Token.GETELEM){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875081685
GPR[SPVAP]-1659875081685
GPR[EPVAP]-1659875082859
GPR[SPVATF]-1659875082859
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875083952
GPR[EPVS]-1659875083952
========
if(type==Node.NON_SPECIALCALL){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875083954
GPR[SPVAP]-1659875083954
GPR[EPVAP]-1659875085127
GPR[SPVATF]-1659875085127
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875086215
GPR[EPVS]-1659875086215
========
if(type!=Node.NON_SPECIALCALL){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875086216
GPR[SPVAP]-1659875086216
GPR[EPVAP]-1659875087421
GPR[SPVATF]-1659875087422
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875088498
GPR[EPVS]-1659875088498
========
if(value==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875088501
GPR[SPVAP]-1659875088501
GPR[EPVAP]-1659875089227
GPR[EPVS]-1659875089227
========
if(next.getType()!=Token.NUMBER){
continue;
}
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875089229
GPR[SPVAP]-1659875089229
GPR[EPVAP]-1659875089959
GPR[EPVS]-1659875089959
========
if(type==Token.OBJECTLIT){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875089961
GPR[SPVAP]-1659875089961
GPR[EPVAP]-1659875091143
GPR[SPVATF]-1659875091143
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875092255
GPR[EPVS]-1659875092255
========
if(COLUMN_BITS==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875092257
GPR[SPVAP]-1659875092257
GPR[EPVAP]-1659875093456
GPR[SPVATF]-1659875093456
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875094531
GPR[EPVS]-1659875094531
========
if(type==Token.RETURN){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875094534
GPR[SPVAP]-1659875094534
GPR[EPVAP]-1659875095727
GPR[SPVATF]-1659875095727
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875096819
GPR[EPVS]-1659875096819
========
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875096821
GPR[SPVAP]-1659875096821
GPR[EPVAP]-1659875097999
GPR[SPVATF]-1659875097999
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875099078
GPR[EPVS]-1659875099078
========
if(type==Token.ASSIGN){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875099081
GPR[SPVAP]-1659875099081
GPR[EPVAP]-1659875100248
GPR[SPVATF]-1659875100248
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875101345
GPR[EPVS]-1659875101345
========
if(type==Token.EXPR_RESULT){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875101347
GPR[SPVAP]-1659875101347
GPR[EPVAP]-1659875102533
GPR[SPVATF]-1659875102533
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875103632
GPR[EPVS]-1659875103632
========
if(NOT==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875103634
GPR[SPVAP]-1659875103634
GPR[EPVAP]-1659875104388
GPR[EPVS]-1659875104388
========
if(type==Token.STRING){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875104391
GPR[SPVAP]-1659875104391
GPR[EPVAP]-1659875105573
GPR[SPVATF]-1659875105573
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875106675
GPR[EPVS]-1659875106675
========
if(postProp==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875106678
GPR[SPVAP]-1659875106678
GPR[EPVAP]-1659875107419
GPR[EPVS]-1659875107419
========
if(INSTANCEOF==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875107421
GPR[SPVAP]-1659875107421
GPR[EPVAP]-1659875108167
GPR[EPVS]-1659875108167
========
if(NAME==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875108169
GPR[SPVAP]-1659875108169
GPR[EPVAP]-1659875108892
GPR[EPVS]-1659875108892
========
if(type==Token.CATCH){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875108893
GPR[SPVAP]-1659875108893
GPR[EPVAP]-1659875110094
GPR[SPVATF]-1659875110094
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875111173
GPR[EPVS]-1659875111173
========
if(type==Token.BLOCK){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875111176
GPR[SPVAP]-1659875111176
GPR[EPVAP]-1659875112394
GPR[SPVATF]-1659875112394
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875113497
GPR[EPVS]-1659875113497
========
if(type==Token.DO){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875113500
GPR[SPVAP]-1659875113500
GPR[EPVAP]-1659875114667
GPR[SPVATF]-1659875114667
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875115752
GPR[EPVS]-1659875115752
========
if(type==Token.WHILE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875115755
GPR[SPVAP]-1659875115755
GPR[EPVAP]-1659875116948
GPR[SPVATF]-1659875116948
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875118038
GPR[EPVS]-1659875118038
========
if(type==next.getDouble()){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875118040
GPR[SPVAP]-1659875118040
GPR[EPVAP]-1659875119231
GPR[SPVATF]-1659875119231
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875120318
GPR[EPVS]-1659875120318
========
if(intVal==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875120320
GPR[SPVAP]-1659875120320
GPR[EPVAP]-1659875121054
GPR[EPVS]-1659875121054
========
if(type==Token.NEW){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875121056
GPR[SPVAP]-1659875121056
GPR[EPVAP]-1659875122231
GPR[SPVATF]-1659875122231
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875123314
GPR[EPVS]-1659875123314
========
if(GETPROP==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875123317
GPR[SPVAP]-1659875123317
GPR[EPVAP]-1659875124061
GPR[EPVS]-1659875124061
========
if(GETELEM==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875124063
GPR[SPVAP]-1659875124063
GPR[EPVAP]-1659875124791
GPR[EPVS]-1659875124791
========
if(type==Token.CALL){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875124792
GPR[SPVAP]-1659875124792
GPR[EPVAP]-1659875125964
GPR[SPVATF]-1659875125964
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875127050
GPR[EPVS]-1659875127050
========
if(NodeUtil.isExpressionNode(next)){
Node next.getParent()=ancestor.getParent();
replaceWithEmpty(ancestor,ancParent);
break;
}
if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875127052
GPR[SPVAP]-1659875127052
GPR[EPVAP]-1659875127630
GPR[EPVS]-1659875127630
========
if(type==Token.GETPROP){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875127633
GPR[SPVAP]-1659875127633
GPR[EPVAP]-1659875128811
GPR[SPVATF]-1659875128811
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875129890
GPR[EPVS]-1659875129890
========
if(type==Token.ADD){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875129892
GPR[SPVAP]-1659875129892
GPR[EPVAP]-1659875131083
GPR[SPVATF]-1659875131083
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875132157
GPR[EPVS]-1659875132157
========
if(LT==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875132160
GPR[SPVAP]-1659875132160
GPR[EPVAP]-1659875132900
GPR[EPVS]-1659875132900
========
if(type==Token.GT){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875132902
GPR[SPVAP]-1659875132902
GPR[EPVAP]-1659875134097
GPR[SPVATF]-1659875134097
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875135194
GPR[EPVS]-1659875135194
========
if(AND==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875135196
GPR[SPVAP]-1659875135196
GPR[EPVAP]-1659875135941
GPR[EPVS]-1659875135942
========
if(type==Token.OR){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875135943
GPR[SPVAP]-1659875135943
GPR[EPVAP]-1659875137139
GPR[SPVATF]-1659875137139
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875138248
GPR[EPVS]-1659875138248
========
if(BITOR==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875138250
GPR[SPVAP]-1659875138250
GPR[EPVAP]-1659875138981
GPR[EPVS]-1659875138982
========
if(type==Token.BITAND){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875138983
GPR[SPVAP]-1659875138983
GPR[EPVAP]-1659875140173
GPR[SPVATF]-1659875140173
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875141261
GPR[EPVS]-1659875141261
========
if(type==Token.FOR){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875141263
GPR[SPVAP]-1659875141263
GPR[EPVAP]-1659875142466
GPR[SPVATF]-1659875142466
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875143544
GPR[EPVS]-1659875143544
========
if(INC==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875143547
GPR[SPVAP]-1659875143547
GPR[EPVAP]-1659875144284
GPR[EPVS]-1659875144284
========
if(type==Token.DEC){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875144285
GPR[SPVAP]-1659875144285
GPR[EPVAP]-1659875145487
GPR[SPVATF]-1659875145487
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875146580
GPR[EPVS]-1659875146580
========
if(LSH==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875146583
GPR[SPVAP]-1659875146583
GPR[EPVAP]-1659875147322
GPR[EPVS]-1659875147322
========
if(RSH==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875147324
GPR[SPVAP]-1659875147324
GPR[EPVAP]-1659875148050
GPR[EPVS]-1659875148050
========
if(type==Token.URSH){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875148051
GPR[SPVAP]-1659875148051
GPR[EPVAP]-1659875149231
GPR[SPVATF]-1659875149231
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875150326
GPR[EPVS]-1659875150326
========
if(SUB==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875150328
GPR[SPVAP]-1659875150328
GPR[EPVAP]-1659875151065
GPR[EPVS]-1659875151065
========
if(MUL==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875151067
GPR[SPVAP]-1659875151067
GPR[EPVAP]-1659875151793
GPR[EPVS]-1659875151793
========
if(type==Token.DIV){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875151795
GPR[SPVAP]-1659875151795
GPR[EPVAP]-1659875152977
GPR[SPVATF]-1659875152977
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875154058
GPR[EPVS]-1659875154058
========
if(IF==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875154060
GPR[SPVAP]-1659875154060
GPR[EPVAP]-1659875154784
GPR[EPVS]-1659875154784
========
if(type==Token.HOOK){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875154786
GPR[SPVAP]-1659875154786
GPR[EPVAP]-1659875155966
GPR[SPVATF]-1659875155966
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875157066
GPR[EPVS]-1659875157066
========
case Token.TYPEOF :

if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875157068
GPR[SPVAP]-1659875157068
GPR[EPVAP]-1659875157648
GPR[EPVS]-1659875157648
========
if(SCRIPT==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875157650
GPR[SPVAP]-1659875157650
GPR[EPVAP]-1659875158382
GPR[EPVS]-1659875158382
========
if(type==Token.NUMBER){
compiler.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875158383
GPR[SPVAP]-1659875158383
GPR[EPVAP]-1659875159130
GPR[EPVS]-1659875159130
========
if(type==Token.NUMBER){
sb.report(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875159131
GPR[SPVAP]-1659875159131
GPR[EPVAP]-1659875159855
GPR[EPVS]-1659875159855
========
if(SCRIPT==Token.BLOCK){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875159858
GPR[SPVAP]-1659875159858
GPR[EPVAP]-1659875160581
GPR[EPVS]-1659875160581
========
if(BLOCK==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875160583
GPR[SPVAP]-1659875160583
GPR[EPVAP]-1659875161326
GPR[EPVS]-1659875161326
========
if(OR==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875161328
GPR[SPVAP]-1659875161328
GPR[EPVAP]-1659875162076
GPR[EPVS]-1659875162076
========
if(type==Token.AND){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875162079
GPR[SPVAP]-1659875162079
GPR[EPVAP]-1659875163280
GPR[SPVATF]-1659875163280
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875164384
GPR[EPVS]-1659875164384
========
if(GETPROP==Token.CALL){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875164386
GPR[SPVAP]-1659875164386
GPR[EPVAP]-1659875165118
GPR[EPVS]-1659875165118
========
if(NodeUtil.isExpressionNode(next)){
Node next.getParent()=ancestor.getParent();
replaceWithEmpty(ancestor,ancParent);
break;
}
if(GETPROP==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875165119
GPR[SPVAP]-1659875165119
GPR[EPVAP]-1659875165708
GPR[EPVS]-1659875165708
========
if(GETELEM==Token.CALL){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875165710
GPR[SPVAP]-1659875165710
GPR[EPVAP]-1659875166445
GPR[EPVS]-1659875166445
========
if(NodeUtil.isExpressionNode(next)){
Node next.getParent()=ancestor.getParent();
replaceWithEmpty(ancestor,ancParent);
break;
}
if(GETELEM==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875166446
GPR[SPVAP]-1659875166446
GPR[EPVAP]-1659875167032
GPR[EPVS]-1659875167032
========
if(NodeUtil.isExpressionNode(next)){
Node next.getParent()=ancestor.getParent();
replaceWithEmpty(ancestor,ancParent);
break;
}
if(type==Token.CALL){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875167034
GPR[SPVAP]-1659875167034
GPR[EPVAP]-1659875167609
GPR[EPVS]-1659875167609
========
if(NodeUtil.isExpressionNode(next)){
Node next.getParent()=ancestor.getParent();
replaceWithEmpty(ancestor,ancParent);
break;
}
if(GETPROP==Token.CALL){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875167611
GPR[SPVAP]-1659875167611
GPR[EPVAP]-1659875168183
GPR[EPVS]-1659875168183
========
if(NodeUtil.isExpressionNode(next)){
Node next.getParent()=ancestor.getParent();
replaceWithEmpty(ancestor,ancParent);
break;
}
if(GETELEM==Token.CALL){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875168185
GPR[SPVAP]-1659875168185
GPR[EPVAP]-1659875168759
GPR[EPVS]-1659875168759
========
if(OR==Token.AND){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875168761
GPR[SPVAP]-1659875168761
GPR[EPVAP]-1659875169495
GPR[EPVS]-1659875169495
========
if(GT==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875169497
GPR[SPVAP]-1659875169497
GPR[EPVAP]-1659875170225
GPR[EPVS]-1659875170225
========
if(LE==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875170227
GPR[SPVAP]-1659875170227
GPR[EPVAP]-1659875170976
GPR[EPVS]-1659875170976
========
if(GE==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875170977
GPR[SPVAP]-1659875170977
GPR[EPVAP]-1659875171710
GPR[EPVS]-1659875171710
========
if(EQ==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875171711
GPR[SPVAP]-1659875171711
GPR[EPVAP]-1659875172439
GPR[EPVS]-1659875172439
========
if(NE==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875172440
GPR[SPVAP]-1659875172440
GPR[EPVAP]-1659875173176
GPR[EPVS]-1659875173176
========
if(SHEQ==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875173177
GPR[SPVAP]-1659875173177
GPR[EPVAP]-1659875173912
GPR[EPVS]-1659875173912
========
if(type==Token.SHNE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875173913
GPR[SPVAP]-1659875173913
GPR[EPVAP]-1659875175103
GPR[SPVATF]-1659875175103
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875176189
GPR[EPVS]-1659875176189
========
if(LT==Token.SHNE){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875176191
GPR[SPVAP]-1659875176191
GPR[EPVAP]-1659875176934
GPR[EPVS]-1659875176934
========
case Token.NULL :

if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659875176936
GPR[SPVAP]-1659875176936
GPR[EPVAP]-1659875177524
GPR[EPVS]-1659875177524
GPR[ESUN]-1659875177525
GPR[SSUN]-1659875177525
com.google.javascript.rhino.Node,916
GPR[ESUN]-1659875177829
GPR[SSUN]-1659875177829
com.google.javascript.jscomp.JSError,215
GPR[ESUN]-1659875178874
GPR[SSUN]-1659875178874
com.google.javascript.rhino.JSDocInfo,596
GPR[ESUN]-1659875179889
GPR[SSUN]-1659875179889
com.google.javascript.rhino.JSDocInfo,597
GPR[ESUN]-1659875180037
GPR[SSUN]-1659875180037
com.google.javascript.jscomp.parsing.JsDocInfoParser,252
========
if(string.length()>0){
jsdocBuilder.recordBlockDescription(blockInfo.string);
}

========
GPR[SPVS]-1659875181225
GPR[SPVAP]-1659875181225
GPR[EPVAP]-1659875183332
GPR[EPVS]-1659875183332
========
Preconditions.checkArgument(ancestors.length>0);
if(blockInfo.string.length()>0){
jsdocBuilder.recordBlockDescription(blockInfo.string);
}

========
GPR[SPVS]-1659875183338
GPR[SPVAP]-1659875183338
GPR[EPVAP]-1659875184285
GPR[EPVS]-1659875184285
GPR[ESUN]-1659875184286
GPR[SSUN]-1659875184286
com.google.javascript.jscomp.parsing.JsDocInfoParser,1016
Find no block!
GPR[SSUN]-1659875184509
com.google.javascript.jscomp.parsing.JsDocInfoParser,1069
========
default :

case STRING :
return stream.getString();


========
GPR[SPVS]-1659875185580
GPR[SPVAP]-1659875185580
GPR[EPVAP]-1659875188447
GPR[EPVS]-1659875188447
========
case BANG :

case STRING :
return stream.getString();


========
GPR[SPVS]-1659875188448
GPR[SPVAP]-1659875188448
GPR[EPVAP]-1659875189397
GPR[EPVS]-1659875189397
GPR[ESUN]-1659875191274
GPR[SSUN]-1659875191274
com.google.javascript.jscomp.parsing.JsDocInfoParser,1298
========
if(!ignoreStar&&builder.length()>0){
sb.append(' ');
}

========
GPR[SPVS]-1659875192771
GPR[SPVAP]-1659875192771
GPR[EPVAP]-1659875194852
GPR[EPVS]-1659875194852
========
builder.append(string);
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}

========
GPR[SPVS]-1659875194854
GPR[SPVAP]-1659875194854
GPR[EPVAP]-1659875195784
GPR[EPVS]-1659875195784
========
if(!ignoreStar&&builder.length()>0){
message.append(' ');
}

========
GPR[SPVS]-1659875195787
GPR[SPVAP]-1659875195787
GPR[EPVAP]-1659875196703
GPR[EPVS]-1659875196703
========
if(!ignoreStar&&builder.length()>0){
builder.setLength(' ');
}

========
GPR[SPVS]-1659875196706
GPR[SPVAP]-1659875196706
GPR[EPVAP]-1659875199223
GPR[SPVATF]-1659875199223
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875200331
GPR[EPVS]-1659875200331
========
if(!ignoreStar&&builder.length()>0){
return 1;
builder.append(' ');
}

========
GPR[SPVS]-1659875200332
GPR[SPVAP]-1659875200332
GPR[EPVAP]-1659875201099
GPR[EPVS]-1659875201099
========
if(!inlineAllStrings&&builder.length()>0){
builder.append(' ');
}

========
GPR[SPVS]-1659875201102
GPR[SPVAP]-1659875201102
GPR[EPVAP]-1659875201868
GPR[EPVS]-1659875201868
========
if(!ignoreStar&&builder.length()>0){
return 1;
builder.setLength(' ');
}

========
GPR[SPVS]-1659875201871
GPR[SPVAP]-1659875201871
GPR[EPVAP]-1659875202620
GPR[EPVS]-1659875202620
========
if(!ignoreStar&&builder.length()>0){
sb=new StringBuilder();
builder.append(' ');
}

========
GPR[SPVS]-1659875202622
GPR[SPVAP]-1659875202622
GPR[EPVAP]-1659875203364
GPR[EPVS]-1659875203364
========
if((string.length()==0)&&builder.length()>0){
builder.append(' ');
}

========
GPR[SPVS]-1659875203366
GPR[SPVAP]-1659875203366
GPR[EPVAP]-1659875204146
GPR[EPVS]-1659875204146
========
if(!ignoreStar&&builder.length()>0){
builder.println(' ');
}

========
GPR[SPVS]-1659875204149
GPR[SPVAP]-1659875204149
GPR[EPVAP]-1659875204919
GPR[EPVS]-1659875204919
GPR[ESUN]-1659875204923
GPR[SSUN]-1659875204923
com.google.javascript.jscomp.parsing.JsDocInfoParser,1302
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=true;
builder.append(toString(token));


========
GPR[SPVS]-1659875206161
GPR[SPVAP]-1659875206161
GPR[EPVAP]-1659875209729
GPR[SPVATF]-1659875209729
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875210808
GPR[EPVS]-1659875210808
========
default :
token=next();
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875210810
GPR[SPVAP]-1659875210810
GPR[EPVAP]-1659875212007
GPR[SPVATF]-1659875212007
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875213091
GPR[EPVS]-1659875213091
========
default :
token=next();
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=true;
builder.append(toString(token));



========
GPR[SPVS]-1659875213093
GPR[SPVAP]-1659875213093
GPR[EPVAP]-1659875214315
GPR[SPVATF]-1659875214315
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875215375
GPR[EPVS]-1659875215375
========
default :
state=State.SEARCHING_ANNOTATION;
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875215378
GPR[SPVAP]-1659875215378
GPR[EPVAP]-1659875216590
GPR[SPVATF]-1659875216590
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875217663
GPR[EPVS]-1659875217663
========
state=State.SEARCHING_ANNOTATION;
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875217665
GPR[SPVAP]-1659875217665
GPR[EPVAP]-1659875218421
GPR[EPVS]-1659875218421
========
token=next();
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875218423
GPR[SPVAP]-1659875218423
GPR[EPVAP]-1659875219184
GPR[EPVS]-1659875219184
========
default :
line=trimEnd(stream.getRemainingJSDocLine());
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875219185
GPR[SPVAP]-1659875219185
GPR[EPVAP]-1659875219970
GPR[EPVS]-1659875219970
========
builder.append("}\n");
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875219973
GPR[SPVAP]-1659875219973
GPR[EPVAP]-1659875220739
GPR[EPVS]-1659875220739
========
builder.append(INDENT);
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875220741
GPR[SPVAP]-1659875220741
GPR[EPVAP]-1659875221492
GPR[EPVS]-1659875221492
========
builder.append(" {\n");
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875221494
GPR[SPVAP]-1659875221494
GPR[EPVAP]-1659875222241
GPR[EPVS]-1659875222241
========
builder.append("node [color=lightblue2, style=filled];\n");
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875222242
GPR[SPVAP]-1659875222242
GPR[EPVAP]-1659875222992
GPR[EPVS]-1659875222992
========
default :
token=eatTokensUntilEOL();
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875222994
GPR[SPVAP]-1659875222994
GPR[EPVAP]-1659875224185
GPR[SPVATF]-1659875224185
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875225259
GPR[EPVS]-1659875225259
========
case PROTECTED :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875225262
GPR[SPVAP]-1659875225262
GPR[EPVAP]-1659875226032
GPR[EPVS]-1659875226032
========
case NO_SHADOW :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875226034
GPR[SPVAP]-1659875226034
GPR[EPVAP]-1659875226785
GPR[EPVS]-1659875226785
========
case TEMPLATE :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875226786
GPR[SPVAP]-1659875226786
GPR[EPVAP]-1659875227525
GPR[EPVS]-1659875227525
========
case NO_ALIAS :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875227527
GPR[SPVAP]-1659875227527
GPR[EPVAP]-1659875228272
GPR[EPVS]-1659875228272
========
case NOT_IMPLEMENTED :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875228274
GPR[SPVAP]-1659875228274
GPR[EPVAP]-1659875229018
GPR[EPVS]-1659875229018
========
case IMPLICIT_CAST :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875229020
GPR[SPVAP]-1659875229020
GPR[EPVAP]-1659875229819
GPR[EPVS]-1659875229819
========
case OVERRIDE :
if(!jsdocBuilder.recordOverride()){
parser.addWarning("msg.jsdoc.override",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875229821
GPR[SPVAP]-1659875229821
GPR[EPVAP]-1659875230567
GPR[EPVS]-1659875230567
========
case THROWS :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875230568
GPR[SPVAP]-1659875230568
GPR[EPVAP]-1659875231346
GPR[EPVS]-1659875231346
========
token=eatTokensUntilEOL(token);
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875231348
GPR[SPVAP]-1659875231348
GPR[EPVAP]-1659875232128
GPR[EPVS]-1659875232128
========
default :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875232130
GPR[SPVAP]-1659875232130
GPR[EPVAP]-1659875232879
GPR[EPVS]-1659875232879
========
case PRESERVE :
ExtractionInfo extractMultilineTextualBlock(token,WhitespaceOption.PRESERVE)=extractMultilineTextualBlock(token,WhitespaceOption.PRESERVE);
String preserveInfo.string=preserveInfo.string;
if(preserve.length()>0){
if(fileLevelJsDocBuilder!=null){
fileLevelJsDocBuilder.append(preserve);
}
}

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875232881
GPR[SPVAP]-1659875232881
GPR[EPVAP]-1659875234021
GPR[EPVS]-1659875234021
========
default :
if(reasonInfo.string.length()>0){
jsdocBuilder.recordDeprecationReason(reasonInfo.string);
}
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875234022
GPR[SPVAP]-1659875234022
GPR[EPVAP]-1659875234763
GPR[EPVS]-1659875234763
========
default :
token=fileOverviewInfo.token;
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875234765
GPR[SPVAP]-1659875234765
GPR[EPVAP]-1659875236429
GPR[EPVS]-1659875236429
========
default :
token=current();
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875236438
GPR[SPVAP]-1659875236438
GPR[EPVAP]-1659875237707
GPR[SPVATF]-1659875237707
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875238778
GPR[EPVS]-1659875238778
========
default :
if(returnDescriptionInfo.string.length()>0){
jsdocBuilder.recordReturnDescription(returnDescriptionInfo.string);
}
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875238780
GPR[SPVAP]-1659875238780
GPR[EPVAP]-1659875239527
GPR[EPVS]-1659875239527
========
default :
token=current();
if(returnDescriptionInfo.string.length()>0){
jsdocBuilder.recordReturnDescription(returnDescriptionInfo.string);
}

if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));



========
GPR[SPVS]-1659875239528
GPR[SPVAP]-1659875239528
GPR[EPVAP]-1659875240293
GPR[EPVS]-1659875240293
========
jsdocBuilder.markTypeNode(parseParamTypeExpressionAnnotation(token),stream.getLineno(),stream.getCharno(),stream.getCharno(),true);
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));


========
GPR[SPVS]-1659875240295
GPR[SPVAP]-1659875240295
GPR[EPVAP]-1659875241053
GPR[EPVS]-1659875241053
GPR[ESUN]-1659875241053
GPR[SSUN]-1659875241053
com.google.javascript.jscomp.parsing.JsDocInfoParser,1304
========
line=trimEnd(line);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875242649
GPR[SPVAP]-1659875242649
GPR[EPVAP]-1659875244716
GPR[EPVS]-1659875244716
========
builder.append(line);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875244718
GPR[SPVAP]-1659875244718
GPR[EPVAP]-1659875245638
GPR[EPVS]-1659875245639
========
line=stream.getRemainingJSDocLine();
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875245640
GPR[SPVAP]-1659875245640
GPR[EPVAP]-1659875246573
GPR[EPVS]-1659875246573
========
builder.append("}\n");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875246575
GPR[SPVAP]-1659875246575
GPR[EPVAP]-1659875249056
GPR[SPVATF]-1659875249056
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875250141
GPR[EPVS]-1659875250141
========
ignoreStar=false;
result.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875250144
GPR[SPVAP]-1659875250144
GPR[EPVAP]-1659875250918
GPR[EPVS]-1659875250918
========
line=State.SEARCHING_ANNOTATION;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875250919
GPR[SPVAP]-1659875250919
GPR[EPVAP]-1659875251662
GPR[EPVS]-1659875251662
========
token=next();
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875251664
GPR[SPVAP]-1659875251664
GPR[EPVAP]-1659875252861
GPR[SPVATF]-1659875252861
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875253971
GPR[EPVS]-1659875253971
========
builder.append(" {\n");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875253974
GPR[SPVAP]-1659875253974
GPR[EPVAP]-1659875255191
GPR[SPVATF]-1659875255191
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875256267
GPR[EPVS]-1659875256267
========
builder.append(INDENT);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875256269
GPR[SPVAP]-1659875256269
GPR[EPVAP]-1659875257059
GPR[EPVS]-1659875257059
========
builder.append("node [color=lightblue2, style=filled];\n");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875257061
GPR[SPVAP]-1659875257061
GPR[EPVAP]-1659875258278
GPR[SPVATF]-1659875258278
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875259370
GPR[EPVS]-1659875259370
========
builder.append(" {\n");
builder.append("node [color=lightblue2, style=filled];\n");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875259371
GPR[SPVAP]-1659875259371
GPR[EPVAP]-1659875260557
GPR[SPVATF]-1659875260557
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875261652
GPR[EPVS]-1659875261652
========
builder.append(ARROW);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875261654
GPR[SPVAP]-1659875261654
GPR[EPVAP]-1659875262397
GPR[EPVS]-1659875262397
========
builder.append(" [weight=1];\n");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875262399
GPR[SPVAP]-1659875262399
GPR[EPVAP]-1659875263591
GPR[SPVATF]-1659875263591
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875264673
GPR[EPVS]-1659875264673
========
ignoreStar=false;
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875264675
GPR[SPVAP]-1659875264675
GPR[EPVAP]-1659875265463
GPR[EPVS]-1659875265463
========
ignoreStar=false;
b.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875265465
GPR[SPVAP]-1659875265465
GPR[EPVAP]-1659875266211
GPR[EPVS]-1659875266211
========
builder.append(INDENT);
builder.append("node [color=lightblue2, style=filled];\n");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875266212
GPR[SPVAP]-1659875266212
GPR[EPVAP]-1659875266959
GPR[EPVS]-1659875266959
========
ignoreStar=false;
coalescedLog.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875266960
GPR[SPVAP]-1659875266960
GPR[EPVAP]-1659875267713
GPR[EPVS]-1659875267713
========
builder.append(" - ");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875267715
GPR[SPVAP]-1659875267715
GPR[EPVAP]-1659875268923
GPR[SPVATF]-1659875268923
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875270010
GPR[EPVS]-1659875270010
========
builder.append(error.description);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875270011
GPR[SPVAP]-1659875270011
GPR[EPVAP]-1659875270779
GPR[EPVS]-1659875270779
========
builder.append('\n');
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875270781
GPR[SPVAP]-1659875270781
GPR[EPVAP]-1659875271984
GPR[SPVATF]-1659875271984
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875273056
GPR[EPVS]-1659875273056
========
builder.append(" - ");
ignoreStar=false;
b.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875273058
GPR[SPVAP]-1659875273058
GPR[EPVAP]-1659875273801
GPR[EPVS]-1659875273801
========
builder.append('\n');
ignoreStar=false;
b.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875273803
GPR[SPVAP]-1659875273803
GPR[EPVAP]-1659875274546
GPR[EPVS]-1659875274546
========
builder.append(" - ");
builder.append('\n');
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875274547
GPR[SPVAP]-1659875274547
GPR[EPVAP]-1659875275783
GPR[SPVATF]-1659875275783
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875276874
GPR[EPVS]-1659875276874
========
builder.append(" - ");
builder.append('\n');
ignoreStar=false;
b.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875276876
GPR[SPVAP]-1659875276876
GPR[EPVAP]-1659875277630
GPR[EPVS]-1659875277630
========
ignoreStar=false;
initCodeSourceBuilder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875277632
GPR[SPVAP]-1659875277632
GPR[EPVAP]-1659875278371
GPR[EPVS]-1659875278371
========
builder.append(a.oldName).append(" => ").append(sourceName).append('\n');
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875278373
GPR[SPVAP]-1659875278373
GPR[EPVAP]-1659875279114
GPR[EPVS]-1659875279114
========
ignoreStar=false;
builder.add(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875279115
GPR[SPVAP]-1659875279115
GPR[EPVAP]-1659875279868
GPR[EPVS]-1659875279868
========
ignoreStar=false;
debug.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875279870
GPR[SPVAP]-1659875279871
GPR[EPVAP]-1659875280617
GPR[EPVS]-1659875280617
========
builder.append("] [end line: ");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875280619
GPR[SPVAP]-1659875280619
GPR[EPVAP]-1659875281809
GPR[SPVATF]-1659875281809
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875282885
GPR[EPVS]-1659875282885
========
builder.append(']');
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875282887
GPR[SPVAP]-1659875282887
GPR[EPVAP]-1659875284079
GPR[SPVATF]-1659875284079
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875285150
GPR[EPVS]-1659875285150
========
builder.append("] [end line: ");
ignoreStar=false;
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875285152
GPR[SPVAP]-1659875285152
GPR[EPVAP]-1659875285910
GPR[EPVS]-1659875285910
========
builder.append(']');
ignoreStar=false;
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875285912
GPR[SPVAP]-1659875285912
GPR[EPVAP]-1659875286663
GPR[EPVS]-1659875286663
========
builder.append("] [end line: ");
builder.append(']');
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875286664
GPR[SPVAP]-1659875286664
GPR[EPVAP]-1659875287847
GPR[SPVATF]-1659875287847
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875288926
GPR[EPVS]-1659875288926
========
builder.append("] [end line: ");
builder.append(']');
ignoreStar=false;
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875288928
GPR[SPVAP]-1659875288928
GPR[EPVAP]-1659875289670
GPR[EPVS]-1659875289670
========
append('D');
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875289672
GPR[SPVAP]-1659875289672
GPR[EPVAP]-1659875290423
GPR[EPVS]-1659875290423
========
builder.append("\"");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875290425
GPR[SPVAP]-1659875290425
GPR[EPVAP]-1659875291633
GPR[SPVATF]-1659875291633
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875292696
GPR[EPVS]-1659875292696
========
builder.append(" [label=\"");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875292698
GPR[SPVAP]-1659875292698
GPR[EPVAP]-1659875293886
GPR[SPVATF]-1659875293886
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875294960
GPR[EPVS]-1659875294960
========
builder.append(INDENT);
builder.append(" [label=\"");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875294962
GPR[SPVAP]-1659875294962
GPR[EPVAP]-1659875295733
GPR[EPVS]-1659875295733
========
builder.append(": ");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875295736
GPR[SPVAP]-1659875295736
GPR[EPVAP]-1659875296918
GPR[SPVATF]-1659875296918
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875297990
GPR[EPVS]-1659875297990
========
builder.append(": ");
ignoreStar=false;
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875297993
GPR[SPVAP]-1659875297993
GPR[EPVAP]-1659875298748
GPR[EPVS]-1659875298748
========
ignoreStar=true;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875298749
GPR[SPVAP]-1659875298749
GPR[EPVAP]-1659875299944
GPR[SPVATF]-1659875299944
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875301032
GPR[EPVS]-1659875301032
========
builder.append(" */\n");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875301034
GPR[SPVAP]-1659875301034
GPR[EPVAP]-1659875302223
GPR[SPVATF]-1659875302223
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875303303
GPR[EPVS]-1659875303303
========
builder.append(" */\n");
ignoreStar=false;
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875303304
GPR[SPVAP]-1659875303304
GPR[EPVAP]-1659875304048
GPR[EPVS]-1659875304048
========
ignoreStar=false;
out.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875304050
GPR[SPVAP]-1659875304050
GPR[EPVAP]-1659875304839
GPR[EPVS]-1659875304839
========
builder.append(" - FUNCTIONS: ");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875304841
GPR[SPVAP]-1659875304841
GPR[EPVAP]-1659875306051
GPR[SPVATF]-1659875306051
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875307140
GPR[EPVS]-1659875307140
========
ignoreStar=false;
debugLog_.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875307141
GPR[SPVAP]-1659875307141
GPR[EPVAP]-1659875307888
GPR[EPVS]-1659875307888
========
ignoreStar=false;
builder.report(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875307891
GPR[SPVAP]-1659875307891
GPR[EPVAP]-1659875308686
GPR[EPVS]-1659875308686
========
if(sourceName!=null){
new StringBuffer(string).append(sourceName);
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875308688
GPR[SPVAP]-1659875308688
GPR[EPVAP]-1659875309428
GPR[EPVS]-1659875309428
========
ignoreStar=false;
message.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875309430
GPR[SPVAP]-1659875309430
GPR[EPVAP]-1659875310177
GPR[EPVS]-1659875310177
========
if(node.prototypeNames.size()>0){
builder.append("<li>PROTOTYPES: ");
Iterator<String> node.prototypeNames.iterator()=node.prototypeNames.iterator();
while(protoIter.hasNext()){
sb.append(protoIter.next());
if(protoIter.hasNext()){
sb.append(", ");
}
}
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875310179
GPR[SPVAP]-1659875310179
GPR[EPVAP]-1659875310766
GPR[EPVS]-1659875310766
========
builder.append("ALL NAMES<ul>\n");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875310768
GPR[SPVAP]-1659875310768
GPR[EPVAP]-1659875311960
GPR[SPVATF]-1659875311960
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875313052
GPR[EPVS]-1659875313052
========
builder.append("ALL NAMES<ul>\n");
ignoreStar=false;
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875313054
GPR[SPVAP]-1659875313054
GPR[EPVAP]-1659875313796
GPR[EPVS]-1659875313796
========
ignoreStar=false;
paths.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875313798
GPR[SPVAP]-1659875313798
GPR[EPVAP]-1659875314543
GPR[EPVS]-1659875314543
========
ignoreStar=false;
code.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875314545
GPR[SPVAP]-1659875314545
GPR[EPVAP]-1659875315296
GPR[EPVS]-1659875315296
========
builder.append(string);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875315297
GPR[SPVAP]-1659875315297
GPR[EPVAP]-1659875316050
GPR[EPVS]-1659875316050
========
ignoreStar=false;
builder.append(toString(token));
stream.update();
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875316052
GPR[SPVAP]-1659875316052
GPR[EPVAP]-1659875317269
GPR[SPVATF]-1659875317269
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875318383
GPR[EPVS]-1659875318383
========
if(ignoreStar){
new StringBuilder(32).append("this:");
b.append(getThisSlot().getType().toString());
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875318385
GPR[SPVAP]-1659875318385
GPR[EPVAP]-1659875319133
GPR[EPVS]-1659875319133
========
token=preserveInfo.token;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875319135
GPR[SPVAP]-1659875319135
GPR[EPVAP]-1659875319899
GPR[EPVS]-1659875319899
========
ignoreStar=false;
compiler.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875319900
GPR[SPVAP]-1659875319901
GPR[EPVAP]-1659875320655
GPR[EPVS]-1659875320655
========
ignoreStar=false;
compiler.report(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875320657
GPR[SPVAP]-1659875320657
GPR[EPVAP]-1659875321398
GPR[EPVS]-1659875321398
========
ignoreStar=false;
builder.checkState(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875321400
GPR[SPVAP]-1659875321400
GPR[EPVAP]-1659875322151
GPR[EPVS]-1659875322151
========
if(builder.length()>0){
sb.append('.');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875322152
GPR[SPVAP]-1659875322152
GPR[EPVAP]-1659875322901
GPR[EPVS]-1659875322901
========
line+=string.length();
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875322904
GPR[SPVAP]-1659875322904
GPR[EPVAP]-1659875323658
GPR[EPVS]-1659875323658
========
ignoreStar=false;
builder.valueOf(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875323660
GPR[SPVAP]-1659875323660
GPR[EPVAP]-1659875324394
GPR[EPVS]-1659875324394
========
token=authorInfo.token;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875324398
GPR[SPVAP]-1659875324398
GPR[EPVAP]-1659875325144
GPR[EPVS]-1659875325144
========
token=referenceInfo.token;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875325146
GPR[SPVAP]-1659875325146
GPR[EPVAP]-1659875325899
GPR[EPVS]-1659875325899
========
builder=new StringBuilder();
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875325901
GPR[SPVAP]-1659875325901
GPR[EPVAP]-1659875327123
GPR[SPVATF]-1659875327123
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875328211
GPR[EPVS]-1659875328211
========
token=fileOverviewInfo.token;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875328212
GPR[SPVAP]-1659875328212
GPR[EPVAP]-1659875328961
GPR[EPVS]-1659875328961
========
new StringBuilder().append("TOTAL CLASSES: "+countOf(TriState.TRUE,TriState.BOTH));
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875330930
GPR[SPVAP]-1659875330930
GPR[EPVAP]-1659875331683
GPR[EPVS]-1659875331683
========
new StringBuilder().append("TOTAL STATIC FUNCTIONS: "+countOf(TriState.FALSE,TriState.BOTH));
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875331684
GPR[SPVAP]-1659875331684
GPR[EPVAP]-1659875332437
GPR[EPVS]-1659875332437
========
new StringBuilder().append("OVERALL STATS<ul>");
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875332440
GPR[SPVAP]-1659875332440
GPR[EPVAP]-1659875333650
GPR[SPVATF]-1659875333650
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875334727
GPR[EPVS]-1659875334727
========
appendListItem(new StringBuilder(),"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875334729
GPR[SPVAP]-1659875334729
GPR[EPVAP]-1659875335505
GPR[EPVS]-1659875335505
========
new StringBuilder().append("OVERALL STATS<ul>");
ignoreStar=false;
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875335507
GPR[SPVAP]-1659875335507
GPR[EPVAP]-1659875336251
GPR[EPVS]-1659875336251
========
ignoreStar=false;
appendInferredPaths(sourceName);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875336252
GPR[SPVAP]-1659875336252
GPR[EPVAP]-1659875336997
GPR[EPVS]-1659875336997
========
mapping.sourceFile=sourceFile.toString();
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875336999
GPR[SPVAP]-1659875336999
GPR[EPVAP]-1659875337746
GPR[EPVS]-1659875337747
========
token=templateInfo.token;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875337749
GPR[SPVAP]-1659875337749
GPR[EPVAP]-1659875338497
GPR[EPVS]-1659875338497
========
token=versionInfo.token;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875338499
GPR[SPVAP]-1659875338499
GPR[EPVAP]-1659875339285
GPR[EPVS]-1659875339285
========
ignoreStar=false;
appendInferredPaths(line);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875339286
GPR[SPVAP]-1659875339286
GPR[EPVAP]-1659875340046
GPR[EPVS]-1659875340046
========
ignoreStar=false;
maybeEndStatement();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875340048
GPR[SPVAP]-1659875340048
GPR[EPVAP]-1659875340796
GPR[EPVS]-1659875340796
========
ignoreStar=false;
if(string.length()==0){
return ;
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875340797
GPR[SPVAP]-1659875340797
GPR[EPVAP]-1659875341539
GPR[EPVS]-1659875341539
========
append(string);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875341541
GPR[SPVAP]-1659875341541
GPR[EPVAP]-1659875342287
GPR[EPVS]-1659875342287
========
ignoreStar=false;
sb.add(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875342289
GPR[SPVAP]-1659875342289
GPR[EPVAP]-1659875343031
GPR[EPVS]-1659875343031
========
skipEOLs();
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875343032
GPR[SPVAP]-1659875343032
GPR[EPVAP]-1659875344261
GPR[SPVATF]-1659875344261
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875345363
GPR[EPVS]-1659875345363
========
skipEOLs();
token=next();
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875345365
GPR[SPVAP]-1659875345365
GPR[EPVAP]-1659875346557
GPR[SPVATF]-1659875346557
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875347639
GPR[EPVS]-1659875347639
========
ignoreStar=false;
builder.multiply(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875347641
GPR[SPVAP]-1659875347641
GPR[EPVAP]-1659875348396
GPR[EPVS]-1659875348396
========
jsdocBuilder.markTypeNode(parseParamTypeExpressionAnnotation(token),stream.getLineno(),stream.getCharno(),stream.getCharno(),true);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875348399
GPR[SPVAP]-1659875348399
GPR[EPVAP]-1659875350145
GPR[SPVATF]-1659875350145
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875351282
GPR[EPVS]-1659875351282
========
case EOL :

ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875351285
GPR[SPVAP]-1659875351285
GPR[EPVAP]-1659875352047
GPR[EPVS]-1659875352047
========
ignoreStar=false;
if(this==typeRegistry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
return "Function";
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875352049
GPR[SPVAP]-1659875352049
GPR[EPVAP]-1659875352830
GPR[EPVS]-1659875352830
========
token=eatTokensUntilEOL(token);
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875352831
GPR[SPVAP]-1659875352831
GPR[EPVAP]-1659875354027
GPR[SPVATF]-1659875354027
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875355115
GPR[EPVS]-1659875355115
========
token=blockInfo.token;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875355118
GPR[SPVAP]-1659875355118
GPR[EPVAP]-1659875355911
GPR[EPVS]-1659875355911
========
if(blockInfo.string.length()>0){
jsdocBuilder.recordBlockDescription(blockInfo.string);
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875355912
GPR[SPVAP]-1659875355912
GPR[EPVAP]-1659875356676
GPR[EPVS]-1659875356676
========
ignoreStar=false;
builder.append(toString(token));
state=State.SEARCHING_NEWLINE;
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875356678
GPR[SPVAP]-1659875356678
GPR[EPVAP]-1659875357877
GPR[SPVATF]-1659875357878
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875358958
GPR[EPVS]-1659875358958
========
ignoreStar=false;
builder.append(toString(token));
line=stream.getCharno();
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875358959
GPR[SPVAP]-1659875358959
GPR[EPVAP]-1659875359706
GPR[EPVS]-1659875359706
========
ignoreStar=false;
skipEOLs();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875359708
GPR[SPVAP]-1659875359708
GPR[EPVAP]-1659875360911
GPR[SPVATF]-1659875360911
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875362034
GPR[EPVS]-1659875362034
========
ignoreStar=false;
token=next();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875362036
GPR[SPVAP]-1659875362036
GPR[EPVAP]-1659875363243
GPR[SPVATF]-1659875363243
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875364327
GPR[EPVS]-1659875364327
========
if(ignoreStar&&match(JsDocToken.PIPE)){
next();
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875364329
GPR[SPVAP]-1659875364329
GPR[EPVAP]-1659875365539
GPR[SPVATF]-1659875365539
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875366615
GPR[EPVS]-1659875366615
========
ignoreStar=false;
skipEOLs();
token=next();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875366617
GPR[SPVAP]-1659875366617
GPR[EPVAP]-1659875367825
GPR[SPVATF]-1659875367825
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875368929
GPR[EPVS]-1659875368929
========
if(ignoreStar&&match(JsDocToken.PIPE)){
next();
}
ignoreStar=false;
skipEOLs();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875368930
GPR[SPVAP]-1659875368930
GPR[EPVAP]-1659875370142
GPR[SPVATF]-1659875370142
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875371231
GPR[EPVS]-1659875371231
========
if(ignoreStar&&match(JsDocToken.PIPE)){
next();
}
ignoreStar=false;
token=next();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875371233
GPR[SPVAP]-1659875371233
GPR[EPVAP]-1659875372452
GPR[SPVATF]-1659875372452
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875373555
GPR[EPVS]-1659875373555
========
if(ignoreStar&&match(JsDocToken.PIPE)){
next();
}
ignoreStar=false;
skipEOLs();
token=next();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875373556
GPR[SPVAP]-1659875373556
GPR[EPVAP]-1659875374758
GPR[SPVATF]-1659875374758
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875375855
GPR[EPVS]-1659875375855
========
line=next();
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875375857
GPR[SPVAP]-1659875375857
GPR[EPVAP]-1659875376612
GPR[EPVS]-1659875376612
========
ignoreStar=false;
string=stream.getString();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875376613
GPR[SPVAP]-1659875376613
GPR[EPVAP]-1659875377380
GPR[EPVS]-1659875377380
========
this.stream=stream;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875377383
GPR[SPVAP]-1659875377383
GPR[EPVAP]-1659875378121
GPR[EPVS]-1659875378121
========
this.sourceName=sourceName;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875378123
GPR[SPVAP]-1659875378123
GPR[EPVAP]-1659875378889
GPR[EPVS]-1659875378889
========
this.line=config.registry;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875378891
GPR[SPVAP]-1659875378891
GPR[EPVAP]-1659875379639
GPR[EPVS]-1659875379639
========
this.errorReporter=errorReporter;
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875379640
GPR[SPVAP]-1659875379640
GPR[EPVAP]-1659875380379
GPR[EPVS]-1659875380379
========
case Token.RC :

ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875380382
GPR[SPVAP]-1659875380382
GPR[EPVAP]-1659875381130
GPR[EPVS]-1659875381130
========
ignoreStar=false;
case Token.GET :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875381132
GPR[SPVAP]-1659875381132
GPR[EPVAP]-1659875381877
GPR[EPVS]-1659875381877
========
case FUNCTION_END :

ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875381878
GPR[SPVAP]-1659875381878
GPR[EPVAP]-1659875382617
GPR[EPVS]-1659875382617
========
ignoreStar=false;
case Token.WHILE :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875382618
GPR[SPVAP]-1659875382618
GPR[EPVAP]-1659875383363
GPR[EPVS]-1659875383363
========
case '\"' :

ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875383365
GPR[SPVAP]-1659875383365
GPR[EPVAP]-1659875384106
GPR[EPVS]-1659875384106
========
case '>' :

ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();

========
GPR[SPVS]-1659875384107
GPR[SPVAP]-1659875384107
GPR[EPVAP]-1659875384850
GPR[EPVS]-1659875384850
GPR[ESUN]-1659875384850
GPR[SSUN]-1659875384850
com.google.javascript.jscomp.parsing.JsDocInfoParser,1306
========
builder.append(line);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875386490
GPR[SPVAP]-1659875386490
GPR[EPVAP]-1659875388654
GPR[EPVS]-1659875388654
========
token=next();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875388655
GPR[SPVAP]-1659875388655
GPR[EPVAP]-1659875391159
GPR[SPVATF]-1659875391159
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875392235
GPR[EPVS]-1659875392235
========
builder.append("}\n");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875392237
GPR[SPVAP]-1659875392237
GPR[EPVAP]-1659875393494
GPR[SPVATF]-1659875393494
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875394573
GPR[EPVS]-1659875394573
========
state=State.SEARCHING_ANNOTATION;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875394575
GPR[SPVAP]-1659875394575
GPR[EPVAP]-1659875395761
GPR[SPVATF]-1659875395761
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875396855
GPR[EPVS]-1659875396855
========
state=State.SEARCHING_ANNOTATION;
token=next();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875396857
GPR[SPVAP]-1659875396857
GPR[EPVAP]-1659875398066
GPR[SPVATF]-1659875398066
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875399155
GPR[EPVS]-1659875399155
========
initCodeSourceBuilder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875399156
GPR[SPVAP]-1659875399156
GPR[EPVAP]-1659875399923
GPR[EPVS]-1659875399923
========
this.string=builder.toString();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875399925
GPR[SPVAP]-1659875399925
GPR[EPVAP]-1659875400683
GPR[EPVS]-1659875400683
========
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
builder.append('\n');
line=trimEnd(line);

========
GPR[SPVS]-1659875400685
GPR[SPVAP]-1659875400685
GPR[EPVAP]-1659875401906
GPR[SPVATF]-1659875401906
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875403002
GPR[EPVS]-1659875403002
========
result.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875403004
GPR[SPVAP]-1659875403004
GPR[EPVAP]-1659875403758
GPR[EPVS]-1659875403758
========
builder.append(")");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875403760
GPR[SPVAP]-1659875403760
GPR[EPVAP]-1659875404992
GPR[SPVATF]-1659875404992
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875406089
GPR[EPVS]-1659875406089
========
builder.append(" {\n");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875406091
GPR[SPVAP]-1659875406091
GPR[EPVAP]-1659875407308
GPR[SPVATF]-1659875407308
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875408402
GPR[EPVS]-1659875408402
========
builder.append(INDENT);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875408403
GPR[SPVAP]-1659875408403
GPR[EPVAP]-1659875409164
GPR[EPVS]-1659875409164
========
builder.append("node [color=lightblue2, style=filled];\n");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875409165
GPR[SPVAP]-1659875409165
GPR[EPVAP]-1659875410413
GPR[SPVATF]-1659875410413
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875411518
GPR[EPVS]-1659875411518
========
builder.append(" {\n");
builder.append("node [color=lightblue2, style=filled];\n");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875411520
GPR[SPVAP]-1659875411520
GPR[EPVAP]-1659875412743
GPR[SPVATF]-1659875412743
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875413839
GPR[EPVS]-1659875413839
========
b.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875413841
GPR[SPVAP]-1659875413841
GPR[EPVAP]-1659875414588
GPR[EPVS]-1659875414588
========
coalescedLog.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875414590
GPR[SPVAP]-1659875414590
GPR[EPVAP]-1659875415335
GPR[EPVS]-1659875415335
========
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875415337
GPR[SPVAP]-1659875415337
GPR[EPVAP]-1659875416084
GPR[EPVS]-1659875416084
========
builder.append(" - ");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875416086
GPR[SPVAP]-1659875416086
GPR[EPVAP]-1659875417304
GPR[SPVATF]-1659875417304
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875418408
GPR[EPVS]-1659875418408
========
builder.append(error.description);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875418409
GPR[SPVAP]-1659875418409
GPR[EPVAP]-1659875419150
GPR[EPVS]-1659875419150
========
builder.append('\n');
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875419152
GPR[SPVAP]-1659875419152
GPR[EPVAP]-1659875420345
GPR[SPVATF]-1659875420345
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875421447
GPR[EPVS]-1659875421447
========
builder.append(" - ");
b.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875421449
GPR[SPVAP]-1659875421449
GPR[EPVAP]-1659875422190
GPR[EPVS]-1659875422190
========
builder.append('\n');
b.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875422191
GPR[SPVAP]-1659875422191
GPR[EPVAP]-1659875422951
GPR[EPVS]-1659875422951
========
builder.append(" - ");
builder.append('\n');
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875422953
GPR[SPVAP]-1659875422953
GPR[EPVAP]-1659875424147
GPR[SPVATF]-1659875424147
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875425216
GPR[EPVS]-1659875425216
========
builder.append(" - ");
builder.append('\n');
b.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875425218
GPR[SPVAP]-1659875425218
GPR[EPVAP]-1659875425973
GPR[EPVS]-1659875425973
========
builder.append(INDENT);
builder.append("node [color=lightblue2, style=filled];\n");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875425974
GPR[SPVAP]-1659875425974
GPR[EPVAP]-1659875426722
GPR[EPVS]-1659875426722
========
builder.append(a.oldName).append(" => ").append(sourceName).append('\n');
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875426724
GPR[SPVAP]-1659875426724
GPR[EPVAP]-1659875427495
GPR[EPVS]-1659875427495
========
builder.add(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875427497
GPR[SPVAP]-1659875427497
GPR[EPVAP]-1659875428249
GPR[EPVS]-1659875428249
========
debug.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875428251
GPR[SPVAP]-1659875428251
GPR[EPVAP]-1659875429011
GPR[EPVS]-1659875429011
========
builder.append("] [encoded source length: ");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875429013
GPR[SPVAP]-1659875429013
GPR[EPVAP]-1659875430203
GPR[SPVATF]-1659875430203
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875431306
GPR[EPVS]-1659875431306
========
builder.append("] [base line: ");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875431307
GPR[SPVAP]-1659875431307
GPR[EPVAP]-1659875432496
GPR[SPVATF]-1659875432496
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875433586
GPR[EPVS]-1659875433586
========
builder.append("] [encoded source length: ");
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875433588
GPR[SPVAP]-1659875433588
GPR[EPVAP]-1659875434332
GPR[EPVS]-1659875434332
========
builder.append("] [base line: ");
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875434334
GPR[SPVAP]-1659875434334
GPR[EPVAP]-1659875435083
GPR[EPVS]-1659875435083
========
builder.append("] [encoded source length: ");
builder.append("] [base line: ");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875435085
GPR[SPVAP]-1659875435085
GPR[EPVAP]-1659875436277
GPR[SPVATF]-1659875436277
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875437396
GPR[EPVS]-1659875437396
========
builder.append("] [encoded source length: ");
builder.append("] [base line: ");
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875437397
GPR[SPVAP]-1659875437397
GPR[EPVAP]-1659875438171
GPR[EPVS]-1659875438171
========
builder.append(ARROW);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875438173
GPR[SPVAP]-1659875438173
GPR[EPVAP]-1659875438933
GPR[EPVS]-1659875438933
========
builder.append(" [label=\"");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875438935
GPR[SPVAP]-1659875438935
GPR[EPVAP]-1659875440161
GPR[SPVATF]-1659875440161
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875441246
GPR[EPVS]-1659875441246
========
builder.append(INDENT);
builder.append(" [label=\"");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875441248
GPR[SPVAP]-1659875441248
GPR[EPVAP]-1659875441997
GPR[EPVS]-1659875441997
========
builder.append(toString(token));
stream.update();
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875441999
GPR[SPVAP]-1659875441999
GPR[EPVAP]-1659875443199
GPR[SPVATF]-1659875443199
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875444301
GPR[EPVS]-1659875444301
========
builder.append("\"");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875444303
GPR[SPVAP]-1659875444303
GPR[EPVAP]-1659875445491
GPR[SPVATF]-1659875445491
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875446594
GPR[EPVS]-1659875446594
========
builder.append(" */\n");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875446596
GPR[SPVAP]-1659875446596
GPR[EPVAP]-1659875447803
GPR[SPVATF]-1659875447803
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875448882
GPR[EPVS]-1659875448882
========
builder.append(" */\n");
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875448884
GPR[SPVAP]-1659875448884
GPR[EPVAP]-1659875449625
GPR[EPVS]-1659875449625
========
builder.append(": ");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875449627
GPR[SPVAP]-1659875449627
GPR[EPVAP]-1659875450862
GPR[SPVATF]-1659875450862
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875451963
GPR[EPVS]-1659875451963
========
builder.append(": ");
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875451965
GPR[SPVAP]-1659875451965
GPR[EPVAP]-1659875452713
GPR[EPVS]-1659875452713
========
append('D');
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875452715
GPR[SPVAP]-1659875452715
GPR[EPVAP]-1659875453459
GPR[EPVS]-1659875453459
========
out.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875453460
GPR[SPVAP]-1659875453460
GPR[EPVAP]-1659875454200
GPR[EPVS]-1659875454200
========
builder.append(" - FUNCTIONS: ");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875454201
GPR[SPVAP]-1659875454201
GPR[EPVAP]-1659875455395
GPR[SPVATF]-1659875455395
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875456484
GPR[EPVS]-1659875456484
========
builder.report(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875456486
GPR[SPVAP]-1659875456486
GPR[EPVAP]-1659875457227
GPR[EPVS]-1659875457228
========
debugLog_.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875457229
GPR[SPVAP]-1659875457229
GPR[EPVAP]-1659875457996
GPR[EPVS]-1659875457996
========
builder.update(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875457999
GPR[SPVAP]-1659875457999
GPR[EPVAP]-1659875458745
GPR[EPVS]-1659875458745
========
builder.append('_');
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875458747
GPR[SPVAP]-1659875458747
GPR[EPVAP]-1659875459963
GPR[SPVATF]-1659875459963
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875461039
GPR[EPVS]-1659875461039
========
if(node.prototypeNames.size()>0){
builder.append("<li>PROTOTYPES: ");
Iterator<String> node.prototypeNames.iterator()=node.prototypeNames.iterator();
while(protoIter.hasNext()){
sb.append(protoIter.next());
if(protoIter.hasNext()){
sb.append(", ");
}
}
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875461042
GPR[SPVAP]-1659875461042
GPR[EPVAP]-1659875461626
GPR[EPVS]-1659875461627
========
if(sourceName!=null){
new StringBuffer(string).append(sourceName);
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875461628
GPR[SPVAP]-1659875461628
GPR[EPVAP]-1659875462396
GPR[EPVS]-1659875462396
========
paths.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875462398
GPR[SPVAP]-1659875462398
GPR[EPVAP]-1659875463141
GPR[EPVS]-1659875463141
========
code.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875463143
GPR[SPVAP]-1659875463143
GPR[EPVAP]-1659875463886
GPR[EPVS]-1659875463886
========
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
builder.append(string);
line=trimEnd(line);

========
GPR[SPVS]-1659875463887
GPR[SPVAP]-1659875463887
GPR[EPVAP]-1659875464651
GPR[EPVS]-1659875464651
========
compiler.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875464653
GPR[SPVAP]-1659875464653
GPR[EPVAP]-1659875465411
GPR[EPVS]-1659875465411
========
compiler.report(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875465418
GPR[SPVAP]-1659875465418
GPR[EPVAP]-1659875466212
GPR[EPVS]-1659875466212
========
message.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875466214
GPR[SPVAP]-1659875466214
GPR[EPVAP]-1659875466965
GPR[EPVS]-1659875466965
========
builder.checkState(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875466966
GPR[SPVAP]-1659875466966
GPR[EPVAP]-1659875467716
GPR[EPVS]-1659875467716
========
if(builder.length()>0){
sb.append('.');
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875467718
GPR[SPVAP]-1659875467718
GPR[EPVAP]-1659875468460
GPR[EPVS]-1659875468460
========
token=preserveInfo.token;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875468462
GPR[SPVAP]-1659875468462
GPR[EPVAP]-1659875469213
GPR[EPVS]-1659875469213
========
builder.valueOf(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875469216
GPR[SPVAP]-1659875469216
GPR[EPVAP]-1659875469987
GPR[EPVS]-1659875469987
========
token=authorInfo.token;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875469989
GPR[SPVAP]-1659875469989
GPR[EPVAP]-1659875470742
GPR[EPVS]-1659875470742
========
token=referenceInfo.token;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875470744
GPR[SPVAP]-1659875470744
GPR[EPVAP]-1659875471500
GPR[EPVS]-1659875471501
========
builder=new StringBuilder();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875471503
GPR[SPVAP]-1659875471503
GPR[EPVAP]-1659875472691
GPR[SPVATF]-1659875472691
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875473791
GPR[EPVS]-1659875473791
========
token=fileOverviewInfo.token;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875473793
GPR[SPVAP]-1659875473793
GPR[EPVAP]-1659875474537
GPR[EPVS]-1659875474537
========
mapping.sourceFile=sourceFile.toString();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875474539
GPR[SPVAP]-1659875474539
GPR[EPVAP]-1659875475281
GPR[EPVS]-1659875475281
========
token=templateInfo.token;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875475283
GPR[SPVAP]-1659875475283
GPR[EPVAP]-1659875476043
GPR[EPVS]-1659875476043
========
token=versionInfo.token;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875476045
GPR[SPVAP]-1659875476045
GPR[EPVAP]-1659875476831
GPR[EPVS]-1659875476831
========
appendInferredPaths(sourceName);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875476833
GPR[SPVAP]-1659875476833
GPR[EPVAP]-1659875477579
GPR[EPVS]-1659875477579
========
appendInferredPaths(line);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875477581
GPR[SPVAP]-1659875477581
GPR[EPVAP]-1659875478326
GPR[EPVS]-1659875478326
========
if("function".equals(line)){
skipEOLs();
return parseFunctionType(next());
}else if("null".equals(string)||"undefined".equals(string)){
return newStringNode(string);
}else {
return parseTypeName(token);
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875478327
GPR[SPVAP]-1659875478327
GPR[EPVAP]-1659875479085
GPR[EPVS]-1659875479085
========
sb.add(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875479086
GPR[SPVAP]-1659875479086
GPR[EPVAP]-1659875479838
GPR[EPVS]-1659875479838
========
maybeEndStatement();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875479840
GPR[SPVAP]-1659875479840
GPR[EPVAP]-1659875480582
GPR[EPVS]-1659875480583
========
if(string.length()==0){
return ;
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875480584
GPR[SPVAP]-1659875480584
GPR[EPVAP]-1659875481370
GPR[EPVS]-1659875481370
========
append(string);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875481372
GPR[SPVAP]-1659875481372
GPR[EPVAP]-1659875482175
GPR[EPVS]-1659875482175
========
default :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875482177
GPR[SPVAP]-1659875482177
GPR[EPVAP]-1659875482925
GPR[EPVS]-1659875482925
========
jsdocBuilder.markTypeNode(parseParamTypeExpressionAnnotation(token),stream.getLineno(),stream.getCharno(),stream.getCharno(),true);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875482927
GPR[SPVAP]-1659875482927
GPR[EPVAP]-1659875484149
GPR[SPVATF]-1659875484149
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875485244
GPR[EPVS]-1659875485244
========
skipEOLs();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875485246
GPR[SPVAP]-1659875485246
GPR[EPVAP]-1659875486443
GPR[SPVATF]-1659875486443
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875487533
GPR[EPVS]-1659875487533
========
skipEOLs();
token=next();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875487535
GPR[SPVAP]-1659875487535
GPR[EPVAP]-1659875488781
GPR[SPVATF]-1659875488781
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875489855
GPR[EPVS]-1659875489855
========
builder.multiply(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875489857
GPR[SPVAP]-1659875489857
GPR[EPVAP]-1659875490608
GPR[EPVS]-1659875490608
========
new StringBuilder().append("OVERALL STATS<ul>");
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875490609
GPR[SPVAP]-1659875490609
GPR[EPVAP]-1659875491807
GPR[SPVATF]-1659875491807
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875492900
GPR[EPVS]-1659875492900
========
appendListItem(new StringBuilder(),"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875492902
GPR[SPVAP]-1659875492902
GPR[EPVAP]-1659875493672
GPR[EPVS]-1659875493672
========
new StringBuilder().append("OVERALL STATS<ul>");
sb.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875493674
GPR[SPVAP]-1659875493674
GPR[EPVAP]-1659875494419
GPR[EPVS]-1659875494419
========
token=eatTokensUntilEOL(token);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875494421
GPR[SPVAP]-1659875494421
GPR[EPVAP]-1659875495612
GPR[SPVATF]-1659875495612
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875496705
GPR[EPVS]-1659875496705
========
case EOL :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875496707
GPR[SPVAP]-1659875496707
GPR[EPVAP]-1659875497467
GPR[EPVS]-1659875497467
========
if(this==typeRegistry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
return "Function";
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875497469
GPR[SPVAP]-1659875497469
GPR[EPVAP]-1659875498225
GPR[EPVS]-1659875498225
========
if(token==JsDocToken.PIPE&&match(JsDocToken.PIPE)){
next();
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875498227
GPR[SPVAP]-1659875498227
GPR[EPVAP]-1659875499482
GPR[SPVATF]-1659875499482
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875500589
GPR[EPVS]-1659875500589
========
skipEOLs();
if(token==JsDocToken.PIPE&&match(JsDocToken.PIPE)){
next();
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875500591
GPR[SPVAP]-1659875500591
GPR[EPVAP]-1659875501796
GPR[SPVATF]-1659875501796
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875502910
GPR[EPVS]-1659875502910
========
token=next();
if(token==JsDocToken.PIPE&&match(JsDocToken.PIPE)){
next();
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875502912
GPR[SPVAP]-1659875502912
GPR[EPVAP]-1659875504101
GPR[SPVATF]-1659875504101
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875505173
GPR[EPVS]-1659875505173
========
skipEOLs();
token=next();
if(token==JsDocToken.PIPE&&match(JsDocToken.PIPE)){
next();
}
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875505174
GPR[SPVAP]-1659875505174
GPR[EPVAP]-1659875506375
GPR[SPVATF]-1659875506375
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875507458
GPR[EPVS]-1659875507458
========
case Token.RC :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875507460
GPR[SPVAP]-1659875507460
GPR[EPVAP]-1659875508191
GPR[EPVS]-1659875508191
========
case Token.GET :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875508193
GPR[SPVAP]-1659875508193
GPR[EPVAP]-1659875508927
GPR[EPVS]-1659875508927
========
case FUNCTION_END :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875508929
GPR[SPVAP]-1659875508929
GPR[EPVAP]-1659875509680
GPR[EPVS]-1659875509680
========
case Token.WHILE :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875509681
GPR[SPVAP]-1659875509681
GPR[EPVAP]-1659875510439
GPR[EPVS]-1659875510439
========
case '\"' :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875510441
GPR[SPVAP]-1659875510441
GPR[EPVAP]-1659875511187
GPR[EPVS]-1659875511187
========
case '>' :

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);

========
GPR[SPVS]-1659875511188
GPR[SPVAP]-1659875511188
GPR[EPVAP]-1659875511938
GPR[EPVS]-1659875511939
GPR[ESUN]-1659875511939
GPR[SSUN]-1659875511939
com.google.javascript.jscomp.parsing.JsDocInfoParser,1307
========
token=next();
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875513356
GPR[SPVAP]-1659875513356
GPR[EPVAP]-1659875517727
GPR[SPVATF]-1659875517727
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875518891
GPR[EPVS]-1659875518891
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
initCodeSourceBuilder.append(line);

========
GPR[SPVS]-1659875518892
GPR[SPVAP]-1659875518892
GPR[EPVAP]-1659875519643
GPR[EPVS]-1659875519643
========
builder.append('\n');
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875519644
GPR[SPVAP]-1659875519644
GPR[EPVAP]-1659875520863
GPR[SPVATF]-1659875520863
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875521955
GPR[EPVS]-1659875521956
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(INDENT);

========
GPR[SPVS]-1659875521957
GPR[SPVAP]-1659875521957
GPR[EPVAP]-1659875522708
GPR[EPVS]-1659875522708
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875522710
GPR[SPVAP]-1659875522710
GPR[EPVAP]-1659875523464
GPR[EPVS]-1659875523464
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(info.numOccurrences);

========
GPR[SPVS]-1659875523465
GPR[SPVAP]-1659875523465
GPR[EPVAP]-1659875524248
GPR[EPVS]-1659875524248
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
b.append(line);

========
GPR[SPVS]-1659875524250
GPR[SPVAP]-1659875524250
GPR[EPVAP]-1659875524999
GPR[EPVS]-1659875524999
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(error.sourceName);

========
GPR[SPVS]-1659875525001
GPR[SPVAP]-1659875525001
GPR[EPVAP]-1659875525765
GPR[EPVS]-1659875525765
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(error.lineNumber);

========
GPR[SPVS]-1659875525766
GPR[SPVAP]-1659875525766
GPR[EPVAP]-1659875526559
GPR[EPVS]-1659875526559
========
builder.append(INDENT);
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875526560
GPR[SPVAP]-1659875526560
GPR[EPVAP]-1659875527327
GPR[EPVS]-1659875527327
========
builder.append("node [color=lightblue2, style=filled];\n");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875527328
GPR[SPVAP]-1659875527328
GPR[EPVAP]-1659875528531
GPR[SPVATF]-1659875528531
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875529616
GPR[EPVS]-1659875529616
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
coalescedLog.append(line);

========
GPR[SPVS]-1659875529617
GPR[SPVAP]-1659875529617
GPR[EPVAP]-1659875530407
GPR[EPVS]-1659875530407
========
builder.append(" - ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875530408
GPR[SPVAP]-1659875530408
GPR[EPVAP]-1659875531594
GPR[SPVATF]-1659875531594
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875532667
GPR[EPVS]-1659875532667
========
builder.append(error.description);
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875532669
GPR[SPVAP]-1659875532669
GPR[EPVAP]-1659875533437
GPR[EPVS]-1659875533437
========
builder.append(" - ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
b.append(line);

========
GPR[SPVS]-1659875533439
GPR[SPVAP]-1659875533439
GPR[EPVAP]-1659875534185
GPR[EPVS]-1659875534185
========
builder.append('\n');
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
b.append(line);

========
GPR[SPVS]-1659875534186
GPR[SPVAP]-1659875534186
GPR[EPVAP]-1659875534933
GPR[EPVS]-1659875534933
========
builder.append(" - ");
builder.append('\n');
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875534934
GPR[SPVAP]-1659875534934
GPR[EPVAP]-1659875536216
GPR[SPVATF]-1659875536216
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875537324
GPR[EPVS]-1659875537324
========
builder.append(" - ");
builder.append('\n');
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
b.append(line);

========
GPR[SPVS]-1659875537326
GPR[SPVAP]-1659875537326
GPR[EPVAP]-1659875538094
GPR[EPVS]-1659875538094
========
builder.append(INDENT);
builder.append("node [color=lightblue2, style=filled];\n");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875538097
GPR[SPVAP]-1659875538097
GPR[EPVAP]-1659875538875
GPR[EPVS]-1659875538875
========
builder.append(a.oldName).append(" => ").append(line).append('\n');
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875538876
GPR[SPVAP]-1659875538876
GPR[EPVAP]-1659875539639
GPR[EPVS]-1659875539639
========
stream.update();
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875539640
GPR[SPVAP]-1659875539640
GPR[EPVAP]-1659875540874
GPR[SPVATF]-1659875540874
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875541963
GPR[EPVS]-1659875541963
========
builder.append("| ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875541965
GPR[SPVAP]-1659875541965
GPR[EPVAP]-1659875543157
GPR[SPVATF]-1659875543157
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875544228
GPR[EPVS]-1659875544228
========
builder.append("] [encoded source length: ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875544229
GPR[SPVAP]-1659875544229
GPR[EPVAP]-1659875545428
GPR[SPVATF]-1659875545428
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875546522
GPR[EPVS]-1659875546522
========
builder.append("] [base line: ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875546524
GPR[SPVAP]-1659875546524
GPR[EPVAP]-1659875547719
GPR[SPVATF]-1659875547719
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875548832
GPR[EPVS]-1659875548832
========
builder.append("] [encoded source length: ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875548833
GPR[SPVAP]-1659875548833
GPR[EPVAP]-1659875549581
GPR[EPVS]-1659875549581
========
builder.append("] [base line: ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875549583
GPR[SPVAP]-1659875549583
GPR[EPVAP]-1659875550355
GPR[EPVS]-1659875550355
========
builder.append("] [encoded source length: ");
builder.append("] [base line: ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875550357
GPR[SPVAP]-1659875550357
GPR[EPVAP]-1659875551549
GPR[SPVATF]-1659875551549
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875552654
GPR[EPVS]-1659875552654
========
builder.append("] [encoded source length: ");
builder.append("] [base line: ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875552655
GPR[SPVAP]-1659875552655
GPR[EPVAP]-1659875553391
GPR[EPVS]-1659875553391
========
builder.append(" [label=\"");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875553394
GPR[SPVAP]-1659875553394
GPR[EPVAP]-1659875554581
GPR[SPVATF]-1659875554581
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875555655
GPR[EPVS]-1659875555655
========
builder.append(INDENT);
builder.append(" [label=\"");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875555657
GPR[SPVAP]-1659875555657
GPR[EPVAP]-1659875556403
GPR[EPVS]-1659875556403
========
builder.append("ALL NAMES\n");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875556405
GPR[SPVAP]-1659875556405
GPR[EPVAP]-1659875557608
GPR[SPVATF]-1659875557608
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875558690
GPR[EPVS]-1659875558690
========
builder.append("ALL NAMES\n");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875558692
GPR[SPVAP]-1659875558692
GPR[EPVAP]-1659875559438
GPR[EPVS]-1659875559438
========
builder.append(ARROW);
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875559440
GPR[SPVAP]-1659875559440
GPR[EPVAP]-1659875560218
GPR[EPVS]-1659875560218
========
builder.append(": ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875560219
GPR[SPVAP]-1659875560219
GPR[EPVAP]-1659875561413
GPR[SPVATF]-1659875561413
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875562524
GPR[EPVS]-1659875562524
========
builder.append(": ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875562526
GPR[SPVAP]-1659875562526
GPR[EPVAP]-1659875563314
GPR[EPVS]-1659875563314
========
append('D');
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875563316
GPR[SPVAP]-1659875563316
GPR[EPVAP]-1659875564067
GPR[EPVS]-1659875564067
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
out.append(line);

========
GPR[SPVS]-1659875564069
GPR[SPVAP]-1659875564069
GPR[EPVAP]-1659875564829
GPR[EPVS]-1659875564829
========
builder.append(" - FUNCTIONS: ");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875564830
GPR[SPVAP]-1659875564830
GPR[EPVAP]-1659875566039
GPR[SPVATF]-1659875566039
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875567154
GPR[EPVS]-1659875567154
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
debugLog_.append(line);

========
GPR[SPVS]-1659875567156
GPR[SPVAP]-1659875567156
GPR[EPVAP]-1659875567921
GPR[EPVS]-1659875567921
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
result.append(line);

========
GPR[SPVS]-1659875567923
GPR[SPVAP]-1659875567923
GPR[EPVAP]-1659875568666
GPR[EPVS]-1659875568666
========
if(line!=null){
new StringBuffer(string).append(sourceName);
}
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875568669
GPR[SPVAP]-1659875568669
GPR[EPVAP]-1659875569421
GPR[EPVS]-1659875569421
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
message.append(line);

========
GPR[SPVS]-1659875569423
GPR[SPVAP]-1659875569423
GPR[EPVAP]-1659875570179
GPR[EPVS]-1659875570179
========
builder.append("\"");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875570181
GPR[SPVAP]-1659875570181
GPR[EPVAP]-1659875571422
GPR[SPVATF]-1659875571422
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875572532
GPR[EPVS]-1659875572532
========
if(node.prototypeNames.size()>0){
builder.append("<li>PROTOTYPES: ");
Iterator<String> node.prototypeNames.iterator()=node.prototypeNames.iterator();
while(protoIter.hasNext()){
sb.append(protoIter.next());
if(protoIter.hasNext()){
sb.append(", ");
}
}
}
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875572534
GPR[SPVAP]-1659875572534
GPR[EPVAP]-1659875573105
GPR[EPVS]-1659875573105
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
code.append(line);

========
GPR[SPVS]-1659875573107
GPR[SPVAP]-1659875573107
GPR[EPVAP]-1659875573851
GPR[EPVS]-1659875573851
========
builder.append(line);
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875573853
GPR[SPVAP]-1659875573853
GPR[EPVAP]-1659875574598
GPR[EPVS]-1659875574598
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
paths.append(line);

========
GPR[SPVS]-1659875574600
GPR[SPVAP]-1659875574600
GPR[EPVAP]-1659875575379
GPR[EPVS]-1659875575379
========
builder.append(" */\n");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875575381
GPR[SPVAP]-1659875575381
GPR[EPVAP]-1659875576592
GPR[SPVATF]-1659875576592
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875577663
GPR[EPVS]-1659875577663
========
builder.append(" */\n");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875577665
GPR[SPVAP]-1659875577665
GPR[EPVAP]-1659875578437
GPR[EPVS]-1659875578437
========
builder.append(line);
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875578439
GPR[SPVAP]-1659875578439
GPR[EPVAP]-1659875579183
GPR[EPVS]-1659875579183
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.update(line);

========
GPR[SPVS]-1659875579185
GPR[SPVAP]-1659875579185
GPR[EPVAP]-1659875579929
GPR[EPVS]-1659875579929
========
builder.append('_');
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875579931
GPR[SPVAP]-1659875579931
GPR[EPVAP]-1659875581126
GPR[SPVATF]-1659875581126
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875582202
GPR[EPVS]-1659875582202
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(result.externExport);

========
GPR[SPVS]-1659875582204
GPR[SPVAP]-1659875582204
GPR[EPVAP]-1659875582959
GPR[EPVS]-1659875582959
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
appendInferredPaths(sourceName);
builder.append(line);

========
GPR[SPVS]-1659875582961
GPR[SPVAP]-1659875582961
GPR[EPVAP]-1659875583714
GPR[EPVS]-1659875583714
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
appendInferredPaths(line);
builder.append(line);

========
GPR[SPVS]-1659875583715
GPR[SPVAP]-1659875583715
GPR[EPVAP]-1659875584467
GPR[EPVS]-1659875584467
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.multiply(line);

========
GPR[SPVS]-1659875584468
GPR[SPVAP]-1659875584468
GPR[EPVAP]-1659875585214
GPR[EPVS]-1659875585214
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
maybeEndStatement();
builder.append(line);

========
GPR[SPVS]-1659875585215
GPR[SPVAP]-1659875585215
GPR[EPVAP]-1659875585967
GPR[EPVS]-1659875585967
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
if(line.length()==0){
return ;
}
builder.append(line);

========
GPR[SPVS]-1659875585969
GPR[SPVAP]-1659875585969
GPR[EPVAP]-1659875586722
GPR[EPVS]-1659875586722
========
append(line);
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875586723
GPR[SPVAP]-1659875586723
GPR[EPVAP]-1659875587471
GPR[EPVS]-1659875587471
========
new StringBuilder().append("OVERALL STATS<ul>");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875587472
GPR[SPVAP]-1659875587472
GPR[EPVAP]-1659875588686
GPR[SPVATF]-1659875588686
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875589795
GPR[EPVS]-1659875589795
========
appendListItem(new StringBuilder(),"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875589796
GPR[SPVAP]-1659875589796
GPR[EPVAP]-1659875590567
GPR[EPVS]-1659875590567
========
new StringBuilder().append("OVERALL STATS<ul>");
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(line);

========
GPR[SPVS]-1659875590568
GPR[SPVAP]-1659875590568
GPR[EPVAP]-1659875591348
GPR[EPVS]-1659875591348
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
if(this==typeRegistry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
return "Function";
}
builder.append(line);

========
GPR[SPVS]-1659875591351
GPR[SPVAP]-1659875591351
GPR[EPVAP]-1659875592109
GPR[EPVS]-1659875592109
========
case EOL :

String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875592111
GPR[SPVAP]-1659875592111
GPR[EPVAP]-1659875592856
GPR[EPVS]-1659875592856
========
jsdocBuilder.markTypeNode(parseParamTypeExpressionAnnotation(token),stream.getLineno(),stream.getCharno(),stream.getCharno(),true);
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875592858
GPR[SPVAP]-1659875592858
GPR[EPVAP]-1659875594053
GPR[SPVATF]-1659875594053
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875595125
GPR[EPVS]-1659875595125
========
if("function".equals(line)){
skipEOLs();
return parseFunctionType(next());
}else if("null".equals(string)||"undefined".equals(string)){
return newStringNode(string);
}else {
return parseTypeName(token);
}
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875595127
GPR[SPVAP]-1659875595127
GPR[EPVAP]-1659875595878
GPR[EPVS]-1659875595878
========
case Token.RC :

String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875595880
GPR[SPVAP]-1659875595880
GPR[EPVAP]-1659875596622
GPR[EPVS]-1659875596622
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
case Token.GET :

builder.append(line);

========
GPR[SPVS]-1659875596624
GPR[SPVAP]-1659875596624
GPR[EPVAP]-1659875597378
GPR[EPVS]-1659875597378
========
case FUNCTION_END :

String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875597379
GPR[SPVAP]-1659875597379
GPR[EPVAP]-1659875598135
GPR[EPVS]-1659875598135
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
case Token.WHILE :

builder.append(line);

========
GPR[SPVS]-1659875598136
GPR[SPVAP]-1659875598136
GPR[EPVAP]-1659875598887
GPR[EPVS]-1659875598887
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(string);

========
GPR[SPVS]-1659875598889
GPR[SPVAP]-1659875598889
GPR[EPVAP]-1659875599635
GPR[EPVS]-1659875599635
========
case '\"' :

String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875599636
GPR[SPVAP]-1659875599636
GPR[EPVAP]-1659875600436
GPR[EPVS]-1659875600436
========
case '>' :

String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);

========
GPR[SPVS]-1659875600438
GPR[SPVAP]-1659875600438
GPR[EPVAP]-1659875601194
GPR[EPVS]-1659875601194
========
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
sb.append(string);

========
GPR[SPVS]-1659875601196
GPR[SPVAP]-1659875601196
GPR[EPVAP]-1659875601943
GPR[EPVS]-1659875601943
GPR[ESUN]-1659875601943
GPR[SSUN]-1659875601943
com.google.javascript.jscomp.parsing.JsDocInfoParser,1308
========
line=trimEnd(line);
builder.append(line);
state=State.SEARCHING_ANNOTATION;
token=next();

========
GPR[SPVS]-1659875603511
GPR[SPVAP]-1659875603511
GPR[EPVAP]-1659875607081
GPR[SPVATF]-1659875607081
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875608175
GPR[EPVS]-1659875608175
========
line=trimEnd(line);
initCodeSourceBuilder.append(line);
token=next();

========
GPR[SPVS]-1659875608176
GPR[SPVAP]-1659875608176
GPR[EPVAP]-1659875608931
GPR[EPVS]-1659875608931
========
builder.append('\n');
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875608933
GPR[SPVAP]-1659875608933
GPR[EPVAP]-1659875610162
GPR[SPVATF]-1659875610162
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875611255
GPR[EPVS]-1659875611255
========
line=trimEnd(line);
builder.append(INDENT);
token=next();

========
GPR[SPVS]-1659875611257
GPR[SPVAP]-1659875611257
GPR[EPVAP]-1659875612012
GPR[EPVS]-1659875612012
========
line=trimEnd(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875612014
GPR[SPVAP]-1659875612014
GPR[EPVAP]-1659875612756
GPR[EPVS]-1659875612756
========
line=trimEnd(line);
builder.append(info.numOccurrences);
token=next();

========
GPR[SPVS]-1659875612757
GPR[SPVAP]-1659875612757
GPR[EPVAP]-1659875613513
GPR[EPVS]-1659875613513
========
line=trimEnd(line);
b.append(line);
token=next();

========
GPR[SPVS]-1659875613515
GPR[SPVAP]-1659875613516
GPR[EPVAP]-1659875614265
GPR[EPVS]-1659875614265
========
line=trimEnd(line);
builder.append(error.sourceName);
token=next();

========
GPR[SPVS]-1659875614266
GPR[SPVAP]-1659875614266
GPR[EPVAP]-1659875615021
GPR[EPVS]-1659875615021
========
line=trimEnd(line);
builder.append(error.lineNumber);
token=next();

========
GPR[SPVS]-1659875615024
GPR[SPVAP]-1659875615024
GPR[EPVAP]-1659875615791
GPR[EPVS]-1659875615791
========
builder.append(" {\n");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875615793
GPR[SPVAP]-1659875615793
GPR[EPVAP]-1659875616987
GPR[SPVATF]-1659875616987
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875618086
GPR[EPVS]-1659875618086
========
builder.append(INDENT);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875618088
GPR[SPVAP]-1659875618088
GPR[EPVAP]-1659875618843
GPR[EPVS]-1659875618843
========
builder.append("node [color=lightblue2, style=filled];\n");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875618844
GPR[SPVAP]-1659875618844
GPR[EPVAP]-1659875620043
GPR[SPVATF]-1659875620043
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875621124
GPR[EPVS]-1659875621124
========
builder.append(" {\n");
builder.append("node [color=lightblue2, style=filled];\n");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875621125
GPR[SPVAP]-1659875621125
GPR[EPVAP]-1659875622351
GPR[SPVATF]-1659875622351
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875623434
GPR[EPVS]-1659875623434
========
line=trimEnd(line);
coalescedLog.append(line);
token=next();

========
GPR[SPVS]-1659875623436
GPR[SPVAP]-1659875623436
GPR[EPVAP]-1659875624179
GPR[EPVS]-1659875624179
========
builder.append(INDENT);
builder.append("node [color=lightblue2, style=filled];\n");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875624181
GPR[SPVAP]-1659875624181
GPR[EPVAP]-1659875624915
GPR[EPVS]-1659875624915
========
builder.append(" - ");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875624916
GPR[SPVAP]-1659875624916
GPR[EPVAP]-1659875626108
GPR[SPVATF]-1659875626108
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875627195
GPR[EPVS]-1659875627195
========
builder.append(error.description);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875627197
GPR[SPVAP]-1659875627197
GPR[EPVAP]-1659875627970
GPR[EPVS]-1659875627970
========
builder.append(" - ");
line=trimEnd(line);
b.append(line);
token=next();

========
GPR[SPVS]-1659875627972
GPR[SPVAP]-1659875627972
GPR[EPVAP]-1659875628726
GPR[EPVS]-1659875628726
========
builder.append('\n');
line=trimEnd(line);
b.append(line);
token=next();

========
GPR[SPVS]-1659875628727
GPR[SPVAP]-1659875628727
GPR[EPVAP]-1659875629466
GPR[EPVS]-1659875629466
========
builder.append(" - ");
builder.append('\n');
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875629467
GPR[SPVAP]-1659875629467
GPR[EPVAP]-1659875630679
GPR[SPVATF]-1659875630679
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875631761
GPR[EPVS]-1659875631761
========
builder.append(" - ");
builder.append('\n');
line=trimEnd(line);
b.append(line);
token=next();

========
GPR[SPVS]-1659875631762
GPR[SPVAP]-1659875631762
GPR[EPVAP]-1659875632505
GPR[EPVS]-1659875632505
========
builder.append(a.oldName).append(" => ").append(line).append('\n');
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875632506
GPR[SPVAP]-1659875632506
GPR[EPVAP]-1659875633268
GPR[EPVS]-1659875633268
========
line=trimEnd(line);
out.append(line);
token=next();

========
GPR[SPVS]-1659875633270
GPR[SPVAP]-1659875633270
GPR[EPVAP]-1659875634006
GPR[EPVS]-1659875634006
========
builder.append("| ");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875634008
GPR[SPVAP]-1659875634008
GPR[EPVAP]-1659875635212
GPR[SPVATF]-1659875635212
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875636309
GPR[EPVS]-1659875636309
========
builder.append("] [encoded source length: ");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875636310
GPR[SPVAP]-1659875636310
GPR[EPVAP]-1659875637520
GPR[SPVATF]-1659875637520
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875638615
GPR[EPVS]-1659875638615
========
builder.append("] [base line: ");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875638617
GPR[SPVAP]-1659875638617
GPR[EPVAP]-1659875639799
GPR[SPVATF]-1659875639799
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875640894
GPR[EPVS]-1659875640894
========
builder.append("] [encoded source length: ");
line=trimEnd(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875640895
GPR[SPVAP]-1659875640895
GPR[EPVAP]-1659875641659
GPR[EPVS]-1659875641660
========
builder.append("] [base line: ");
line=trimEnd(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875641661
GPR[SPVAP]-1659875641661
GPR[EPVAP]-1659875642402
GPR[EPVS]-1659875642402
========
builder.append("] [encoded source length: ");
builder.append("] [base line: ");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875642404
GPR[SPVAP]-1659875642404
GPR[EPVAP]-1659875643590
GPR[SPVATF]-1659875643590
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875644694
GPR[EPVS]-1659875644694
========
builder.append("] [encoded source length: ");
builder.append("] [base line: ");
line=trimEnd(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875644696
GPR[SPVAP]-1659875644696
GPR[EPVAP]-1659875645503
GPR[EPVS]-1659875645503
========
builder.append(" [label=\"");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875645505
GPR[SPVAP]-1659875645505
GPR[EPVAP]-1659875646742
GPR[SPVATF]-1659875646742
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875647824
GPR[EPVS]-1659875647824
========
builder.append(INDENT);
builder.append(" [label=\"");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875647825
GPR[SPVAP]-1659875647825
GPR[EPVAP]-1659875648578
GPR[EPVS]-1659875648578
========
append('D');
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875648580
GPR[SPVAP]-1659875648580
GPR[EPVAP]-1659875649326
GPR[EPVS]-1659875649326
========
builder.append(ARROW);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875649329
GPR[SPVAP]-1659875649329
GPR[EPVAP]-1659875650069
GPR[EPVS]-1659875650069
========
if(node.prototypeNames.size()>0){
builder.append("<li>PROTOTYPES: ");
Iterator<String> node.prototypeNames.iterator()=node.prototypeNames.iterator();
while(protoIter.hasNext()){
sb.append(protoIter.next());
if(protoIter.hasNext()){
sb.append(", ");
}
}
}
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875650071
GPR[SPVAP]-1659875650071
GPR[EPVAP]-1659875650639
GPR[EPVS]-1659875650639
========
builder.append(": ");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875650640
GPR[SPVAP]-1659875650640
GPR[EPVAP]-1659875651833
GPR[SPVATF]-1659875651833
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875652920
GPR[EPVS]-1659875652920
========
builder.append(": ");
line=trimEnd(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875652922
GPR[SPVAP]-1659875652922
GPR[EPVAP]-1659875653715
GPR[EPVS]-1659875653715
========
line=trimEnd(line);
builder.append(line);
if(ignoreStar&&match(JsDocToken.PIPE)){
next();
}
token=next();

========
GPR[SPVS]-1659875653717
GPR[SPVAP]-1659875653717
GPR[EPVAP]-1659875654907
GPR[SPVATF]-1659875654907
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875655977
GPR[EPVS]-1659875655977
========
line=trimEnd(line);
builder.append(line);
skipEOLs();
token=next();

========
GPR[SPVS]-1659875655978
GPR[SPVAP]-1659875655978
GPR[EPVAP]-1659875657168
GPR[SPVATF]-1659875657168
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875658236
GPR[EPVS]-1659875658236
========
line=trimEnd(line);
builder.append(line);
if(ignoreStar&&match(JsDocToken.PIPE)){
next();
}
skipEOLs();
token=next();

========
GPR[SPVS]-1659875658238
GPR[SPVAP]-1659875658238
GPR[EPVAP]-1659875659473
GPR[SPVATF]-1659875659473
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875660568
GPR[EPVS]-1659875660568
========
line=trimEnd(line);
debugLog_.append(line);
token=next();

========
GPR[SPVS]-1659875660570
GPR[SPVAP]-1659875660570
GPR[EPVAP]-1659875661321
GPR[EPVS]-1659875661321
========
line=trimEnd(line);
result.append(line);
token=next();

========
GPR[SPVS]-1659875661322
GPR[SPVAP]-1659875661322
GPR[EPVAP]-1659875662075
GPR[EPVS]-1659875662075
========
line=trimEnd(line);
builder.append(line);
if(!match(JsDocToken.COMMA)){
break;
}
token=next();

========
GPR[SPVS]-1659875662077
GPR[SPVAP]-1659875662077
GPR[EPVAP]-1659875663295
GPR[SPVATF]-1659875663295
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875711824
GPR[EPVS]-1659875711824
========
line=trimEnd(line);
builder.append(line);
next();
token=next();

========
GPR[SPVS]-1659875711826
GPR[SPVAP]-1659875711826
GPR[EPVAP]-1659875713102
GPR[SPVATF]-1659875713102
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875714208
GPR[EPVS]-1659875714208
========
line=trimEnd(line);
builder.append(line);
if(!match(JsDocToken.COMMA)){
break;
}
next();
token=next();

========
GPR[SPVS]-1659875714209
GPR[SPVAP]-1659875714209
GPR[EPVAP]-1659875715418
GPR[SPVATF]-1659875715418
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875763723
GPR[EPVS]-1659875763723
========
line=trimEnd(line);
builder.append(line);
if(!match(JsDocToken.COMMA)){
break;
}
skipEOLs();
token=next();

========
GPR[SPVS]-1659875763725
GPR[SPVAP]-1659875763725
GPR[EPVAP]-1659875764947
GPR[SPVATF]-1659875764947
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875814000
GPR[EPVS]-1659875814000
========
line=trimEnd(line);
builder.append(line);
next();
skipEOLs();
token=next();

========
GPR[SPVS]-1659875814002
GPR[SPVAP]-1659875814002
GPR[EPVAP]-1659875815269
GPR[SPVATF]-1659875815269
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875816347
GPR[EPVS]-1659875816347
========
line=trimEnd(line);
builder.append(line);
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();

========
GPR[SPVS]-1659875816349
GPR[SPVAP]-1659875816349
GPR[EPVAP]-1659875817556
GPR[SPVATF]-1659875817556
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875868564
GPR[EPVS]-1659875868564
========
if(sourceName!=null){
new StringBuffer(line).append(sourceName);
}
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875868566
GPR[SPVAP]-1659875868566
GPR[EPVAP]-1659875869811
GPR[SPVATF]-1659875869811
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875870897
GPR[EPVS]-1659875870897
========
line=trimEnd(line);
message.append(line);
token=next();

========
GPR[SPVS]-1659875870898
GPR[SPVAP]-1659875870898
GPR[EPVAP]-1659875871655
GPR[EPVS]-1659875871655
========
builder.append("\"");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875871656
GPR[SPVAP]-1659875871656
GPR[EPVAP]-1659875872847
GPR[SPVATF]-1659875872847
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875873953
GPR[EPVS]-1659875873953
========
line=trimEnd(line);
code.append(line);
token=next();

========
GPR[SPVS]-1659875873955
GPR[SPVAP]-1659875873955
GPR[EPVAP]-1659875874717
GPR[EPVS]-1659875874717
========
builder.append(line);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875874720
GPR[SPVAP]-1659875874720
GPR[EPVAP]-1659875875966
GPR[SPVATF]-1659875875966
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875877053
GPR[EPVS]-1659875877053
========
builder.append(line);
line=trimEnd(line);
builder.append(INDENT);
token=next();

========
GPR[SPVS]-1659875877054
GPR[SPVAP]-1659875877054
GPR[EPVAP]-1659875877805
GPR[EPVS]-1659875877805
========
line=trimEnd(line);
paths.append(line);
token=next();

========
GPR[SPVS]-1659875877807
GPR[SPVAP]-1659875877807
GPR[EPVAP]-1659875878548
GPR[EPVS]-1659875878548
========
builder.append(" */\n");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875878550
GPR[SPVAP]-1659875878550
GPR[EPVAP]-1659875879779
GPR[SPVATF]-1659875879779
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875880881
GPR[EPVS]-1659875880881
========
builder.append(" */\n");
line=trimEnd(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875880883
GPR[SPVAP]-1659875880883
GPR[EPVAP]-1659875881621
GPR[EPVS]-1659875881621
========
builder.append(line);
line=trimEnd(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875881623
GPR[SPVAP]-1659875881623
GPR[EPVAP]-1659875882367
GPR[EPVS]-1659875882367
========
skipEOLs();
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875882369
GPR[SPVAP]-1659875882369
GPR[EPVAP]-1659875883555
GPR[SPVATF]-1659875883555
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875884636
GPR[EPVS]-1659875884636
========
token=next();
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875884637
GPR[SPVAP]-1659875884637
GPR[EPVAP]-1659875885836
GPR[SPVATF]-1659875885836
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875886923
GPR[EPVS]-1659875886923
========
skipEOLs();
token=next();
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875886924
GPR[SPVAP]-1659875886924
GPR[EPVAP]-1659875888109
GPR[SPVATF]-1659875888109
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875889180
GPR[EPVS]-1659875889180
========
line=trimEnd(line);
builder.append(result.externExport);
token=next();

========
GPR[SPVS]-1659875889182
GPR[SPVAP]-1659875889182
GPR[EPVAP]-1659875889925
GPR[EPVS]-1659875889925
========
line=trimEnd(line);
builder.append(line);
if(!match(JsDocToken.COLON)){
return newNode(Token.EMPTY);
}
token=next();

========
GPR[SPVS]-1659875889926
GPR[SPVAP]-1659875889926
GPR[EPVAP]-1659875890667
GPR[EPVS]-1659875890667
========
default :

line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875890669
GPR[SPVAP]-1659875890669
GPR[EPVAP]-1659875891452
GPR[EPVS]-1659875891452
========
line=trimEnd(line);
builder.add(line);
token=next();

========
GPR[SPVS]-1659875891453
GPR[SPVAP]-1659875891453
GPR[EPVAP]-1659875892198
GPR[EPVS]-1659875892198
========
case TEMPLATE :

line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875892200
GPR[SPVAP]-1659875892200
GPR[EPVAP]-1659875892998
GPR[EPVS]-1659875892998
========
line=trimEnd(line);
appendInferredPaths(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875893000
GPR[SPVAP]-1659875893000
GPR[EPVAP]-1659875893745
GPR[EPVS]-1659875893745
========
line=trimEnd(line);
builder.append(line);
case EXTENDS :

token=next();

========
GPR[SPVS]-1659875893747
GPR[SPVAP]-1659875893747
GPR[EPVAP]-1659875894489
GPR[EPVS]-1659875894489
========
line=trimEnd(line);
compiler.append(line);
token=next();

========
GPR[SPVS]-1659875894491
GPR[SPVAP]-1659875894491
GPR[EPVAP]-1659875895236
GPR[EPVS]-1659875895236
========
line=trimEnd(line);
builder.report(line);
token=next();

========
GPR[SPVS]-1659875895237
GPR[SPVAP]-1659875895237
GPR[EPVAP]-1659875895986
GPR[EPVS]-1659875895986
========
line=trimEnd(line);
appendInferredPaths(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875895988
GPR[SPVAP]-1659875895988
GPR[EPVAP]-1659875896738
GPR[EPVS]-1659875896738
========
line=trimEnd(line);
externalNoShadowVariableNames.append(line);
token=next();

========
GPR[SPVS]-1659875896740
GPR[SPVAP]-1659875896740
GPR[EPVAP]-1659875897487
GPR[EPVS]-1659875897487
========
case INHERIT_DOC :

line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875897489
GPR[SPVAP]-1659875897489
GPR[EPVAP]-1659875898234
GPR[EPVS]-1659875898234
========
line=trimEnd(line);
maybeEndStatement();
builder.append(line);
token=next();

========
GPR[SPVS]-1659875898236
GPR[SPVAP]-1659875898236
GPR[EPVAP]-1659875898991
GPR[EPVS]-1659875898991
========
line=trimEnd(line);
if(line.length()==0){
return ;
}
builder.append(line);
token=next();

========
GPR[SPVS]-1659875898992
GPR[SPVAP]-1659875898992
GPR[EPVAP]-1659875899740
GPR[EPVS]-1659875899740
========
append(line);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875899742
GPR[SPVAP]-1659875899742
GPR[EPVAP]-1659875900489
GPR[EPVS]-1659875900489
========
new StringBuilder().append("OVERALL STATS<ul>");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875900500
GPR[SPVAP]-1659875900500
GPR[EPVAP]-1659875901712
GPR[SPVATF]-1659875901712
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875902832
GPR[EPVS]-1659875902832
========
appendListItem(new StringBuilder(),"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875902833
GPR[SPVAP]-1659875902833
GPR[EPVAP]-1659875903587
GPR[EPVS]-1659875903587
========
new StringBuilder().append("OVERALL STATS<ul>");
line=trimEnd(line);
sb.append(line);
token=next();

========
GPR[SPVS]-1659875903588
GPR[SPVAP]-1659875903588
GPR[EPVAP]-1659875904331
GPR[EPVS]-1659875904331
========
line=trimEnd(line);
builder.append(line);
if(string.length()>0){
jsdocBuilder.recordDeprecationReason(reason);
}
token=next();

========
GPR[SPVS]-1659875904333
GPR[SPVAP]-1659875904333
GPR[EPVAP]-1659875905083
GPR[EPVS]-1659875905083
========
line=trimEnd(line);
builder.append(line);
if(string.length()>0){
jsdocBuilder.recordReturnDescription(returnDescription);
}
token=next();

========
GPR[SPVS]-1659875905085
GPR[SPVAP]-1659875905085
GPR[EPVAP]-1659875905847
GPR[EPVS]-1659875905847
========
line=trimEnd(line);
builder.addNode(line);
token=next();

========
GPR[SPVS]-1659875905849
GPR[SPVAP]-1659875905849
GPR[EPVAP]-1659875906594
GPR[EPVS]-1659875906594
========
line=trimEnd(line);
builder.append(line);
this.string=string;
token=next();

========
GPR[SPVS]-1659875906596
GPR[SPVAP]-1659875906596
GPR[EPVAP]-1659875907339
GPR[EPVS]-1659875907339
========
line=trimEnd(line);
builder.append(line);
jsdocBuilder.recordDescription(line);
token=next();

========
GPR[SPVS]-1659875907341
GPR[SPVAP]-1659875907341
GPR[EPVAP]-1659875908543
GPR[SPVATF]-1659875908543
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875909658
GPR[SPVATR]-1659875909659
TESTING : closure_106
GPR[EPVATR]-1659875932135
GPR[EPVS]-1659875932135
GPR[PF]-1659875932135
sourceFile  script/workingdir/SimFix/closure/closure_106_buggy/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
location   script/workingdir/SimFix/closure/closure_106_buggy
========
line=trimEnd(line);
case EOC :

builder.append(line);
token=next();

========
GPR[SPVS]-1659875932148
GPR[SPVAP]-1659875932148
GPR[EPVAP]-1659875932900
GPR[EPVS]-1659875932900
========
line=trimEnd(line);
compiler.report(line);
token=next();

========
GPR[SPVS]-1659875932908
GPR[SPVAP]-1659875932908
GPR[EPVAP]-1659875933657
GPR[EPVS]-1659875933657
========
line=trimEnd(line);
if(this==typeRegistry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
return "Function";
}
builder.append(line);
token=next();

========
GPR[SPVS]-1659875933659
GPR[SPVAP]-1659875933659
GPR[EPVAP]-1659875934413
GPR[EPVS]-1659875934413
========
jsdocBuilder.markTypeNode(parseParamTypeExpressionAnnotation(token),stream.getLineno(),stream.getCharno(),stream.getCharno(),true);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875934415
GPR[SPVAP]-1659875934415
GPR[EPVAP]-1659875935640
GPR[SPVATF]-1659875935640
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875936749
GPR[EPVS]-1659875936749
========
if(paramDescriptionInfo.string.length()>0){
jsdocBuilder.recordParameterDescription(string,paramDescription);
}
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875936751
GPR[SPVAP]-1659875936751
GPR[EPVAP]-1659875937508
GPR[EPVS]-1659875937508
========
line=trimEnd(line);
builder.append(line);
ignoreStar=true;
token=next();

========
GPR[SPVS]-1659875937510
GPR[SPVAP]-1659875937510
GPR[EPVAP]-1659875938717
GPR[SPVATF]-1659875938717
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875939791
GPR[EPVS]-1659875939791
========
newChild.next=child.next;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875939793
GPR[SPVAP]-1659875939793
GPR[EPVAP]-1659875940540
GPR[EPVS]-1659875940540
========
newChild.parent=this;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875940542
GPR[SPVAP]-1659875940542
GPR[EPVAP]-1659875941326
GPR[EPVS]-1659875941326
========
newChild.next=child.next;
newChild.parent=this;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875941328
GPR[SPVAP]-1659875941328
GPR[EPVAP]-1659875942109
GPR[EPVS]-1659875942109
========
Preconditions.checkArgument(child.next==null);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875942111
GPR[SPVAP]-1659875942111
GPR[EPVAP]-1659875942888
GPR[EPVS]-1659875942888
========
child.parent=this;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875942890
GPR[SPVAP]-1659875942890
GPR[EPVAP]-1659875943640
GPR[EPVS]-1659875943640
========
child.next=null;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875943641
GPR[SPVAP]-1659875943641
GPR[EPVAP]-1659875944387
GPR[EPVS]-1659875944387
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875944389
GPR[SPVAP]-1659875944389
GPR[EPVAP]-1659875945157
GPR[EPVS]-1659875945157
========
line=trimEnd(line);
builder.append(line);
Preconditions.checkArgument(right.parent==null);
token=next();

========
GPR[SPVS]-1659875945158
GPR[SPVAP]-1659875945158
GPR[EPVAP]-1659875945912
GPR[EPVS]-1659875945912
========
line=trimEnd(line);
builder.append(line);
Preconditions.checkArgument(right.next==null);
token=next();

========
GPR[SPVS]-1659875945914
GPR[SPVAP]-1659875945914
GPR[EPVAP]-1659875946663
GPR[EPVS]-1659875946663
========
line=trimEnd(line);
builder.append(line);
Preconditions.checkArgument(right.parent==null);
Preconditions.checkArgument(right.next==null);
token=next();

========
GPR[SPVS]-1659875946664
GPR[SPVAP]-1659875946664
GPR[EPVAP]-1659875947449
GPR[EPVS]-1659875947449
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875947451
GPR[SPVAP]-1659875947451
GPR[EPVAP]-1659875948199
GPR[EPVS]-1659875948199
========
newChild.next=node.next;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875948200
GPR[SPVAP]-1659875948200
GPR[EPVAP]-1659875948962
GPR[EPVS]-1659875948962
========
line=trimEnd(line);
builder.append(line);
child.next=null;
token=next();

========
GPR[SPVS]-1659875948964
GPR[SPVAP]-1659875948964
GPR[EPVAP]-1659875949704
GPR[EPVS]-1659875949704
========
right.next=null;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875949705
GPR[SPVAP]-1659875949705
GPR[EPVAP]-1659875950496
GPR[EPVS]-1659875950496
========
Preconditions.checkArgument(prev.next!=null,"no next sibling.");
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875950497
GPR[SPVAP]-1659875950497
GPR[EPVAP]-1659875951251
GPR[EPVS]-1659875951251
========
prev.next=child.next;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875951252
GPR[SPVAP]-1659875951252
GPR[EPVAP]-1659875952004
GPR[EPVS]-1659875952004
========
result.next=null;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875952005
GPR[SPVAP]-1659875952005
GPR[EPVAP]-1659875952775
GPR[EPVS]-1659875952775
========
result.first=null;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875952777
GPR[SPVAP]-1659875952777
GPR[EPVAP]-1659875953526
GPR[EPVS]-1659875953526
========
result.last=null;
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875953528
GPR[SPVAP]-1659875953528
GPR[EPVAP]-1659875954275
GPR[EPVS]-1659875954275
========
Preconditions.checkArgument(left.next==null);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875954278
GPR[SPVAP]-1659875954278
GPR[EPVAP]-1659875955032
GPR[EPVS]-1659875955032
========
Preconditions.checkArgument(mid.parent==null);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875955033
GPR[SPVAP]-1659875955033
GPR[EPVAP]-1659875955836
GPR[EPVS]-1659875955836
========
Preconditions.checkArgument(mid.next==null);
line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875955838
GPR[SPVAP]-1659875955838
GPR[EPVAP]-1659875956623
GPR[EPVS]-1659875956623
========
line=trimEnd(line);
builder.append(line);
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
token=next();

========
GPR[SPVS]-1659875956625
GPR[SPVAP]-1659875956625
GPR[EPVAP]-1659875957371
GPR[EPVS]-1659875957371
========
line=trimEnd(line);
builder.append(line);
Preconditions.checkArgument(right.parent==null,"second new child has existing parent");
token=next();

========
GPR[SPVS]-1659875957372
GPR[SPVAP]-1659875957372
GPR[EPVAP]-1659875958115
GPR[EPVS]-1659875958115
========
line=trimEnd(line);
builder.append(line);
Preconditions.checkArgument(right.next==null,"second new child has existing sibling");
token=next();

========
GPR[SPVS]-1659875958122
GPR[SPVAP]-1659875958122
GPR[EPVAP]-1659875958887
GPR[EPVS]-1659875958887
========
line=trimEnd(line);
builder.append(line);
case Token.RETURN :

token=next();

========
GPR[SPVS]-1659875958888
GPR[SPVAP]-1659875958889
GPR[EPVAP]-1659875959633
GPR[EPVS]-1659875959633
========
case Token.ERROR :

line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875959635
GPR[SPVAP]-1659875959635
GPR[EPVAP]-1659875960417
GPR[EPVS]-1659875960417
========
case Token.RC :

line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875960418
GPR[SPVAP]-1659875960418
GPR[EPVAP]-1659875961170
GPR[EPVS]-1659875961170
========
line=trimEnd(line);
case Token.GET :

builder.append(line);
token=next();

========
GPR[SPVS]-1659875961172
GPR[SPVAP]-1659875961172
GPR[EPVAP]-1659875961906
GPR[EPVS]-1659875961906
========
case FUNCTION_END :

line=trimEnd(line);
builder.append(line);
token=next();

========
GPR[SPVS]-1659875961908
GPR[SPVAP]-1659875961908
GPR[EPVAP]-1659875962667
GPR[EPVS]-1659875962667
========
line=trimEnd(line);
case Token.WHILE :

builder.append(line);
token=next();

========
GPR[SPVS]-1659875962668
GPR[SPVAP]-1659875962668
GPR[EPVAP]-1659875963436
GPR[EPVS]-1659875963436
GPR[ESUN]-1659875963436
GPR[SSUN]-1659875963436
com.google.javascript.jscomp.parsing.JsDocInfoParser,1309
GPR[ESUN]-1659875963726
GPR[SSUN]-1659875963726
com.google.javascript.jscomp.parsing.JsDocInfoParser,1311
========
case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);


========
GPR[SPVS]-1659875966567
GPR[SPVAP]-1659875966567
GPR[EPVAP]-1659875968641
GPR[EPVS]-1659875968641
========
case STAR :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);


========
GPR[SPVS]-1659875968643
GPR[SPVAP]-1659875968643
GPR[EPVAP]-1659875969581
GPR[EPVS]-1659875969581
========
case PRESERVE :
ExtractionInfo extractMultilineTextualBlock(token,WhitespaceOption.PRESERVE)=extractMultilineTextualBlock(token,WhitespaceOption.PRESERVE);
String preserveInfo.string=preserveInfo.string;

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);


========
GPR[SPVS]-1659875969584
GPR[SPVAP]-1659875969584
GPR[EPVAP]-1659875970192
GPR[EPVS]-1659875970192
========
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}

========
GPR[SPVS]-1659875971424
GPR[SPVAP]-1659875971424
GPR[EPVAP]-1659875974020
GPR[SPVATF]-1659875974020
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875975124
GPR[EPVS]-1659875975124
========
if(sb.length()>0){
sb.append(' ');
}

========
GPR[SPVS]-1659875975126
GPR[SPVAP]-1659875975126
GPR[EPVAP]-1659875975875
GPR[EPVS]-1659875975875
========
if(sb.length()>0){
builder.append(' ');
}

========
GPR[SPVS]-1659875975877
GPR[SPVAP]-1659875975877
GPR[EPVAP]-1659875976624
GPR[EPVS]-1659875976624
========
if(builder.length()>0){
sb.append(' ');
}

========
GPR[SPVS]-1659875976625
GPR[SPVAP]-1659875976625
GPR[EPVAP]-1659875977379
GPR[EPVS]-1659875977379
========
if(message.length()>0){
message.append(' ');
}

========
GPR[SPVS]-1659875977381
GPR[SPVAP]-1659875977381
GPR[EPVAP]-1659875978134
GPR[EPVS]-1659875978134
========
if(message.length()>0){
builder.append(' ');
}

========
GPR[SPVS]-1659875978136
GPR[SPVAP]-1659875978136
GPR[EPVAP]-1659875978885
GPR[EPVS]-1659875978885
========
if(builder.length()>0){
message.append(' ');
}

========
GPR[SPVS]-1659875978887
GPR[SPVAP]-1659875978887
GPR[EPVAP]-1659875979676
GPR[EPVS]-1659875979676
========
if(builder.length()>0){
sb=new StringBuilder();
builder.append(' ');
}

========
GPR[SPVS]-1659875979680
GPR[SPVAP]-1659875979680
GPR[EPVAP]-1659875980433
GPR[EPVS]-1659875980433
========
if(builder.length()>0){
builder.println(' ');
}

========
GPR[SPVS]-1659875980435
GPR[SPVAP]-1659875980435
GPR[EPVAP]-1659875981186
GPR[EPVS]-1659875981186
========
if(!asQuotedString){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875982488
GPR[SPVAP]-1659875982488
GPR[EPVAP]-1659875983240
GPR[EPVS]-1659875983240
========
if(!token){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875983242
GPR[SPVAP]-1659875983242
GPR[EPVAP]-1659875983994
GPR[EPVS]-1659875983994
========
if(!LAST_TOKEN){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875983995
GPR[SPVAP]-1659875983995
GPR[EPVAP]-1659875984743
GPR[EPVS]-1659875984743
========
append((char)token);
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875984745
GPR[SPVAP]-1659875984745
GPR[EPVAP]-1659875985527
GPR[EPVS]-1659875985527
========
append((char)Token.EOL);
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875985529
GPR[SPVAP]-1659875985529
GPR[EPVAP]-1659875986272
GPR[EPVS]-1659875986272
========
if(!biasUp){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875986274
GPR[SPVAP]-1659875986274
GPR[EPVAP]-1659875987024
GPR[EPVS]-1659875987024
========
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.setLength('*');
}

========
GPR[SPVS]-1659875987026
GPR[SPVAP]-1659875987026
GPR[EPVAP]-1659875988234
GPR[SPVATF]-1659875988234
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875989333
GPR[EPVS]-1659875989333
========
if(!firstAlternate){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875989336
GPR[SPVAP]-1659875989336
GPR[EPVAP]-1659875990079
GPR[EPVS]-1659875990079
========
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
result.append('*');
}

========
GPR[SPVS]-1659875990080
GPR[SPVAP]-1659875990080
GPR[EPVAP]-1659875990848
GPR[EPVS]-1659875990848
========
if(!usedHashedAliases){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875990851
GPR[SPVAP]-1659875990851
GPR[EPVAP]-1659875991617
GPR[EPVS]-1659875991617
========
builder.append('_');
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875991618
GPR[SPVAP]-1659875991618
GPR[EPVAP]-1659875992838
GPR[SPVATF]-1659875992838
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659875993927
GPR[EPVS]-1659875993927
========
if(!eps){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875993928
GPR[SPVAP]-1659875993928
GPR[EPVAP]-1659875994677
GPR[EPVS]-1659875994677
========
append((char)token);
if(!token){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875994679
GPR[SPVAP]-1659875994679
GPR[EPVAP]-1659875995418
GPR[EPVS]-1659875995418
========
append((char)token);
if(!LAST_TOKEN){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875995420
GPR[SPVAP]-1659875995420
GPR[EPVAP]-1659875996163
GPR[EPVS]-1659875996163
========
if(!inlineAllStrings){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875996180
GPR[SPVAP]-1659875996180
GPR[EPVAP]-1659875996936
GPR[EPVS]-1659875996936
========
if(L==0)return false;
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}

========
GPR[SPVS]-1659875996940
GPR[SPVAP]-1659875996940
GPR[EPVAP]-1659875997695
GPR[EPVS]-1659875997695
========
case EOL :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659875998692
GPR[SPVAP]-1659875998692
GPR[EPVAP]-1659875999474
GPR[EPVS]-1659875999474
========
case STAR :
state=State.SEARCHING_ANNOTATION;
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659875999475
GPR[SPVAP]-1659875999475
GPR[EPVAP]-1659876000751
GPR[SPVATF]-1659876000751
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876001846
GPR[EPVS]-1659876001846
========
case STAR :
if(builder.length()>0){
builder.append(' ');
}
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876001847
GPR[SPVAP]-1659876001847
GPR[EPVAP]-1659876003065
GPR[SPVATF]-1659876003065
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876004155
GPR[EPVS]-1659876004155
========
case STAR :
builder.append(toString(token));
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876004157
GPR[SPVAP]-1659876004157
GPR[EPVAP]-1659876005348
GPR[SPVATF]-1659876005348
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876006431
GPR[EPVS]-1659876006431
========
case STAR :
line=stream.getRemainingJSDocLine();
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876006433
GPR[SPVAP]-1659876006433
GPR[EPVAP]-1659876007191
GPR[EPVS]-1659876007191
========
case STAR :
state=State.SEARCHING_ANNOTATION;
if(builder.length()>0){
builder.append(' ');
}
builder.append(toString(token));
line=stream.getRemainingJSDocLine();

if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876007192
GPR[SPVAP]-1659876007192
GPR[EPVAP]-1659876007973
GPR[EPVS]-1659876007973
========
builder.append(line);
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876007975
GPR[SPVAP]-1659876007975
GPR[EPVAP]-1659876008719
GPR[EPVS]-1659876008719
========
state=State.SEARCHING_ANNOTATION;
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876008720
GPR[SPVAP]-1659876008720
GPR[EPVAP]-1659876009473
GPR[EPVS]-1659876009473
========
case STAR :
ignoreStar=false;
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876009474
GPR[SPVAP]-1659876009474
GPR[EPVAP]-1659876011106
GPR[SPVATF]-1659876011106
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876012236
GPR[EPVS]-1659876012236
========
case STAR :
line=trimEnd(line);
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876012404
GPR[SPVAP]-1659876012404
GPR[EPVAP]-1659876013184
GPR[EPVS]-1659876013184
========
case STAR :
builder.append(line);
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876013185
GPR[SPVAP]-1659876013185
GPR[EPVAP]-1659876013975
GPR[EPVS]-1659876013975
========
case STAR :
ignoreStar=false;
builder.append(toString(token));
line=trimEnd(line);
builder.append(line);

if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876013977
GPR[SPVAP]-1659876013977
GPR[EPVAP]-1659876014771
GPR[EPVS]-1659876014771
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(!jsdocBuilder.recordVisibility(Visibility.PRIVATE)){
parser.addWarning("msg.jsdoc.visibility.private",stream.getLineno(),stream.getCharno());
}
token=next();
continue;



========
GPR[SPVS]-1659876014773
GPR[SPVAP]-1659876014773
GPR[EPVAP]-1659876016038
GPR[SPVATF]-1659876016038
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876017143
GPR[EPVS]-1659876017143
========
case PROTECTED :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876017144
GPR[SPVAP]-1659876017144
GPR[EPVAP]-1659876017947
GPR[EPVS]-1659876017947
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(!jsdocBuilder.recordVisibility(Visibility.PUBLIC)){
parser.addWarning("msg.jsdoc.visibility.public",stream.getLineno(),stream.getCharno());
}
token=next();
continue;



========
GPR[SPVS]-1659876017949
GPR[SPVAP]-1659876017949
GPR[EPVAP]-1659876019179
GPR[SPVATF]-1659876019179
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876020293
GPR[EPVS]-1659876020293
========
case NO_SHADOW :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876020295
GPR[SPVAP]-1659876020295
GPR[EPVAP]-1659876021058
GPR[EPVS]-1659876021058
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(state==State.SEARCHING_NEWLINE){
state=State.SEARCHING_ANNOTATION;
}
token=next();
continue;



========
GPR[SPVS]-1659876021060
GPR[SPVAP]-1659876021060
GPR[EPVAP]-1659876022299
GPR[SPVATF]-1659876022299
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876023380
GPR[EPVS]-1659876023380
========
default :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876023382
GPR[SPVAP]-1659876023382
GPR[EPVAP]-1659876024138
GPR[EPVS]-1659876024139
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(!jsdocBuilder.recordConstancy()){
parser.addWarning("msg.jsdoc.const",stream.getLineno(),stream.getCharno());
}
token=next();
continue;



========
GPR[SPVS]-1659876024140
GPR[SPVAP]-1659876024140
GPR[EPVAP]-1659876025349
GPR[SPVATF]-1659876025349
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876026412
GPR[EPVS]-1659876026412
========
case CONSTRUCTOR :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876026413
GPR[SPVAP]-1659876026413
GPR[EPVAP]-1659876027178
GPR[EPVS]-1659876027178
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(!jsdocBuilder.recordHiddenness()){
parser.addWarning("msg.jsdoc.hidden",stream.getLineno(),stream.getCharno());
}
token=next();
continue;



========
GPR[SPVS]-1659876027180
GPR[SPVAP]-1659876027180
GPR[EPVAP]-1659876028387
GPR[SPVATF]-1659876028387
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876029491
GPR[EPVS]-1659876029491
========
case NO_ALIAS :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876029492
GPR[SPVAP]-1659876029492
GPR[EPVAP]-1659876030239
GPR[EPVS]-1659876030239
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(!jsdocBuilder.recordNoTypeCheck()){
parser.addWarning("msg.jsdoc.nocheck",stream.getLineno(),stream.getCharno());
}
token=next();
continue;



========
GPR[SPVS]-1659876030240
GPR[SPVAP]-1659876030240
GPR[EPVAP]-1659876031477
GPR[SPVATF]-1659876031477
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876032545
GPR[EPVS]-1659876032545
========
case NOT_IMPLEMENTED :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876032547
GPR[SPVAP]-1659876032547
GPR[EPVAP]-1659876033304
GPR[EPVS]-1659876033304
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(!jsdocBuilder.recordNoSideEffects()){
parser.addWarning("msg.jsdoc.nosideeffects",stream.getLineno(),stream.getCharno());
}
token=next();
continue;



========
GPR[SPVS]-1659876033306
GPR[SPVAP]-1659876033306
GPR[EPVAP]-1659876034515
GPR[SPVATF]-1659876034515
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876035597
GPR[EPVS]-1659876035597
========
case IMPLICIT_CAST :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876035599
GPR[SPVAP]-1659876035599
GPR[EPVAP]-1659876036370
GPR[EPVS]-1659876036370
========
case OVERRIDE :
if(!jsdocBuilder.recordOverride()){
parser.addWarning("msg.jsdoc.override",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876036372
GPR[SPVAP]-1659876036372
GPR[EPVAP]-1659876037182
GPR[EPVS]-1659876037182
========
case THROWS :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876037184
GPR[SPVAP]-1659876037184
GPR[EPVAP]-1659876037978
GPR[EPVS]-1659876037978
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(!jsdocBuilder.recordInterface()){
if(jsdocBuilder.isConstructorRecorded()){
parser.addWarning("msg.jsdoc.interface.constructor",stream.getLineno(),stream.getCharno());
}else {
parser.addWarning("msg.jsdoc.incompat.type",stream.getLineno(),stream.getCharno());
}
}
token=next();
continue;



========
GPR[SPVS]-1659876037980
GPR[SPVAP]-1659876037980
GPR[EPVAP]-1659876039219
GPR[SPVATF]-1659876039219
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876040305
GPR[EPVS]-1659876040305
========
case DESC :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876040307
GPR[SPVAP]-1659876040307
GPR[EPVAP]-1659876041051
GPR[EPVS]-1659876041051
========
Preconditions.checkArgument(token==JsDocToken.LC);
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876041053
GPR[SPVAP]-1659876041053
GPR[EPVAP]-1659876041809
GPR[EPVS]-1659876041809
========
skipEOLs();
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876041811
GPR[SPVAP]-1659876041811
GPR[EPVAP]-1659876042590
GPR[EPVS]-1659876042590
========
if(token==JsDocToken.ELLIPSIS){
token=next();
ignoreStar=true;
}
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876042592
GPR[SPVAP]-1659876042592
GPR[EPVAP]-1659876043359
GPR[EPVS]-1659876043359
========
case EXPORT :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876043361
GPR[SPVAP]-1659876043361
GPR[EPVAP]-1659876044110
GPR[EPVS]-1659876044110
========
if(templateInfo.string.length()==0){
parser.addWarning("msg.jsdoc.templatemissing",stream.getLineno(),stream.getCharno());
}else if(!jsdocBuilder.recordTemplateTypeName(templateInfo.string)){
parser.addWarning("msg.jsdoc.template.at.most.once",stream.getLineno(),stream.getCharno());
}
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876044112
GPR[SPVAP]-1659876044112
GPR[EPVAP]-1659876044869
GPR[EPVS]-1659876044869
========
case VERSION :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876044871
GPR[SPVAP]-1659876044871
GPR[EPVAP]-1659876045638
GPR[EPVS]-1659876045638
========
if(versionInfo.string.length()==0){
parser.addWarning("msg.jsdoc.versionmissing",stream.getLineno(),stream.getCharno());
}else {
if(!jsdocBuilder.recordVersion(versionInfo.string)){
parser.addWarning("msg.jsdoc.extraversion",stream.getLineno(),stream.getCharno());
}
}
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876045639
GPR[SPVAP]-1659876045639
GPR[EPVAP]-1659876046392
GPR[EPVS]-1659876046392
========
case DEFINE :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876046393
GPR[SPVAP]-1659876046393
GPR[EPVAP]-1659876047141
GPR[EPVS]-1659876047141
========
if(referenceInfo.string.length()==0){
parser.addWarning("msg.jsdoc.seemissing",stream.getLineno(),stream.getCharno());
}else {
jsdocBuilder.addReference(reference);
}
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876047143
GPR[SPVAP]-1659876047143
GPR[EPVAP]-1659876047930
GPR[EPVS]-1659876047930
========
case SUPPRESS :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876047931
GPR[SPVAP]-1659876047931
GPR[EPVAP]-1659876048691
GPR[EPVS]-1659876048691
========
case STAR :
if(returnDescriptionInfo.string.length()>0){
jsdocBuilder.recordReturnDescription(returnDescriptionInfo.string);
}
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;



========
GPR[SPVS]-1659876048693
GPR[SPVAP]-1659876048693
GPR[EPVAP]-1659876049439
GPR[EPVS]-1659876049439
========
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
if(!jsdocBuilder.recordFileOverview(fileOverviewInfo.string)||fileOverviewJSDocInfo!=null){
parser.addWarning("msg.jsdoc.fileoverview.extra",stream.getLineno(),stream.getCharno());
}
token=next();
continue;



========
GPR[SPVS]-1659876049441
GPR[SPVAP]-1659876049441
GPR[EPVAP]-1659876050211
GPR[EPVS]-1659876050211
========
case LICENSE :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876050213
GPR[SPVAP]-1659876050213
GPR[EPVAP]-1659876050965
GPR[EPVS]-1659876050965
========
if(!match(JsDocToken.COLON)){
return newNode(Token.EMPTY);
}
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876050968
GPR[SPVAP]-1659876050968
GPR[EPVAP]-1659876051718
GPR[EPVS]-1659876051718
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876051719
GPR[SPVAP]-1659876051719
GPR[EPVAP]-1659876052469
GPR[EPVS]-1659876052469
========
if(blockInfo.string.length()>0){
jsdocBuilder.recordBlockDescription(blockInfo.string);
}
case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876052471
GPR[SPVAP]-1659876052471
GPR[EPVAP]-1659876053231
GPR[EPVS]-1659876053231
========
case PARAM :

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;


========
GPR[SPVS]-1659876053232
GPR[SPVAP]-1659876053232
GPR[EPVAP]-1659876053973
GPR[EPVS]-1659876053973
========
default :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876054933
GPR[SPVAP]-1659876054933
GPR[EPVAP]-1659876055668
GPR[EPVS]-1659876055668
========
case EOL :
ignoreStar=false;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876055670
GPR[SPVAP]-1659876055670
GPR[EPVAP]-1659876056870
GPR[SPVATF]-1659876056870
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876057944
GPR[EPVS]-1659876057944
========
case EOL :
builder.append(toString(token));
ignoreStar=true;
builder.append('\n');
token=next();
continue;



========
GPR[SPVS]-1659876057946
GPR[SPVAP]-1659876057946
GPR[EPVAP]-1659876059142
GPR[SPVATF]-1659876059142
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876060227
GPR[EPVS]-1659876060227
========
case EOL :
builder.append(toString(token));
ignoreStar=false;
builder.append('\n');
token=next();
continue;



========
GPR[SPVS]-1659876060229
GPR[SPVAP]-1659876060229
GPR[EPVAP]-1659876061425
GPR[SPVATF]-1659876061425
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876062516
GPR[EPVS]-1659876062516
========
state=State.SEARCHING_ANNOTATION;
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876062517
GPR[SPVAP]-1659876062517
GPR[EPVAP]-1659876063315
GPR[EPVS]-1659876063315
========
token=next();
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876063316
GPR[SPVAP]-1659876063316
GPR[EPVAP]-1659876064077
GPR[EPVS]-1659876064077
========
case TEMPLATE :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876064079
GPR[SPVAP]-1659876064079
GPR[EPVAP]-1659876064831
GPR[EPVS]-1659876064831
========
case EOL :
ignoreStar=true;
builder.append('\n');
if(state==State.SEARCHING_NEWLINE){
state=State.SEARCHING_ANNOTATION;
}
token=next();
continue;



========
GPR[SPVS]-1659876064833
GPR[SPVAP]-1659876064833
GPR[EPVAP]-1659876066041
GPR[SPVATF]-1659876066041
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876067127
GPR[EPVS]-1659876067128
========
default :

case EOL :
ignoreStar=true;
builder.append('\n');
if(state==State.SEARCHING_NEWLINE){
state=State.SEARCHING_ANNOTATION;
}
token=next();
continue;



========
GPR[SPVS]-1659876067129
GPR[SPVAP]-1659876067129
GPR[EPVAP]-1659876067900
GPR[EPVS]-1659876067900
========
case PROTECTED :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876067902
GPR[SPVAP]-1659876067902
GPR[EPVAP]-1659876068639
GPR[EPVS]-1659876068639
========
case NO_SHADOW :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876068640
GPR[SPVAP]-1659876068640
GPR[EPVAP]-1659876069383
GPR[EPVS]-1659876069383
========
case EOL :
ignoreStar=true;
builder.append('\n');
skipEOLs();
token=next();
continue;



========
GPR[SPVS]-1659876069385
GPR[SPVAP]-1659876069385
GPR[EPVAP]-1659876070594
GPR[SPVATF]-1659876070594
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876071668
GPR[EPVS]-1659876071668
========
case EOL :
lineno=stream.getLineno();
ignoreStar=true;
builder.append('\n');
token=next();
continue;



========
GPR[SPVS]-1659876071670
GPR[SPVAP]-1659876071670
GPR[EPVAP]-1659876072477
GPR[EPVS]-1659876072477
========
case EOL :
type=null;
ignoreStar=true;
builder.append('\n');
token=next();
continue;



========
GPR[SPVS]-1659876072479
GPR[SPVAP]-1659876072479
GPR[EPVAP]-1659876073230
GPR[EPVS]-1659876073230
========
case EOL :
skipEOLs();
lineno=stream.getLineno();
type=null;

ignoreStar=true;
builder.append('\n');
token=next();
continue;



========
GPR[SPVS]-1659876073232
GPR[SPVAP]-1659876073232
GPR[EPVAP]-1659876073979
GPR[EPVS]-1659876073979
========
case CONSTRUCTOR :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876073980
GPR[SPVAP]-1659876073980
GPR[EPVAP]-1659876074733
GPR[EPVS]-1659876074733
========
case NO_ALIAS :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876074735
GPR[SPVAP]-1659876074735
GPR[EPVAP]-1659876075476
GPR[EPVS]-1659876075476
========
case NOT_IMPLEMENTED :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876075479
GPR[SPVAP]-1659876075479
GPR[EPVAP]-1659876076230
GPR[EPVS]-1659876076230
========
case IMPLICIT_CAST :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876076231
GPR[SPVAP]-1659876076231
GPR[EPVAP]-1659876076983
GPR[EPVS]-1659876076983
========
case EXPORT :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876076985
GPR[SPVAP]-1659876076985
GPR[EPVAP]-1659876077731
GPR[EPVS]-1659876077731
========
case EOL :
if(token!=JsDocToken.EOL&&token!=JsDocToken.EOC){
type=createJSTypeExpression(parseAndRecordTypeNode(token));
}
ignoreStar=true;
builder.append('\n');
token=next();
continue;



========
GPR[SPVS]-1659876077733
GPR[SPVAP]-1659876077733
GPR[EPVAP]-1659876078485
GPR[EPVS]-1659876078485
========
case EOL :
lineno=stream.getLineno();
type=null;
if(token!=JsDocToken.EOL&&token!=JsDocToken.EOC){
type=createJSTypeExpression(parseAndRecordTypeNode(token));
}

ignoreStar=true;
builder.append('\n');
token=next();
continue;



========
GPR[SPVS]-1659876078486
GPR[SPVAP]-1659876078486
GPR[EPVAP]-1659876079235
GPR[EPVS]-1659876079235
========
if(string.length()==0){
parser.addWarning("msg.jsdoc.authormissing",stream.getLineno(),stream.getCharno());
}else {
jsdocBuilder.addAuthor(author);
}
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876079236
GPR[SPVAP]-1659876079236
GPR[EPVAP]-1659876080019
GPR[EPVS]-1659876080019
========
if(string.length()==0){
parser.addWarning("msg.jsdoc.seemissing",stream.getLineno(),stream.getCharno());
}else {
jsdocBuilder.addReference(reference);
}
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876080021
GPR[SPVAP]-1659876080021
GPR[EPVAP]-1659876080804
GPR[EPVS]-1659876080804
========
token=blockInfo.token;
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876080806
GPR[SPVAP]-1659876080806
GPR[EPVAP]-1659876081560
GPR[EPVS]-1659876081560
========
if(blockInfo.string.length()>0){
jsdocBuilder.recordBlockDescription(blockInfo.string);
}
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876081561
GPR[SPVAP]-1659876081561
GPR[EPVAP]-1659876082310
GPR[EPVS]-1659876082310
========
builder.append("}\n");
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876082312
GPR[SPVAP]-1659876082312
GPR[EPVAP]-1659876083055
GPR[EPVS]-1659876083055
========
if(sourceName.length()==0){
parser.addWarning("msg.jsdoc.templatemissing",stream.getLineno(),stream.getCharno());
}else if(!jsdocBuilder.recordTemplateTypeName(templateTypeName)){
parser.addWarning("msg.jsdoc.template.at.most.once",stream.getLineno(),stream.getCharno());
}
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876083057
GPR[SPVAP]-1659876083057
GPR[EPVAP]-1659876083807
GPR[EPVS]-1659876083807
========
if(string.length()==0){
parser.addWarning("msg.jsdoc.versionmissing",stream.getLineno(),stream.getCharno());
}else {
if(!jsdocBuilder.recordVersion(version)){
parser.addWarning("msg.jsdoc.extraversion",stream.getLineno(),stream.getCharno());
}
}
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876083809
GPR[SPVAP]-1659876083809
GPR[EPVAP]-1659876084580
GPR[EPVS]-1659876084580
========
skipEOLs();
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876084582
GPR[SPVAP]-1659876084582
GPR[EPVAP]-1659876085330
GPR[EPVS]-1659876085330
========
if(!match(JsDocToken.COLON)){
return newNode(Token.EMPTY);
}
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876085332
GPR[SPVAP]-1659876085332
GPR[EPVAP]-1659876086075
GPR[EPVS]-1659876086075
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876086076
GPR[SPVAP]-1659876086076
GPR[EPVAP]-1659876086843
GPR[EPVS]-1659876086843
========
if(!jsdocBuilder.recordFileOverview(fileOverviewInfo.string)||fileOverviewJSDocInfo!=null){
parser.addWarning("msg.jsdoc.fileoverview.extra",stream.getLineno(),stream.getCharno());
}
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876086845
GPR[SPVAP]-1659876086845
GPR[EPVAP]-1659876087619
GPR[EPVS]-1659876087619
========
case LICENSE :

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876087620
GPR[SPVAP]-1659876087620
GPR[EPVAP]-1659876088396
GPR[EPVS]-1659876088396
========
builder.append(INDENT);
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876088398
GPR[SPVAP]-1659876088398
GPR[EPVAP]-1659876089164
GPR[EPVS]-1659876089164
========
builder.append(" {\n");
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876089165
GPR[SPVAP]-1659876089165
GPR[EPVAP]-1659876089923
GPR[EPVS]-1659876089923
========
builder.append("node [color=lightblue2, style=filled];\n");
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876089924
GPR[SPVAP]-1659876089924
GPR[EPVAP]-1659876091222
GPR[EPVS]-1659876091222
========
case EOL :
if(returnDescriptionInfo.string.length()>0){
jsdocBuilder.recordReturnDescription(returnDescriptionInfo.string);
}
ignoreStar=true;
builder.append('\n');
token=next();
continue;



========
GPR[SPVS]-1659876091225
GPR[SPVAP]-1659876091225
GPR[EPVAP]-1659876092083
GPR[EPVS]-1659876092083
========
jsdocBuilder.markTypeNode(parseParamTypeExpressionAnnotation(token),stream.getLineno(),stream.getCharno(),stream.getCharno(),true);
case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;


========
GPR[SPVS]-1659876092088
GPR[SPVAP]-1659876092088
GPR[EPVAP]-1659876093663
GPR[EPVS]-1659876093663
========
default :
state=State.SEARCHING_ANNOTATION;
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876094666
GPR[SPVAP]-1659876094666
GPR[EPVAP]-1659876096011
GPR[SPVATF]-1659876096011
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876097183
GPR[EPVS]-1659876097183
========
builder.append(line);
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876097185
GPR[SPVAP]-1659876097185
GPR[EPVAP]-1659876097975
GPR[EPVS]-1659876097975
========
state=State.SEARCHING_ANNOTATION;
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876097983
GPR[SPVAP]-1659876097983
GPR[EPVAP]-1659876099147
GPR[EPVS]-1659876099147
========
token=next();
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876099149
GPR[SPVAP]-1659876099149
GPR[EPVAP]-1659876099992
GPR[EPVS]-1659876099992
========
case EOL :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876099994
GPR[SPVAP]-1659876099994
GPR[EPVAP]-1659876100745
GPR[EPVS]-1659876100745
========
builder.append("| ");
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876100747
GPR[SPVAP]-1659876100747
GPR[EPVAP]-1659876101492
GPR[EPVS]-1659876101492
========
case STAR :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876101493
GPR[SPVAP]-1659876101493
GPR[EPVAP]-1659876102247
GPR[EPVS]-1659876102247
========
case PROTECTED :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876102248
GPR[SPVAP]-1659876102248
GPR[EPVAP]-1659876102999
GPR[EPVS]-1659876102999
========
case NO_SHADOW :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876103001
GPR[SPVAP]-1659876103001
GPR[EPVAP]-1659876103755
GPR[EPVS]-1659876103755
========
case NO_ALIAS :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876103756
GPR[SPVAP]-1659876103756
GPR[EPVAP]-1659876104500
GPR[EPVS]-1659876104500
========
case NOT_IMPLEMENTED :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876104502
GPR[SPVAP]-1659876104502
GPR[EPVAP]-1659876105250
GPR[EPVS]-1659876105250
========
case IMPLICIT_CAST :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876105252
GPR[SPVAP]-1659876105252
GPR[EPVAP]-1659876105996
GPR[EPVS]-1659876105996
========
case CONSTANT :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876105999
GPR[SPVAP]-1659876105999
GPR[EPVAP]-1659876106747
GPR[EPVS]-1659876106747
========
case SUPPRESS :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876106749
GPR[SPVAP]-1659876106749
GPR[EPVAP]-1659876107523
GPR[EPVS]-1659876107523
========
case VERSION :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876107525
GPR[SPVAP]-1659876107525
GPR[EPVAP]-1659876108268
GPR[EPVS]-1659876108268
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
if(line.length()>0){
jsdocBuilder.recordDeprecationReason(line);
}
token=next();



========
GPR[SPVS]-1659876108269
GPR[SPVAP]-1659876108269
GPR[EPVAP]-1659876109448
GPR[SPVATF]-1659876109448
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876110545
GPR[SPVATR]-1659876110546
TESTING : closure_106
GPR[EPVATR]-1659876132662
GPR[EPVS]-1659876132662
GPR[PF]-1659876132662
sourceFile  script/workingdir/SimFix/closure/closure_106_buggy/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
location   script/workingdir/SimFix/closure/closure_106_buggy
========
case INTERFACE :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876132672
GPR[SPVAP]-1659876132672
GPR[EPVAP]-1659876133457
GPR[EPVS]-1659876133457
========
token=current();
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876133458
GPR[SPVAP]-1659876133458
GPR[EPVAP]-1659876134235
GPR[EPVS]-1659876134235
========
builder.append("}\n");
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876134237
GPR[SPVAP]-1659876134237
GPR[EPVAP]-1659876134989
GPR[EPVS]-1659876134989
========
builder.append(INDENT);
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876134991
GPR[SPVAP]-1659876134991
GPR[EPVAP]-1659876135731
GPR[EPVS]-1659876135731
========
builder.append(" {\n");
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876135733
GPR[SPVAP]-1659876135733
GPR[EPVAP]-1659876136490
GPR[EPVS]-1659876136490
========
builder.append("node [color=lightblue2, style=filled];\n");
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876136492
GPR[SPVAP]-1659876136492
GPR[EPVAP]-1659876137245
GPR[EPVS]-1659876137245
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
lineno=stream.getLineno();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876137247
GPR[SPVAP]-1659876137247
GPR[EPVAP]-1659876137995
GPR[EPVS]-1659876137995
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
charno=stream.getCharno();
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876137997
GPR[SPVAP]-1659876137997
GPR[EPVAP]-1659876138743
GPR[EPVS]-1659876138743
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
type=null;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876138744
GPR[SPVAP]-1659876138744
GPR[EPVAP]-1659876139672
GPR[EPVS]-1659876139672
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
if(token!=JsDocToken.EOL&&token!=JsDocToken.EOC){
type=createJSTypeExpression(parseAndRecordTypeNode(token));
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876139674
GPR[SPVAP]-1659876139674
GPR[EPVAP]-1659876140421
GPR[EPVS]-1659876140421
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
lineno=stream.getLineno();
charno=stream.getCharno();
type=null;
if(token!=JsDocToken.EOL&&token!=JsDocToken.EOC){
type=createJSTypeExpression(parseAndRecordTypeNode(token));
}

ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876140422
GPR[SPVAP]-1659876140422
GPR[EPVAP]-1659876141172
GPR[EPVS]-1659876141172
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
skipEOLs();
token=next();



========
GPR[SPVS]-1659876141174
GPR[SPVAP]-1659876141174
GPR[EPVAP]-1659876142397
GPR[SPVATF]-1659876142398
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876143460
GPR[EPVS]-1659876143460
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
skipEOLs();
lineno=stream.getLineno();
charno=stream.getCharno();

builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876143462
GPR[SPVAP]-1659876143462
GPR[EPVAP]-1659876144262
GPR[EPVS]-1659876144262
========
jsdocBuilder.markTypeNode(parseParamTypeExpressionAnnotation(token),stream.getLineno(),stream.getCharno(),stream.getCharno(),true);
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876144265
GPR[SPVAP]-1659876144265
GPR[EPVAP]-1659876145059
GPR[EPVS]-1659876145059
========
default :
if(line.length()>0){
jsdocBuilder.recordReturnDescription(line);
}
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876145062
GPR[SPVAP]-1659876145062
GPR[EPVAP]-1659876145819
GPR[EPVS]-1659876145819
========
default :
token=returnDescriptionInfo.token;
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876145820
GPR[SPVAP]-1659876145820
GPR[EPVAP]-1659876146570
GPR[EPVS]-1659876146570
========
default :
if(line.length()>0){
jsdocBuilder.recordReturnDescription(line);
}
token=returnDescriptionInfo.token;

if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876146572
GPR[SPVAP]-1659876146572
GPR[EPVAP]-1659876147324
GPR[EPVS]-1659876147324
========
if(line==null){
token=eatTokensUntilEOL(token);
continue retry;
}
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876147326
GPR[SPVAP]-1659876147326
GPR[EPVAP]-1659876148066
GPR[EPVS]-1659876148066
========
if(paramDescriptionInfo.string.length()>0){
jsdocBuilder.recordParameterDescription(line,paramDescription);
}
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876148068
GPR[SPVAP]-1659876148068
GPR[EPVAP]-1659876148811
GPR[EPVS]-1659876148811
========
skipEOLs();
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876148813
GPR[SPVAP]-1659876148813
GPR[EPVAP]-1659876149557
GPR[EPVS]-1659876149557
========
if(!match(JsDocToken.COLON)){
return newNode(Token.EMPTY);
}
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876149558
GPR[SPVAP]-1659876149558
GPR[EPVAP]-1659876150315
GPR[EPVS]-1659876150315
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876150317
GPR[SPVAP]-1659876150317
GPR[EPVAP]-1659876151093
GPR[EPVS]-1659876151093
========
default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
jsdocBuilder.build(null);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876151095
GPR[SPVAP]-1659876151095
GPR[EPVAP]-1659876152279
GPR[SPVATF]-1659876152279
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876153378
GPR[EPVS]-1659876153378
========
case EOL :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
jsdocBuilder.build(null);
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();



========
GPR[SPVS]-1659876153380
GPR[SPVAP]-1659876153380
GPR[EPVAP]-1659876154123
GPR[EPVS]-1659876154123
========
case INTERFACE :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
if(line.length()>0){
jsdocBuilder.recordDeprecationReason(line);
}
token=next();



========
GPR[SPVS]-1659876154125
GPR[SPVAP]-1659876154125
GPR[EPVAP]-1659876154867
GPR[EPVS]-1659876154868
========
case BANG :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876154869
GPR[SPVAP]-1659876154869
GPR[EPVAP]-1659876156070
GPR[SPVATF]-1659876156070
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876157143
GPR[EPVS]-1659876157143
========
default :

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();


========
GPR[SPVS]-1659876157145
GPR[SPVAP]-1659876157145
GPR[EPVAP]-1659876157891
GPR[EPVS]-1659876157891
========
do {
start=-1;
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876158985
GPR[SPVAP]-1659876158985
GPR[EPVAP]-1659876159565
GPR[EPVS]-1659876159565
========
do {
builder.append('\n');
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876159567
GPR[SPVAP]-1659876159567
GPR[EPVAP]-1659876160149
GPR[EPVS]-1659876160149
========
case PROTECTED :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876160150
GPR[SPVAP]-1659876160150
GPR[EPVAP]-1659876160730
GPR[EPVS]-1659876160730
========
case NO_SHADOW :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876160732
GPR[SPVAP]-1659876160732
GPR[EPVAP]-1659876161307
GPR[EPVS]-1659876161307
========
case CONSTRUCTOR :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876161308
GPR[SPVAP]-1659876161309
GPR[EPVAP]-1659876161887
GPR[EPVS]-1659876161887
========
case NO_ALIAS :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876161889
GPR[SPVAP]-1659876161889
GPR[EPVAP]-1659876162465
GPR[EPVS]-1659876162465
========
case NOT_IMPLEMENTED :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876162467
GPR[SPVAP]-1659876162467
GPR[EPVAP]-1659876163049
GPR[EPVS]-1659876163049
========
case IMPLICIT_CAST :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876163051
GPR[SPVAP]-1659876163051
GPR[EPVAP]-1659876163626
GPR[EPVS]-1659876163626
========
case DESC :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876163628
GPR[SPVAP]-1659876163628
GPR[EPVAP]-1659876164209
GPR[EPVS]-1659876164209
========
case SUPPRESS :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876164211
GPR[SPVAP]-1659876164211
GPR[EPVAP]-1659876164787
GPR[EPVS]-1659876164787
========
do {
next();
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876164789
GPR[SPVAP]-1659876164789
GPR[EPVAP]-1659876165363
GPR[EPVS]-1659876165363
========
do {
skipEOLs();
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876165364
GPR[SPVAP]-1659876165364
GPR[EPVAP]-1659876165945
GPR[EPVS]-1659876165945
========
do {
next();
skipEOLs();

swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876165947
GPR[SPVAP]-1659876165947
GPR[EPVAP]-1659876166515
GPR[EPVS]-1659876166515
========
do {
next();
skipEOLs();
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876166518
GPR[SPVAP]-1659876166518
GPR[EPVAP]-1659876167095
GPR[EPVS]-1659876167095
========
do {
next();
next();
skipEOLs();

swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876167097
GPR[SPVAP]-1659876167097
GPR[EPVAP]-1659876167674
GPR[EPVS]-1659876167674
========
do {
skipEOLs();
next();
skipEOLs();

swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876167675
GPR[SPVAP]-1659876167675
GPR[EPVAP]-1659876168247
GPR[EPVS]-1659876168247
========
do {
next();
skipEOLs();
next();
skipEOLs();

swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876168250
GPR[SPVAP]-1659876168250
GPR[EPVAP]-1659876168829
GPR[EPVS]-1659876168829
========
case LICENSE :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876168831
GPR[SPVAP]-1659876168831
GPR[EPVAP]-1659876169409
GPR[EPVS]-1659876169409
========
case VERSION :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876169411
GPR[SPVAP]-1659876169411
GPR[EPVAP]-1659876169995
GPR[EPVS]-1659876169995
========
do {
if(parseFieldType(token)==null){
return null;
}
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876169996
GPR[SPVAP]-1659876169996
GPR[EPVAP]-1659876170572
GPR[EPVS]-1659876170572
========
do {
token=next();
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876170574
GPR[SPVAP]-1659876170574
GPR[EPVAP]-1659876171153
GPR[EPVS]-1659876171153
========
do {
if(parseFieldType(token)==null){
return null;
}
skipEOLs();
next();
skipEOLs();
token=next();

swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876171155
GPR[SPVAP]-1659876171155
GPR[EPVAP]-1659876171739
GPR[EPVS]-1659876171739
========
do {
skipEOLs();
next();
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876171741
GPR[SPVAP]-1659876171741
GPR[EPVAP]-1659876172315
GPR[EPVS]-1659876172315
========
do {
token=eatTokensUntilEOL();
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876172317
GPR[SPVAP]-1659876172317
GPR[EPVAP]-1659876172891
GPR[EPVS]-1659876172891
========
do {
continue retry;
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876172893
GPR[SPVAP]-1659876172893
GPR[EPVAP]-1659876173470
GPR[EPVS]-1659876173470
========
do {
token=eatTokensUntilEOL();
continue retry;

swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876173471
GPR[SPVAP]-1659876173471
GPR[EPVAP]-1659876174047
GPR[EPVS]-1659876174047
========
do {
jsdocBuilder.recordDescription(line);
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876174048
GPR[SPVAP]-1659876174048
GPR[EPVAP]-1659876174627
GPR[EPVS]-1659876174627
========
do {
jsdocBuilder.recordDescription(line);
continue retry;

swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876174629
GPR[SPVAP]-1659876174629
GPR[EPVAP]-1659876175223
GPR[EPVS]-1659876175223
========
case TYPE :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876175225
GPR[SPVAP]-1659876175225
GPR[EPVAP]-1659876175805
GPR[EPVS]-1659876175805
========
if(match(JsDocToken.LT)){
next();
skipEOLs();
Node parseTypeExpressionList(next())=parseTypeExpressionList(next());
if(memberType!=null){
newStringNode(stream.getString()).addChildToFront(memberType);
skipEOLs();
if(!match(JsDocToken.GT)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
}
next();
}
}
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876175806
GPR[SPVAP]-1659876175806
GPR[EPVAP]-1659876176380
GPR[EPVS]-1659876176380
========
case EXPORT :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876176383
GPR[SPVAP]-1659876176383
GPR[EPVAP]-1659876176976
GPR[EPVS]-1659876176976
========
skipEOLs();
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876176978
GPR[SPVAP]-1659876176978
GPR[EPVAP]-1659876177552
GPR[EPVS]-1659876177552
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876177554
GPR[SPVAP]-1659876177554
GPR[EPVAP]-1659876178145
GPR[EPVS]-1659876178145
========
next();
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876178147
GPR[SPVAP]-1659876178147
GPR[EPVAP]-1659876178720
GPR[EPVS]-1659876178720
========
newNode(Token.LC).addChildToBack(parseFieldTypeList(token));
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876178722
GPR[SPVAP]-1659876178722
GPR[EPVAP]-1659876179313
GPR[EPVS]-1659876179313
========
new Node(Token.BLOCK).addChildToBack(parseTopLevelTypeExpression(token));
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876179314
GPR[SPVAP]-1659876179314
GPR[EPVAP]-1659876179886
GPR[EPVS]-1659876179886
========
do {
state=State.SEARCHING_NEWLINE;
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876179889
GPR[SPVAP]-1659876179889
GPR[EPVAP]-1659876180459
GPR[EPVS]-1659876180459
========
do {
state=State.SEARCHING_NEWLINE;
continue retry;

swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876180461
GPR[SPVAP]-1659876180461
GPR[EPVAP]-1659876181045
GPR[EPVS]-1659876181045
========
if(null!=null&&!ignoreStar){
typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
}
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876181047
GPR[SPVAP]-1659876181047
GPR[EPVAP]-1659876181619
GPR[EPVS]-1659876181619
========
do {
return token;
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876181621
GPR[SPVAP]-1659876181621
GPR[EPVAP]-1659876182205
GPR[EPVS]-1659876182205
========
if(!match(JsDocToken.COLON)){
return parseFieldName(token);
}
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876182207
GPR[SPVAP]-1659876182207
GPR[EPVAP]-1659876182786
GPR[EPVS]-1659876182786
========
if(parseTypeExpression(next())==null){
return null;
}
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876182787
GPR[SPVAP]-1659876182787
GPR[EPVAP]-1659876183371
GPR[EPVS]-1659876183371
========
newNode(Token.COLON).addChildToBack(parseFieldName(token));
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876183373
GPR[SPVAP]-1659876183373
GPR[EPVAP]-1659876183942
GPR[EPVS]-1659876183942
========
newNode(Token.COLON).addChildToBack(parseTypeExpression(next()));
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876183944
GPR[SPVAP]-1659876183944
GPR[EPVAP]-1659876184514
GPR[EPVS]-1659876184514
========
skipEOLs();
next();
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876184516
GPR[SPVAP]-1659876184516
GPR[EPVAP]-1659876185087
GPR[EPVS]-1659876185087
========
do {
restArg=true;
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876185088
GPR[SPVAP]-1659876185088
GPR[EPVAP]-1659876186316
GPR[EPVS]-1659876186316
========
Preconditions.checkArgument(token==JsDocToken.LC);
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876186318
GPR[SPVAP]-1659876186318
GPR[EPVAP]-1659876186887
GPR[EPVS]-1659876186887
========
token=next();
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876186888
GPR[SPVAP]-1659876186888
GPR[EPVAP]-1659876187981
GPR[EPVS]-1659876187981
========
if(parseTopLevelTypeExpression(token)!=null){
skipEOLs();
if(ignoreStar){
typeNode=wrapNode(Token.ELLIPSIS,typeNode);
}else if(match(JsDocToken.EQUALS)){
next();
skipEOLs();
typeNode=wrapNode(Token.EQUALS,typeNode);
}
if(!match(JsDocToken.RC)){
reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}else {
next();
}
}
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876187988
GPR[SPVAP]-1659876187989
GPR[EPVAP]-1659876189134
GPR[EPVS]-1659876189134
========
do {
expr=parseTypeExpression(token);
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876189136
GPR[SPVAP]-1659876189136
GPR[EPVAP]-1659876189710
GPR[EPVS]-1659876189710
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876189712
GPR[SPVAP]-1659876189712
GPR[EPVAP]-1659876190293
GPR[EPVS]-1659876190293
========
skipEOLs();
token=next();
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876190294
GPR[SPVAP]-1659876190294
GPR[EPVAP]-1659876190874
GPR[EPVS]-1659876190874
========
do {
if(token==JsDocToken.EOL||token==JsDocToken.EOC||token==JsDocToken.EOF){
state=State.SEARCHING_ANNOTATION;
return token;
}
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876190876
GPR[SPVAP]-1659876190876
GPR[EPVAP]-1659876191451
GPR[EPVS]-1659876191451
========
stream.update();
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876191453
GPR[SPVAP]-1659876191453
GPR[EPVAP]-1659876192033
GPR[EPVS]-1659876192033
========
builder.append(INDENT);
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876192036
GPR[SPVAP]-1659876192036
GPR[EPVAP]-1659876192630
GPR[EPVS]-1659876192630
========
builder.append(" {\n");
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876192634
GPR[SPVAP]-1659876192634
GPR[EPVAP]-1659876193616
GPR[EPVS]-1659876193616
========
builder.append("node [color=lightblue2, style=filled];\n");
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876193621
GPR[SPVAP]-1659876193621
GPR[EPVAP]-1659876194267
GPR[EPVS]-1659876194267
========
builder.append("}\n");
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876194269
GPR[SPVAP]-1659876194269
GPR[EPVAP]-1659876194877
GPR[EPVS]-1659876194877
========
do {
matchingRc=true;
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876194879
GPR[SPVAP]-1659876194879
GPR[EPVAP]-1659876195519
GPR[EPVS]-1659876195519
========
case EXTENDS :

do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876195521
GPR[SPVAP]-1659876195521
GPR[EPVAP]-1659876196146
GPR[EPVS]-1659876196146
========
do {
break;
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876196148
GPR[SPVAP]-1659876196148
GPR[EPVAP]-1659876196785
GPR[EPVS]-1659876196785
========
token=eatTokensUntilEOL();
do {
swtich (token){
case ANNOTATION :

case EOC :

case EOF :
return new ExtractionInfo(builder.toString().trim(),token);

case STAR :
if(!ignoreStar){
if(builder.length()>0){
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;

case EOL :
ignoreStar=true;
builder.append('\n');
token=next();
continue;

default :
if(!ignoreStar&&builder.length()>0){
builder.append(' ');
}
ignoreStar=false;
builder.append(toString(token));
String line=stream.getRemainingJSDocLine();
line=trimEnd(line);
builder.append(line);
token=next();

}
} while(true);

========
GPR[SPVS]-1659876196787
GPR[SPVAP]-1659876196787
GPR[EPVAP]-1659876197394
GPR[EPVS]-1659876197394
GPR[ESUN]-1659876197395
GPR[SSUN]-1659876197395
com.google.javascript.jscomp.parsing.JsDocInfoParser,1325
========
if(Character.isUpperCase(ch)){
trimCount++;
}else {
break;
}

========
GPR[SPVS]-1659876198832
GPR[SPVAP]-1659876198832
GPR[EPVAP]-1659876202386
GPR[SPVATF]-1659876202386
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876203489
GPR[EPVS]-1659876203489
========
if(Character.isLetter(ch)){
trimCount++;
}else {
break;
}

========
GPR[SPVS]-1659876203491
GPR[SPVAP]-1659876203491
GPR[EPVAP]-1659876204721
GPR[SPVATF]-1659876204721
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876205811
GPR[EPVS]-1659876205811
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876206981
GPR[SPVAP]-1659876206981
GPR[EPVAP]-1659876207735
GPR[EPVS]-1659876207735
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876207737
GPR[SPVAP]-1659876207737
GPR[EPVAP]-1659876208480
GPR[EPVS]-1659876208480
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876208482
GPR[SPVAP]-1659876208482
GPR[EPVAP]-1659876209231
GPR[EPVS]-1659876209231
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
trimCount++;
break;
}
}

========
GPR[SPVS]-1659876209233
GPR[SPVAP]-1659876209233
GPR[EPVAP]-1659876210437
GPR[SPVATF]-1659876210437
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876211532
GPR[EPVS]-1659876211532
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876211534
GPR[SPVAP]-1659876211534
GPR[EPVAP]-1659876212288
GPR[EPVS]-1659876212288
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876212289
GPR[SPVAP]-1659876212289
GPR[EPVAP]-1659876213033
GPR[EPVS]-1659876213033
========
ch=s.charAt(str.length()-1);
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876213035
GPR[SPVAP]-1659876213035
GPR[EPVAP]-1659876213814
GPR[EPVS]-1659876213814
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isJavaIdentifierPart(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876213815
GPR[SPVAP]-1659876213815
GPR[EPVAP]-1659876215013
GPR[SPVATF]-1659876215013
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876216095
GPR[EPVS]-1659876216095
========
if(L==0)return false;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876216097
GPR[SPVAP]-1659876216097
GPR[EPVAP]-1659876216843
GPR[EPVS]-1659876216843
========
if(!Character.isJavaIdentifierStart(s.charAt(0)))return false;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876216844
GPR[SPVAP]-1659876216844
GPR[EPVAP]-1659876217605
GPR[EPVS]-1659876217605
========
if(trimCount==0||!Character.isJavaIdentifierStart(s.charAt(0)))return false;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876217607
GPR[SPVAP]-1659876217607
GPR[EPVAP]-1659876218374
GPR[EPVS]-1659876218374
========
while(trimCount<s.length()){
int ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876218375
GPR[SPVAP]-1659876218375
GPR[EPVAP]-1659876219577
GPR[SPVATF]-1659876219577
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876220656
GPR[EPVS]-1659876220656
========
maybeCutLine();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876220658
GPR[SPVAP]-1659876220658
GPR[EPVAP]-1659876221404
GPR[EPVS]-1659876221404
========
while(trimCount<s.length()){
if('0'<=s.charAt(trimCount))newDigit=s.charAt(trimCount)-'0';else if('a'<=s.charAt(trimCount))newDigit=s.charAt(trimCount)-'a'+10;else if('A'<=s.charAt(trimCount))newDigit=s.charAt(trimCount)-'A'+10;else break;
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876221408
GPR[SPVAP]-1659876221408
GPR[EPVAP]-1659876222165
GPR[EPVS]-1659876222165
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.charAt(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876222167
GPR[SPVAP]-1659876222167
GPR[EPVAP]-1659876222913
GPR[EPVS]-1659876222913
========
while(i<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876222915
GPR[SPVAP]-1659876222915
GPR[EPVAP]-1659876223672
GPR[EPVS]-1659876223672
========
while(nSlashes<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876223674
GPR[SPVAP]-1659876223674
GPR[EPVAP]-1659876224424
GPR[EPVS]-1659876224424
========
while(trimCount<esc.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876224426
GPR[SPVAP]-1659876224426
GPR[EPVAP]-1659876225169
GPR[EPVS]-1659876225169
========
while(trimCount<s.length()){
char ch=source.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876225171
GPR[SPVAP]-1659876225171
GPR[EPVAP]-1659876225944
GPR[EPVS]-1659876225944
========
while(trimCount<s.length()){
number=s.charAt(trimCount);
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876225945
GPR[SPVAP]-1659876225945
GPR[EPVAP]-1659876226713
GPR[EPVS]-1659876226713
========
if(trimCount<0)throw new IllegalArgumentException();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876226715
GPR[SPVAP]-1659876226715
GPR[EPVAP]-1659876227920
GPR[SPVATF]-1659876227920
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876229006
GPR[EPVS]-1659876229006
========
consumeToken();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876229007
GPR[SPVAP]-1659876229007
GPR[EPVAP]-1659876229753
GPR[EPVS]-1659876229753
========
maybeEndStatement();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876229755
GPR[SPVAP]-1659876229755
GPR[EPVAP]-1659876230514
GPR[EPVS]-1659876230514
========
if((isWordChar(ch)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876230516
GPR[SPVAP]-1659876230516
GPR[EPVAP]-1659876231260
GPR[EPVS]-1659876231260
========
append(s);
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876231262
GPR[SPVAP]-1659876231262
GPR[EPVAP]-1659876232018
GPR[EPVS]-1659876232018
========
trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876232020
GPR[SPVAP]-1659876232020
GPR[EPVAP]-1659876233178
GPR[SPVATF]-1659876233178
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876234255
GPR[EPVS]-1659876234255
========
consumeToken();
trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876234257
GPR[SPVAP]-1659876234257
GPR[EPVAP]-1659876235004
GPR[EPVS]-1659876235004
========
new CRC32().update(s.getBytes());
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876235006
GPR[SPVAP]-1659876235006
GPR[EPVAP]-1659876235746
GPR[EPVS]-1659876235746
========
case Token.DIV :

while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876235748
GPR[SPVAP]-1659876235748
GPR[EPVAP]-1659876236317
GPR[EPVS]-1659876236318
========
case Token.MUL :

while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876236320
GPR[SPVAP]-1659876236320
GPR[EPVAP]-1659876236898
GPR[EPVS]-1659876236898
========
LOCALE_PATTERN.matcher(s).find();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876236900
GPR[SPVAP]-1659876236900
GPR[EPVAP]-1659876237641
GPR[EPVS]-1659876237641
========
if(trimCount<0){
return ;
}
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876237643
GPR[SPVAP]-1659876237643
GPR[EPVAP]-1659876238384
GPR[EPVS]-1659876238384
========
if(trimCount<=sourceBuffer.length)Kit.codeBug();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876238387
GPR[SPVAP]-1659876238387
GPR[EPVAP]-1659876239130
GPR[EPVS]-1659876239130
========
Preconditions.checkArgument(ancestors.length>0);
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876239132
GPR[SPVAP]-1659876239132
GPR[EPVAP]-1659876239877
GPR[EPVS]-1659876239877
========
lineMapping.length=Math.max(lineMapping.length,mapping.endPosition.getCharacterIndex());
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876239878
GPR[SPVAP]-1659876239878
GPR[EPVAP]-1659876240623
GPR[EPVS]-1659876240623
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876240626
GPR[SPVAP]-1659876240626
GPR[EPVAP]-1659876241376
GPR[EPVS]-1659876241376
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876241378
GPR[SPVAP]-1659876241378
GPR[EPVAP]-1659876242135
GPR[EPVS]-1659876242135
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
trimCount++;
break;
}
}

========
GPR[SPVS]-1659876242136
GPR[SPVAP]-1659876242136
GPR[EPVAP]-1659876242887
GPR[EPVS]-1659876242887
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876242889
GPR[SPVAP]-1659876242889
GPR[EPVAP]-1659876243642
GPR[EPVS]-1659876243642
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876243643
GPR[SPVAP]-1659876243643
GPR[EPVAP]-1659876244395
GPR[EPVS]-1659876244395
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876244396
GPR[SPVAP]-1659876244396
GPR[EPVAP]-1659876245172
GPR[EPVS]-1659876245172
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
trimCount++;
break;
}
}

========
GPR[SPVS]-1659876245174
GPR[SPVAP]-1659876245174
GPR[EPVAP]-1659876245923
GPR[EPVS]-1659876245923
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876245925
GPR[SPVAP]-1659876245925
GPR[EPVAP]-1659876246706
GPR[EPVS]-1659876246706
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876246707
GPR[SPVAP]-1659876246707
GPR[EPVAP]-1659876247463
GPR[EPVS]-1659876247463
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
break;
}
}

========
GPR[SPVS]-1659876247465
GPR[SPVAP]-1659876247465
GPR[EPVAP]-1659876248220
GPR[EPVS]-1659876248220
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876248222
GPR[SPVAP]-1659876248222
GPR[EPVAP]-1659876248974
GPR[EPVS]-1659876248974
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876248975
GPR[SPVAP]-1659876248975
GPR[EPVAP]-1659876249771
GPR[EPVS]-1659876249771
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
trimCount++;
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876249772
GPR[SPVAP]-1659876249772
GPR[EPVAP]-1659876250571
GPR[EPVS]-1659876250571
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
trimCount++;
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876250572
GPR[SPVAP]-1659876250572
GPR[EPVAP]-1659876251317
GPR[EPVS]-1659876251317
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876251319
GPR[SPVAP]-1659876251319
GPR[EPVAP]-1659876252062
GPR[EPVS]-1659876252062
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
lastCh='0';
break;

trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876252063
GPR[SPVAP]-1659876252063
GPR[EPVAP]-1659876252812
GPR[EPVS]-1659876252812
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
trimCount++;
break;
}
}

========
GPR[SPVS]-1659876252813
GPR[SPVAP]-1659876252813
GPR[EPVAP]-1659876253561
GPR[EPVS]-1659876253561
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876253563
GPR[SPVAP]-1659876253563
GPR[EPVAP]-1659876254335
GPR[EPVS]-1659876254335
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876254336
GPR[SPVAP]-1659876254336
GPR[EPVAP]-1659876255084
GPR[EPVS]-1659876255084
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
break;
}
}

========
GPR[SPVS]-1659876255086
GPR[SPVAP]-1659876255086
GPR[EPVAP]-1659876255831
GPR[EPVS]-1659876255831
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876255832
GPR[SPVAP]-1659876255832
GPR[EPVAP]-1659876256581
GPR[EPVS]-1659876256581
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876256583
GPR[SPVAP]-1659876256583
GPR[EPVAP]-1659876257339
GPR[EPVS]-1659876257339
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
trimCount++;
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876257340
GPR[SPVAP]-1659876257340
GPR[EPVAP]-1659876258116
GPR[EPVS]-1659876258116
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
trimCount++;
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876258118
GPR[SPVAP]-1659876258118
GPR[EPVAP]-1659876258869
GPR[EPVS]-1659876258869
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876258871
GPR[SPVAP]-1659876258871
GPR[EPVAP]-1659876259618
GPR[EPVS]-1659876259618
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
break;
}
}

========
GPR[SPVS]-1659876259620
GPR[SPVAP]-1659876259620
GPR[EPVAP]-1659876260398
GPR[EPVS]-1659876260398
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876260400
GPR[SPVAP]-1659876260400
GPR[EPVAP]-1659876261157
GPR[EPVS]-1659876261157
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876261158
GPR[SPVAP]-1659876261158
GPR[EPVAP]-1659876261904
GPR[EPVS]-1659876261904
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
trimCount++;
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876261906
GPR[SPVAP]-1659876261906
GPR[EPVAP]-1659876262643
GPR[EPVS]-1659876262643
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
trimCount++;
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876262645
GPR[SPVAP]-1659876262645
GPR[EPVAP]-1659876263390
GPR[EPVS]-1659876263390
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876263392
GPR[SPVAP]-1659876263392
GPR[EPVAP]-1659876264140
GPR[EPVS]-1659876264140
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876264141
GPR[SPVAP]-1659876264141
GPR[EPVAP]-1659876264889
GPR[EPVS]-1659876264889
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876264891
GPR[SPVAP]-1659876264891
GPR[EPVAP]-1659876265635
GPR[EPVS]-1659876265635
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876265636
GPR[SPVAP]-1659876265636
GPR[EPVAP]-1659876266387
GPR[EPVS]-1659876266387
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
trimCount++;
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876266388
GPR[SPVAP]-1659876266388
GPR[EPVAP]-1659876267137
GPR[EPVS]-1659876267137
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
break;
}
}

========
GPR[SPVS]-1659876267138
GPR[SPVAP]-1659876267138
GPR[EPVAP]-1659876267888
GPR[EPVS]-1659876267888
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876267890
GPR[SPVAP]-1659876267890
GPR[EPVAP]-1659876268671
GPR[EPVS]-1659876268671
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876268676
GPR[SPVAP]-1659876268676
GPR[EPVAP]-1659876269746
GPR[EPVS]-1659876269746
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
trimCount++;
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876269747
GPR[SPVAP]-1659876269747
GPR[EPVAP]-1659876271208
GPR[EPVS]-1659876271208
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
trimCount++;
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876271210
GPR[SPVAP]-1659876271210
GPR[EPVAP]-1659876272578
GPR[EPVS]-1659876272578
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876272580
GPR[SPVAP]-1659876272580
GPR[EPVAP]-1659876273326
GPR[EPVS]-1659876273326
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876273328
GPR[SPVAP]-1659876273328
GPR[EPVAP]-1659876274111
GPR[EPVS]-1659876274111
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876274113
GPR[SPVAP]-1659876274113
GPR[EPVAP]-1659876274889
GPR[EPVS]-1659876274889
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876274890
GPR[SPVAP]-1659876274890
GPR[EPVAP]-1659876275671
GPR[EPVS]-1659876275671
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
trimCount++;
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876275672
GPR[SPVAP]-1659876275672
GPR[EPVAP]-1659876276448
GPR[EPVS]-1659876276448
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876276449
GPR[SPVAP]-1659876276449
GPR[EPVAP]-1659876277198
GPR[EPVS]-1659876277198
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876277199
GPR[SPVAP]-1659876277199
GPR[EPVAP]-1659876277963
GPR[EPVS]-1659876277963
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876277965
GPR[SPVAP]-1659876277965
GPR[EPVAP]-1659876278712
GPR[EPVS]-1659876278712
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
trimCount++;
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876278714
GPR[SPVAP]-1659876278714
GPR[EPVAP]-1659876279478
GPR[EPVS]-1659876279478
========
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
trimCount++;
lastCh='0';
trimCount++;
lastCh='0';

break;
}
}

========
GPR[SPVS]-1659876279480
GPR[SPVAP]-1659876279480
GPR[EPVAP]-1659876280218
GPR[EPVS]-1659876280218
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876281441
GPR[SPVAP]-1659876281441
GPR[EPVAP]-1659876282180
GPR[EPVS]-1659876282180
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876282181
GPR[SPVAP]-1659876282181
GPR[EPVAP]-1659876282962
GPR[EPVS]-1659876282962
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876282964
GPR[SPVAP]-1659876282964
GPR[EPVAP]-1659876283713
GPR[EPVS]-1659876283713
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876283714
GPR[SPVAP]-1659876283714
GPR[EPVAP]-1659876284457
GPR[EPVS]-1659876284458
========
int trimCount=0;
ch=s.charAt(str.length()-1);
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876284459
GPR[SPVAP]-1659876284459
GPR[EPVAP]-1659876285206
GPR[EPVS]-1659876285206
========
int trimCount=0;
trimCount+=s.length();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876285208
GPR[SPVAP]-1659876285208
GPR[EPVAP]-1659876286409
GPR[SPVATF]-1659876286409
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876287500
GPR[EPVS]-1659876287500
========
char trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876287502
GPR[SPVAP]-1659876287502
GPR[EPVAP]-1659876288698
GPR[SPVATF]-1659876288698
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876289766
GPR[EPVS]-1659876289766
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isJavaIdentifierPart(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876289768
GPR[SPVAP]-1659876289768
GPR[EPVAP]-1659876290970
GPR[SPVATF]-1659876290970
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876292046
GPR[EPVS]-1659876292046
========
int trimCount=0;
if(L==0)return false;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876292047
GPR[SPVAP]-1659876292047
GPR[EPVAP]-1659876292792
GPR[EPVS]-1659876292792
========
int trimCount=0;
if(!Character.isJavaIdentifierStart(s.charAt(0)))return false;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876292793
GPR[SPVAP]-1659876292793
GPR[EPVAP]-1659876293538
GPR[EPVS]-1659876293538
========
int trimCount=0;
if(trimCount==0||!Character.isJavaIdentifierStart(s.charAt(0)))return false;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876293540
GPR[SPVAP]-1659876293540
GPR[EPVAP]-1659876294286
GPR[EPVS]-1659876294286
========
int trimCount=trimCount;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876294287
GPR[SPVAP]-1659876294287
GPR[EPVAP]-1659876295039
GPR[EPVS]-1659876295039
========
maybeCutLine();
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876295041
GPR[SPVAP]-1659876295041
GPR[EPVAP]-1659876295806
GPR[EPVS]-1659876295806
========
int trimCount=0;
while(trimCount<s.length()){
if('0'<=s.charAt(trimCount))newDigit=s.charAt(trimCount)-'0';else if('a'<=s.charAt(trimCount))newDigit=s.charAt(trimCount)-'a'+10;else if('A'<=s.charAt(trimCount))newDigit=s.charAt(trimCount)-'A'+10;else break;
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876295810
GPR[SPVAP]-1659876295810
GPR[EPVAP]-1659876296582
GPR[EPVS]-1659876296582
========
int trimCount=0;
while(trimCount<s.length()){
char ch=source.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876296584
GPR[SPVAP]-1659876296584
GPR[EPVAP]-1659876297335
GPR[EPVS]-1659876297335
========
int trimCount=0;
while(trimCount<s.length()){
int ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876297349
GPR[SPVAP]-1659876297349
GPR[EPVAP]-1659876298588
GPR[SPVATF]-1659876298588
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876299665
GPR[EPVS]-1659876299665
========
int trimCount=0;
while(trimCount<s.length()){
number=s.charAt(trimCount);
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876299667
GPR[SPVAP]-1659876299667
GPR[EPVAP]-1659876300456
GPR[EPVS]-1659876300456
========
if(trimCount<0)throw new IllegalArgumentException();
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876300458
GPR[SPVAP]-1659876300458
GPR[EPVAP]-1659876301199
GPR[EPVS]-1659876301199
========
int trimCount=0;
maybeEndStatement();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876301201
GPR[SPVAP]-1659876301201
GPR[EPVAP]-1659876301948
GPR[EPVS]-1659876301948
========
if((isWordChar(ch)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876301950
GPR[SPVAP]-1659876301950
GPR[EPVAP]-1659876302702
GPR[EPVS]-1659876302702
========
append(s);
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876302704
GPR[SPVAP]-1659876302704
GPR[EPVAP]-1659876303451
GPR[EPVS]-1659876303451
========
int trimCount=0;
consumeToken();
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876303453
GPR[SPVAP]-1659876303453
GPR[EPVAP]-1659876304209
GPR[EPVS]-1659876304209
========
int trimCount=0;
trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876304211
GPR[SPVAP]-1659876304211
GPR[EPVAP]-1659876305410
GPR[SPVATF]-1659876305410
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876306502
GPR[EPVS]-1659876306502
========
case Token.DIV :

int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876306503
GPR[SPVAP]-1659876306503
GPR[EPVAP]-1659876307099
GPR[EPVS]-1659876307099
========
new RuntimeException().printStackTrace(new PrintWriter(ch));
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876307101
GPR[SPVAP]-1659876307101
GPR[EPVAP]-1659876307860
GPR[EPVS]-1659876307860
========
LOCALE_PATTERN.matcher(s).find();
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876307861
GPR[SPVAP]-1659876307861
GPR[EPVAP]-1659876308609
GPR[EPVS]-1659876308609
========
case Token.MUL :

int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876308610
GPR[SPVAP]-1659876308610
GPR[EPVAP]-1659876309187
GPR[EPVS]-1659876309187
========
new CRC32().update(s.getBytes());
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876309189
GPR[SPVAP]-1659876309189
GPR[EPVAP]-1659876309954
GPR[EPVS]-1659876309954
========
int trimCount=0;
trimCount++;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876309956
GPR[SPVAP]-1659876309956
GPR[EPVAP]-1659876311155
GPR[SPVATF]-1659876311155
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876312240
GPR[EPVS]-1659876312240
========
int trimCount=0;
trimCount=s.charAt(trimCount++);
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876312241
GPR[SPVAP]-1659876312241
GPR[EPVAP]-1659876313485
GPR[SPVATF]-1659876313485
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876314552
GPR[EPVS]-1659876314552
========
int trimCount=0;
trimCount++;
trimCount=s.charAt(trimCount++);
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876314554
GPR[SPVAP]-1659876314554
GPR[EPVAP]-1659876315771
GPR[SPVATF]-1659876315771
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876316854
GPR[EPVS]-1659876316854
========
if(trimCount<0){
return ;
}
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876316856
GPR[SPVAP]-1659876316856
GPR[EPVAP]-1659876317614
GPR[EPVS]-1659876317614
========
if(trimCount<=sourceBuffer.length)Kit.codeBug();
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876317617
GPR[SPVAP]-1659876317617
GPR[EPVAP]-1659876318365
GPR[EPVS]-1659876318365
========
int trimCount=0;
Preconditions.checkArgument(ancestors.length>0);
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876318367
GPR[SPVAP]-1659876318367
GPR[EPVAP]-1659876319113
GPR[EPVS]-1659876319113
========
lineMapping.length=Math.max(lineMapping.length,mapping.endPosition.getCharacterIndex());
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876319115
GPR[SPVAP]-1659876319115
GPR[EPVAP]-1659876319871
GPR[EPVS]-1659876319871
========
trimCount=trimCount=0;
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876319874
GPR[SPVAP]-1659876319874
GPR[EPVAP]-1659876320614
GPR[EPVS]-1659876320614
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876320616
GPR[SPVAP]-1659876320616
GPR[EPVAP]-1659876321374
GPR[EPVS]-1659876321374
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876321376
GPR[SPVAP]-1659876321376
GPR[EPVAP]-1659876322144
GPR[EPVS]-1659876322144
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876322146
GPR[SPVAP]-1659876322146
GPR[EPVAP]-1659876322918
GPR[EPVS]-1659876322918
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876322920
GPR[SPVAP]-1659876322920
GPR[EPVAP]-1659876323690
GPR[EPVS]-1659876323690
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876323692
GPR[SPVAP]-1659876323692
GPR[EPVAP]-1659876324459
GPR[EPVS]-1659876324459
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876324461
GPR[SPVAP]-1659876324461
GPR[EPVAP]-1659876325208
GPR[EPVS]-1659876325208
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
lastCh='0';
break;

trimCount++;
}else {
break;
}
}

========
GPR[SPVS]-1659876325210
GPR[SPVAP]-1659876325210
GPR[EPVAP]-1659876325955
GPR[EPVS]-1659876325955
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876325956
GPR[SPVAP]-1659876325956
GPR[EPVAP]-1659876326703
GPR[EPVS]-1659876326703
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876326704
GPR[SPVAP]-1659876326704
GPR[EPVAP]-1659876327448
GPR[EPVS]-1659876327448
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
break;
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876327450
GPR[SPVAP]-1659876327450
GPR[EPVAP]-1659876328197
GPR[EPVS]-1659876328197
========
int trimCount=0;
while(trimCount<s.length()){
char ch=s.charAt(s.length()-trimCount);
if(Character.isWhitespace(ch)){
lastCh='0';
break;
lastCh='0';
break;

trimCount++;
}else {
lastCh='0';
break;
}
}

========
GPR[SPVS]-1659876328198
GPR[SPVAP]-1659876328198
GPR[EPVAP]-1659876328949
GPR[EPVS]-1659876328949
GPR[ESUN]-1659876328950
GPR[SSUN]-1659876328950
com.google.javascript.jscomp.parsing.JsDocInfoParser,1326
GPR[ESUN]-1659876329248
GPR[SSUN]-1659876329248
com.google.javascript.jscomp.parsing.JsDocInfoParser,1327
GPR[ESUN]-1659876329403
GPR[SSUN]-1659876329403
com.google.javascript.jscomp.parsing.JsDocInfoParser,1328
GPR[ESUN]-1659876329556
GPR[SSUN]-1659876329556
com.google.javascript.jscomp.parsing.JsDocInfoParser,1329
GPR[ESUN]-1659876329709
GPR[SSUN]-1659876329709
com.google.javascript.jscomp.parsing.JsDocInfoParser,1333
Find no block!
GPR[SSUN]-1659876329874
com.google.javascript.jscomp.parsing.JsDocInfoParser,1335
========
if(next==0){
return s;
}

========
GPR[SPVS]-1659876331012
GPR[SPVAP]-1659876331012
GPR[EPVAP]-1659876333117
GPR[EPVS]-1659876333117
========
if(radix==0){
return s;
}

========
GPR[SPVS]-1659876333119
GPR[SPVAP]-1659876333119
GPR[EPVAP]-1659876334090
GPR[EPVS]-1659876334090
========
if(c==0){
return s;
}

========
GPR[SPVS]-1659876334091
GPR[SPVAP]-1659876334091
GPR[EPVAP]-1659876335022
GPR[EPVS]-1659876335022
========
if(start==0){
return s;
}

========
GPR[SPVS]-1659876335024
GPR[SPVAP]-1659876335024
GPR[EPVAP]-1659876335947
GPR[EPVS]-1659876335947
========
if(singleq==0){
return s;
}

========
GPR[SPVS]-1659876335949
GPR[SPVAP]-1659876335949
GPR[EPVAP]-1659876336882
GPR[EPVS]-1659876336882
GPR[ESUN]-1659876336882
GPR[SSUN]-1659876336882
com.google.javascript.jscomp.parsing.JsDocInfoParser,1338
========
if(end==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876338238
GPR[SPVAP]-1659876338238
GPR[EPVAP]-1659876340381
GPR[EPVS]-1659876340381
========
if(radix==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876340382
GPR[SPVAP]-1659876340382
GPR[EPVAP]-1659876341315
GPR[EPVS]-1659876341315
========
if(trimCount==0){
return s;
}
return Double.valueOf(s.substring(trimCount,trimCount)).doubleValue();

========
GPR[SPVS]-1659876341316
GPR[SPVAP]-1659876341316
GPR[EPVAP]-1659876342249
GPR[EPVS]-1659876342249
========
if(pos==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876342250
GPR[SPVAP]-1659876342250
GPR[EPVAP]-1659876343183
GPR[EPVS]-1659876343183
========
if(trimCount!=0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876343185
GPR[SPVAP]-1659876343185
GPR[EPVAP]-1659876345780
GPR[SPVATF]-1659876345780
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876346882
GPR[EPVS]-1659876346882
========
if(idx==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876346883
GPR[SPVAP]-1659876346883
GPR[EPVAP]-1659876347632
GPR[EPVS]-1659876347632
========
if(trimCount==0){
return s;
}
return (trimCount>=0)?s.substring(0,s.length()-trimCount):null;

========
GPR[SPVS]-1659876347634
GPR[SPVAP]-1659876347634
GPR[EPVAP]-1659876348843
GPR[SPVATF]-1659876348843
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876349970
GPR[EPVS]-1659876349970
========
if(aliasedBytes==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876349971
GPR[SPVAP]-1659876349971
GPR[EPVAP]-1659876350736
GPR[EPVS]-1659876350736
========
if(maxCost==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876350738
GPR[SPVAP]-1659876350738
GPR[EPVAP]-1659876351505
GPR[EPVS]-1659876351505
========
if(trimCount==0){
return s;
}
return s.replaceAll("\\{\\d+\\}","\\\\E.*\\\\Q");

========
GPR[SPVS]-1659876351507
GPR[SPVAP]-1659876351507
GPR[EPVAP]-1659876352730
GPR[SPVATF]-1659876352730
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876353807
GPR[EPVS]-1659876353807
========
if(trimCount==0){
return s;
}
s=Pattern.quote(s);
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876353809
GPR[SPVAP]-1659876353809
GPR[EPVAP]-1659876354570
GPR[EPVS]-1659876354570
========
if(trimCount==0){
return s;
}
if(L==0)return false;
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876354572
GPR[SPVAP]-1659876354572
GPR[EPVAP]-1659876355317
GPR[EPVS]-1659876355317
========
if(trimCount==0){
return s;
}
if(!Character.isJavaIdentifierStart(s.charAt(0)))return false;
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876355319
GPR[SPVAP]-1659876355319
GPR[EPVAP]-1659876356067
GPR[EPVS]-1659876356067
========
if(trimCount==0){
return s;
}
return s.substring(trimCount+".prototype".length());

========
GPR[SPVS]-1659876356069
GPR[SPVAP]-1659876356069
GPR[EPVAP]-1659876357267
GPR[SPVATF]-1659876357267
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876358347
GPR[EPVS]-1659876358347
========
if(trimCount==0){
return s;
}
return qNameStr.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876358348
GPR[SPVAP]-1659876358348
GPR[EPVAP]-1659876359093
GPR[EPVS]-1659876359093
========
if(numOccurrences==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876359095
GPR[SPVAP]-1659876359095
GPR[EPVAP]-1659876359831
GPR[EPVS]-1659876359831
========
if(lastIndexOfDot==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876359833
GPR[SPVAP]-1659876359833
GPR[EPVAP]-1659876360579
GPR[EPVS]-1659876360579
========
if(trimCount==0){
return qName;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876360580
GPR[SPVAP]-1659876360580
GPR[EPVAP]-1659876361330
GPR[EPVS]-1659876361330
========
if(dollarIndex==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876361332
GPR[SPVAP]-1659876361332
GPR[EPVAP]-1659876362085
GPR[EPVS]-1659876362085
========
if(i==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876362087
GPR[SPVAP]-1659876362087
GPR[EPVAP]-1659876362842
GPR[EPVS]-1659876362842
========
string=s.substring(0,trimCount);
if(trimCount==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876362844
GPR[SPVAP]-1659876362844
GPR[EPVAP]-1659876363617
GPR[EPVS]-1659876363617
========
if(accessorCount==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876363619
GPR[SPVAP]-1659876363619
GPR[EPVAP]-1659876364379
GPR[EPVS]-1659876364379
========
if(mutatorCount==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876364380
GPR[SPVAP]-1659876364380
GPR[EPVAP]-1659876365139
GPR[EPVS]-1659876365139
========
if(trimCount==0){
return s;
}
return name.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876365141
GPR[SPVAP]-1659876365141
GPR[EPVAP]-1659876365908
GPR[EPVS]-1659876365908
========
if(trimCount==0){
return s;
}
return s.indexOf('.')==-1?null:s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876365910
GPR[SPVAP]-1659876365910
GPR[EPVAP]-1659876367118
GPR[SPVATF]-1659876367118
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876368226
GPR[EPVS]-1659876368226
========
if(length==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876368228
GPR[SPVAP]-1659876368228
GPR[EPVAP]-1659876368974
GPR[EPVS]-1659876368974
========
if(lineLength==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876368975
GPR[SPVAP]-1659876368975
GPR[EPVAP]-1659876369720
GPR[EPVS]-1659876369720
========
if(c==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876369722
GPR[SPVAP]-1659876369722
GPR[EPVAP]-1659876370475
GPR[EPVS]-1659876370475
========
if(mode==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876370477
GPR[SPVAP]-1659876370477
GPR[EPVAP]-1659876371224
GPR[EPVS]-1659876371224
========
if(DTOSTR_FIXED==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876371225
GPR[SPVAP]-1659876371225
GPR[EPVAP]-1659876371966
GPR[EPVS]-1659876371966
========
if(endPos==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876371968
GPR[SPVAP]-1659876371968
GPR[EPVAP]-1659876372713
GPR[EPVS]-1659876372713
========
if(dupState==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876372715
GPR[SPVAP]-1659876372715
GPR[EPVAP]-1659876373467
GPR[EPVS]-1659876373467
========
if(lineEndChar==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876373469
GPR[SPVAP]-1659876373469
GPR[EPVAP]-1659876374213
GPR[EPVS]-1659876374213
========
if(trimCount==0){
return s;
}
return sourceString.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876374215
GPR[SPVAP]-1659876374215
GPR[EPVAP]-1659876374962
GPR[EPVS]-1659876374962
========
if(trimCount==0||!Character.isJavaIdentifierStart(s.charAt(0))){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876374964
GPR[SPVAP]-1659876374964
GPR[EPVAP]-1659876376171
GPR[SPVATF]-1659876376171
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876377254
GPR[EPVS]-1659876377254
========
if(nextpos==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876377256
GPR[SPVAP]-1659876377256
GPR[EPVAP]-1659876378003
GPR[EPVS]-1659876378003
========
if(trimCount==0){
return s;
}
return js.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876378005
GPR[SPVAP]-1659876378005
GPR[EPVAP]-1659876378757
GPR[EPVS]-1659876378757
========
if(len==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876378759
GPR[SPVAP]-1659876378759
GPR[EPVAP]-1659876379501
GPR[EPVS]-1659876379501
========
if(dot==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876379503
GPR[SPVAP]-1659876379503
GPR[EPVAP]-1659876380247
GPR[EPVS]-1659876380247
========
if(singleq==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876380248
GPR[SPVAP]-1659876380248
GPR[EPVAP]-1659876381006
GPR[EPVS]-1659876381006
========
if(start==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876381008
GPR[SPVAP]-1659876381008
GPR[EPVAP]-1659876381775
GPR[EPVS]-1659876381775
========
if(charno==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876381777
GPR[SPVAP]-1659876381777
GPR[EPVAP]-1659876382517
GPR[EPVS]-1659876382517
========
if(id==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876382519
GPR[SPVAP]-1659876382519
GPR[EPVAP]-1659876383260
GPR[EPVS]-1659876383261
========
if(index==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876383262
GPR[SPVAP]-1659876383262
GPR[EPVAP]-1659876384010
GPR[EPVS]-1659876384010
========
if(L<2)throw new IllegalArgumentException();
if(trimCount==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876384012
GPR[SPVAP]-1659876384012
GPR[EPVAP]-1659876384756
GPR[EPVS]-1659876384756
========
if(sourceTop==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876384757
GPR[SPVAP]-1659876384757
GPR[EPVAP]-1659876385509
GPR[EPVS]-1659876385509
========
if(skipCount==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876385511
GPR[SPVAP]-1659876385511
GPR[EPVAP]-1659876386275
GPR[EPVS]-1659876386275
========
if(N==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876386277
GPR[SPVAP]-1659876386277
GPR[EPVAP]-1659876387039
GPR[EPVS]-1659876387039
========
if(cursor==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876387041
GPR[SPVAP]-1659876387041
GPR[EPVAP]-1659876387835
GPR[EPVS]-1659876387835
========
if(minimalCapacity==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876387837
GPR[SPVAP]-1659876387837
GPR[EPVAP]-1659876388599
GPR[EPVS]-1659876388599
========
if(sourceBuffer.length*2<trimCount){
newCapacity=minimalCapacity;
}
if(trimCount==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876388600
GPR[SPVAP]-1659876388600
GPR[EPVAP]-1659876389353
GPR[EPVS]-1659876389353
========
if(sourceEnd==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876389355
GPR[SPVAP]-1659876389355
GPR[EPVAP]-1659876390112
GPR[EPVS]-1659876390112
========
if(indices1.length==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876390114
GPR[SPVAP]-1659876390114
GPR[EPVAP]-1659876390869
GPR[EPVS]-1659876390869
========
if(length!=0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876390871
GPR[SPVAP]-1659876390871
GPR[EPVAP]-1659876391617
GPR[EPVS]-1659876391617
========
if(size==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876391620
GPR[SPVAP]-1659876391620
GPR[EPVAP]-1659876392371
GPR[EPVS]-1659876392371
========
if(trimCount==FIELDS_STORE_SIZE){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876392373
GPR[SPVAP]-1659876392373
GPR[EPVAP]-1659876393120
GPR[EPVS]-1659876393120
========
if(ci==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876393121
GPR[SPVAP]-1659876393121
GPR[EPVAP]-1659876393877
GPR[EPVS]-1659876393877
========
if(nextTop==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876393879
GPR[SPVAP]-1659876393879
GPR[EPVAP]-1659876394622
GPR[EPVS]-1659876394622
========
if(nextSlot==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876394624
GPR[SPVAP]-1659876394624
GPR[EPVAP]-1659876395375
GPR[EPVS]-1659876395375
========
if(startCharacter==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876395377
GPR[SPVAP]-1659876395377
GPR[EPVAP]-1659876396120
GPR[EPVS]-1659876396120
========
if((0x8000&trimCount)==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876396122
GPR[SPVAP]-1659876396122
GPR[EPVAP]-1659876397330
GPR[SPVATF]-1659876397330
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876399157
GPR[EPVS]-1659876399157
========
if((0x8000&trimCount)!=0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876399159
GPR[SPVAP]-1659876399159
GPR[EPVAP]-1659876400391
GPR[SPVATF]-1659876400391
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876401553
GPR[EPVS]-1659876401553
========
case Token.NUMBER :

if(trimCount==0){
return s;
}
return s.substring(0,s.length()-trimCount);

========
GPR[SPVS]-1659876401555
GPR[SPVAP]-1659876401555
GPR[EPVAP]-1659876402165
GPR[EPVS]-1659876402165
GPR[ESUN]-1659876402165
GPR[SSUN]-1659876402165
com.google.javascript.rhino.JSDocInfoBuilder,116
========
if(populated){
JSDocInfo built=currentInfo;
built.setSourceName(sourceName);
populateDefaults(built);
populated=true;
currentInfo=new JSDocInfo(this.parseDocumentation);
return built;
}else {
return null;
}

========
GPR[SPVS]-1659876403420
GPR[SPVAP]-1659876403420
GPR[EPVAP]-1659876406990
GPR[SPVATF]-1659876406990
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876408104
GPR[EPVS]-1659876408104
========
if(populated){
popScope();
JSDocInfo built=currentInfo;
built.setSourceName(sourceName);
populateDefaults(built);
populated=false;
currentInfo=new JSDocInfo(this.parseDocumentation);
return built;
}else {
return null;
}

========
GPR[SPVS]-1659876408109
GPR[SPVAP]-1659876408109
GPR[EPVAP]-1659876408762
GPR[EPVS]-1659876408762
GPR[ESUN]-1659876408763
GPR[SSUN]-1659876408763
com.google.javascript.rhino.JSDocInfoBuilder,189
GPR[ESUN]-1659876409862
GPR[SSUN]-1659876409862
com.google.javascript.rhino.JSDocInfoBuilder,192
========
if(parseDocumentation){
populated=false;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876410939
GPR[SPVAP]-1659876410939
GPR[EPVAP]-1659876414484
GPR[SPVATF]-1659876414484
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876415572
GPR[EPVS]-1659876415572
========
if(parseDocumentation){
currentInfo.setSourceName(description);
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876415573
GPR[SPVAP]-1659876415573
GPR[EPVAP]-1659876416649
GPR[SPVATF]-1659876416649
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876417756
GPR[EPVS]-1659876417756
========
if(parseDocumentation){
populateDefaults(currentInfo);
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876417757
GPR[SPVAP]-1659876417757
GPR[EPVAP]-1659876418839
GPR[SPVATF]-1659876418839
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876419943
GPR[EPVS]-1659876419943
========
if(parseDocumentation){
currentInfo=new JSDocInfo(this.parseDocumentation);
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876419944
GPR[SPVAP]-1659876419944
GPR[EPVAP]-1659876421026
GPR[SPVATF]-1659876421026
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876422092
GPR[EPVS]-1659876422092
========
if(parseDocumentation){
return currentInfo;
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876422093
GPR[SPVAP]-1659876422093
GPR[EPVAP]-1659876422747
GPR[EPVS]-1659876422747
========
if(parseDocumentation){
currentInfo.setSourceName(description);
populateDefaults(currentInfo);
currentInfo=new JSDocInfo(this.parseDocumentation);
return currentInfo;

populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876422749
GPR[SPVAP]-1659876422749
GPR[EPVAP]-1659876423410
GPR[EPVS]-1659876423410
========
if(parseDocumentation){
currentInfo.setSourceName(description);
populated=false;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876423411
GPR[SPVAP]-1659876423411
GPR[EPVAP]-1659876424497
GPR[SPVATF]-1659876424497
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876425593
GPR[EPVS]-1659876425593
========
if(parseDocumentation){
populateDefaults(currentInfo);
populated=false;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876425594
GPR[SPVAP]-1659876425594
GPR[EPVAP]-1659876426669
GPR[SPVATF]-1659876426669
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876427753
GPR[EPVS]-1659876427753
========
if(parseDocumentation){
currentInfo=new JSDocInfo(this.parseDocumentation);
populated=false;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876427754
GPR[SPVAP]-1659876427754
GPR[EPVAP]-1659876428833
GPR[SPVATF]-1659876428833
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876429910
GPR[EPVS]-1659876429910
========
if(parseDocumentation){
currentInfo.setSourceName(description);
populateDefaults(currentInfo);
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876429912
GPR[SPVAP]-1659876429912
GPR[EPVAP]-1659876430986
GPR[SPVATF]-1659876430986
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876432059
GPR[EPVS]-1659876432059
========
if(parseDocumentation){
currentInfo.setSourceName(description);
currentInfo=new JSDocInfo(this.parseDocumentation);
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876432060
GPR[SPVAP]-1659876432060
GPR[EPVAP]-1659876433138
GPR[SPVATF]-1659876433138
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876434236
GPR[EPVS]-1659876434236
========
if(parseDocumentation){
populateDefaults(currentInfo);
currentInfo=new JSDocInfo(this.parseDocumentation);
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876434237
GPR[SPVAP]-1659876434237
GPR[EPVAP]-1659876435318
GPR[SPVATF]-1659876435318
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876436397
GPR[EPVS]-1659876436397
========
if(parseDocumentation){
currentInfo.setSourceName(description);
populateDefaults(currentInfo);
populated=false;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876436399
GPR[SPVAP]-1659876436399
GPR[EPVAP]-1659876437466
GPR[SPVATF]-1659876437466
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876438550
GPR[EPVS]-1659876438550
========
if(parseDocumentation){
currentInfo.setSourceName(description);
currentInfo=new JSDocInfo(this.parseDocumentation);
populated=false;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876438551
GPR[SPVAP]-1659876438551
GPR[EPVAP]-1659876439619
GPR[SPVATF]-1659876439619
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876440693
GPR[EPVS]-1659876440693
========
if(parseDocumentation){
populateDefaults(currentInfo);
currentInfo=new JSDocInfo(this.parseDocumentation);
populated=false;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876440694
GPR[SPVAP]-1659876440694
GPR[EPVAP]-1659876441774
GPR[SPVATF]-1659876441774
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876442872
GPR[EPVS]-1659876442872
========
if(parseDocumentation){
currentInfo.setSourceName(description);
populateDefaults(currentInfo);
currentInfo=new JSDocInfo(this.parseDocumentation);
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876442873
GPR[SPVAP]-1659876442873
GPR[EPVAP]-1659876443956
GPR[SPVATF]-1659876443956
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876445026
GPR[EPVS]-1659876445026
========
if(parseDocumentation){
currentInfo.setSourceName(description);
populateDefaults(currentInfo);
currentInfo=new JSDocInfo(this.parseDocumentation);
populated=false;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876445027
GPR[SPVAP]-1659876445027
GPR[EPVAP]-1659876446107
GPR[SPVATF]-1659876446107
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876447191
GPR[EPVS]-1659876447191
========
setFlag(true,MASK_FILEOVERVIEW);
if(parseDocumentation){
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876447192
GPR[SPVAP]-1659876447192
GPR[EPVAP]-1659876447836
GPR[EPVS]-1659876447836
========
if(!lazyInitDocumentation()){
return true;
}
if(parseDocumentation){
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876447837
GPR[SPVAP]-1659876447837
GPR[EPVAP]-1659876448499
GPR[EPVS]-1659876448499
========
documentation.fileOverview=description;
if(parseDocumentation){
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876448500
GPR[SPVAP]-1659876448500
GPR[EPVAP]-1659876449148
GPR[EPVS]-1659876449148
========
documentation.blockDescription=description;
if(parseDocumentation){
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876449149
GPR[SPVAP]-1659876449149
GPR[EPVAP]-1659876449797
GPR[EPVS]-1659876449797
========
documentation.returnDescription=description;
if(parseDocumentation){
populated=true;
}
return currentInfo.documentBlock(description);

========
GPR[SPVS]-1659876449798
GPR[SPVAP]-1659876449798
GPR[EPVAP]-1659876450450
GPR[EPVS]-1659876450450
GPR[ESUN]-1659876450450
GPR[SSUN]-1659876450450
com.google.javascript.rhino.Node,173
Find no block!
GPR[SSUN]-1659876450730
com.google.javascript.rhino.Node,193
GPR[ESUN]-1659876453541
GPR[SSUN]-1659876453541
com.google.javascript.rhino.Node,218
GPR[ESUN]-1659876456300
GPR[SSUN]-1659876456300
com.google.javascript.rhino.Node,796
========
for(PropListItem x=propListHead;x!=null;x=x.next){
keys[count]=x.type;
count++;
}

========
GPR[SPVS]-1659876457418
GPR[SPVAP]-1659876457418
GPR[EPVAP]-1659876459040
GPR[EPVS]-1659876459040
========
for(PropListItem x=propListHead;x!=null;x=x.next){
n=n.next;
count++;
}

========
GPR[SPVS]-1659876459042
GPR[SPVAP]-1659876459042
GPR[EPVAP]-1659876460632
GPR[EPVS]-1659876460632
========
newChild.next=node.next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876460634
GPR[SPVAP]-1659876460634
GPR[EPVAP]-1659876462090
GPR[EPVS]-1659876462091
========
node.next=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876462092
GPR[SPVAP]-1659876462092
GPR[EPVAP]-1659876463588
GPR[EPVS]-1659876463588
========
++count;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876463590
GPR[SPVAP]-1659876463590
GPR[EPVAP]-1659876467086
GPR[SPVATF]-1659876467086
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876468182
GPR[EPVS]-1659876468182
========
COLUMN_BITS=next+1;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876468184
GPR[SPVAP]-1659876468184
GPR[EPVAP]-1659876468930
GPR[EPVS]-1659876468930
========
last.next=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876468931
GPR[SPVAP]-1659876468931
GPR[EPVAP]-1659876470112
GPR[SPVATF]-1659876470112
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876471211
GPR[EPVS]-1659876471211
========
last=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876471213
GPR[SPVAP]-1659876471213
GPR[EPVAP]-1659876472403
GPR[SPVATF]-1659876472403
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876473489
GPR[EPVS]-1659876473489
========
last.next=next;
last=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876473490
GPR[SPVAP]-1659876473490
GPR[EPVAP]-1659876474663
GPR[SPVATF]-1659876474663
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876475766
GPR[EPVS]-1659876475766
========
for(PropListItem x=propListHead;x!=null;x=x.next){
next.setString(a.newName);
count++;
}

========
GPR[SPVS]-1659876475769
GPR[SPVAP]-1659876475769
GPR[EPVAP]-1659876476512
GPR[EPVS]-1659876476512
========
for(PropListItem x=propListHead;x!=null;x=x.next){
changed=x||!a.newName.equals(str);
count++;
}

========
GPR[SPVS]-1659876476514
GPR[SPVAP]-1659876476514
GPR[EPVAP]-1659876477253
GPR[EPVS]-1659876477253
========
for(PropListItem x=propListHead;x!=null;x=x.next){
next.setString(a.newName);
changed=x||!a.newName.equals(str);

count++;
}

========
GPR[SPVS]-1659876477254
GPR[SPVAP]-1659876477254
GPR[EPVAP]-1659876477992
GPR[EPVS]-1659876477992
========
checkState(++count<10,"Stuck in loop expanding types to skip.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876477994
GPR[SPVAP]-1659876477994
GPR[EPVAP]-1659876478736
GPR[EPVS]-1659876478736
========
current=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876478738
GPR[SPVAP]-1659876478738
GPR[EPVAP]-1659876479478
GPR[EPVS]-1659876479478
========
addExpr(first,COLUMN_BITS);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}

========
GPR[SPVS]-1659876479480
GPR[SPVAP]-1659876479480
GPR[EPVAP]-1659876480207
GPR[EPVS]-1659876480207
========
++count;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876481230
GPR[SPVAP]-1659876481230
GPR[EPVAP]-1659876482415
GPR[SPVATF]-1659876482415
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876483495
GPR[EPVS]-1659876483495
========
COLUMN_BITS=next+1;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876483497
GPR[SPVAP]-1659876483497
GPR[EPVAP]-1659876484238
GPR[EPVS]-1659876484238
========
checkState(++count<10,"Stuck in loop expanding types to skip.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876484241
GPR[SPVAP]-1659876484241
GPR[EPVAP]-1659876484973
GPR[EPVS]-1659876484973
========
for(PropListItem x=propListHead;x!=null;x=x.next){
next.setString(a.newName);
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876484976
GPR[SPVAP]-1659876484976
GPR[EPVAP]-1659876485713
GPR[EPVS]-1659876485713
========
for(PropListItem x=propListHead;x!=null;x=x.next){
changed=x||!a.newName.equals(str);
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876485714
GPR[SPVAP]-1659876485714
GPR[EPVAP]-1659876486489
GPR[EPVS]-1659876486489
========
for(PropListItem x=propListHead;x!=null;x=x.next){
next.setString(a.newName);
changed=x||!a.newName.equals(str);

count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876486491
GPR[SPVAP]-1659876486491
GPR[EPVAP]-1659876487255
GPR[EPVS]-1659876487255
========
for(PropListItem x=propListHead;x!=null;x=x.next){
n=n.next;
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876487256
GPR[SPVAP]-1659876487256
GPR[EPVAP]-1659876487996
GPR[EPVS]-1659876487996
========
COLUMN_BITS=COLUMN_BITS>>>(32-COLUMN_BITS);
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876487998
GPR[SPVAP]-1659876487998
GPR[EPVAP]-1659876488745
GPR[EPVS]-1659876488745
========
Preconditions.checkArgument(child.parent==null);
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876488747
GPR[SPVAP]-1659876488747
GPR[EPVAP]-1659876489468
GPR[EPVS]-1659876489468
========
Preconditions.checkArgument(child.next==null);
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876489469
GPR[SPVAP]-1659876489469
GPR[EPVAP]-1659876490201
GPR[EPVS]-1659876490201
========
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876490203
GPR[SPVAP]-1659876490203
GPR[EPVAP]-1659876490936
GPR[EPVS]-1659876490936
========
child.next=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876490938
GPR[SPVAP]-1659876490938
GPR[EPVAP]-1659876491670
GPR[EPVS]-1659876491670
========
next=parent;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876491671
GPR[SPVAP]-1659876491671
GPR[EPVAP]-1659876492845
GPR[SPVATF]-1659876492846
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876493945
GPR[EPVS]-1659876493945
========
COLUMN_BITS=(index+COLUMN_BITS)&COLUMN_BITS;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876493948
GPR[SPVAP]-1659876493948
GPR[EPVAP]-1659876494711
GPR[EPVS]-1659876494711
========
x=keys[COLUMN_BITS];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876494712
GPR[SPVAP]-1659876494712
GPR[EPVAP]-1659876495447
GPR[EPVS]-1659876495447
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876495449
GPR[SPVAP]-1659876495449
GPR[EPVAP]-1659876496175
GPR[EPVS]-1659876496175
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876496176
GPR[SPVAP]-1659876496176
GPR[EPVAP]-1659876496908
GPR[EPVS]-1659876496908
========
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876496910
GPR[SPVAP]-1659876496910
GPR[EPVAP]-1659876497641
GPR[EPVS]-1659876497641
========
newChild.next=node.next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876497643
GPR[SPVAP]-1659876497643
GPR[EPVAP]-1659876498372
GPR[EPVS]-1659876498372
========
node.next=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876498374
GPR[SPVAP]-1659876498374
GPR[EPVAP]-1659876499105
GPR[EPVS]-1659876499105
========
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
ivaluesShift=N;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876499107
GPR[SPVAP]-1659876499107
GPR[EPVAP]-1659876499834
GPR[EPVS]-1659876499834
========
last.next=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876499836
GPR[SPVAP]-1659876499836
GPR[EPVAP]-1659876501002
GPR[SPVATF]-1659876501002
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876502096
GPR[EPVS]-1659876502096
========
last=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876502098
GPR[SPVAP]-1659876502098
GPR[EPVAP]-1659876503311
GPR[SPVATF]-1659876503311
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876504412
GPR[EPVS]-1659876504412
========
last.next=next;
last=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876504413
GPR[SPVAP]-1659876504413
GPR[EPVAP]-1659876505589
GPR[SPVATF]-1659876505589
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876506671
GPR[EPVS]-1659876506671
========
for(PropListItem x=propListHead;x!=null;x=x.next){
ivaluesShift=N;
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876506673
GPR[SPVAP]-1659876506673
GPR[EPVAP]-1659876507413
GPR[EPVS]-1659876507413
========
cur=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876507415
GPR[SPVAP]-1659876507415
GPR[EPVAP]-1659876508146
GPR[EPVS]-1659876508146
========
lastSib.next=first;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876508148
GPR[SPVAP]-1659876508148
GPR[EPVAP]-1659876508879
GPR[EPVS]-1659876508879
========
first=parent;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876508881
GPR[SPVAP]-1659876508881
GPR[EPVAP]-1659876510090
GPR[SPVATF]-1659876510090
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876511170
GPR[EPVS]-1659876511170
========
if(last==null){
last=parent.getLastSibling();
}
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876511171
GPR[SPVAP]-1659876511171
GPR[EPVAP]-1659876512343
GPR[SPVATF]-1659876512343
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876513444
GPR[EPVS]-1659876513444
========
first=parent;
if(last==null){
last=parent.getLastSibling();
}
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876513446
GPR[SPVAP]-1659876513446
GPR[EPVAP]-1659876514617
GPR[SPVATF]-1659876514617
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876515693
GPR[EPVS]-1659876515693
========
if(parent==last)last=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876515695
GPR[SPVAP]-1659876515695
GPR[EPVAP]-1659876516882
GPR[SPVATF]-1659876516882
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876517982
GPR[EPVS]-1659876517982
========
child.next=null;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876517983
GPR[SPVAP]-1659876517983
GPR[EPVAP]-1659876518713
GPR[EPVS]-1659876518713
========
child.parent=null;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876518715
GPR[SPVAP]-1659876518715
GPR[EPVAP]-1659876519447
GPR[EPVS]-1659876519447
========
for(PropListItem x=propListHead;x!=null;x=x.next){
System.arraycopy(keys,0,new int[N*2],0,N);
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876519450
GPR[SPVAP]-1659876519450
GPR[EPVAP]-1659876520187
GPR[EPVS]-1659876520187
========
keys[COLUMN_BITS+COLUMN_BITS]=type;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876520188
GPR[SPVAP]-1659876520188
GPR[EPVAP]-1659876521378
GPR[SPVATF]-1659876521378
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876522454
GPR[EPVS]-1659876522454
========
super(type,COLUMN_BITS,COLUMN_BITS);
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876522456
GPR[SPVAP]-1659876522456
GPR[EPVAP]-1659876523186
GPR[EPVS]-1659876523186
========
this.str=str;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876523188
GPR[SPVAP]-1659876523188
GPR[EPVAP]-1659876523915
GPR[EPVS]-1659876523915
========
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
rehashTable(used);
keys[count]=x.type;
}

========
GPR[SPVS]-1659876523917
GPR[SPVAP]-1659876523917
GPR[EPVAP]-1659876524666
GPR[EPVS]-1659876524666
========
keys[COLUMN_BITS]=COLUMN_BITS;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876524667
GPR[SPVAP]-1659876524667
GPR[EPVAP]-1659876525842
GPR[SPVATF]-1659876525842
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876526933
GPR[EPVS]-1659876526933
========
++COLUMN_BITS;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876526935
GPR[SPVAP]-1659876526935
GPR[EPVAP]-1659876527661
GPR[EPVS]-1659876527661
========
current=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876527663
GPR[SPVAP]-1659876527663
GPR[EPVAP]-1659876528401
GPR[EPVS]-1659876528401
========
count++;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876528404
GPR[SPVAP]-1659876528404
GPR[EPVAP]-1659876529574
GPR[SPVATF]-1659876529574
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876530656
GPR[EPVS]-1659876530656
========
COLUMN_BITS=(index+COLUMN_BITS)&COLUMN_BITS;
x=keys[COLUMN_BITS];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876530658
GPR[SPVAP]-1659876530658
GPR[EPVAP]-1659876531432
GPR[EPVS]-1659876531432
========
if(type!=Token.GETPROP&&type!=Token.GETELEM&&type!=Token.CALL){
replaceWithNull(next,next);
break;
}
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876531434
GPR[SPVAP]-1659876531434
GPR[EPVAP]-1659876532166
GPR[EPVS]-1659876532166
========
super(type);
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876532168
GPR[SPVAP]-1659876532168
GPR[EPVAP]-1659876532906
GPR[EPVS]-1659876532906
========
parent.replaceChild(next,new Node(type));
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876532908
GPR[SPVAP]-1659876532908
GPR[EPVAP]-1659876534090
GPR[SPVATF]-1659876534090
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876535191
GPR[EPVS]-1659876535191
========
if(used){
add(")");
}
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876535193
GPR[SPVAP]-1659876535193
GPR[EPVAP]-1659876535923
GPR[EPVS]-1659876535923
========
addExpr(first,COLUMN_BITS);
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}

========
GPR[SPVS]-1659876535925
GPR[SPVAP]-1659876535926
GPR[EPVAP]-1659876536655
GPR[EPVS]-1659876536655
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.report(keys);
return keys;

========
GPR[SPVS]-1659876537755
GPR[SPVAP]-1659876537755
GPR[EPVAP]-1659876538483
GPR[EPVS]-1659876538483
========
int count=type;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876538485
GPR[SPVAP]-1659876538485
GPR[EPVAP]-1659876539664
GPR[SPVATF]-1659876539664
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876540755
GPR[EPVS]-1659876540755
========
int count=COLUMN_BITS;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876540757
GPR[SPVAP]-1659876540757
GPR[EPVAP]-1659876541936
GPR[SPVATF]-1659876541936
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876543019
GPR[EPVS]-1659876543019
========
boolean count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876543021
GPR[SPVAP]-1659876543021
GPR[EPVAP]-1659876543759
GPR[EPVS]-1659876543759
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(Lists.newArrayList());
return keys;

========
GPR[SPVS]-1659876543761
GPR[SPVAP]-1659876543761
GPR[EPVAP]-1659876544483
GPR[EPVS]-1659876544483
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[n];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876544485
GPR[SPVAP]-1659876544485
GPR[EPVAP]-1659876545215
GPR[EPVS]-1659876545215
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
ivaluesShift=N;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876545217
GPR[SPVAP]-1659876545217
GPR[EPVAP]-1659876545981
GPR[EPVS]-1659876545981
========
keys[count]=COLUMN_BITS;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876545983
GPR[SPVAP]-1659876545983
GPR[EPVAP]-1659876546715
GPR[EPVS]-1659876546715
========
++COLUMN_BITS;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876546717
GPR[SPVAP]-1659876546717
GPR[EPVAP]-1659876547444
GPR[EPVS]-1659876547444
========
keys[COLUMN_BITS+ensureIndex(COLUMN_BITS,true)]=type;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876547446
GPR[SPVAP]-1659876547446
GPR[EPVAP]-1659876548177
GPR[EPVS]-1659876548177
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
next.setString(a.newName);
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876548178
GPR[SPVAP]-1659876548178
GPR[EPVAP]-1659876548925
GPR[EPVS]-1659876548925
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
changed=x||!a.newName.equals(str);
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876548927
GPR[SPVAP]-1659876548927
GPR[EPVAP]-1659876549671
GPR[EPVS]-1659876549671
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
next.setString(a.newName);
changed=x||!a.newName.equals(str);

count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876549673
GPR[SPVAP]-1659876549673
GPR[EPVAP]-1659876550414
GPR[EPVS]-1659876550414
========
++COLUMN_BITS;
int count=COLUMN_BITS;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876550417
GPR[SPVAP]-1659876550417
GPR[EPVAP]-1659876551144
GPR[EPVS]-1659876551144
========
int count=count;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876551147
GPR[SPVAP]-1659876551147
GPR[EPVAP]-1659876551890
GPR[EPVS]-1659876551890
========
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876551892
GPR[SPVAP]-1659876551892
GPR[EPVAP]-1659876552627
GPR[EPVS]-1659876552627
========
int count=0;
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876552630
GPR[SPVAP]-1659876552630
GPR[EPVAP]-1659876553377
GPR[EPVS]-1659876553377
========
int count=0;
newChild.next=node.next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876553379
GPR[SPVAP]-1659876553379
GPR[EPVAP]-1659876554113
GPR[EPVS]-1659876554113
========
int count=0;
node.next=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876554115
GPR[SPVAP]-1659876554115
GPR[EPVAP]-1659876554851
GPR[EPVS]-1659876554851
========
int count=0;
Preconditions.checkArgument(child.next==null);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876554853
GPR[SPVAP]-1659876554853
GPR[EPVAP]-1659876555590
GPR[EPVS]-1659876555590
========
int count=0;
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876555592
GPR[SPVAP]-1659876555592
GPR[EPVAP]-1659876556329
GPR[EPVS]-1659876556329
========
int count=0;
child.next=first;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876556330
GPR[SPVAP]-1659876556330
GPR[EPVAP]-1659876557063
GPR[EPVS]-1659876557063
========
int count=0;
first=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876557065
GPR[SPVAP]-1659876557065
GPR[EPVAP]-1659876558243
GPR[SPVATF]-1659876558243
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876559344
GPR[EPVS]-1659876559344
========
Preconditions.checkArgument(prev.next!=null,"no next sibling.");
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876559346
GPR[SPVAP]-1659876559346
GPR[EPVAP]-1659876560074
GPR[EPVS]-1659876560074
========
prev.next=child.next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876560076
GPR[SPVAP]-1659876560076
GPR[EPVAP]-1659876560806
GPR[EPVS]-1659876560806
========
if(prev.next==last)last=parent;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876560807
GPR[SPVAP]-1659876560807
GPR[EPVAP]-1659876561540
GPR[EPVS]-1659876561540
========
child.next=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876561542
GPR[SPVAP]-1659876561542
GPR[EPVAP]-1659876562277
GPR[EPVS]-1659876562277
========
child.parent=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876562279
GPR[SPVAP]-1659876562279
GPR[EPVAP]-1659876563024
GPR[EPVS]-1659876563024
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
lastSib.next=first;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876563026
GPR[SPVAP]-1659876563026
GPR[EPVAP]-1659876563758
GPR[EPVS]-1659876563758
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
first=next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876563760
GPR[SPVAP]-1659876563760
GPR[EPVAP]-1659876564947
GPR[SPVATF]-1659876564947
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876566039
GPR[EPVS]-1659876566039
========
int count=0;
child.next=null;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876566041
GPR[SPVAP]-1659876566041
GPR[EPVAP]-1659876566766
GPR[EPVS]-1659876566766
========
last.next=next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876566768
GPR[SPVAP]-1659876566768
GPR[EPVAP]-1659876567957
GPR[SPVATF]-1659876567957
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876569056
GPR[EPVS]-1659876569056
========
last=next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876569058
GPR[SPVAP]-1659876569058
GPR[EPVAP]-1659876570241
GPR[SPVATF]-1659876570241
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876571334
GPR[EPVS]-1659876571334
========
int count=0;
Preconditions.checkArgument(child.next==null);
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876571336
GPR[SPVAP]-1659876571336
GPR[EPVAP]-1659876572075
GPR[EPVS]-1659876572075
========
last.next=next;
int count=0;
Preconditions.checkArgument(child.next==null);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876572076
GPR[SPVAP]-1659876572076
GPR[EPVAP]-1659876572861
GPR[EPVS]-1659876572861
========
last=next;
int count=0;
Preconditions.checkArgument(child.next==null);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876572863
GPR[SPVAP]-1659876572863
GPR[EPVAP]-1659876573619
GPR[EPVS]-1659876573619
========
last.next=next;
int count=0;
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876573620
GPR[SPVAP]-1659876573620
GPR[EPVAP]-1659876574357
GPR[EPVS]-1659876574357
========
last=next;
int count=0;
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876574359
GPR[SPVAP]-1659876574359
GPR[EPVAP]-1659876575085
GPR[EPVS]-1659876575085
========
last.next=next;
last=next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876575088
GPR[SPVAP]-1659876575088
GPR[EPVAP]-1659876576271
GPR[SPVATF]-1659876576271
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876577380
GPR[EPVS]-1659876577380
========
last.next=next;
int count=0;
Preconditions.checkArgument(child.next==null);
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876577381
GPR[SPVAP]-1659876577381
GPR[EPVAP]-1659876578120
GPR[EPVS]-1659876578120
========
last=next;
int count=0;
Preconditions.checkArgument(child.next==null);
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876578121
GPR[SPVAP]-1659876578121
GPR[EPVAP]-1659876578845
GPR[EPVS]-1659876578845
========
last.next=next;
last=next;
int count=0;
Preconditions.checkArgument(child.next==null);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876578847
GPR[SPVAP]-1659876578847
GPR[EPVAP]-1659876579579
GPR[EPVS]-1659876579579
========
last.next=next;
last=next;
int count=0;
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876579580
GPR[SPVAP]-1659876579580
GPR[EPVAP]-1659876580325
GPR[EPVS]-1659876580325
========
last.next=next;
last=next;
int count=0;
Preconditions.checkArgument(child.next==null);
child.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876580326
GPR[SPVAP]-1659876580326
GPR[EPVAP]-1659876581087
GPR[EPVS]-1659876581087
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876581088
GPR[SPVAP]-1659876581088
GPR[EPVAP]-1659876581817
GPR[EPVS]-1659876581817
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876581819
GPR[SPVAP]-1659876581819
GPR[EPVAP]-1659876582546
GPR[EPVS]-1659876582546
========
next.copyInformationFrom(parent);
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876582547
GPR[SPVAP]-1659876582547
GPR[EPVAP]-1659876583735
GPR[SPVATF]-1659876583735
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876584834
GPR[EPVS]-1659876584834
========
newChild.next=child.next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876584835
GPR[SPVAP]-1659876584835
GPR[EPVAP]-1659876585594
GPR[EPVS]-1659876585594
========
newChild.parent=this;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876585595
GPR[SPVAP]-1659876585595
GPR[EPVAP]-1659876586331
GPR[EPVS]-1659876586331
========
prevChild.next=next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876586332
GPR[SPVAP]-1659876586332
GPR[EPVAP]-1659876587063
GPR[EPVS]-1659876587063
========
if(prevChild.next==last)last=next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876587064
GPR[SPVAP]-1659876587064
GPR[EPVAP]-1659876587797
GPR[EPVS]-1659876587797
========
next.copyInformationFrom(parent);
child.next=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876587799
GPR[SPVAP]-1659876587799
GPR[EPVAP]-1659876588523
GPR[EPVS]-1659876588523
========
next.copyInformationFrom(parent);
child.parent=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876588524
GPR[SPVAP]-1659876588524
GPR[EPVAP]-1659876589253
GPR[EPVS]-1659876589253
========
child.next=null;
child.parent=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876589255
GPR[SPVAP]-1659876589255
GPR[EPVAP]-1659876589989
GPR[EPVS]-1659876589989
========
next.copyInformationFrom(parent);
child.next=null;
child.parent=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876589991
GPR[SPVAP]-1659876589991
GPR[EPVAP]-1659876590726
GPR[EPVS]-1659876590726
========
int count=0;
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876590728
GPR[SPVAP]-1659876590728
GPR[EPVAP]-1659876591457
GPR[EPVS]-1659876591457
========
addChildAfter(next,getChildBefore(parent));
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876591459
GPR[SPVAP]-1659876591459
GPR[EPVAP]-1659876592640
GPR[SPVATF]-1659876592640
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876593725
GPR[EPVS]-1659876593725
========
addChildAfter(next,getChildBefore(parent));
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876593727
GPR[SPVAP]-1659876593727
GPR[EPVAP]-1659876594486
GPR[EPVS]-1659876594486
========
int count=0;
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876594488
GPR[SPVAP]-1659876594488
GPR[EPVAP]-1659876595673
GPR[SPVATF]-1659876595673
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876596770
GPR[EPVS]-1659876596770
========
int count=0;
newChild.next=child.next;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876596772
GPR[SPVAP]-1659876596772
GPR[EPVAP]-1659876597511
GPR[EPVS]-1659876597511
========
if(parent==last)last=next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876597513
GPR[SPVAP]-1659876597513
GPR[EPVAP]-1659876598692
GPR[SPVATF]-1659876598692
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876599783
GPR[EPVS]-1659876599783
========
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876599784
GPR[SPVAP]-1659876599784
GPR[EPVAP]-1659876600517
GPR[EPVS]-1659876600517
========
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876600519
GPR[SPVAP]-1659876600519
GPR[EPVAP]-1659876601254
GPR[EPVS]-1659876601254
========
if(parent==last)last=next;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876601256
GPR[SPVAP]-1659876601256
GPR[EPVAP]-1659876601992
GPR[EPVS]-1659876601992
========
child.next=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876601994
GPR[SPVAP]-1659876601994
GPR[EPVAP]-1659876602762
GPR[EPVS]-1659876602762
========
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876602764
GPR[SPVAP]-1659876602764
GPR[EPVAP]-1659876603621
GPR[EPVS]-1659876603621
========
int count=0;
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876603629
GPR[SPVAP]-1659876603629
GPR[EPVAP]-1659876604782
GPR[EPVS]-1659876604782
========
if(parent==last)last=next;
int count=0;
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876604783
GPR[SPVAP]-1659876604783
GPR[EPVAP]-1659876605984
GPR[SPVATF]-1659876605984
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876607133
GPR[EPVS]-1659876607133
========
child.next=null;
int count=0;
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876607134
GPR[SPVAP]-1659876607134
GPR[EPVAP]-1659876607894
GPR[EPVS]-1659876607894
========
child.parent=null;
int count=0;
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876607897
GPR[SPVAP]-1659876607897
GPR[EPVAP]-1659876608634
GPR[EPVS]-1659876608634
========
if(parent==last)last=next;
int count=0;
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876608636
GPR[SPVAP]-1659876608636
GPR[EPVAP]-1659876609370
GPR[EPVS]-1659876609370
========
child.next=null;
int count=0;
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876609371
GPR[SPVAP]-1659876609371
GPR[EPVAP]-1659876610107
GPR[EPVS]-1659876610107
========
child.parent=null;
int count=0;
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876610109
GPR[SPVAP]-1659876610109
GPR[EPVAP]-1659876610842
GPR[EPVS]-1659876610842
========
if(parent==last)last=next;
child.next=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876610844
GPR[SPVAP]-1659876610844
GPR[EPVAP]-1659876611574
GPR[EPVS]-1659876611574
========
if(parent==last)last=next;
child.parent=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876611576
GPR[SPVAP]-1659876611576
GPR[EPVAP]-1659876612314
GPR[EPVS]-1659876612314
========
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876612315
GPR[SPVAP]-1659876612315
GPR[EPVAP]-1659876613043
GPR[EPVS]-1659876613043
========
if(parent==last)last=next;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876613044
GPR[SPVAP]-1659876613044
GPR[EPVAP]-1659876613811
GPR[EPVS]-1659876613811
========
child.next=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876613814
GPR[SPVAP]-1659876613814
GPR[EPVAP]-1659876614551
GPR[EPVS]-1659876614551
========
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876614553
GPR[SPVAP]-1659876614553
GPR[EPVAP]-1659876615303
GPR[EPVS]-1659876615303
========
if(parent==last)last=next;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876615305
GPR[SPVAP]-1659876615305
GPR[EPVAP]-1659876616034
GPR[EPVS]-1659876616034
========
child.next=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876616036
GPR[SPVAP]-1659876616036
GPR[EPVAP]-1659876616778
GPR[EPVS]-1659876616778
========
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876616780
GPR[SPVAP]-1659876616780
GPR[EPVAP]-1659876617515
GPR[EPVS]-1659876617515
========
if(parent==last)last=next;
child.next=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876617516
GPR[SPVAP]-1659876617516
GPR[EPVAP]-1659876618251
GPR[EPVS]-1659876618251
========
if(parent==last)last=next;
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876618253
GPR[SPVAP]-1659876618253
GPR[EPVAP]-1659876618986
GPR[EPVS]-1659876618986
========
child.next=null;
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876618988
GPR[SPVAP]-1659876618988
GPR[EPVAP]-1659876619721
GPR[EPVS]-1659876619721
========
if(parent==last)last=next;
int count=0;
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876619722
GPR[SPVAP]-1659876619722
GPR[EPVAP]-1659876620457
GPR[EPVS]-1659876620457
========
child.next=null;
int count=0;
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876620458
GPR[SPVAP]-1659876620458
GPR[EPVAP]-1659876621186
GPR[EPVS]-1659876621186
========
child.parent=null;
int count=0;
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876621189
GPR[SPVAP]-1659876621189
GPR[EPVAP]-1659876621946
GPR[EPVS]-1659876621946
========
if(parent==last)last=next;
child.next=null;
int count=0;
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876621948
GPR[SPVAP]-1659876621948
GPR[EPVAP]-1659876622692
GPR[EPVS]-1659876622692
========
if(parent==last)last=next;
child.parent=null;
int count=0;
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876622693
GPR[SPVAP]-1659876622693
GPR[EPVAP]-1659876623437
GPR[EPVS]-1659876623437
========
child.next=null;
child.parent=null;
int count=0;
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876623438
GPR[SPVAP]-1659876623438
GPR[EPVAP]-1659876624179
GPR[EPVS]-1659876624179
========
if(parent==last)last=next;
child.next=null;
int count=0;
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876624181
GPR[SPVAP]-1659876624181
GPR[EPVAP]-1659876624913
GPR[EPVS]-1659876624913
========
if(parent==last)last=next;
child.parent=null;
int count=0;
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876624915
GPR[SPVAP]-1659876624915
GPR[EPVAP]-1659876625645
GPR[EPVS]-1659876625645
========
child.next=null;
child.parent=null;
int count=0;
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876625646
GPR[SPVAP]-1659876625646
GPR[EPVAP]-1659876626373
GPR[EPVS]-1659876626373
========
if(parent==last)last=next;
child.next=null;
child.parent=null;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876626374
GPR[SPVAP]-1659876626374
GPR[EPVAP]-1659876627134
GPR[EPVS]-1659876627134
========
if(parent==last)last=next;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876627136
GPR[SPVAP]-1659876627136
GPR[EPVAP]-1659876627865
GPR[EPVS]-1659876627865
========
child.next=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876627867
GPR[SPVAP]-1659876627867
GPR[EPVAP]-1659876628591
GPR[EPVS]-1659876628591
========
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876628593
GPR[SPVAP]-1659876628593
GPR[EPVAP]-1659876629323
GPR[EPVS]-1659876629323
========
if(parent==last)last=next;
child.next=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876629324
GPR[SPVAP]-1659876629324
GPR[EPVAP]-1659876630057
GPR[EPVS]-1659876630057
========
if(parent==last)last=next;
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876630058
GPR[SPVAP]-1659876630058
GPR[EPVAP]-1659876630787
GPR[EPVS]-1659876630787
========
child.next=null;
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876630788
GPR[SPVAP]-1659876630789
GPR[EPVAP]-1659876631519
GPR[EPVS]-1659876631519
========
if(parent==last)last=next;
child.next=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876631520
GPR[SPVAP]-1659876631520
GPR[EPVAP]-1659876632255
GPR[EPVS]-1659876632255
========
if(parent==last)last=next;
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876632257
GPR[SPVAP]-1659876632257
GPR[EPVAP]-1659876632990
GPR[EPVS]-1659876632990
========
child.next=null;
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876632992
GPR[SPVAP]-1659876632992
GPR[EPVAP]-1659876633725
GPR[EPVS]-1659876633725
========
if(parent==last)last=next;
child.next=null;
child.parent=null;
int count=0;
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876633727
GPR[SPVAP]-1659876633727
GPR[EPVAP]-1659876634475
GPR[EPVS]-1659876634475
========
if(parent==last)last=next;
child.next=null;
int count=0;
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876634477
GPR[SPVAP]-1659876634477
GPR[EPVAP]-1659876635226
GPR[EPVS]-1659876635226
========
if(parent==last)last=next;
child.parent=null;
int count=0;
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876635228
GPR[SPVAP]-1659876635228
GPR[EPVAP]-1659876635951
GPR[EPVS]-1659876635951
========
child.next=null;
child.parent=null;
int count=0;
next.copyInformationFrom(parent);
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876635953
GPR[SPVAP]-1659876635953
GPR[EPVAP]-1659876636690
GPR[EPVS]-1659876636690
========
if(parent==last)last=next;
child.next=null;
child.parent=null;
int count=0;
next.copyInformationFrom(parent);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876636691
GPR[SPVAP]-1659876636691
GPR[EPVAP]-1659876637427
GPR[EPVS]-1659876637427
========
if(parent==last)last=next;
child.next=null;
child.parent=null;
int count=0;
newChild.parent=this;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876637428
GPR[SPVAP]-1659876637428
GPR[EPVAP]-1659876638162
GPR[EPVS]-1659876638162
========
case Token.ERROR :

int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876638164
GPR[SPVAP]-1659876638164
GPR[EPVAP]-1659876638738
GPR[EPVS]-1659876638738
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
addExpr(first,count);
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876638740
GPR[SPVAP]-1659876638740
GPR[EPVAP]-1659876639519
GPR[EPVS]-1659876639519
========
case Token.STRING :

int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876639520
GPR[SPVAP]-1659876639520
GPR[EPVAP]-1659876640102
GPR[EPVS]-1659876640102
========
parent=next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876640104
GPR[SPVAP]-1659876640104
GPR[EPVAP]-1659876641289
GPR[SPVATF]-1659876641289
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876642399
GPR[EPVS]-1659876642399
========
int count=0;
super(type,COLUMN_BITS,COLUMN_BITS);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876642402
GPR[SPVAP]-1659876642402
GPR[EPVAP]-1659876643146
GPR[EPVS]-1659876643146
========
this.str=str;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876643148
GPR[SPVAP]-1659876643148
GPR[EPVAP]-1659876643923
GPR[EPVS]-1659876643923
========
if(type!=Token.GETPROP&&type!=Token.GETELEM&&type!=Token.CALL){
replaceWithNull(next,next);
break;
}
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876643926
GPR[SPVAP]-1659876643926
GPR[EPVAP]-1659876644667
GPR[EPVS]-1659876644667
========
next=next;
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876644669
GPR[SPVAP]-1659876644669
GPR[EPVAP]-1659876645848
GPR[SPVATF]-1659876645848
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876646951
GPR[EPVS]-1659876646951
========
int count=0;
super(type);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876646954
GPR[SPVAP]-1659876646954
GPR[EPVAP]-1659876647730
GPR[EPVS]-1659876647730
========
parent.replaceChild(next,new Node(type));
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876647731
GPR[SPVAP]-1659876647731
GPR[EPVAP]-1659876648924
GPR[SPVATF]-1659876648924
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876650011
GPR[EPVS]-1659876650011
========
default :

int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876650012
GPR[SPVAP]-1659876650012
GPR[EPVAP]-1659876650582
GPR[EPVS]-1659876650582
========
case Token.REGEXP :

int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876650584
GPR[SPVAP]-1659876650584
GPR[EPVAP]-1659876651165
GPR[EPVS]-1659876651165
========
int count=0;
Preconditions.checkState(last.getType()==Token.STRING);
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876651167
GPR[SPVAP]-1659876651167
GPR[EPVAP]-1659876652349
GPR[SPVATF]-1659876652349
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876653450
GPR[EPVS]-1659876653450
========
add(".");
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876653451
GPR[SPVAP]-1659876653451
GPR[EPVAP]-1659876654226
GPR[EPVS]-1659876654226
========
addIdentifier(last.getString());
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876654228
GPR[SPVAP]-1659876654228
GPR[EPVAP]-1659876654968
GPR[EPVS]-1659876654968
========
case Token.WITH :

int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876654971
GPR[SPVAP]-1659876654971
GPR[EPVAP]-1659876655557
GPR[EPVS]-1659876655557
========
int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
case Token.FALSE :

Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876655559
GPR[SPVAP]-1659876655559
GPR[EPVAP]-1659876656138
GPR[EPVS]-1659876656138
========
case Token.CONTINUE :

int count=0;
for(PropListItem x=propListHead;x!=null;x=x.next){
count++;
}
int[] keys=new int[count];
for(PropListItem x=propListHead;x!=null;x=x.next){
count--;
keys[count]=x.type;
}
Arrays.sort(keys);
return keys;

========
GPR[SPVS]-1659876656140
GPR[SPVAP]-1659876656140
GPR[EPVAP]-1659876656712
GPR[EPVS]-1659876656712
GPR[ESUN]-1659876656713
GPR[SSUN]-1659876656713
com.google.javascript.rhino.Node,797
GPR[ESUN]-1659876657068
GPR[SSUN]-1659876657068
com.google.javascript.rhino.Node,798
GPR[ESUN]-1659876657232
GPR[SSUN]-1659876657232
com.google.javascript.rhino.Node,801
GPR[ESUN]-1659876657381
GPR[SSUN]-1659876657381
com.google.javascript.rhino.Node,802
GPR[ESUN]-1659876657530
GPR[SSUN]-1659876657530
com.google.javascript.rhino.Node,803
GPR[ESUN]-1659876657686
GPR[SSUN]-1659876657686
com.google.javascript.rhino.Node,804
GPR[ESUN]-1659876657865
GPR[SSUN]-1659876657865
com.google.javascript.rhino.Node,807
GPR[ESUN]-1659876658029
GPR[SSUN]-1659876658029
com.google.javascript.rhino.Node,808
GPR[ESUN]-1659876658193
GPR[SSUN]-1659876658193
com.google.javascript.rhino.Node,865
GPR[ESUN]-1659876659309
GPR[SSUN]-1659876659309
com.google.javascript.rhino.Node,874
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return Long.toString(serialVersionUID);
}

========
GPR[SPVS]-1659876660485
GPR[SPVAP]-1659876660485
GPR[EPVAP]-1659876664101
GPR[SPVATF]-1659876664101
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876665192
GPR[EPVS]-1659876665192
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return Double.toString(next.getDouble());
}

========
GPR[SPVS]-1659876665193
GPR[SPVAP]-1659876665193
GPR[EPVAP]-1659876666387
GPR[SPVATF]-1659876666387
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876667475
GPR[EPVS]-1659876667475
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return type.toString();
}

========
GPR[SPVS]-1659876667477
GPR[SPVAP]-1659876667477
GPR[EPVAP]-1659876668244
GPR[EPVS]-1659876668244
========
sb.append(")");
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876668245
GPR[SPVAP]-1659876668245
GPR[EPVAP]-1659876668981
GPR[EPVS]-1659876668981
========
sb.append('_');
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876668983
GPR[SPVAP]-1659876668983
GPR[EPVAP]-1659876669719
GPR[EPVS]-1659876669719
========
sb.append(Long.toHexString(serialVersionUID));
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876669720
GPR[SPVAP]-1659876669720
GPR[EPVAP]-1659876670451
GPR[EPVS]-1659876670451
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
Preconditions.checkNotNull(type.getSource());
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876670453
GPR[SPVAP]-1659876670453
GPR[EPVAP]-1659876671179
GPR[EPVS]-1659876671179
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
sourceName=(String)type.getSource().getProp(Node.SOURCENAME_PROP)==null?"":(String)type.getSource().getProp(Node.SOURCENAME_PROP);
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876671181
GPR[SPVAP]-1659876671181
GPR[EPVAP]-1659876671908
GPR[EPVS]-1659876671908
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
Preconditions.checkNotNull(type.getSource());
sourceName=(String)type.getSource().getProp(Node.SOURCENAME_PROP)==null?"":(String)type.getSource().getProp(Node.SOURCENAME_PROP);

toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876671910
GPR[SPVAP]-1659876671910
GPR[EPVAP]-1659876672635
GPR[EPVS]-1659876672635
========
sb.append(" */\n");
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876672637
GPR[SPVAP]-1659876672637
GPR[EPVAP]-1659876673392
GPR[EPVS]-1659876673392
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return DToA.JS_dtobasestr(COLUMN_BITS,number);
}

========
GPR[SPVS]-1659876673395
GPR[SPVAP]-1659876673395
GPR[EPVAP]-1659876674132
GPR[EPVS]-1659876674132
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return new StringBuffer().toString();
}

========
GPR[SPVS]-1659876674134
GPR[SPVAP]-1659876674134
GPR[EPVAP]-1659876675308
GPR[SPVATF]-1659876675308
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876676402
GPR[EPVS]-1659876676402
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
DToA.JS_dtostr(new StringBuffer(),DToA.DTOSTR_STANDARD,0,number);
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876676404
GPR[SPVAP]-1659876676404
GPR[EPVAP]-1659876677131
GPR[EPVS]-1659876677131
========
parent.replaceChild(next,Node.newString(sb.toString()));
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876677133
GPR[SPVAP]-1659876677133
GPR[EPVAP]-1659876677882
GPR[EPVS]-1659876677883
========
printSource=true;
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876677884
GPR[SPVAP]-1659876677884
GPR[EPVAP]-1659876679060
GPR[SPVATF]-1659876679060
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876680138
GPR[EPVS]-1659876680138
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
sb.append(next.toString());
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876680140
GPR[SPVAP]-1659876680140
GPR[EPVAP]-1659876681311
GPR[SPVATF]-1659876681311
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876682387
GPR[EPVS]-1659876682387
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
sb.append('\n');
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876682390
GPR[SPVAP]-1659876682390
GPR[EPVAP]-1659876683574
GPR[SPVATF]-1659876683574
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876684673
GPR[EPVS]-1659876684673
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
sb.append(next.toString());
sb.append('\n');

toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876684675
GPR[SPVAP]-1659876684675
GPR[EPVAP]-1659876685862
GPR[SPVATF]-1659876685862
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876686947
GPR[EPVS]-1659876686947
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
sb.append(next.toString());
sb.append('\n');
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876686949
GPR[SPVAP]-1659876686949
GPR[EPVAP]-1659876688123
GPR[SPVATF]-1659876688123
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876689200
GPR[EPVS]-1659876689200
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
sb.append(next.toString());
sb.append(next.toString());
sb.append('\n');

toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876689203
GPR[SPVAP]-1659876689203
GPR[EPVAP]-1659876690373
GPR[SPVATF]-1659876690373
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876691457
GPR[EPVS]-1659876691457
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
sb.append('\n');
sb.append(next.toString());
sb.append('\n');

toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876691459
GPR[SPVAP]-1659876691459
GPR[EPVAP]-1659876692631
GPR[SPVATF]-1659876692631
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876693720
GPR[EPVS]-1659876693720
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
sb.append(next.toString());
sb.append('\n');
sb.append(next.toString());
sb.append('\n');

toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876693722
GPR[SPVAP]-1659876693722
GPR[EPVAP]-1659876694889
GPR[SPVATF]-1659876694889
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876695983
GPR[EPVS]-1659876695983
========
sb.append("<li>"+nameAnchor(node.name));
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876695985
GPR[SPVAP]-1659876695985
GPR[EPVAP]-1659876696716
GPR[EPVS]-1659876696716
========
sb.append("\n");
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876696718
GPR[SPVAP]-1659876696718
GPR[EPVAP]-1659876697439
GPR[EPVS]-1659876697439
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return builder.toString();
}

========
GPR[SPVS]-1659876697441
GPR[SPVAP]-1659876697441
GPR[EPVAP]-1659876698169
GPR[EPVS]-1659876698169
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
line=str.substring(start);
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876698171
GPR[SPVAP]-1659876698171
GPR[EPVAP]-1659876698906
GPR[EPVS]-1659876698906
========
sb.append("...[").append(jsType.toString()).append("]");
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876698908
GPR[SPVAP]-1659876698908
GPR[EPVAP]-1659876699664
GPR[EPVS]-1659876699664
========
case EOC :

if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876699667
GPR[SPVAP]-1659876699667
GPR[EPVAP]-1659876700243
GPR[EPVS]-1659876700243
========
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
Preconditions.checkState(parent.getType()==Token.FOR&&parent.getChildCount()==4);
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}

========
GPR[SPVS]-1659876700245
GPR[SPVAP]-1659876700245
GPR[EPVAP]-1659876701422
GPR[SPVATF]-1659876701422
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876702523
GPR[EPVS]-1659876702523
GPR[ESUN]-1659876702524
GPR[SSUN]-1659876702524
com.google.javascript.rhino.Node,875
GPR[ESUN]-1659876702820
GPR[SSUN]-1659876702820
com.google.javascript.rhino.Node,876
GPR[ESUN]-1659876702991
GPR[SSUN]-1659876702991
com.google.javascript.rhino.Node,888
========
if(printSource){
b.append(" [source name: ");
b.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876705663
GPR[SPVAP]-1659876705663
GPR[EPVAP]-1659876707204
GPR[EPVS]-1659876707204
========
if(printSource){
sb.append(" [source name: ");
b.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876707205
GPR[SPVAP]-1659876707205
GPR[EPVAP]-1659876708803
GPR[EPVS]-1659876708803
========
if(printSource){
b.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876708804
GPR[SPVAP]-1659876708804
GPR[EPVAP]-1659876710306
GPR[EPVS]-1659876710306
========
if(printSource){
sb.append(" [source name: ");
b.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876710308
GPR[SPVAP]-1659876710308
GPR[EPVAP]-1659876711819
GPR[EPVS]-1659876711819
========
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876711821
GPR[SPVAP]-1659876711821
GPR[EPVAP]-1659876713296
GPR[EPVS]-1659876713296
========
sb.append(getLevelName(printType?CheckLevel.WARNING:CheckLevel.ERROR));
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876713298
GPR[SPVAP]-1659876713298
GPR[EPVAP]-1659876714813
GPR[EPVS]-1659876714813
========
sb.append(" - ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876714815
GPR[SPVAP]-1659876714815
GPR[EPVAP]-1659876718301
GPR[SPVATF]-1659876718301
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876719382
GPR[EPVS]-1659876719382
========
sb.append(error.description);
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876719383
GPR[SPVAP]-1659876719383
GPR[EPVAP]-1659876720155
GPR[EPVS]-1659876720155
========
sb.append('\n');
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876720156
GPR[SPVAP]-1659876720156
GPR[EPVAP]-1659876721360
GPR[SPVATF]-1659876721360
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876722443
GPR[EPVS]-1659876722443
========
sb.append(" - ");
if(printSource){
sb.append(" [source name: ");
b.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876722445
GPR[SPVAP]-1659876722445
GPR[EPVAP]-1659876723183
GPR[EPVS]-1659876723183
========
sb.append('\n');
if(printSource){
sb.append(" [source name: ");
b.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876723185
GPR[SPVAP]-1659876723185
GPR[EPVAP]-1659876723918
GPR[EPVS]-1659876723918
========
sb.append(" - ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876723920
GPR[SPVAP]-1659876723920
GPR[EPVAP]-1659876724648
GPR[EPVS]-1659876724648
========
sb.append('\n');
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876724651
GPR[SPVAP]-1659876724651
GPR[EPVAP]-1659876725389
GPR[EPVS]-1659876725389
========
sb.append(" - ");
sb.append('\n');
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876725391
GPR[SPVAP]-1659876725391
GPR[EPVAP]-1659876726580
GPR[SPVATF]-1659876726580
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876727700
GPR[EPVS]-1659876727700
========
sb.append(" - ");
if(printSource){
sb.append(" [source name: ");
b.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876727702
GPR[SPVAP]-1659876727702
GPR[EPVAP]-1659876728434
GPR[EPVS]-1659876728434
========
sb.append('\n');
if(printSource){
sb.append(" [source name: ");
b.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876728435
GPR[SPVAP]-1659876728435
GPR[EPVAP]-1659876729171
GPR[EPVS]-1659876729171
========
sb.append(" - ");
sb.append('\n');
if(printSource){
sb.append(" [source name: ");
b.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876729172
GPR[SPVAP]-1659876729172
GPR[EPVAP]-1659876729927
GPR[EPVS]-1659876729927
========
sb.append(" - ");
sb.append('\n');
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876729929
GPR[SPVAP]-1659876729929
GPR[EPVAP]-1659876730659
GPR[EPVS]-1659876730659
========
sb.append(" - ");
sb.append('\n');
if(printSource){
sb.append(" [source name: ");
b.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876730661
GPR[SPVAP]-1659876730661
GPR[EPVAP]-1659876731388
GPR[EPVS]-1659876731388
========
sb.append("{ ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876731390
GPR[SPVAP]-1659876731390
GPR[EPVAP]-1659876732570
GPR[SPVATF]-1659876732570
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876733648
GPR[EPVS]-1659876733648
========
sb.append(" }");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876733649
GPR[SPVAP]-1659876733649
GPR[EPVAP]-1659876734842
GPR[SPVATF]-1659876734842
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876735929
GPR[EPVS]-1659876735929
========
sb.append("{ ");
sb.append(" }");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876735930
GPR[SPVAP]-1659876735930
GPR[EPVAP]-1659876737103
GPR[SPVATF]-1659876737103
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876738183
GPR[EPVS]-1659876738183
========
sof.append("[");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876738185
GPR[SPVAP]-1659876738185
GPR[EPVAP]-1659876738931
GPR[EPVS]-1659876738931
========
sof.append("]");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876738932
GPR[SPVAP]-1659876738932
GPR[EPVAP]-1659876739698
GPR[EPVS]-1659876739698
========
if(node.referencedBy.size()>0){
sb.append("<li>REFERENCED BY: ");
Iterator<String> node.referencedBy.iterator()=node.referencedBy.iterator();
while(fromIter.hasNext()){
sb.append(nameLink(fromIter.next()));
if(fromIter.hasNext()){
sb.append(", ");
}
}
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876739700
GPR[SPVAP]-1659876739700
GPR[EPVAP]-1659876740287
GPR[EPVS]-1659876740287
========
sb.append("</li>");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876740289
GPR[SPVAP]-1659876740289
GPR[EPVAP]-1659876741476
GPR[SPVATF]-1659876741476
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876742557
GPR[EPVS]-1659876742557
========
sb.append("</ul></li>");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876742559
GPR[SPVAP]-1659876742559
GPR[EPVAP]-1659876743739
GPR[SPVATF]-1659876743739
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876744823
GPR[EPVS]-1659876744823
========
sb.append("</li>");
sb.append("</ul></li>");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876744825
GPR[SPVAP]-1659876744825
GPR[EPVAP]-1659876745998
GPR[SPVATF]-1659876745998
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876747076
GPR[EPVS]-1659876747076
========
sof.append("[");
sof.append("]");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876747078
GPR[SPVAP]-1659876747078
GPR[EPVAP]-1659876747810
GPR[EPVS]-1659876747810
========
sof.append(" (");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876747813
GPR[SPVAP]-1659876747813
GPR[EPVAP]-1659876748537
GPR[EPVS]-1659876748537
========
if(str!=null){
sof.append(sourceName);
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876748539
GPR[SPVAP]-1659876748539
GPR[EPVAP]-1659876749274
GPR[EPVS]-1659876749274
========
if(COLUMN_BITS>0){
sof.append('#');
buf.append(lineNumber);
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876749276
GPR[SPVAP]-1659876749276
GPR[EPVAP]-1659876750010
GPR[EPVS]-1659876750010
========
sof.append(')');
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876750011
GPR[SPVAP]-1659876750011
GPR[EPVAP]-1659876750751
GPR[EPVS]-1659876750751
========
sof.append(" = ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876750753
GPR[SPVAP]-1659876750753
GPR[EPVAP]-1659876751491
GPR[EPVS]-1659876751491
========
sof.append("function(");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876751492
GPR[SPVAP]-1659876751492
GPR[EPVAP]-1659876752222
GPR[EPVS]-1659876752222
========
sof.append(") {}");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876752223
GPR[SPVAP]-1659876752223
GPR[EPVAP]-1659876752966
GPR[EPVS]-1659876752966
========
if(printSource){
sb.add(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876752969
GPR[SPVAP]-1659876752969
GPR[EPVAP]-1659876753713
GPR[EPVS]-1659876753713
========
if(printSource){
result.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876753715
GPR[SPVAP]-1659876753715
GPR[EPVAP]-1659876754452
GPR[EPVS]-1659876754452
========
sb.append("(");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876754454
GPR[SPVAP]-1659876754454
GPR[EPVAP]-1659876755639
GPR[SPVATF]-1659876755639
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876756740
GPR[EPVS]-1659876756740
========
sb.append(")");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876756741
GPR[SPVAP]-1659876756741
GPR[EPVAP]-1659876757902
GPR[SPVATF]-1659876757902
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876758980
GPR[EPVS]-1659876758980
========
sb.append("(");
sb.append(")");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876758981
GPR[SPVAP]-1659876758981
GPR[EPVAP]-1659876760153
GPR[SPVATF]-1659876760153
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876761251
GPR[EPVS]-1659876761251
========
if(printSource){
builder.append(" [source name: ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876761254
GPR[SPVAP]-1659876761254
GPR[EPVAP]-1659876762007
GPR[EPVS]-1659876762007
========
if(printSource){
builder.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876762009
GPR[SPVAP]-1659876762009
GPR[EPVAP]-1659876762738
GPR[EPVS]-1659876762739
========
if(printSource){
sb.append(" [source name: ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876762740
GPR[SPVAP]-1659876762740
GPR[EPVAP]-1659876763475
GPR[EPVS]-1659876763475
========
if(printSource){
start=-1;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876763477
GPR[SPVAP]-1659876763477
GPR[EPVAP]-1659876764209
GPR[EPVS]-1659876764209
========
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
start=COLUMN_BITS+1;
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876764211
GPR[SPVAP]-1659876764211
GPR[EPVAP]-1659876764994
GPR[EPVS]-1659876764994
========
if(printSource){
COLUMN_BITS++;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876764996
GPR[SPVAP]-1659876764996
GPR[EPVAP]-1659876765744
GPR[EPVS]-1659876765744
========
if(printSource){
start=COLUMN_BITS+1;
COLUMN_BITS++;

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876765745
GPR[SPVAP]-1659876765745
GPR[EPVAP]-1659876766473
GPR[EPVS]-1659876766473
========
if(printSource){
if(str.length()==0){
return sb.substring(0,builder.length()-1);
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876766476
GPR[SPVAP]-1659876766476
GPR[EPVAP]-1659876767228
GPR[EPVS]-1659876767228
========
sb.append("  ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876767230
GPR[SPVAP]-1659876767230
GPR[EPVAP]-1659876768484
GPR[SPVATF]-1659876768484
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876769604
GPR[EPVS]-1659876769604
========
sb.append(StringUtil.repeat(" ",COLUMN_BITS-Integer.toString(COLUMN_BITS).length()));
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876769605
GPR[SPVAP]-1659876769605
GPR[EPVAP]-1659876770381
GPR[EPVS]-1659876770381
========
sb.append(COLUMN_BITS);
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876770383
GPR[SPVAP]-1659876770383
GPR[EPVAP]-1659876771559
GPR[SPVATF]-1659876771559
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876772652
GPR[EPVS]-1659876772652
========
sb.append("| ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876772653
GPR[SPVAP]-1659876772653
GPR[EPVAP]-1659876773847
GPR[SPVATF]-1659876773847
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876774928
GPR[EPVS]-1659876774928
========
sb.append("  ");
sb.append(COLUMN_BITS);
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876774929
GPR[SPVAP]-1659876774929
GPR[EPVAP]-1659876776124
GPR[SPVATF]-1659876776124
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876777213
GPR[EPVS]-1659876777213
========
sb.append("  ");
sb.append("| ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876777214
GPR[SPVAP]-1659876777214
GPR[EPVAP]-1659876778427
GPR[SPVATF]-1659876778427
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876779508
GPR[EPVS]-1659876779508
========
sb.append(COLUMN_BITS);
sb.append("| ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876779510
GPR[SPVAP]-1659876779510
GPR[EPVAP]-1659876780706
GPR[SPVATF]-1659876780706
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876781795
GPR[EPVS]-1659876781795
========
sb.append("  ");
sb.append(COLUMN_BITS);
sb.append("| ");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876781797
GPR[SPVAP]-1659876781797
GPR[EPVAP]-1659876782973
GPR[SPVATF]-1659876782973
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876784074
GPR[EPVS]-1659876784074
========
sb.append("Pure functions:\n");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876784076
GPR[SPVAP]-1659876784076
GPR[EPVAP]-1659876785257
GPR[SPVATF]-1659876785257
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876786355
GPR[EPVS]-1659876786355
========
sb.append("\n");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876786356
GPR[SPVAP]-1659876786356
GPR[EPVAP]-1659876787540
GPR[SPVATF]-1659876787540
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876788625
GPR[EPVS]-1659876788625
========
sb.append("Pure functions:\n");
sb.append("\n");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876788627
GPR[SPVAP]-1659876788627
GPR[EPVAP]-1659876789817
GPR[SPVATF]-1659876789817
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876790903
GPR[EPVS]-1659876790903
========
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
paths.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876790905
GPR[SPVAP]-1659876790905
GPR[EPVAP]-1659876791636
GPR[EPVS]-1659876791636
========
if(printSource){
b.append(" [source name: ");
b.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876791638
GPR[SPVAP]-1659876791638
GPR[EPVAP]-1659876792397
GPR[EPVS]-1659876792397
========
new CRC32().update(str.getBytes());
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876792400
GPR[SPVAP]-1659876792400
GPR[EPVAP]-1659876793131
GPR[EPVS]-1659876793131
========
sb.append('_');
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876793132
GPR[SPVAP]-1659876793132
GPR[EPVAP]-1659876794332
GPR[SPVATF]-1659876794332
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876795428
GPR[EPVS]-1659876795428
========
sb.append(Long.toHexString(serialVersionUID));
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876795429
GPR[SPVAP]-1659876795429
GPR[EPVAP]-1659876796599
GPR[SPVATF]-1659876796599
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876797684
GPR[EPVS]-1659876797684
========
sb.append('_');
sb.append(Long.toHexString(serialVersionUID));
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876797686
GPR[SPVAP]-1659876797686
GPR[EPVAP]-1659876798869
GPR[SPVATF]-1659876798869
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876799960
GPR[EPVS]-1659876799960
========
append((char)COLUMN_BITS);
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876799962
GPR[SPVAP]-1659876799962
GPR[EPVAP]-1659876800692
GPR[EPVS]-1659876800692
========
append((char)Token.EOL);
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876800693
GPR[SPVAP]-1659876800693
GPR[EPVAP]-1659876801467
GPR[EPVS]-1659876801467
========
if(printSource){
code.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876801468
GPR[SPVAP]-1659876801468
GPR[EPVAP]-1659876802204
GPR[EPVS]-1659876802204
========
sb.append(str);
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876802205
GPR[SPVAP]-1659876802205
GPR[EPVAP]-1659876802932
GPR[EPVS]-1659876802932
========
COLUMN_BITS+=str.length();
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876802933
GPR[SPVAP]-1659876802933
GPR[EPVAP]-1659876803659
GPR[EPVS]-1659876803659
========
if(printSource){
sb.checkState(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876803661
GPR[SPVAP]-1659876803661
GPR[EPVAP]-1659876804384
GPR[EPVS]-1659876804384
========
if(printSource){
replacement=p.newName;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876804386
GPR[SPVAP]-1659876804386
GPR[EPVAP]-1659876805139
GPR[EPVS]-1659876805139
========
if(printSource){
S=mhi=null;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876805141
GPR[SPVAP]-1659876805141
GPR[EPVAP]-1659876805890
GPR[EPVS]-1659876805890
========
if(printSource){
S=mhi=null;
COLUMN_BITS++;

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876805891
GPR[SPVAP]-1659876805891
GPR[EPVAP]-1659876806647
GPR[EPVS]-1659876806647
========
if(printSource){
maybeLineBreak();
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876806650
GPR[SPVAP]-1659876806650
GPR[EPVAP]-1659876807383
GPR[EPVS]-1659876807383
========
if(printSource){
lineLength=0;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876807385
GPR[SPVAP]-1659876807385
GPR[EPVAP]-1659876808121
GPR[EPVS]-1659876808121
========
if(printSource){
COLUMN_BITS++;
lineLength=0;

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876808123
GPR[SPVAP]-1659876808123
GPR[EPVAP]-1659876808859
GPR[EPVS]-1659876808859
========
if(printSource){
COLUMN_BITS++;
code.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876808861
GPR[SPVAP]-1659876808861
GPR[EPVAP]-1659876809631
GPR[EPVS]-1659876809631
========
if(printSource){
code.append(" [source name: ");
code.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876809633
GPR[SPVAP]-1659876809633
GPR[EPVAP]-1659876810366
GPR[EPVS]-1659876810366
========
if(printSource){
sb.append(" [source name: ");
code.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876810367
GPR[SPVAP]-1659876810367
GPR[EPVAP]-1659876811095
GPR[EPVS]-1659876811095
========
if(printSource){
sb.append(" [source name: ");
lineLength=0;
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876811096
GPR[SPVAP]-1659876811096
GPR[EPVAP]-1659876811838
GPR[EPVS]-1659876811838
========
if(printSource){
sb.append(" [source name: ");
COLUMN_BITS++;
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876811840
GPR[SPVAP]-1659876811840
GPR[EPVAP]-1659876813264
GPR[EPVS]-1659876813264
========
if(printSource){
sb.append(" [source name: ");
lineLength=0;
COLUMN_BITS++;

sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876813292
GPR[SPVAP]-1659876813292
GPR[EPVAP]-1659876814079
GPR[EPVS]-1659876814079
========
if(printSource){
endLine();
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876814081
GPR[SPVAP]-1659876814081
GPR[EPVAP]-1659876814869
GPR[EPVS]-1659876814869
========
if(printSource){
statementNeedsEnded=false;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876814871
GPR[SPVAP]-1659876814871
GPR[EPVAP]-1659876815630
GPR[EPVS]-1659876815630
========
if(printSource){
maybeLineBreak();
endLine();
statementNeedsEnded=false;

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876815633
GPR[SPVAP]-1659876815633
GPR[EPVAP]-1659876816392
GPR[EPVS]-1659876816392
========
if(printSource){
maybeLineBreak();
statementNeedsEnded=false;

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876816393
GPR[SPVAP]-1659876816393
GPR[EPVAP]-1659876817123
GPR[EPVS]-1659876817123
========
if(printSource){
maybeLineBreak();
statementNeedsEnded=false;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876817124
GPR[SPVAP]-1659876817124
GPR[EPVAP]-1659876817852
GPR[EPVS]-1659876817852
========
sof.update();
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876817854
GPR[SPVAP]-1659876817854
GPR[EPVAP]-1659876818588
GPR[EPVS]-1659876818588
========
new StringBuilder().append(sof.getRemainingJSDocLine());
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876818589
GPR[SPVAP]-1659876818589
GPR[EPVAP]-1659876819317
GPR[EPVS]-1659876819317
========
if((next.getFirstChild().getType()!=Token.ARRAYLIT)||!next.getFirstChild().getNext().getString().equals("join")){
return ;
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876819319
GPR[SPVAP]-1659876819319
GPR[EPVAP]-1659876820525
GPR[SPVATF]-1659876820525
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876821611
GPR[EPVS]-1659876821611
========
if(printSource){
sb.report(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876821613
GPR[SPVAP]-1659876821613
GPR[EPVAP]-1659876822354
GPR[EPVS]-1659876822354
========
if(printSource){
if(sof.isConstructor()&&isValidPrivateConstructorAccess(parent)){
return ;
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876822355
GPR[SPVAP]-1659876822355
GPR[EPVAP]-1659876823087
GPR[EPVS]-1659876823087
========
if(printSource){
sb.append(" [source name: ");
externMethodsWithoutSignatures.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876823089
GPR[SPVAP]-1659876823089
GPR[EPVAP]-1659876823843
GPR[EPVS]-1659876823843
========
if(printSource){
reads.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876823844
GPR[SPVAP]-1659876823844
GPR[EPVAP]-1659876824575
GPR[EPVS]-1659876824575
========
if(printSource){
writes.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876824577
GPR[SPVAP]-1659876824577
GPR[EPVAP]-1659876825307
GPR[EPVS]-1659876825307
========
if(printSource){
compiler.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876825309
GPR[SPVAP]-1659876825309
GPR[EPVAP]-1659876826086
GPR[EPVS]-1659876826086
========
if(printSource){
compiler.report(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876826087
GPR[SPVAP]-1659876826087
GPR[EPVAP]-1659876826828
GPR[EPVS]-1659876826828
========
if(COLUMN_BITS<0){
return ;
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876826829
GPR[SPVAP]-1659876826829
GPR[EPVAP]-1659876828003
GPR[SPVATF]-1659876828003
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876829092
GPR[EPVS]-1659876829092
========
if(node.referencedBy.size()>0){
sb.append("<li>REFERENCED BY: ");
Iterator<String> node.referencedBy.iterator()=node.referencedBy.iterator();
while(fromIter.hasNext()){
sb.append(nameLink(fromIter.next()));
if(fromIter.hasNext()){
sb.append(", ");
}
}
}
sb.append("</li>");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876829095
GPR[SPVAP]-1659876829095
GPR[EPVAP]-1659876829670
GPR[EPVS]-1659876829670
========
if(node.referencedBy.size()>0){
sb.append("<li>REFERENCED BY: ");
Iterator<String> node.referencedBy.iterator()=node.referencedBy.iterator();
while(fromIter.hasNext()){
sb.append(nameLink(fromIter.next()));
if(fromIter.hasNext()){
sb.append(", ");
}
}
}
sb.append("</ul></li>");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876829672
GPR[SPVAP]-1659876829672
GPR[EPVAP]-1659876830242
GPR[EPVS]-1659876830242
========
if(node.referencedBy.size()>0){
sb.append("<li>REFERENCED BY: ");
Iterator<String> node.referencedBy.iterator()=node.referencedBy.iterator();
while(fromIter.hasNext()){
sb.append(nameLink(fromIter.next()));
if(fromIter.hasNext()){
sb.append(", ");
}
}
}
sb.append("</li>");
sb.append("</ul></li>");
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876830243
GPR[SPVAP]-1659876830243
GPR[EPVAP]-1659876830823
GPR[EPVS]-1659876830823
========
if(printSource){
startMarkerStack.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876830826
GPR[SPVAP]-1659876830826
GPR[EPVAP]-1659876831559
GPR[EPVS]-1659876831559
========
if(printSource){
for(Node next : next.getAncestors()){
int type=next.getType();
if(type==Token.SCRIPT||type==Token.BLOCK){
ancestorBlock=next;
break;
}
ancestorBlockChild=next;
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876831561
GPR[SPVAP]-1659876831561
GPR[EPVAP]-1659876832323
GPR[EPVS]-1659876832323
========
case Token.LB :

if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876832325
GPR[SPVAP]-1659876832325
GPR[EPVAP]-1659876832910
GPR[EPVS]-1659876832910
========
case Token.CONTINUE :

if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876832912
GPR[SPVAP]-1659876832912
GPR[EPVAP]-1659876833507
GPR[EPVS]-1659876833507
========
case Token.VAR :

if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876833509
GPR[SPVAP]-1659876833509
GPR[EPVAP]-1659876834093
GPR[EPVS]-1659876834093
========
case Token.RC :

if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}

========
GPR[SPVS]-1659876834095
GPR[SPVAP]-1659876834095
GPR[EPVAP]-1659876834671
GPR[EPVS]-1659876834671
========
if(c==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876838081
GPR[SPVAP]-1659876838081
GPR[EPVAP]-1659876838813
GPR[EPVS]-1659876838813
========
if(j==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876838815
GPR[SPVAP]-1659876838815
GPR[EPVAP]-1659876839555
GPR[EPVS]-1659876839555
========
sof.append("[");
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876839557
GPR[SPVAP]-1659876839557
GPR[EPVAP]-1659876840293
GPR[EPVS]-1659876840293
========
sof.append("]");
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876840295
GPR[SPVAP]-1659876840295
GPR[EPVAP]-1659876841022
GPR[EPVS]-1659876841022
========
if(COLUMN_BITS==type){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876841026
GPR[SPVAP]-1659876841026
GPR[EPVAP]-1659876842215
GPR[SPVATF]-1659876842215
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876843309
GPR[EPVS]-1659876843309
========
if(COLUMN_BITS==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876843310
GPR[SPVAP]-1659876843310
GPR[EPVAP]-1659876844525
GPR[SPVATF]-1659876844525
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876845601
GPR[EPVS]-1659876845601
========
if(length==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876845602
GPR[SPVAP]-1659876845602
GPR[EPVAP]-1659876846330
GPR[EPVS]-1659876846331
========
fn.update(str.getBytes());
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876846333
GPR[SPVAP]-1659876846333
GPR[EPVAP]-1659876847055
GPR[EPVS]-1659876847055
========
sb.append('_');
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876847056
GPR[SPVAP]-1659876847056
GPR[EPVAP]-1659876848234
GPR[SPVATF]-1659876848234
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876849332
GPR[EPVS]-1659876849332
========
sb.append(Long.toHexString(serialVersionUID));
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876849333
GPR[SPVAP]-1659876849334
GPR[EPVAP]-1659876850521
GPR[SPVATF]-1659876850521
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876851616
GPR[EPVS]-1659876851616
========
if(!first.add(sb.toString())){
encoded+="_"+COLUMN_BITS;
}
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876851618
GPR[SPVAP]-1659876851618
GPR[EPVAP]-1659876852356
GPR[EPVS]-1659876852356
========
sb.append('_');
if(COLUMN_BITS==type){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876852357
GPR[SPVAP]-1659876852357
GPR[EPVAP]-1659876853532
GPR[SPVATF]-1659876853532
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876854602
GPR[EPVS]-1659876854602
========
sb.append(Long.toHexString(serialVersionUID));
if(COLUMN_BITS==type){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876854604
GPR[SPVAP]-1659876854604
GPR[EPVAP]-1659876855794
GPR[SPVATF]-1659876855794
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876856894
GPR[EPVS]-1659876856894
========
sb.append('_');
if(COLUMN_BITS==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876856896
GPR[SPVAP]-1659876856896
GPR[EPVAP]-1659876858092
GPR[SPVATF]-1659876858092
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876859167
GPR[EPVS]-1659876859167
========
sb.append(Long.toHexString(serialVersionUID));
if(COLUMN_BITS==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876859169
GPR[SPVAP]-1659876859169
GPR[EPVAP]-1659876860339
GPR[SPVATF]-1659876860339
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876861443
GPR[EPVS]-1659876861443
========
sb.append('_');
sb.append(Long.toHexString(serialVersionUID));
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876861445
GPR[SPVAP]-1659876861445
GPR[EPVAP]-1659876862626
GPR[SPVATF]-1659876862626
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876863719
GPR[EPVS]-1659876863719
========
sb.append('_');
sb.append(Long.toHexString(serialVersionUID));
if(COLUMN_BITS==type){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876863720
GPR[SPVAP]-1659876863720
GPR[EPVAP]-1659876864901
GPR[SPVATF]-1659876864901
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876866003
GPR[EPVS]-1659876866003
========
sb.append('_');
sb.append(Long.toHexString(serialVersionUID));
if(COLUMN_BITS==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876866004
GPR[SPVAP]-1659876866004
GPR[EPVAP]-1659876867188
GPR[SPVATF]-1659876867188
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876868284
GPR[EPVS]-1659876868284
========
sof.append(" (");
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876868286
GPR[SPVAP]-1659876868286
GPR[EPVAP]-1659876869015
GPR[EPVS]-1659876869016
========
if(str!=null){
sof.append(sourceName);
}
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876869017
GPR[SPVAP]-1659876869017
GPR[EPVAP]-1659876869751
GPR[EPVS]-1659876869751
========
if(type>0){
sof.append('#');
buf.append(lineNumber);
}
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876869752
GPR[SPVAP]-1659876869752
GPR[EPVAP]-1659876870486
GPR[EPVS]-1659876870486
========
sof.append(')');
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876870487
GPR[SPVAP]-1659876870487
GPR[EPVAP]-1659876871216
GPR[EPVS]-1659876871216
========
if(type==Token.FUNCTION){
b.append(' ');
b.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876871219
GPR[SPVAP]-1659876871219
GPR[EPVAP]-1659876871959
GPR[EPVS]-1659876871959
========
if(paramNum==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876871961
GPR[SPVAP]-1659876871961
GPR[EPVAP]-1659876872684
GPR[EPVS]-1659876872684
========
if(type==Token.FUNCTION){
b.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876872686
GPR[SPVAP]-1659876872686
GPR[EPVAP]-1659876873420
GPR[EPVS]-1659876873420
========
if(type==Token.FUNCTION){
sb.append(' ');
b.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876873422
GPR[SPVAP]-1659876873422
GPR[EPVAP]-1659876874164
GPR[EPVS]-1659876874164
========
if(type==Token.FUNCTION){
p=call.parameters.getFirstChild().getNext();
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876874166
GPR[SPVAP]-1659876874166
GPR[EPVAP]-1659876874899
GPR[EPVS]-1659876874899
========
sb.append("function (");
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876874901
GPR[SPVAP]-1659876874901
GPR[EPVAP]-1659876876079
GPR[SPVATF]-1659876876079
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876877154
GPR[EPVS]-1659876877154
========
if(type!=Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876877157
GPR[SPVAP]-1659876877157
GPR[EPVAP]-1659876878358
GPR[SPVATF]-1659876878358
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876879447
GPR[EPVS]-1659876879447
========
if(type!=-1){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876879449
GPR[SPVAP]-1659876879449
GPR[EPVAP]-1659876880646
GPR[SPVATF]-1659876880646
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876881731
GPR[EPVS]-1659876881731
========
if(type==-1){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876881733
GPR[SPVAP]-1659876881733
GPR[EPVAP]-1659876882949
GPR[SPVATF]-1659876882949
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876884033
GPR[EPVS]-1659876884033
========
if(lineno==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876884034
GPR[SPVAP]-1659876884034
GPR[EPVAP]-1659876884767
GPR[EPVS]-1659876884767
========
if(i==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876884769
GPR[SPVAP]-1659876884769
GPR[EPVAP]-1659876885507
GPR[EPVS]-1659876885507
========
if(nDigits==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876885509
GPR[SPVAP]-1659876885509
GPR[EPVAP]-1659876886270
GPR[EPVS]-1659876886270
========
if(COLUMN_BITS!=type){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876886272
GPR[SPVAP]-1659876886272
GPR[EPVAP]-1659876887457
GPR[SPVATF]-1659876887457
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876888534
GPR[EPVS]-1659876888534
========
if(decPt==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876888536
GPR[SPVAP]-1659876888536
GPR[EPVAP]-1659876889265
GPR[EPVS]-1659876889265
========
if(COLUMN_BITS!=Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876889267
GPR[SPVAP]-1659876889267
GPR[EPVAP]-1659876890444
GPR[SPVATF]-1659876890444
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876891537
GPR[EPVS]-1659876891537
========
if(type!=null){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876891540
GPR[SPVAP]-1659876891540
GPR[EPVAP]-1659876892281
GPR[EPVS]-1659876892281
========
if(type==null){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876892283
GPR[SPVAP]-1659876892283
GPR[EPVAP]-1659876893016
GPR[EPVS]-1659876893016
========
if(token==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876893018
GPR[SPVAP]-1659876893018
GPR[EPVAP]-1659876893756
GPR[EPVS]-1659876893756
========
if(type==Token.LAST_TOKEN){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876893757
GPR[SPVAP]-1659876893757
GPR[EPVAP]-1659876894932
GPR[SPVATF]-1659876894932
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876896025
GPR[EPVS]-1659876896025
========
append((char)type);
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876896027
GPR[SPVAP]-1659876896027
GPR[EPVAP]-1659876896766
GPR[EPVS]-1659876896766
========
append((char)Token.EOL);
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876896767
GPR[SPVAP]-1659876896767
GPR[EPVAP]-1659876897503
GPR[EPVS]-1659876897503
========
if(ndigits==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876897505
GPR[SPVAP]-1659876897505
GPR[EPVAP]-1659876898246
GPR[EPVS]-1659876898246
========
if(type==Token.FUNCTION){
sb.setLength(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876898248
GPR[SPVAP]-1659876898248
GPR[EPVAP]-1659876899431
GPR[SPVATF]-1659876899431
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876900531
GPR[EPVS]-1659876900531
========
if(type==Token.FUNCTION){
S=mhi=null;
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876900533
GPR[SPVAP]-1659876900533
GPR[EPVAP]-1659876901265
GPR[EPVS]-1659876901265
========
if(type==Token.FUNCTION){
COLUMN_BITS++;
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876901266
GPR[SPVAP]-1659876901266
GPR[EPVAP]-1659876901995
GPR[EPVS]-1659876901995
========
if(type==Token.FUNCTION){
S=mhi=null;
COLUMN_BITS++;

sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876901997
GPR[SPVAP]-1659876901997
GPR[EPVAP]-1659876902725
GPR[EPVS]-1659876902725
========
if(j1==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876902728
GPR[SPVAP]-1659876902728
GPR[EPVAP]-1659876903453
GPR[EPVS]-1659876903453
========
sof.append(str);
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876903454
GPR[SPVAP]-1659876903454
GPR[EPVAP]-1659876904183
GPR[EPVS]-1659876904183
========
sof.append('.');
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876904184
GPR[SPVAP]-1659876904184
GPR[EPVAP]-1659876904914
GPR[EPVS]-1659876904914
========
if(NodeUtil.isLatin(str)){
return s;
}
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876904917
GPR[SPVAP]-1659876904917
GPR[EPVAP]-1659876905655
GPR[EPVS]-1659876905655
========
if(type==FunctionNode.FUNCTION_EXPRESSION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876905657
GPR[SPVAP]-1659876905657
GPR[EPVAP]-1659876906833
GPR[SPVATF]-1659876906833
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876907939
GPR[EPVS]-1659876907939
========
if(topFunctionType==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876907941
GPR[SPVAP]-1659876907941
GPR[EPVAP]-1659876908674
GPR[EPVS]-1659876908674
========
if(type==Token.FUNCTION){
code.append(' ');
code.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876908677
GPR[SPVAP]-1659876908677
GPR[EPVAP]-1659876909431
GPR[EPVS]-1659876909431
========
if(lineLength==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876909433
GPR[SPVAP]-1659876909433
GPR[EPVAP]-1659876910167
GPR[EPVS]-1659876910167
========
if(type==Token.FUNCTION){
code.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876910169
GPR[SPVAP]-1659876910169
GPR[EPVAP]-1659876910888
GPR[EPVS]-1659876910888
========
if(type==Token.FUNCTION){
sb.append(' ');
code.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876910890
GPR[SPVAP]-1659876910890
GPR[EPVAP]-1659876911625
GPR[EPVS]-1659876911625
========
if(type==Token.FUNCTION){
sb.append(' ');
lineLength=0;
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876911626
GPR[SPVAP]-1659876911626
GPR[EPVAP]-1659876912362
GPR[EPVS]-1659876912362
========
if(type==Token.FUNCTION){
sb.append(' ');
COLUMN_BITS++;
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876912364
GPR[SPVAP]-1659876912364
GPR[EPVAP]-1659876913087
GPR[EPVS]-1659876913087
========
if(type==Token.FUNCTION){
sb.append(' ');
lineLength=0;
COLUMN_BITS++;

sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876913089
GPR[SPVAP]-1659876913089
GPR[EPVAP]-1659876913839
GPR[EPVS]-1659876913840
========
if(type==Token.FUNCTION){
lineLength=0;
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876913841
GPR[SPVAP]-1659876913841
GPR[EPVAP]-1659876914574
GPR[EPVS]-1659876914574
========
if(type==Token.FUNCTION){
COLUMN_BITS++;
lineLength=0;

sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876914576
GPR[SPVAP]-1659876914576
GPR[EPVAP]-1659876915334
GPR[EPVS]-1659876915334
========
if(lineLength==Token.FUNCTION){
code.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876915336
GPR[SPVAP]-1659876915336
GPR[EPVAP]-1659876916072
GPR[EPVS]-1659876916072
========
if(lineLength==Token.FUNCTION){
COLUMN_BITS++;
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876916074
GPR[SPVAP]-1659876916074
GPR[EPVAP]-1659876916801
GPR[EPVS]-1659876916801
========
if(type==Token.FUNCTION){
COLUMN_BITS++;
code.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876916802
GPR[SPVAP]-1659876916802
GPR[EPVAP]-1659876917539
GPR[EPVS]-1659876917539
========
if(lineLength==Token.FUNCTION){
COLUMN_BITS++;
code.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876917541
GPR[SPVAP]-1659876917541
GPR[EPVAP]-1659876918275
GPR[EPVS]-1659876918275
========
if(token==Token.LAST_TOKEN){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876918277
GPR[SPVAP]-1659876918277
GPR[EPVAP]-1659876919021
GPR[EPVS]-1659876919021
========
append((char)type);
if(token==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876919022
GPR[SPVAP]-1659876919022
GPR[EPVAP]-1659876919757
GPR[EPVS]-1659876919757
========
append((char)type);
if(type==Token.LAST_TOKEN){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876919760
GPR[SPVAP]-1659876919760
GPR[EPVAP]-1659876920513
GPR[EPVS]-1659876920513
========
append((char)type);
if(token==Token.LAST_TOKEN){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876920515
GPR[SPVAP]-1659876920515
GPR[EPVAP]-1659876921251
GPR[EPVS]-1659876921251
========
if(ilim==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876921252
GPR[SPVAP]-1659876921252
GPR[EPVAP]-1659876921993
GPR[EPVS]-1659876921993
========
if(d==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876921996
GPR[SPVAP]-1659876921996
GPR[EPVAP]-1659876922723
GPR[EPVS]-1659876922723
========
if(ds==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876922725
GPR[SPVAP]-1659876922725
GPR[EPVAP]-1659876923480
GPR[EPVS]-1659876923480
========
if(type==Token.FUNCTION){
sb.charAt(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876923482
GPR[SPVAP]-1659876923482
GPR[EPVAP]-1659876924662
GPR[SPVATF]-1659876924662
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876925755
GPR[EPVS]-1659876925755
========
if(type=='9'){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876925757
GPR[SPVAP]-1659876925757
GPR[EPVAP]-1659876926944
GPR[SPVATF]-1659876926944
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876928080
GPR[EPVS]-1659876928080
========
if(type!='9'){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876928082
GPR[SPVAP]-1659876928082
GPR[EPVAP]-1659876929288
GPR[SPVATF]-1659876929288
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876930387
GPR[EPVS]-1659876930387
========
if(INSTANCEOF==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876930389
GPR[SPVAP]-1659876930389
GPR[EPVAP]-1659876931156
GPR[EPVS]-1659876931156
========
if(type==Token.ASSIGN){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876931157
GPR[SPVAP]-1659876931157
GPR[EPVAP]-1659876932366
GPR[SPVATF]-1659876932366
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876933485
GPR[EPVS]-1659876933485
========
if(postProp==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876933488
GPR[SPVAP]-1659876933488
GPR[EPVAP]-1659876934219
GPR[EPVS]-1659876934219
========
if(type==Token.SCRIPT){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876934221
GPR[SPVAP]-1659876934221
GPR[EPVAP]-1659876935394
GPR[SPVATF]-1659876935394
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876936509
GPR[EPVS]-1659876936509
========
cur=next;
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876936512
GPR[SPVAP]-1659876936512
GPR[EPVAP]-1659876937304
GPR[EPVS]-1659876937304
========
swtich (type){
case Token.CATCH :
Preconditions.checkState(next.getChildCount()==3);
Preconditions.checkState(n.getFirstChild().getType()==Token.NAME);
traverseBranch(n.getFirstChild(),n);
traverseBranch(n.getFirstChild().getNext().getNext(),n);
break;

case Token.FUNCTION :
traverseFunction(n,parent);
break;

default :
for(Node next.getFirstChild()=n.getFirstChild();child!=null;){
Node next=child.getNext();
traverseBranch(child,n);
child=next;
}
break;

}
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876937306
GPR[SPVAP]-1659876937306
GPR[EPVAP]-1659876937928
GPR[EPVS]-1659876937928
========
if(dollarIndex==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876937931
GPR[SPVAP]-1659876937931
GPR[EPVAP]-1659876938661
GPR[EPVS]-1659876938661
========
if(type==Token.FUNCTION){
sb.substring(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876938663
GPR[SPVAP]-1659876938663
GPR[EPVAP]-1659876939853
GPR[SPVATF]-1659876939853
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876940965
GPR[EPVS]-1659876940965
========
if(type!=Token.FUNCTION){
sb.substring(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876940967
GPR[SPVAP]-1659876940967
GPR[EPVAP]-1659876942142
GPR[SPVATF]-1659876942142
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876943236
GPR[EPVS]-1659876943236
========
if(type!=-1){
sb.substring(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876943238
GPR[SPVAP]-1659876943238
GPR[EPVAP]-1659876944483
GPR[SPVATF]-1659876944483
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876945572
GPR[EPVS]-1659876945572
========
if(type==-1){
sb.substring(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876945574
GPR[SPVAP]-1659876945574
GPR[EPVAP]-1659876946782
GPR[SPVATF]-1659876946782
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876947874
GPR[EPVS]-1659876947874
========
if(type==Node.NON_SPECIALCALL){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876947876
GPR[SPVAP]-1659876947876
GPR[EPVAP]-1659876949075
GPR[SPVATF]-1659876949075
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876950181
GPR[EPVS]-1659876950181
========
if(type!=Node.NON_SPECIALCALL){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876950183
GPR[SPVAP]-1659876950183
GPR[EPVAP]-1659876951368
GPR[SPVATF]-1659876951368
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876952470
GPR[EPVS]-1659876952470
========
if(type==Token.NAME){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876952473
GPR[SPVAP]-1659876952473
GPR[EPVAP]-1659876953651
GPR[SPVATF]-1659876953651
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876954743
GPR[EPVS]-1659876954743
========
if(SCRIPT==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876954746
GPR[SPVAP]-1659876954746
GPR[EPVAP]-1659876955489
GPR[EPVS]-1659876955489
========
if(type==Token.BLOCK){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876955491
GPR[SPVAP]-1659876955491
GPR[EPVAP]-1659876956747
GPR[SPVATF]-1659876956747
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876957964
GPR[EPVS]-1659876957964
========
if(type==Token.GETELEM){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876957967
GPR[SPVAP]-1659876957967
GPR[EPVAP]-1659876959167
GPR[SPVATF]-1659876959167
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876960251
GPR[EPVS]-1659876960251
========
if(childCount==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876960254
GPR[SPVAP]-1659876960254
GPR[EPVAP]-1659876960989
GPR[EPVS]-1659876960989
========
if(type==Token.GETPROP){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876960991
GPR[SPVAP]-1659876960991
GPR[EPVAP]-1659876962160
GPR[SPVATF]-1659876962160
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876963254
GPR[EPVS]-1659876963254
========
if(secondArgumentType==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876963256
GPR[SPVAP]-1659876963256
GPR[EPVAP]-1659876964009
GPR[EPVS]-1659876964009
========
if(type==Token.DO){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876964012
GPR[SPVAP]-1659876964012
GPR[EPVAP]-1659876965207
GPR[SPVATF]-1659876965208
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876966285
GPR[EPVS]-1659876966285
========
if(type==Token.WHILE){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876966288
GPR[SPVAP]-1659876966288
GPR[EPVAP]-1659876967550
GPR[SPVATF]-1659876967550
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876968639
GPR[EPVS]-1659876968639
========
if(type==Token.FUNCTION){
allInstantiatedTypes.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876968643
GPR[SPVAP]-1659876968643
GPR[EPVAP]-1659876969379
GPR[EPVS]-1659876969379
========
if(type==Token.FUNCTION){
sb.add(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876969381
GPR[SPVAP]-1659876969381
GPR[EPVAP]-1659876970122
GPR[EPVS]-1659876970122
========
if(type==Token.STRING){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876970124
GPR[SPVAP]-1659876970124
GPR[EPVAP]-1659876971317
GPR[SPVATF]-1659876971317
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876972422
GPR[EPVS]-1659876972422
========
if(value==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876972424
GPR[SPVAP]-1659876972424
GPR[EPVAP]-1659876973158
GPR[EPVS]-1659876973158
========
if(type!=next.getDouble()){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876973161
GPR[SPVAP]-1659876973161
GPR[EPVAP]-1659876974352
GPR[SPVATF]-1659876974352
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876975445
GPR[EPVS]-1659876975445
========
if(type==next.getDouble()){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876975446
GPR[SPVAP]-1659876975446
GPR[EPVAP]-1659876976624
GPR[SPVATF]-1659876976624
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876977749
GPR[EPVS]-1659876977749
========
if(rvalInt==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876977750
GPR[SPVAP]-1659876977750
GPR[EPVAP]-1659876978483
GPR[EPVS]-1659876978483
========
if(typeSystem==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876978487
GPR[SPVAP]-1659876978487
GPR[EPVAP]-1659876979234
GPR[EPVS]-1659876979234
========
if(type==Token.FUNCTION){
sb.append(' ');
typesToSkip.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876979235
GPR[SPVAP]-1659876979235
GPR[EPVAP]-1659876979968
GPR[EPVS]-1659876979968
========
if(NAME==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876979970
GPR[SPVAP]-1659876979970
GPR[EPVAP]-1659876980698
GPR[EPVS]-1659876980698
========
if(NodeUtil.nodeTypeMayHaveSideEffects(next)&&type!=Token.NAME||type==Token.NAME&&sof.getType()==Token.CATCH){
next=null;
return ;
}
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876980699
GPR[SPVAP]-1659876980699
GPR[EPVAP]-1659876981464
GPR[EPVS]-1659876981464
========
next=next;
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876981465
GPR[SPVAP]-1659876981465
GPR[EPVAP]-1659876982657
GPR[SPVATF]-1659876982657
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876983751
GPR[EPVS]-1659876983751
========
if(type==Token.FUNCTION){
objectNode.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876983754
GPR[SPVAP]-1659876983754
GPR[EPVAP]-1659876984487
GPR[EPVS]-1659876984487
========
if(rvalInt!=Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876984489
GPR[SPVAP]-1659876984489
GPR[EPVAP]-1659876985212
GPR[EPVS]-1659876985212
========
if(rvalInt==next.getDouble()){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876985214
GPR[SPVAP]-1659876985214
GPR[EPVAP]-1659876985937
GPR[EPVS]-1659876985937
========
if(rvalInt!=next.getDouble()){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876985939
GPR[SPVAP]-1659876985939
GPR[EPVAP]-1659876986677
GPR[EPVS]-1659876986677
========
if(GETPROP==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876986681
GPR[SPVAP]-1659876986681
GPR[EPVAP]-1659876987415
GPR[EPVS]-1659876987415
========
if(GETELEM==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876987416
GPR[SPVAP]-1659876987416
GPR[EPVAP]-1659876988146
GPR[EPVS]-1659876988146
========
if(type==Token.CALL){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876988147
GPR[SPVAP]-1659876988147
GPR[EPVAP]-1659876989315
GPR[SPVATF]-1659876989315
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876990389
GPR[EPVS]-1659876990389
========
if(tt==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876990391
GPR[SPVAP]-1659876990391
GPR[EPVAP]-1659876991146
GPR[EPVS]-1659876991146
========
if(type==Token.FUNCTION){
consumeToken();
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876991147
GPR[SPVAP]-1659876991147
GPR[EPVAP]-1659876991879
GPR[EPVS]-1659876991879
========
if(type==Token.RETURN){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876991881
GPR[SPVAP]-1659876991881
GPR[EPVAP]-1659876993079
GPR[SPVATF]-1659876993079
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876994175
GPR[EPVS]-1659876994175
========
if(type==Token.FOR){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876994177
GPR[SPVAP]-1659876994177
GPR[EPVAP]-1659876995373
GPR[SPVATF]-1659876995373
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659876996446
GPR[EPVS]-1659876996446
========
if(GETPROP==Token.CALL){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876996449
GPR[SPVAP]-1659876996449
GPR[EPVAP]-1659876997181
GPR[EPVS]-1659876997181
========
if(GETELEM==Token.CALL){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876997183
GPR[SPVAP]-1659876997183
GPR[EPVAP]-1659876997914
GPR[EPVS]-1659876997914
========
if(type==Token.CONST){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659876997917
GPR[SPVAP]-1659876997917
GPR[EPVAP]-1659876999095
GPR[SPVATF]-1659876999095
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877000196
GPR[EPVS]-1659877000196
========
if(context==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877000198
GPR[SPVAP]-1659877000198
GPR[EPVAP]-1659877000923
GPR[EPVS]-1659877000923
========
mustMatchToken(Token.NAME,"msg.bad.var");
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877000926
GPR[SPVAP]-1659877000926
GPR[EPVAP]-1659877001659
GPR[EPVS]-1659877001659
========
first=false;
if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877001660
GPR[SPVAP]-1659877001660
GPR[EPVAP]-1659877002398
GPR[EPVS]-1659877002398
========
if(type==Token.FUNCTION){
if(printSource){
add("(");
}
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877002402
GPR[SPVAP]-1659877002402
GPR[EPVAP]-1659877003191
GPR[EPVS]-1659877003191
========
if(type==Token.FUNCTION){
add("function");
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877003192
GPR[SPVAP]-1659877003192
GPR[EPVAP]-1659877003938
GPR[EPVS]-1659877003938
========
if(type==Token.FUNCTION){
add(first);
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877003939
GPR[SPVAP]-1659877003939
GPR[EPVAP]-1659877004667
GPR[EPVS]-1659877004667
========
if(type==Token.FUNCTION){
add(first.getNext());
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877004669
GPR[SPVAP]-1659877004669
GPR[EPVAP]-1659877005663
GPR[EPVS]-1659877005663
========
if(type==Token.FUNCTION){
add(last,Context.PRESERVE_BLOCK);
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877005668
GPR[SPVAP]-1659877005668
GPR[EPVAP]-1659877006784
GPR[EPVS]-1659877006784
========
if(type==Token.FUNCTION){
if(printSource){
add(")");
}
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877006786
GPR[SPVAP]-1659877006786
GPR[EPVAP]-1659877007540
GPR[EPVS]-1659877007540
========
if(type==Token.FUNCTION){
if(printSource){
add("(");
}
add("function");
add(first);
add(first.getNext());
add(last,Context.PRESERVE_BLOCK);
if(printSource){
add(")");
}

sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877007541
GPR[SPVAP]-1659877007541
GPR[EPVAP]-1659877008304
GPR[EPVS]-1659877008304
========
case Token.SCRIPT :

if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877008305
GPR[SPVAP]-1659877008306
GPR[EPVAP]-1659877008903
GPR[EPVS]-1659877008903
========
if(type==Token.EXPR_RESULT){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877008906
GPR[SPVAP]-1659877008906
GPR[EPVAP]-1659877010130
GPR[SPVATF]-1659877010130
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877011230
GPR[EPVS]-1659877011230
========
if(IF==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877011233
GPR[SPVAP]-1659877011234
GPR[EPVAP]-1659877011973
GPR[EPVS]-1659877011973
========
if(type==Token.HOOK){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877011975
GPR[SPVAP]-1659877011975
GPR[EPVAP]-1659877013163
GPR[SPVATF]-1659877013163
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877014243
GPR[EPVS]-1659877014243
========
if(optArgs==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877014246
GPR[SPVAP]-1659877014246
GPR[EPVAP]-1659877014969
GPR[EPVS]-1659877014969
========
if(type==Token.FUNCTION){
sb.report(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877014970
GPR[SPVAP]-1659877014970
GPR[EPVAP]-1659877015718
GPR[EPVS]-1659877015718
========
if(type==Token.FUNCTION){
parent.getParent().removeChild(parent);
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877015720
GPR[SPVAP]-1659877015720
GPR[EPVAP]-1659877016899
GPR[SPVATF]-1659877016899
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877017975
GPR[EPVS]-1659877017975
========
if(type==null){
parent.getParent().removeChild(parent);
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877017977
GPR[SPVAP]-1659877017977
GPR[EPVAP]-1659877018755
GPR[EPVS]-1659877018755
========
if(type!=jsType){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877018756
GPR[SPVAP]-1659877018756
GPR[EPVAP]-1659877019523
GPR[EPVS]-1659877019523
========
if(type==jsType){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877019524
GPR[SPVAP]-1659877019524
GPR[EPVAP]-1659877020259
GPR[EPVS]-1659877020259
========
if(type==Token.FUNCTION){
redeclare(fn,first.getString(),jsType);
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877020261
GPR[SPVAP]-1659877020261
GPR[EPVAP]-1659877020999
GPR[EPVS]-1659877020999
========
case Token.CATCH :

if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877021000
GPR[SPVAP]-1659877021000
GPR[EPVAP]-1659877021579
GPR[EPVS]-1659877021579
========
if(intIndex==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877021581
GPR[SPVAP]-1659877021581
GPR[EPVAP]-1659877022334
GPR[EPVS]-1659877022334
========
if(NOT==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877022338
GPR[SPVAP]-1659877022338
GPR[EPVAP]-1659877023060
GPR[EPVS]-1659877023060
========
if(INC==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877023062
GPR[SPVAP]-1659877023062
GPR[EPVAP]-1659877023799
GPR[EPVS]-1659877023799
========
if(type==Token.DEC){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877023800
GPR[SPVAP]-1659877023800
GPR[EPVAP]-1659877024970
GPR[SPVATF]-1659877024970
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877026041
GPR[EPVS]-1659877026041
========
if(CALL==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877026044
GPR[SPVAP]-1659877026044
GPR[EPVAP]-1659877026787
GPR[EPVS]-1659877026787
========
if(type==Token.ADD){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877026790
GPR[SPVAP]-1659877026790
GPR[EPVAP]-1659877027986
GPR[SPVATF]-1659877027986
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877029064
GPR[EPVS]-1659877029064
========
case Token.ASSIGN :

if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877029067
GPR[SPVAP]-1659877029067
GPR[EPVAP]-1659877029643
GPR[EPVS]-1659877029643
========
if(type==Token.FUNCTION){
compiler.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877029646
GPR[SPVAP]-1659877029646
GPR[EPVAP]-1659877030400
GPR[EPVS]-1659877030400
========
if(SCRIPT==Token.BLOCK){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877030402
GPR[SPVAP]-1659877030402
GPR[EPVAP]-1659877031133
GPR[EPVS]-1659877031133
========
if(SCRIPT==Token.FUNCTION){
sb.report(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877031134
GPR[SPVAP]-1659877031134
GPR[EPVAP]-1659877031859
GPR[EPVS]-1659877031859
========
if(type==Token.BLOCK){
sb.report(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877031860
GPR[SPVAP]-1659877031860
GPR[EPVAP]-1659877032584
GPR[EPVS]-1659877032584
========
if(SCRIPT==Token.BLOCK){
sb.report(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877032587
GPR[SPVAP]-1659877032587
GPR[EPVAP]-1659877033313
GPR[EPVS]-1659877033313
========
if(LT==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877033315
GPR[SPVAP]-1659877033315
GPR[EPVAP]-1659877034054
GPR[EPVS]-1659877034054
========
if(type==Token.GT){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877034055
GPR[SPVAP]-1659877034055
GPR[EPVAP]-1659877035230
GPR[SPVATF]-1659877035230
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877036294
GPR[EPVS]-1659877036294
========
if(BLOCK==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877036295
GPR[SPVAP]-1659877036295
GPR[EPVAP]-1659877037025
GPR[EPVS]-1659877037025
========
if(AND==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877037033
GPR[SPVAP]-1659877037033
GPR[EPVAP]-1659877037773
GPR[EPVS]-1659877037773
========
if(type==Token.OR){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877037775
GPR[SPVAP]-1659877037775
GPR[EPVAP]-1659877038948
GPR[SPVATF]-1659877038948
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877040043
GPR[EPVS]-1659877040043
========
if(BITOR==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877040045
GPR[SPVAP]-1659877040045
GPR[EPVAP]-1659877040784
GPR[EPVS]-1659877040784
========
if(type==Token.BITAND){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877040786
GPR[SPVAP]-1659877040786
GPR[EPVAP]-1659877041981
GPR[SPVATF]-1659877041981
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877043086
GPR[EPVS]-1659877043086
========
if(OR==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877043090
GPR[SPVAP]-1659877043090
GPR[EPVAP]-1659877043815
GPR[EPVS]-1659877043815
========
if(type==Token.AND){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877043816
GPR[SPVAP]-1659877043816
GPR[EPVAP]-1659877044987
GPR[SPVATF]-1659877044987
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877046107
GPR[EPVS]-1659877046107
========
if((type&TI_CHECK_LABEL)==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877046109
GPR[SPVAP]-1659877046109
GPR[EPVAP]-1659877046833
GPR[EPVS]-1659877046833
========
if(ttFlagged==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877046834
GPR[SPVAP]-1659877046834
GPR[EPVAP]-1659877047569
GPR[EPVS]-1659877047569
========
if(TI_CHECK_LABEL==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877047570
GPR[SPVAP]-1659877047570
GPR[EPVAP]-1659877048303
GPR[EPVS]-1659877048303
========
case Token.NUMBER :

if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877048305
GPR[SPVAP]-1659877048305
GPR[EPVAP]-1659877048889
GPR[EPVS]-1659877048889
========
if(LSH==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877048892
GPR[SPVAP]-1659877048892
GPR[EPVAP]-1659877049628
GPR[EPVS]-1659877049628
========
if(RSH==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877049630
GPR[SPVAP]-1659877049630
GPR[EPVAP]-1659877050365
GPR[EPVS]-1659877050365
========
if(type==Token.URSH){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877050366
GPR[SPVAP]-1659877050366
GPR[EPVAP]-1659877051538
GPR[SPVATF]-1659877051538
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877052634
GPR[EPVS]-1659877052634
========
if(SUB==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877052636
GPR[SPVAP]-1659877052636
GPR[EPVAP]-1659877053373
GPR[EPVS]-1659877053373
========
if(MUL==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877053375
GPR[SPVAP]-1659877053375
GPR[EPVAP]-1659877054107
GPR[EPVS]-1659877054107
========
if(type==Token.DIV){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877054108
GPR[SPVAP]-1659877054108
GPR[EPVAP]-1659877055311
GPR[SPVATF]-1659877055311
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877056406
GPR[EPVS]-1659877056406
========
case Token.GETPROP :

if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877056409
GPR[SPVAP]-1659877056409
GPR[EPVAP]-1659877056988
GPR[EPVS]-1659877056988
========
if(COLUMN_BITS++==type){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877056991
GPR[SPVAP]-1659877056991
GPR[EPVAP]-1659877057763
GPR[EPVS]-1659877057763
========
if(COLUMN_BITS++==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877057765
GPR[SPVAP]-1659877057765
GPR[EPVAP]-1659877058493
GPR[EPVS]-1659877058493
========
if(count==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877058495
GPR[SPVAP]-1659877058495
GPR[EPVAP]-1659877059227
GPR[EPVS]-1659877059227
========
if(type==first){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877059230
GPR[SPVAP]-1659877059230
GPR[EPVAP]-1659877059960
GPR[EPVS]-1659877059960
========
if(null==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877059962
GPR[SPVAP]-1659877059962
GPR[EPVAP]-1659877060700
GPR[EPVS]-1659877060700
========
if(null!=this.last.next){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877060702
GPR[SPVAP]-1659877060702
GPR[EPVAP]-1659877061879
GPR[SPVATF]-1659877061879
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877062965
GPR[EPVS]-1659877062965
========
if(type==this.last.next){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877062966
GPR[SPVAP]-1659877062966
GPR[EPVAP]-1659877063711
GPR[EPVS]-1659877063711
========
if(GT==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877063713
GPR[SPVAP]-1659877063713
GPR[EPVAP]-1659877064457
GPR[EPVS]-1659877064457
========
if(LE==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877064459
GPR[SPVAP]-1659877064459
GPR[EPVAP]-1659877065188
GPR[EPVS]-1659877065188
========
if(GE==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877065189
GPR[SPVAP]-1659877065189
GPR[EPVAP]-1659877065915
GPR[EPVS]-1659877065915
========
if(EQ==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877065917
GPR[SPVAP]-1659877065917
GPR[EPVAP]-1659877066671
GPR[EPVS]-1659877066671
========
if(NE==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877066673
GPR[SPVAP]-1659877066673
GPR[EPVAP]-1659877067406
GPR[EPVS]-1659877067406
========
if(SHEQ==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877067407
GPR[SPVAP]-1659877067407
GPR[EPVAP]-1659877068135
GPR[EPVS]-1659877068135
========
if(type==Token.SHNE){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877068136
GPR[SPVAP]-1659877068136
GPR[EPVAP]-1659877069311
GPR[SPVATF]-1659877069311
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877070420
GPR[EPVS]-1659877070420
========
if(LT==Token.SHNE){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877070421
GPR[SPVAP]-1659877070421
GPR[EPVAP]-1659877071157
GPR[EPVS]-1659877071157
========
if(type==Token.FUNCTION){
++COLUMN_BITS;
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877071160
GPR[SPVAP]-1659877071160
GPR[EPVAP]-1659877071912
GPR[EPVS]-1659877071912
========
case FUNCTION_END :

if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877071914
GPR[SPVAP]-1659877071914
GPR[EPVAP]-1659877072495
GPR[EPVS]-1659877072495
========
if(references==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877072497
GPR[SPVAP]-1659877072497
GPR[EPVAP]-1659877073233
GPR[EPVS]-1659877073233
========
if(this instanceof StringNode){
sb.report(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877075367
GPR[SPVAP]-1659877075367
GPR[EPVAP]-1659877076100
GPR[EPVS]-1659877076100
========
if(first.getType()==Token.NEW){
return ;
}
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877076102
GPR[SPVAP]-1659877076102
GPR[EPVAP]-1659877077272
GPR[SPVATF]-1659877077272
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877078356
GPR[EPVS]-1659877078356
========
if(this instanceof StringNode){
sb.append(' ');
sb.report(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877078359
GPR[SPVAP]-1659877078359
GPR[EPVAP]-1659877079090
GPR[EPVS]-1659877079090
========
if(this instanceof StringNode){
sb.append(' ');
if((ObjectType)dereference(next.getFirstChild().getJSType())==null){
return ;
}
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877079092
GPR[SPVAP]-1659877079092
GPR[EPVAP]-1659877079837
GPR[EPVS]-1659877079837
========
if(getJSType(first.getFirstChild()).restrictByNotNullOrUndefined() instanceof ObjectType&&(((ObjectType)objType).isPropertyInExterns(first.getLastChild().getString()))){
List<Action> Lists.newArrayList()=Lists.newArrayList();
Iterator<Node> ((FunctionType)jsType).getParameters().iterator()=((FunctionType)jsType).getParameters().iterator();
Iterator<Node> sof=next.children().iterator();
argumentIter.next();
while(paramIter.hasNext()&&argumentIter.hasNext()){
Node sof.next()=argumentIter.next();
Node fn=paramIter.next();
if(arg.getJSType() instanceof FunctionType){
actions.addAll(getImplicitActionsFromArgument(arg,((FunctionType)arg.getJSType()).getTypeOfThis(),param.getJSType()));
}
}
return actions;
}
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877079841
GPR[SPVAP]-1659877079841
GPR[EPVAP]-1659877080446
GPR[EPVS]-1659877080446
========
if(this instanceof StringNode){
objectNode.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877080449
GPR[SPVAP]-1659877080449
GPR[EPVAP]-1659877081187
GPR[EPVS]-1659877081187
========
case Token.FUNCTION :

if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}

========
GPR[SPVS]-1659877081192
GPR[SPVAP]-1659877081192
GPR[EPVAP]-1659877081776
GPR[EPVS]-1659877081776
========
if(lineno!=-1){
sb.append(str);
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877083008
GPR[SPVAP]-1659877083008
GPR[EPVAP]-1659877083745
GPR[EPVS]-1659877083745
========
if(lineno!=-1){
sb.append('\n');
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877083747
GPR[SPVAP]-1659877083747
GPR[EPVAP]-1659877084939
GPR[SPVATF]-1659877084939
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877086040
GPR[EPVS]-1659877086040
========
if(lineno!=-1){
sb.append(str);
sb.append('\n');

sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877086042
GPR[SPVAP]-1659877086042
GPR[EPVAP]-1659877086798
GPR[EPVS]-1659877086798
========
if(lineno!=-1){
b.append(' ');
b.append(lineno);
}

========
GPR[SPVS]-1659877086801
GPR[SPVAP]-1659877086801
GPR[EPVAP]-1659877087535
GPR[EPVS]-1659877087535
========
if(error.sourceName!=null){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877087537
GPR[SPVAP]-1659877087537
GPR[EPVAP]-1659877088269
GPR[EPVS]-1659877088269
========
if(error.sourceName!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877088270
GPR[SPVAP]-1659877088270
GPR[EPVAP]-1659877089039
GPR[EPVS]-1659877089039
========
if(lineno!=null){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877089040
GPR[SPVAP]-1659877089040
GPR[EPVAP]-1659877089771
GPR[EPVS]-1659877089771
========
if(lineno!=-1){
b.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877089773
GPR[SPVAP]-1659877089773
GPR[EPVAP]-1659877090513
GPR[EPVS]-1659877090513
========
if(lineno!=-1){
sb.append(' ');
b.append(lineno);
}

========
GPR[SPVS]-1659877090514
GPR[SPVAP]-1659877090514
GPR[EPVAP]-1659877091273
GPR[EPVS]-1659877091273
========
if(lineno!=-1){
sb.append(' ');
sb.append(error.lineNumber);
}

========
GPR[SPVS]-1659877091274
GPR[SPVAP]-1659877091274
GPR[EPVAP]-1659877092031
GPR[EPVS]-1659877092031
========
if(lineno!=-1){
sb.append(": ");
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877092033
GPR[SPVAP]-1659877092033
GPR[EPVAP]-1659877093202
GPR[SPVATF]-1659877093202
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877094270
GPR[EPVS]-1659877094270
========
sb.append(getLevelName(printType?CheckLevel.WARNING:CheckLevel.ERROR));
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877094272
GPR[SPVAP]-1659877094272
GPR[EPVAP]-1659877095011
GPR[EPVS]-1659877095011
========
sb.append(" - ");
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877095012
GPR[SPVAP]-1659877095012
GPR[EPVAP]-1659877096201
GPR[SPVATF]-1659877096201
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877097302
GPR[EPVS]-1659877097302
========
sb.append(" - ");
if(lineno!=-1){
sb.append(": ");
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877097304
GPR[SPVAP]-1659877097304
GPR[EPVAP]-1659877098495
GPR[SPVATF]-1659877098495
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877099560
GPR[EPVS]-1659877099560
========
if(lineno!=-1){
sb.append(' ');
sb.append(call.returnType);
}

========
GPR[SPVS]-1659877099563
GPR[SPVAP]-1659877099563
GPR[EPVAP]-1659877100299
GPR[EPVS]-1659877100299
========
sb.append(")");
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877100301
GPR[SPVAP]-1659877100301
GPR[EPVAP]-1659877101463
GPR[SPVATF]-1659877101463
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877102548
GPR[EPVS]-1659877102548
========
sb.append(")");
if(lineno!=-1){
b.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877102549
GPR[SPVAP]-1659877102549
GPR[EPVAP]-1659877103277
GPR[EPVS]-1659877103277
========
sb.append(")");
if(lineno!=-1){
sb.append(' ');
b.append(lineno);
}

========
GPR[SPVS]-1659877103278
GPR[SPVAP]-1659877103278
GPR[EPVAP]-1659877104007
GPR[EPVS]-1659877104007
========
sb.append(")");
if(lineno!=-1){
b.append(' ');
b.append(lineno);
}

========
GPR[SPVS]-1659877104008
GPR[SPVAP]-1659877104008
GPR[EPVAP]-1659877104743
GPR[EPVS]-1659877104743
========
if(lineno!=-1){
protectHex=true;
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877104745
GPR[SPVAP]-1659877104745
GPR[EPVAP]-1659877105480
GPR[EPVS]-1659877105480
========
sb.append(" }");
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877105482
GPR[SPVAP]-1659877105483
GPR[EPVAP]-1659877106669
GPR[SPVATF]-1659877106669
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877107768
GPR[EPVS]-1659877107768
========
if(lineno==-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877107769
GPR[SPVAP]-1659877107770
GPR[EPVAP]-1659877108951
GPR[SPVATF]-1659877108951
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877110050
GPR[EPVS]-1659877110050
========
if(lineno==Token.NUMBER){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877110051
GPR[SPVAP]-1659877110051
GPR[EPVAP]-1659877111219
GPR[SPVATF]-1659877111219
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877112313
GPR[EPVS]-1659877112313
========
if(lineno!=Token.NUMBER){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877112314
GPR[SPVAP]-1659877112314
GPR[EPVAP]-1659877113518
GPR[SPVATF]-1659877113518
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877114599
GPR[EPVS]-1659877114599
========
if(lineno!=-1){
hexSize=2;
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877114601
GPR[SPVAP]-1659877114601
GPR[EPVAP]-1659877115346
GPR[EPVS]-1659877115346
========
if(lineno!=-1){
hexSize=4;
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877115347
GPR[SPVAP]-1659877115347
GPR[EPVAP]-1659877116084
GPR[EPVS]-1659877116084
========
if(Token.EOL!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877116086
GPR[SPVAP]-1659877116086
GPR[EPVAP]-1659877117254
GPR[SPVATF]-1659877117254
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877118324
GPR[EPVS]-1659877118324
========
if(Token.EOL==-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877118326
GPR[SPVAP]-1659877118326
GPR[EPVAP]-1659877119526
GPR[SPVATF]-1659877119527
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877120606
GPR[EPVS]-1659877120606
========
new StringBuffer(str).append(" (");
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877120608
GPR[SPVAP]-1659877120608
GPR[EPVAP]-1659877121369
GPR[EPVS]-1659877121369
========
if(lineno!=-1){
sb.setLength(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877121371
GPR[SPVAP]-1659877121371
GPR[EPVAP]-1659877122549
GPR[SPVATF]-1659877122549
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877123644
GPR[EPVS]-1659877123644
========
COLUMN_BITS++;
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877123645
GPR[SPVAP]-1659877123645
GPR[EPVAP]-1659877124400
GPR[EPVS]-1659877124400
========
append((char)lineno);
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877124401
GPR[SPVAP]-1659877124401
GPR[EPVAP]-1659877125133
GPR[EPVS]-1659877125133
========
append((char)Token.EOL);
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877125135
GPR[SPVAP]-1659877125135
GPR[EPVAP]-1659877125866
GPR[EPVS]-1659877125866
========
sb.append(") {}");
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877125868
GPR[SPVAP]-1659877125868
GPR[EPVAP]-1659877127100
GPR[SPVATF]-1659877127100
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877128247
GPR[EPVS]-1659877128247
========
if(lineno==FunctionNode.FUNCTION_EXPRESSION){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877128250
GPR[SPVAP]-1659877128250
GPR[EPVAP]-1659877129443
GPR[SPVATF]-1659877129443
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877130529
GPR[EPVS]-1659877130529
========
if(lineno!=FunctionNode.FUNCTION_EXPRESSION){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877130531
GPR[SPVAP]-1659877130531
GPR[EPVAP]-1659877131715
GPR[SPVATF]-1659877131716
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877132815
GPR[EPVS]-1659877132815
========
if(lineno!=-1){
code.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877132816
GPR[SPVAP]-1659877132816
GPR[EPVAP]-1659877133545
GPR[EPVS]-1659877133545
========
if(lineno!=-1){
COLUMN_BITS++;
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877133546
GPR[SPVAP]-1659877133546
GPR[EPVAP]-1659877134274
GPR[EPVS]-1659877134274
========
if(lineno!=-1){
lineLength=0;
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877134276
GPR[SPVAP]-1659877134276
GPR[EPVAP]-1659877135001
GPR[EPVS]-1659877135001
========
if(lineno!=-1){
COLUMN_BITS++;
lineLength=0;

sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877135003
GPR[SPVAP]-1659877135003
GPR[EPVAP]-1659877135726
GPR[EPVS]-1659877135726
========
COLUMN_BITS++;
if(lineno!=-1){
sb.setLength(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877135729
GPR[SPVAP]-1659877135729
GPR[EPVAP]-1659877136460
GPR[EPVS]-1659877136460
========
if(lineno!=-1){
code.append(' ');
code.append(lineno);
}

========
GPR[SPVS]-1659877136462
GPR[SPVAP]-1659877136462
GPR[EPVAP]-1659877137198
GPR[EPVS]-1659877137198
========
if(lineno!=-1){
sb.append(' ');
code.append(lineno);
}

========
GPR[SPVS]-1659877137200
GPR[SPVAP]-1659877137200
GPR[EPVAP]-1659877137930
GPR[EPVS]-1659877137930
========
if(lineno!=-1){
sb.append(' ');
lineLength=0;
sb.append(lineno);
}

========
GPR[SPVS]-1659877137932
GPR[SPVAP]-1659877137932
GPR[EPVAP]-1659877138673
GPR[EPVS]-1659877138673
========
if(lineno!=-1){
sb.append(' ');
COLUMN_BITS++;
sb.append(lineno);
}

========
GPR[SPVS]-1659877138674
GPR[SPVAP]-1659877138674
GPR[EPVAP]-1659877139411
GPR[EPVS]-1659877139411
========
if(lineno!=-1){
sb.append(' ');
lineLength=0;
COLUMN_BITS++;

sb.append(lineno);
}

========
GPR[SPVS]-1659877139413
GPR[SPVAP]-1659877139413
GPR[EPVAP]-1659877140148
GPR[EPVS]-1659877140148
========
appendInferredPaths(str);
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877140150
GPR[SPVAP]-1659877140151
GPR[EPVAP]-1659877140891
GPR[EPVS]-1659877140891
========
sb.append(";\n");
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877140893
GPR[SPVAP]-1659877140893
GPR[EPVAP]-1659877142070
GPR[SPVATF]-1659877142070
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877143144
GPR[EPVS]-1659877143144
========
sb.append(";\n");
if(lineno!=null){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877143146
GPR[SPVAP]-1659877143146
GPR[EPVAP]-1659877143880
GPR[EPVS]-1659877143880
========
appendInferredPaths(getExportedPath());
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877143881
GPR[SPVAP]-1659877143881
GPR[EPVAP]-1659877144617
GPR[EPVS]-1659877144617
========
if(lineno==COLUMN_BITS){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877144619
GPR[SPVAP]-1659877144619
GPR[EPVAP]-1659877145795
GPR[SPVATF]-1659877145795
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877146874
GPR[EPVS]-1659877146874
========
if(lineno!=COLUMN_BITS){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877146876
GPR[SPVAP]-1659877146876
GPR[EPVAP]-1659877148098
GPR[SPVATF]-1659877148098
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877149189
GPR[EPVS]-1659877149189
========
COLUMN_BITS=lineno;
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877149191
GPR[SPVAP]-1659877149191
GPR[EPVAP]-1659877149921
GPR[EPVS]-1659877149921
========
if(lineno!=-1){
sb.substring(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877149922
GPR[SPVAP]-1659877149922
GPR[EPVAP]-1659877151089
GPR[SPVATF]-1659877151089
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877152198
GPR[EPVS]-1659877152198
========
if(lineno!=-1){
if(str.length()==0){
return sb.substring(0,builder.length()-1);
}
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877152200
GPR[SPVAP]-1659877152200
GPR[EPVAP]-1659877152930
GPR[EPVS]-1659877152930
========
sb.append("  ");
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877152932
GPR[SPVAP]-1659877152932
GPR[EPVAP]-1659877154123
GPR[SPVATF]-1659877154123
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877155206
GPR[EPVS]-1659877155206
========
sb.append("  ");
if(lineno!=-1){
sb.substring(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877155208
GPR[SPVAP]-1659877155208
GPR[EPVAP]-1659877156386
GPR[SPVATF]-1659877156386
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877157477
GPR[EPVS]-1659877157477
========
if(lineno!=Node.NON_SPECIALCALL){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877157479
GPR[SPVAP]-1659877157479
GPR[EPVAP]-1659877158649
GPR[SPVATF]-1659877158649
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877159734
GPR[EPVS]-1659877159734
========
if(lineno==null){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877159736
GPR[SPVAP]-1659877159736
GPR[EPVAP]-1659877160471
GPR[EPVS]-1659877160471
========
if(Token.LC!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877160475
GPR[SPVAP]-1659877160475
GPR[EPVAP]-1659877161643
GPR[SPVATF]-1659877161643
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877162749
GPR[EPVS]-1659877162749
========
if(Token.LC==-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877162751
GPR[SPVAP]-1659877162751
GPR[EPVAP]-1659877163928
GPR[SPVATF]-1659877163928
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877165025
GPR[EPVS]-1659877165025
========
if(Token.NAME!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877165027
GPR[SPVAP]-1659877165027
GPR[EPVAP]-1659877166199
GPR[SPVATF]-1659877166199
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877167279
GPR[EPVS]-1659877167279
========
if(Token.NAME==-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877167281
GPR[SPVAP]-1659877167281
GPR[EPVAP]-1659877168501
GPR[SPVATF]-1659877168501
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877169588
GPR[EPVS]-1659877169588
========
if(Token.SEMI!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877169590
GPR[SPVAP]-1659877169590
GPR[EPVAP]-1659877170759
GPR[SPVATF]-1659877170759
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877171858
GPR[EPVS]-1659877171858
========
case Token.RC :

if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}

========
GPR[SPVS]-1659877171861
GPR[SPVAP]-1659877171861
GPR[EPVAP]-1659877172434
GPR[EPVS]-1659877172434
========
sb.append(getLevelName(printType?CheckLevel.WARNING:CheckLevel.ERROR));
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877173816
GPR[SPVAP]-1659877173816
GPR[EPVAP]-1659877174547
GPR[EPVS]-1659877174547
========
sb.append(" - ");
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877174549
GPR[SPVAP]-1659877174549
GPR[EPVAP]-1659877175738
GPR[SPVATF]-1659877175738
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877176821
GPR[EPVS]-1659877176821
========
sb.append("<li>"+nameAnchor(node.name));
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877176824
GPR[SPVAP]-1659877176824
GPR[EPVAP]-1659877177570
GPR[EPVS]-1659877177570
========
sb.append(") {}");
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877177572
GPR[SPVAP]-1659877177572
GPR[EPVAP]-1659877178733
GPR[SPVATF]-1659877178733
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877179829
GPR[EPVS]-1659877179829
========
sb.append('_');
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877179831
GPR[SPVAP]-1659877179831
GPR[EPVAP]-1659877181008
GPR[SPVATF]-1659877181008
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877182106
GPR[EPVS]-1659877182106
========
sb.append(Long.toHexString(serialVersionUID));
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877182108
GPR[SPVAP]-1659877182108
GPR[EPVAP]-1659877183310
GPR[SPVATF]-1659877183310
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877184411
GPR[EPVS]-1659877184411
========
sb.append('_');
sb.append(Long.toHexString(serialVersionUID));
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877184412
GPR[SPVAP]-1659877184413
GPR[EPVAP]-1659877185594
GPR[SPVATF]-1659877185594
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877186683
GPR[EPVS]-1659877186683
========
if(sb.length()>0){
sb.append('.');
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877186685
GPR[SPVAP]-1659877186685
GPR[EPVAP]-1659877187871
GPR[SPVATF]-1659877187871
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877188962
GPR[EPVS]-1659877188962
========
sb.append(str);
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877188964
GPR[SPVAP]-1659877188964
GPR[EPVAP]-1659877189693
GPR[EPVS]-1659877189693
========
append((char)lineno);
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877189695
GPR[SPVAP]-1659877189695
GPR[EPVAP]-1659877190440
GPR[EPVS]-1659877190440
========
append((char)Token.EOL);
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877190441
GPR[SPVAP]-1659877190441
GPR[EPVAP]-1659877191166
GPR[EPVS]-1659877191166
========
sb.append("(");
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877191167
GPR[SPVAP]-1659877191167
GPR[EPVAP]-1659877193243
GPR[SPVATF]-1659877193243
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877194409
GPR[EPVS]-1659877194409
========
COLUMN_BITS+=str.length();
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877194411
GPR[SPVAP]-1659877194411
GPR[EPVAP]-1659877195176
GPR[EPVS]-1659877195176
========
if(sb.length()>0){
builder.append(' ');
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877195179
GPR[SPVAP]-1659877195179
GPR[EPVAP]-1659877195937
GPR[EPVS]-1659877195937
========
mustMatchToken(Token.NAME,"msg.bad.var");
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877195941
GPR[SPVAP]-1659877195941
GPR[EPVAP]-1659877196698
GPR[EPVS]-1659877196698
========
COLUMN_BITS=lineno;
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877196700
GPR[SPVAP]-1659877196700
GPR[EPVAP]-1659877197438
GPR[EPVS]-1659877197438
========
next=wrapNode(Token.BANG,typeNode);
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877197441
GPR[SPVAP]-1659877197441
GPR[EPVAP]-1659877198174
GPR[EPVS]-1659877198174
========
sourcePosition=mergeLineCharNo(COLUMN_BITS,lineno);
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877198177
GPR[SPVAP]-1659877198177
GPR[EPVAP]-1659877198910
GPR[EPVS]-1659877198910
========
sb.append("  ");
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877198914
GPR[SPVAP]-1659877198914
GPR[EPVAP]-1659877200099
GPR[SPVATF]-1659877200100
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877201168
GPR[EPVS]-1659877201168
========
case EXTENDS :

if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877201170
GPR[SPVAP]-1659877201170
GPR[EPVAP]-1659877201745
GPR[EPVS]-1659877201745
========
if(printSource){
int lineno=getLineno();
if(lineno!=null){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877201749
GPR[SPVAP]-1659877201749
GPR[EPVAP]-1659877202472
GPR[EPVS]-1659877202472
========
if(printSource){
lineEndChar=-1;
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877202475
GPR[SPVAP]-1659877202475
GPR[EPVAP]-1659877203203
GPR[EPVS]-1659877203203
========
if(printSource){
lineStart=sourcePosition-1;
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877203205
GPR[SPVAP]-1659877203205
GPR[EPVAP]-1659877203935
GPR[EPVS]-1659877203935
========
if(printSource){
COLUMN_BITS++;
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877203937
GPR[SPVAP]-1659877203937
GPR[EPVAP]-1659877204663
GPR[EPVS]-1659877204663
========
if(printSource){
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;

int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877204664
GPR[SPVAP]-1659877204664
GPR[EPVAP]-1659877205460
GPR[EPVS]-1659877205460
========
if(next!=null&&!printType){
typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877205463
GPR[SPVAP]-1659877205463
GPR[EPVAP]-1659877206212
GPR[EPVS]-1659877206212
========
if(printSource){
if(COLUMN_BITS==ScriptOrFnNode.DUPLICATE_CONST)addError("msg.const.redecl",str);else if(COLUMN_BITS==ScriptOrFnNode.DUPLICATE_PARAMETER)addStrictWarning("msg.var.hides.arg",str);else if(COLUMN_BITS==ScriptOrFnNode.DUPLICATE_VAR)addStrictWarning("msg.var.redecl",str);
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877206215
GPR[SPVAP]-1659877206215
GPR[EPVAP]-1659877206945
GPR[EPVS]-1659877206945
========
mustMatchToken(Token.LP,"msg.no.paren.catch");
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877206947
GPR[SPVAP]-1659877206947
GPR[EPVAP]-1659877207676
GPR[EPVS]-1659877207676
========
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
mapping.end=new Position(getCurrentLineIndex(),lineno);
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877207678
GPR[SPVAP]-1659877207678
GPR[EPVAP]-1659877208414
GPR[EPVS]-1659877208414
========
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
mapping.node=next;
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877208416
GPR[SPVAP]-1659877208416
GPR[EPVAP]-1659877209151
GPR[EPVS]-1659877209151
========
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
mapping.start=new Position(getCurrentLineIndex(),lineno);
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877209152
GPR[SPVAP]-1659877209152
GPR[EPVAP]-1659877209882
GPR[EPVS]-1659877209882
========
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
mapping.node=next;
mapping.start=new Position(getCurrentLineIndex(),lineno);

sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877209884
GPR[SPVAP]-1659877209884
GPR[EPVAP]-1659877210622
GPR[EPVS]-1659877210622
========
next.replaceChild(first,NodeUtil.newQualifiedNameNode(sb.getCodingConvention().getGlobalObject(),first.getLineno(),firstArgument.getCharno()));
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877210624
GPR[SPVAP]-1659877210624
GPR[EPVAP]-1659877211355
GPR[EPVS]-1659877211355
========
next.replaceChild(next,lineno);
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877211357
GPR[SPVAP]-1659877211357
GPR[EPVAP]-1659877212090
GPR[EPVS]-1659877212090
========
if(next==null){
if(str==null){
next=new Node(Token.REF_NAME,next,COLUMN_BITS,COLUMN_BITS);
}else {
ref=new Node(Token.REF_NS_NAME,next,elem,lineno,charno);
}
}else {
if(namespace==null){
ref=new Node(Token.REF_MEMBER,target,elem,lineno,charno);
}else {
ref=new Node(Token.REF_NS_MEMBER,target,nsNode,elem,lineno,charno);
}
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877212092
GPR[SPVAP]-1659877212092
GPR[EPVAP]-1659877212831
GPR[EPVS]-1659877212831
========
if(lineno<0){
return ;
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877212833
GPR[SPVAP]-1659877212833
GPR[EPVAP]-1659877213566
GPR[EPVS]-1659877213566
========
default :

if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877213567
GPR[SPVAP]-1659877213567
GPR[EPVAP]-1659877214147
GPR[EPVS]-1659877214147
========
case Token.RC :

if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877214149
GPR[SPVAP]-1659877214149
GPR[EPVAP]-1659877214721
GPR[EPVS]-1659877214721
========
case Token.LB :

if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877214723
GPR[SPVAP]-1659877214723
GPR[EPVAP]-1659877215304
GPR[EPVS]-1659877215304
========
case Token.CONTINUE :

if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877215305
GPR[SPVAP]-1659877215305
GPR[EPVAP]-1659877215878
GPR[EPVS]-1659877215878
========
case Token.VAR :

if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877215879
GPR[SPVAP]-1659877215879
GPR[EPVAP]-1659877216455
GPR[EPVS]-1659877216455
========
if(printSource){
lineEndChar=-1;
lineStart=sourcePosition-1;
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877216458
GPR[SPVAP]-1659877216458
GPR[EPVAP]-1659877217192
GPR[EPVS]-1659877217192
========
if(printSource){
lineEndChar=-1;
COLUMN_BITS++;
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877217194
GPR[SPVAP]-1659877217194
GPR[EPVAP]-1659877217928
GPR[EPVS]-1659877217928
========
if(printSource){
lineEndChar=-1;
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;

int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877217930
GPR[SPVAP]-1659877217930
GPR[EPVAP]-1659877218666
GPR[EPVS]-1659877218666
========
if(printSource){
lineStart=sourcePosition-1;
COLUMN_BITS++;
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877218668
GPR[SPVAP]-1659877218668
GPR[EPVAP]-1659877219397
GPR[EPVS]-1659877219397
========
if(printSource){
lineStart=sourcePosition-1;
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;

int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877219399
GPR[SPVAP]-1659877219399
GPR[EPVAP]-1659877220138
GPR[EPVS]-1659877220138
========
if(printSource){
COLUMN_BITS++;
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;

int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877220139
GPR[SPVAP]-1659877220139
GPR[EPVAP]-1659877220878
GPR[EPVS]-1659877220878
========
if(printSource){
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877220880
GPR[SPVAP]-1659877220880
GPR[EPVAP]-1659877221602
GPR[EPVS]-1659877221602
========
if(printSource){
lineEndChar=-1;
lineStart=sourcePosition-1;
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;

int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877221603
GPR[SPVAP]-1659877221603
GPR[EPVAP]-1659877222336
GPR[EPVS]-1659877222336
========
if(printSource){
lineEndChar=-1;
COLUMN_BITS++;
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;

int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877222338
GPR[SPVAP]-1659877222338
GPR[EPVAP]-1659877223075
GPR[EPVS]-1659877223075
========
if(printSource){
lineStart=sourcePosition-1;
COLUMN_BITS++;
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;

int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877223076
GPR[SPVAP]-1659877223076
GPR[EPVAP]-1659877223827
GPR[EPVS]-1659877223827
========
if(printSource){
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;
lineEndChar=-1;
lineStart=sourcePosition-1;
COLUMN_BITS++;

int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}

========
GPR[SPVS]-1659877223828
GPR[SPVAP]-1659877223828
GPR[EPVAP]-1659877224569
GPR[EPVS]-1659877224569
========
case LOCAL_BLOCK_PROP :

case TARGETBLOCK_PROP :
value="target block property";
break;


========
GPR[SPVS]-1659877225485
GPR[SPVAP]-1659877225485
GPR[EPVAP]-1659877226235
GPR[EPVS]-1659877226235
========
case RIGHT :

case TARGETBLOCK_PROP :
value="target block property";
break;


========
GPR[SPVS]-1659877226237
GPR[SPVAP]-1659877226237
GPR[EPVAP]-1659877227459
GPR[SPVATF]-1659877227459
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877228539
GPR[EPVS]-1659877228539
========
case SPECIALCALL_WITH :

case TARGETBLOCK_PROP :
value="target block property";
break;


========
GPR[SPVS]-1659877228541
GPR[SPVAP]-1659877228541
GPR[EPVAP]-1659877229706
GPR[SPVATF]-1659877229706
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877230796
GPR[EPVS]-1659877230796
========
default :

case TARGETBLOCK_PROP :
value="target block property";
break;


========
GPR[SPVS]-1659877230797
GPR[SPVAP]-1659877230797
GPR[EPVAP]-1659877231528
GPR[EPVS]-1659877231528
========
case 1 :

case TARGETBLOCK_PROP :
value="target block property";
break;


========
GPR[SPVS]-1659877231530
GPR[SPVAP]-1659877231530
GPR[EPVAP]-1659877232703
GPR[SPVATF]-1659877232703
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877233781
GPR[EPVS]-1659877233781
========
case 3 :

case TARGETBLOCK_PROP :
value="target block property";
break;


========
GPR[SPVS]-1659877233783
GPR[SPVAP]-1659877233783
GPR[EPVAP]-1659877234955
GPR[SPVATF]-1659877234955
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877236045
GPR[EPVS]-1659877236045
========
case TARGETBLOCK_PROP :
tmp=objectValue;
value="target block property";
break;



========
GPR[SPVS]-1659877236047
GPR[SPVAP]-1659877236047
GPR[EPVAP]-1659877236783
GPR[EPVS]-1659877236783
========
case TARGETBLOCK_PROP :
f0=objectValue;
value="target block property";
break;



========
GPR[SPVS]-1659877236785
GPR[SPVAP]-1659877236785
GPR[EPVAP]-1659877237512
GPR[EPVS]-1659877237512
========
case TARGETBLOCK_PROP :
value=objectValue;
value="target block property";
break;



========
GPR[SPVS]-1659877237513
GPR[SPVAP]-1659877237513
GPR[EPVAP]-1659877238250
GPR[EPVS]-1659877238250
========
case TARGETBLOCK_PROP :
tmp=objectValue;
f0=objectValue;
value=objectValue;

value="target block property";
break;



========
GPR[SPVS]-1659877238252
GPR[SPVAP]-1659877238252
GPR[EPVAP]-1659877238990
GPR[EPVS]-1659877238990
========
case TARGETBLOCK_PROP :
f2=objectValue;
value="target block property";
break;



========
GPR[SPVS]-1659877238992
GPR[SPVAP]-1659877238992
GPR[EPVAP]-1659877239719
GPR[EPVS]-1659877239719
========
case TARGETBLOCK_PROP :
tmp=objectValue;
f2=objectValue;
value=objectValue;

value="target block property";
break;



========
GPR[SPVS]-1659877239721
GPR[SPVAP]-1659877239721
GPR[EPVAP]-1659877240454
GPR[EPVS]-1659877240454
========
case 3 :

case TARGETBLOCK_PROP :
tmp=objectValue;
value="target block property";
break;



========
GPR[SPVS]-1659877240456
GPR[SPVAP]-1659877240456
GPR[EPVAP]-1659877241191
GPR[EPVS]-1659877241191
========
case 3 :

case TARGETBLOCK_PROP :
value=objectValue;
value="target block property";
break;



========
GPR[SPVS]-1659877241193
GPR[SPVAP]-1659877241193
GPR[EPVAP]-1659877241941
GPR[EPVS]-1659877241941
========
case TARGETBLOCK_PROP :
f4=objectValue;
value="target block property";
break;



========
GPR[SPVS]-1659877241942
GPR[SPVAP]-1659877241942
GPR[EPVAP]-1659877242671
GPR[EPVS]-1659877242671
========
case TARGETBLOCK_PROP :
tmp=objectValue;
f4=objectValue;
value=objectValue;

value="target block property";
break;



========
GPR[SPVS]-1659877242673
GPR[SPVAP]-1659877242673
GPR[EPVAP]-1659877243405
GPR[EPVS]-1659877243405
========
case LOCAL_BLOCK_PROP :

case LOCAL_BLOCK_PROP :
value="last local block";
break;


========
GPR[SPVS]-1659877244307
GPR[SPVAP]-1659877244307
GPR[EPVAP]-1659877245031
GPR[EPVS]-1659877245031
========
case RIGHT :

case LOCAL_BLOCK_PROP :
value="last local block";
break;


========
GPR[SPVS]-1659877245033
GPR[SPVAP]-1659877245033
GPR[EPVAP]-1659877246207
GPR[SPVATF]-1659877246207
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877247299
GPR[EPVS]-1659877247299
========
case SPECIALCALL_WITH :

case LOCAL_BLOCK_PROP :
value="last local block";
break;


========
GPR[SPVS]-1659877247300
GPR[SPVAP]-1659877247300
GPR[EPVAP]-1659877248499
GPR[SPVATF]-1659877248499
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877249593
GPR[EPVS]-1659877249593
========
default :

case LOCAL_BLOCK_PROP :
value="last local block";
break;


========
GPR[SPVS]-1659877249595
GPR[SPVAP]-1659877249595
GPR[EPVAP]-1659877250346
GPR[EPVS]-1659877250346
========
case 1 :

case LOCAL_BLOCK_PROP :
value="last local block";
break;


========
GPR[SPVS]-1659877250348
GPR[SPVAP]-1659877250348
GPR[EPVAP]-1659877251527
GPR[SPVATF]-1659877251527
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877252606
GPR[EPVS]-1659877252606
========
case 3 :

case LOCAL_BLOCK_PROP :
value="last local block";
break;


========
GPR[SPVS]-1659877252608
GPR[SPVAP]-1659877252608
GPR[EPVAP]-1659877253782
GPR[SPVATF]-1659877253782
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877254879
GPR[EPVS]-1659877254879
========
case LOCAL_BLOCK_PROP :
tmp=objectValue;
value="last local block";
break;



========
GPR[SPVS]-1659877254881
GPR[SPVAP]-1659877254881
GPR[EPVAP]-1659877255619
GPR[EPVS]-1659877255619
========
case LOCAL_BLOCK_PROP :
f0=objectValue;
value="last local block";
break;



========
GPR[SPVS]-1659877255621
GPR[SPVAP]-1659877255621
GPR[EPVAP]-1659877256376
GPR[EPVS]-1659877256376
========
case LOCAL_BLOCK_PROP :
value=objectValue;
value="last local block";
break;



========
GPR[SPVS]-1659877256377
GPR[SPVAP]-1659877256377
GPR[EPVAP]-1659877257107
GPR[EPVS]-1659877257107
========
case LOCAL_BLOCK_PROP :
tmp=objectValue;
f0=objectValue;
value=objectValue;

value="last local block";
break;



========
GPR[SPVS]-1659877257108
GPR[SPVAP]-1659877257108
GPR[EPVAP]-1659877257846
GPR[EPVS]-1659877257846
========
case LOCAL_BLOCK_PROP :
f2=objectValue;
value="last local block";
break;



========
GPR[SPVS]-1659877257847
GPR[SPVAP]-1659877257847
GPR[EPVAP]-1659877258599
GPR[EPVS]-1659877258599
========
case LOCAL_BLOCK_PROP :
tmp=objectValue;
f2=objectValue;
value=objectValue;

value="last local block";
break;



========
GPR[SPVS]-1659877258601
GPR[SPVAP]-1659877258601
GPR[EPVAP]-1659877259343
GPR[EPVS]-1659877259343
========
case 3 :

case LOCAL_BLOCK_PROP :
tmp=objectValue;
value="last local block";
break;



========
GPR[SPVS]-1659877259345
GPR[SPVAP]-1659877259345
GPR[EPVAP]-1659877260086
GPR[EPVS]-1659877260086
========
case 3 :

case LOCAL_BLOCK_PROP :
value=objectValue;
value="last local block";
break;



========
GPR[SPVS]-1659877260087
GPR[SPVAP]-1659877260087
GPR[EPVAP]-1659877260815
GPR[EPVS]-1659877260815
========
case LOCAL_BLOCK_PROP :
f4=objectValue;
value="last local block";
break;



========
GPR[SPVS]-1659877260816
GPR[SPVAP]-1659877260816
GPR[EPVAP]-1659877261550
GPR[EPVS]-1659877261550
========
case LOCAL_BLOCK_PROP :
tmp=objectValue;
f4=objectValue;
value=objectValue;

value="last local block";
break;



========
GPR[SPVS]-1659877261552
GPR[SPVAP]-1659877261552
GPR[EPVAP]-1659877262290
GPR[EPVS]-1659877262290
========
case LOCAL_BLOCK_PROP :

case BOTH :
value="both";
break;


========
GPR[SPVS]-1659877263202
GPR[SPVAP]-1659877263202
GPR[EPVAP]-1659877264373
GPR[SPVATF]-1659877264373
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877265450
GPR[EPVS]-1659877265450
========
case RIGHT :

case BOTH :
value="both";
break;


========
GPR[SPVS]-1659877265452
GPR[SPVAP]-1659877265452
GPR[EPVAP]-1659877266173
GPR[EPVS]-1659877266173
========
case SPECIALCALL_WITH :

case BOTH :
value="both";
break;


========
GPR[SPVS]-1659877266175
GPR[SPVAP]-1659877266175
GPR[EPVAP]-1659877266906
GPR[EPVS]-1659877266906
========
default :

case BOTH :
value="both";
break;


========
GPR[SPVS]-1659877266908
GPR[SPVAP]-1659877266908
GPR[EPVAP]-1659877267669
GPR[EPVS]-1659877267669
========
case 1 :

case BOTH :
value="both";
break;


========
GPR[SPVS]-1659877267670
GPR[SPVAP]-1659877267670
GPR[EPVAP]-1659877268447
GPR[EPVS]-1659877268447
========
case 3 :

case BOTH :
value="both";
break;


========
GPR[SPVS]-1659877268449
GPR[SPVAP]-1659877268449
GPR[EPVAP]-1659877269626
GPR[SPVATF]-1659877269626
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877270714
GPR[EPVS]-1659877270714
========
case BOTH :
tmp=objectValue;
value="both";
break;



========
GPR[SPVS]-1659877270716
GPR[SPVAP]-1659877270716
GPR[EPVAP]-1659877271447
GPR[EPVS]-1659877271447
========
case BOTH :
f0=objectValue;
value="both";
break;



========
GPR[SPVS]-1659877271449
GPR[SPVAP]-1659877271449
GPR[EPVAP]-1659877272184
GPR[EPVS]-1659877272184
========
case BOTH :
value=objectValue;
value="both";
break;



========
GPR[SPVS]-1659877272186
GPR[SPVAP]-1659877272186
GPR[EPVAP]-1659877272928
GPR[EPVS]-1659877272928
========
case BOTH :
tmp=objectValue;
f0=objectValue;
value=objectValue;

value="both";
break;



========
GPR[SPVS]-1659877272930
GPR[SPVAP]-1659877272930
GPR[EPVAP]-1659877273665
GPR[EPVS]-1659877273665
========
case BOTH :
f2=objectValue;
value="both";
break;



========
GPR[SPVS]-1659877273667
GPR[SPVAP]-1659877273667
GPR[EPVAP]-1659877274403
GPR[EPVS]-1659877274403
========
case BOTH :
tmp=objectValue;
f2=objectValue;
value=objectValue;

value="both";
break;



========
GPR[SPVS]-1659877274405
GPR[SPVAP]-1659877274405
GPR[EPVAP]-1659877275147
GPR[EPVS]-1659877275147
========
case 3 :

case BOTH :
tmp=objectValue;
value="both";
break;



========
GPR[SPVS]-1659877275148
GPR[SPVAP]-1659877275149
GPR[EPVAP]-1659877275879
GPR[EPVS]-1659877275879
========
case 3 :

case BOTH :
value=objectValue;
value="both";
break;



========
GPR[SPVS]-1659877275881
GPR[SPVAP]-1659877275881
GPR[EPVAP]-1659877276616
GPR[EPVS]-1659877276616
========
case BOTH :
f4=objectValue;
value="both";
break;



========
GPR[SPVS]-1659877276618
GPR[SPVAP]-1659877276618
GPR[EPVAP]-1659877277348
GPR[EPVS]-1659877277349
========
case BOTH :
tmp=objectValue;
f4=objectValue;
value=objectValue;

value="both";
break;



========
GPR[SPVS]-1659877277350
GPR[SPVAP]-1659877277350
GPR[EPVAP]-1659877278094
GPR[EPVS]-1659877278094
========
case LOCAL_BLOCK_PROP :

case RIGHT :
value="right";
break;


========
GPR[SPVS]-1659877279008
GPR[SPVAP]-1659877279008
GPR[EPVAP]-1659877280206
GPR[SPVATF]-1659877280206
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877281296
GPR[EPVS]-1659877281296
========
case RIGHT :

case RIGHT :
value="right";
break;


========
GPR[SPVS]-1659877281297
GPR[SPVAP]-1659877281297
GPR[EPVAP]-1659877282035
GPR[EPVS]-1659877282035
========
case SPECIALCALL_WITH :

case RIGHT :
value="right";
break;


========
GPR[SPVS]-1659877282036
GPR[SPVAP]-1659877282036
GPR[EPVAP]-1659877282770
GPR[EPVS]-1659877282770
========
default :

case RIGHT :
value="right";
break;


========
GPR[SPVS]-1659877282772
GPR[SPVAP]-1659877282772
GPR[EPVAP]-1659877283498
GPR[EPVS]-1659877283498
========
case 1 :

case RIGHT :
value="right";
break;


========
GPR[SPVS]-1659877283499
GPR[SPVAP]-1659877283499
GPR[EPVAP]-1659877284239
GPR[EPVS]-1659877284239
========
case 3 :

case RIGHT :
value="right";
break;


========
GPR[SPVS]-1659877284240
GPR[SPVAP]-1659877284240
GPR[EPVAP]-1659877285454
GPR[SPVATF]-1659877285454
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877286544
GPR[EPVS]-1659877286544
========
case RIGHT :
tmp=objectValue;
value="right";
break;



========
GPR[SPVS]-1659877286546
GPR[SPVAP]-1659877286546
GPR[EPVAP]-1659877287273
GPR[EPVS]-1659877287273
========
case RIGHT :
f0=objectValue;
value="right";
break;



========
GPR[SPVS]-1659877287275
GPR[SPVAP]-1659877287275
GPR[EPVAP]-1659877288036
GPR[EPVS]-1659877288036
========
case RIGHT :
value=objectValue;
value="right";
break;



========
GPR[SPVS]-1659877288037
GPR[SPVAP]-1659877288037
GPR[EPVAP]-1659877288769
GPR[EPVS]-1659877288769
========
case RIGHT :
tmp=objectValue;
f0=objectValue;
value=objectValue;

value="right";
break;



========
GPR[SPVS]-1659877288770
GPR[SPVAP]-1659877288770
GPR[EPVAP]-1659877289505
GPR[EPVS]-1659877289505
========
case RIGHT :
f2=objectValue;
value="right";
break;



========
GPR[SPVS]-1659877289507
GPR[SPVAP]-1659877289507
GPR[EPVAP]-1659877290219
GPR[EPVS]-1659877290219
========
case RIGHT :
tmp=objectValue;
f2=objectValue;
value=objectValue;

value="right";
break;



========
GPR[SPVS]-1659877290221
GPR[SPVAP]-1659877290221
GPR[EPVAP]-1659877290956
GPR[EPVS]-1659877290956
========
case 3 :

case RIGHT :
tmp=objectValue;
value="right";
break;



========
GPR[SPVS]-1659877290959
GPR[SPVAP]-1659877290959
GPR[EPVAP]-1659877291700
GPR[EPVS]-1659877291700
========
case 3 :

case RIGHT :
value=objectValue;
value="right";
break;



========
GPR[SPVS]-1659877291702
GPR[SPVAP]-1659877291702
GPR[EPVAP]-1659877292440
GPR[EPVS]-1659877292440
========
case RIGHT :
f4=objectValue;
value="right";
break;



========
GPR[SPVS]-1659877292442
GPR[SPVAP]-1659877292442
GPR[EPVAP]-1659877293168
GPR[EPVS]-1659877293168
========
case RIGHT :
tmp=objectValue;
f4=objectValue;
value=objectValue;

value="right";
break;



========
GPR[SPVS]-1659877293169
GPR[SPVAP]-1659877293169
GPR[EPVAP]-1659877293895
GPR[EPVS]-1659877293895
========
case LOCAL_BLOCK_PROP :

case LEFT :
value="left";
break;


========
GPR[SPVS]-1659877294778
GPR[SPVAP]-1659877294778
GPR[EPVAP]-1659877296021
GPR[SPVATF]-1659877296021
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877297107
GPR[EPVS]-1659877297107
========
case RIGHT :

case LEFT :
value="left";
break;


========
GPR[SPVS]-1659877297108
GPR[SPVAP]-1659877297108
GPR[EPVAP]-1659877297837
GPR[EPVS]-1659877297837
========
case SPECIALCALL_WITH :

case LEFT :
value="left";
break;


========
GPR[SPVS]-1659877297838
GPR[SPVAP]-1659877297838
GPR[EPVAP]-1659877298576
GPR[EPVS]-1659877298577
========
default :

case LEFT :
value="left";
break;


========
GPR[SPVS]-1659877298578
GPR[SPVAP]-1659877298578
GPR[EPVAP]-1659877299313
GPR[EPVS]-1659877299313
========
case 1 :

case LEFT :
value="left";
break;


========
GPR[SPVS]-1659877299315
GPR[SPVAP]-1659877299315
GPR[EPVAP]-1659877300053
GPR[EPVS]-1659877300053
========
case 3 :

case LEFT :
value="left";
break;


========
GPR[SPVS]-1659877300054
GPR[SPVAP]-1659877300054
GPR[EPVAP]-1659877301233
GPR[SPVATF]-1659877301233
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877302324
GPR[EPVS]-1659877302324
========
case LEFT :
tmp=objectValue;
value="left";
break;



========
GPR[SPVS]-1659877302325
GPR[SPVAP]-1659877302325
GPR[EPVAP]-1659877303057
GPR[EPVS]-1659877303057
========
case LEFT :
f0=objectValue;
value="left";
break;



========
GPR[SPVS]-1659877303058
GPR[SPVAP]-1659877303058
GPR[EPVAP]-1659877303787
GPR[EPVS]-1659877303787
========
case LEFT :
value=objectValue;
value="left";
break;



========
GPR[SPVS]-1659877303789
GPR[SPVAP]-1659877303789
GPR[EPVAP]-1659877304523
GPR[EPVS]-1659877304523
========
case LEFT :
tmp=objectValue;
f0=objectValue;
value=objectValue;

value="left";
break;



========
GPR[SPVS]-1659877304524
GPR[SPVAP]-1659877304524
GPR[EPVAP]-1659877305268
GPR[EPVS]-1659877305268
========
case LEFT :
f2=objectValue;
value="left";
break;



========
GPR[SPVS]-1659877305269
GPR[SPVAP]-1659877305269
GPR[EPVAP]-1659877306040
GPR[EPVS]-1659877306040
========
case LEFT :
tmp=objectValue;
f2=objectValue;
value=objectValue;

value="left";
break;



========
GPR[SPVS]-1659877306042
GPR[SPVAP]-1659877306042
GPR[EPVAP]-1659877306774
GPR[EPVS]-1659877306774
========
case 3 :

case LEFT :
tmp=objectValue;
value="left";
break;



========
GPR[SPVS]-1659877306775
GPR[SPVAP]-1659877306775
GPR[EPVAP]-1659877307517
GPR[EPVS]-1659877307517
========
case 3 :

case LEFT :
value=objectValue;
value="left";
break;



========
GPR[SPVS]-1659877307519
GPR[SPVAP]-1659877307519
GPR[EPVAP]-1659877308272
GPR[EPVS]-1659877308272
========
case LEFT :
f4=objectValue;
value="left";
break;



========
GPR[SPVS]-1659877308274
GPR[SPVAP]-1659877308274
GPR[EPVAP]-1659877309005
GPR[EPVS]-1659877309005
========
case LEFT :
tmp=objectValue;
f4=objectValue;
value=objectValue;

value="left";
break;



========
GPR[SPVS]-1659877309007
GPR[SPVAP]-1659877309007
GPR[EPVAP]-1659877309751
GPR[EPVS]-1659877309751
========
case LOCAL_BLOCK_PROP :

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;


========
GPR[SPVS]-1659877311565
GPR[SPVAP]-1659877311565
GPR[EPVAP]-1659877312139
GPR[EPVS]-1659877312139
========
case SPECIALCALL_WITH :

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;


========
GPR[SPVS]-1659877312141
GPR[SPVAP]-1659877312141
GPR[EPVAP]-1659877312718
GPR[EPVS]-1659877312718
========
case SPECIALCALL_PROP :

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;


========
GPR[SPVS]-1659877312720
GPR[SPVAP]-1659877312720
GPR[EPVAP]-1659877313303
GPR[EPVS]-1659877313303
========
case ISNUMBER_PROP :
f0=objectValue;
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;



========
GPR[SPVS]-1659877313305
GPR[SPVAP]-1659877313305
GPR[EPVAP]-1659877313884
GPR[EPVS]-1659877313884
========
case ISNUMBER_PROP :
f1=objectValue;
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;



========
GPR[SPVS]-1659877313885
GPR[SPVAP]-1659877313885
GPR[EPVAP]-1659877314465
GPR[EPVS]-1659877314465
========
case ISNUMBER_PROP :
f2=objectValue;
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;



========
GPR[SPVS]-1659877314467
GPR[SPVAP]-1659877314467
GPR[EPVAP]-1659877315049
GPR[EPVS]-1659877315049
========
case ISNUMBER_PROP :
f3=objectValue;
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;



========
GPR[SPVS]-1659877315050
GPR[SPVAP]-1659877315050
GPR[EPVAP]-1659877315626
GPR[EPVS]-1659877315626
========
case ISNUMBER_PROP :
f4=objectValue;
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;



========
GPR[SPVS]-1659877315628
GPR[SPVAP]-1659877315628
GPR[EPVAP]-1659877316206
GPR[EPVS]-1659877316206
========
case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
f0=objectValue;
value="both";
break;


case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;


========
GPR[SPVS]-1659877316207
GPR[SPVAP]-1659877316207
GPR[EPVAP]-1659877316781
GPR[EPVS]-1659877316781
========
case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
f1=objectValue;
value="right";
break;


case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;


========
GPR[SPVS]-1659877316783
GPR[SPVAP]-1659877316783
GPR[EPVAP]-1659877317363
GPR[EPVS]-1659877317363
========
case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
f2=objectValue;
value="left";
break;


default :
throw Kit.codeBug();

}
break;


========
GPR[SPVS]-1659877317365
GPR[SPVAP]-1659877317365
GPR[EPVAP]-1659877317944
GPR[EPVS]-1659877317944
========
case ISNUMBER_PROP :
swtich (x.intValue){
case 4 :
f4=objectValue;
break;

case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877317945
GPR[SPVAP]-1659877317945
GPR[EPVAP]-1659877318520
GPR[EPVS]-1659877318521
========
case ISNUMBER_PROP :
swtich (x.intValue){
default :
data[index-FIELDS_STORE_SIZE]=objectValue;

case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877318522
GPR[SPVAP]-1659877318522
GPR[EPVAP]-1659877319105
GPR[EPVS]-1659877319105
========
case ISNUMBER_PROP :
swtich (x.intValue){
case 4 :
f4=objectValue;
break;

default :
data[index-FIELDS_STORE_SIZE]=objectValue;


case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877319107
GPR[SPVAP]-1659877319107
GPR[EPVAP]-1659877319689
GPR[EPVS]-1659877319689
========
if(lookupProperty(COLUMN_BITS)==null){
return intValue;
}
case ISNUMBER_PROP :
swtich (x.intValue){
case 4 :
f4=objectValue;
break;

default :
data[index-FIELDS_STORE_SIZE]=objectValue;


case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877319692
GPR[SPVAP]-1659877319692
GPR[EPVAP]-1659877320278
GPR[EPVS]-1659877320278
========
if(lookupProperty(COLUMN_BITS)==null){
Kit.codeBug();
}
case ISNUMBER_PROP :
swtich (x.intValue){
case 4 :
f4=objectValue;
break;

default :
data[index-FIELDS_STORE_SIZE]=objectValue;


case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877320279
GPR[SPVAP]-1659877320279
GPR[EPVAP]-1659877320866
GPR[EPVS]-1659877320866
========
case LOCAL_BLOCK_PROP :

case SPECIALCALL_EVAL :
value="eval";
break;


========
GPR[SPVS]-1659877321764
GPR[SPVAP]-1659877321764
GPR[EPVAP]-1659877322947
GPR[SPVATF]-1659877322947
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877324024
GPR[EPVS]-1659877324024
========
case RIGHT :

case SPECIALCALL_EVAL :
value="eval";
break;


========
GPR[SPVS]-1659877324025
GPR[SPVAP]-1659877324025
GPR[EPVAP]-1659877324739
GPR[EPVS]-1659877324739
========
case SPECIALCALL_WITH :

case SPECIALCALL_EVAL :
value="eval";
break;


========
GPR[SPVS]-1659877324741
GPR[SPVAP]-1659877324741
GPR[EPVAP]-1659877325507
GPR[EPVS]-1659877325507
========
default :

case SPECIALCALL_EVAL :
value="eval";
break;


========
GPR[SPVS]-1659877325509
GPR[SPVAP]-1659877325509
GPR[EPVAP]-1659877326236
GPR[EPVS]-1659877326236
========
case 1 :

case SPECIALCALL_EVAL :
value="eval";
break;


========
GPR[SPVS]-1659877326238
GPR[SPVAP]-1659877326238
GPR[EPVAP]-1659877326991
GPR[EPVS]-1659877326991
========
case 3 :

case SPECIALCALL_EVAL :
value="eval";
break;


========
GPR[SPVS]-1659877326992
GPR[SPVAP]-1659877326992
GPR[EPVAP]-1659877328172
GPR[SPVATF]-1659877328172
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877329263
GPR[EPVS]-1659877329263
========
case SPECIALCALL_EVAL :
tmp=objectValue;
value="eval";
break;



========
GPR[SPVS]-1659877329264
GPR[SPVAP]-1659877329264
GPR[EPVAP]-1659877330012
GPR[EPVS]-1659877330012
========
case SPECIALCALL_EVAL :
f0=objectValue;
value="eval";
break;



========
GPR[SPVS]-1659877330013
GPR[SPVAP]-1659877330013
GPR[EPVAP]-1659877330736
GPR[EPVS]-1659877330736
========
case SPECIALCALL_EVAL :
value=objectValue;
value="eval";
break;



========
GPR[SPVS]-1659877330739
GPR[SPVAP]-1659877330739
GPR[EPVAP]-1659877331468
GPR[EPVS]-1659877331468
========
case SPECIALCALL_EVAL :
tmp=objectValue;
f0=objectValue;
value=objectValue;

value="eval";
break;



========
GPR[SPVS]-1659877331469
GPR[SPVAP]-1659877331469
GPR[EPVAP]-1659877332197
GPR[EPVS]-1659877332197
========
case SPECIALCALL_EVAL :
f2=objectValue;
value="eval";
break;



========
GPR[SPVS]-1659877332199
GPR[SPVAP]-1659877332199
GPR[EPVAP]-1659877332941
GPR[EPVS]-1659877332941
========
case SPECIALCALL_EVAL :
tmp=objectValue;
f2=objectValue;
value=objectValue;

value="eval";
break;



========
GPR[SPVS]-1659877332942
GPR[SPVAP]-1659877332942
GPR[EPVAP]-1659877333678
GPR[EPVS]-1659877333678
========
case 3 :

case SPECIALCALL_EVAL :
tmp=objectValue;
value="eval";
break;



========
GPR[SPVS]-1659877333680
GPR[SPVAP]-1659877333680
GPR[EPVAP]-1659877334426
GPR[EPVS]-1659877334426
========
case 3 :

case SPECIALCALL_EVAL :
value=objectValue;
value="eval";
break;



========
GPR[SPVS]-1659877334428
GPR[SPVAP]-1659877334428
GPR[EPVAP]-1659877335159
GPR[EPVS]-1659877335159
========
case SPECIALCALL_EVAL :
f4=objectValue;
value="eval";
break;



========
GPR[SPVS]-1659877335160
GPR[SPVAP]-1659877335160
GPR[EPVAP]-1659877335891
GPR[EPVS]-1659877335891
========
case SPECIALCALL_EVAL :
tmp=objectValue;
f4=objectValue;
value=objectValue;

value="eval";
break;



========
GPR[SPVS]-1659877335893
GPR[SPVAP]-1659877335893
GPR[EPVAP]-1659877336615
GPR[EPVS]-1659877336615
========
case LOCAL_BLOCK_PROP :

case SPECIALCALL_WITH :
value="with";
break;


========
GPR[SPVS]-1659877337528
GPR[SPVAP]-1659877337528
GPR[EPVAP]-1659877338735
GPR[SPVATF]-1659877338735
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877339807
GPR[EPVS]-1659877339807
========
case RIGHT :

case SPECIALCALL_WITH :
value="with";
break;


========
GPR[SPVS]-1659877339809
GPR[SPVAP]-1659877339809
GPR[EPVAP]-1659877340533
GPR[EPVS]-1659877340533
========
case SPECIALCALL_WITH :

case SPECIALCALL_WITH :
value="with";
break;


========
GPR[SPVS]-1659877340534
GPR[SPVAP]-1659877340534
GPR[EPVAP]-1659877341292
GPR[EPVS]-1659877341292
========
default :

case SPECIALCALL_WITH :
value="with";
break;


========
GPR[SPVS]-1659877341294
GPR[SPVAP]-1659877341294
GPR[EPVAP]-1659877342018
GPR[EPVS]-1659877342018
========
case 1 :

case SPECIALCALL_WITH :
value="with";
break;


========
GPR[SPVS]-1659877342019
GPR[SPVAP]-1659877342019
GPR[EPVAP]-1659877342749
GPR[EPVS]-1659877342749
========
case 3 :

case SPECIALCALL_WITH :
value="with";
break;


========
GPR[SPVS]-1659877342750
GPR[SPVAP]-1659877342750
GPR[EPVAP]-1659877343937
GPR[SPVATF]-1659877343937
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877345019
GPR[EPVS]-1659877345019
========
case SPECIALCALL_WITH :
tmp=objectValue;
value="with";
break;



========
GPR[SPVS]-1659877345021
GPR[SPVAP]-1659877345021
GPR[EPVAP]-1659877345775
GPR[EPVS]-1659877345775
========
case SPECIALCALL_WITH :
f0=objectValue;
value="with";
break;



========
GPR[SPVS]-1659877345776
GPR[SPVAP]-1659877345776
GPR[EPVAP]-1659877346513
GPR[EPVS]-1659877346513
========
case SPECIALCALL_WITH :
value=objectValue;
value="with";
break;



========
GPR[SPVS]-1659877346514
GPR[SPVAP]-1659877346514
GPR[EPVAP]-1659877347251
GPR[EPVS]-1659877347251
========
case SPECIALCALL_WITH :
tmp=objectValue;
f0=objectValue;
value=objectValue;

value="with";
break;



========
GPR[SPVS]-1659877347253
GPR[SPVAP]-1659877347253
GPR[EPVAP]-1659877348014
GPR[EPVS]-1659877348014
========
case SPECIALCALL_WITH :
f2=objectValue;
value="with";
break;



========
GPR[SPVS]-1659877348016
GPR[SPVAP]-1659877348016
GPR[EPVAP]-1659877348751
GPR[EPVS]-1659877348751
========
case SPECIALCALL_WITH :
tmp=objectValue;
f2=objectValue;
value=objectValue;

value="with";
break;



========
GPR[SPVS]-1659877348752
GPR[SPVAP]-1659877348752
GPR[EPVAP]-1659877349483
GPR[EPVS]-1659877349483
========
case 3 :

case SPECIALCALL_WITH :
tmp=objectValue;
value="with";
break;



========
GPR[SPVS]-1659877349484
GPR[SPVAP]-1659877349484
GPR[EPVAP]-1659877350229
GPR[EPVS]-1659877350229
========
case 3 :

case SPECIALCALL_WITH :
value=objectValue;
value="with";
break;



========
GPR[SPVS]-1659877350230
GPR[SPVAP]-1659877350230
GPR[EPVAP]-1659877350969
GPR[EPVS]-1659877350969
========
case SPECIALCALL_WITH :
f4=objectValue;
value="with";
break;



========
GPR[SPVS]-1659877350971
GPR[SPVAP]-1659877350971
GPR[EPVAP]-1659877351711
GPR[EPVS]-1659877351711
========
case SPECIALCALL_WITH :
tmp=objectValue;
f4=objectValue;
value=objectValue;

value="with";
break;



========
GPR[SPVS]-1659877351712
GPR[SPVAP]-1659877351712
GPR[EPVAP]-1659877352441
GPR[EPVS]-1659877352441
========
default :

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;


========
GPR[SPVS]-1659877353371
GPR[SPVAP]-1659877353371
GPR[EPVAP]-1659877353948
GPR[EPVS]-1659877353948
========
case LOCAL_BLOCK_PROP :

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;


========
GPR[SPVS]-1659877353951
GPR[SPVAP]-1659877353951
GPR[EPVAP]-1659877354533
GPR[EPVS]-1659877354533
========
case SPECIALCALL_PROP :
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877354535
GPR[SPVAP]-1659877354535
GPR[EPVAP]-1659877355111
GPR[EPVS]-1659877355111
========
case SPECIALCALL_PROP :
f4=objectValue;
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;



========
GPR[SPVS]-1659877355112
GPR[SPVAP]-1659877355112
GPR[EPVAP]-1659877355695
GPR[EPVS]-1659877355695
========
default :

case SPECIALCALL_PROP :
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877355697
GPR[SPVAP]-1659877355697
GPR[EPVAP]-1659877356280
GPR[EPVS]-1659877356280
========
case SPECIALCALL_PROP :
f0=objectValue;
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;



========
GPR[SPVS]-1659877356282
GPR[SPVAP]-1659877356282
GPR[EPVAP]-1659877356858
GPR[EPVS]-1659877356858
========
case 1 :

case SPECIALCALL_PROP :
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877356859
GPR[SPVAP]-1659877356859
GPR[EPVAP]-1659877357431
GPR[EPVS]-1659877357431
========
case SPECIALCALL_PROP :
f2=objectValue;
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;



========
GPR[SPVS]-1659877357432
GPR[SPVAP]-1659877357432
GPR[EPVAP]-1659877358015
GPR[EPVS]-1659877358015
========
case 3 :

case SPECIALCALL_PROP :
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877358016
GPR[SPVAP]-1659877358016
GPR[EPVAP]-1659877358584
GPR[EPVS]-1659877358585
========
if(lookupProperty(COLUMN_BITS)==null){
return intValue;
}
case SPECIALCALL_PROP :
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877358588
GPR[SPVAP]-1659877358588
GPR[EPVAP]-1659877359162
GPR[EPVS]-1659877359162
========
if(lookupProperty(COLUMN_BITS)==null){
Kit.codeBug();
}
case SPECIALCALL_PROP :
swtich (x.intValue){
default :
throw Kit.codeBug();

case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();


}
break;


========
GPR[SPVS]-1659877359164
GPR[SPVAP]-1659877359164
GPR[EPVAP]-1659877359738
GPR[EPVS]-1659877359738
========
if(obj==null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}

========
GPR[SPVS]-1659877360758
GPR[SPVAP]-1659877360758
GPR[EPVAP]-1659877361934
GPR[SPVATF]-1659877361934
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877363023
GPR[EPVS]-1659877363023
========
if(printType)onSealedMutation();
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}

========
GPR[SPVS]-1659877363024
GPR[SPVAP]-1659877363024
GPR[EPVAP]-1659877363751
GPR[EPVS]-1659877363751
========
obj.put(objectValue,objectValue);
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}

========
GPR[SPVS]-1659877363753
GPR[SPVAP]-1659877363753
GPR[EPVAP]-1659877364485
GPR[EPVS]-1659877364485
========
if(obj==objectValue||(obj!=null&&obj.equals(objectValue))){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}

========
GPR[SPVS]-1659877364488
GPR[SPVAP]-1659877364488
GPR[EPVAP]-1659877365220
GPR[EPVS]-1659877365220
========
if(!NodeUtil.isString(next.getNext())){
return ;
}
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}

========
GPR[SPVS]-1659877365222
GPR[SPVAP]-1659877365222
GPR[EPVAP]-1659877365946
GPR[EPVS]-1659877365946
========
default :
value="eval";
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877366870
GPR[SPVAP]-1659877366870
GPR[EPVAP]-1659877368036
GPR[SPVATF]-1659877368036
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877369115
GPR[EPVS]-1659877369115
========
default :
value="with";
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877369117
GPR[SPVAP]-1659877369117
GPR[EPVAP]-1659877370294
GPR[SPVATF]-1659877370294
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877371380
GPR[EPVS]-1659877371380
========
default :
value="both";
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877371381
GPR[SPVAP]-1659877371381
GPR[EPVAP]-1659877372547
GPR[SPVATF]-1659877372547
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877373623
GPR[EPVS]-1659877373623
========
default :
value="right";
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877373624
GPR[SPVAP]-1659877373624
GPR[EPVAP]-1659877374803
GPR[SPVATF]-1659877374803
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877375884
GPR[EPVS]-1659877375884
========
default :
value="left";
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877375886
GPR[SPVAP]-1659877375886
GPR[EPVAP]-1659877377835
GPR[SPVATF]-1659877377835
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877378998
GPR[EPVS]-1659877378998
========
default :
value="target block property";
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877379000
GPR[SPVAP]-1659877379000
GPR[EPVAP]-1659877380242
GPR[SPVATF]-1659877380242
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877381351
GPR[EPVS]-1659877381351
========
case LOCAL_BLOCK_PROP :

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877381353
GPR[SPVAP]-1659877381353
GPR[EPVAP]-1659877382119
GPR[EPVS]-1659877382119
========
if(printType)throw onSeledMutation();
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877382121
GPR[SPVAP]-1659877382121
GPR[EPVAP]-1659877382870
GPR[EPVS]-1659877382870
========
if(N>=FIELDS_STORE_SIZE){
ensureCapacity(N+1);
}
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877382872
GPR[SPVAP]-1659877382872
GPR[EPVAP]-1659877383608
GPR[EPVS]-1659877383609
========
COLUMN_BITS=N+1;
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877383610
GPR[SPVAP]-1659877383610
GPR[EPVAP]-1659877384338
GPR[EPVS]-1659877384338
========
setImpl(N,objectValue);
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877384340
GPR[SPVAP]-1659877384340
GPR[EPVAP]-1659877385065
GPR[EPVS]-1659877385065
========
if(!NodeUtil.isString(next.getNext())){
return ;
}
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877385068
GPR[SPVAP]-1659877385068
GPR[EPVAP]-1659877385790
GPR[EPVS]-1659877385790
========
if(obj.getQualifiedName()==null||obj.getNext()!=null){
return ;
}
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877385792
GPR[SPVAP]-1659877385792
GPR[EPVAP]-1659877386524
GPR[EPVS]-1659877386524
========
default :
tmp=value;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877386526
GPR[SPVAP]-1659877386526
GPR[EPVAP]-1659877387251
GPR[EPVS]-1659877387251
========
default :
f0=objectValue;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877387253
GPR[SPVAP]-1659877387253
GPR[EPVAP]-1659877387982
GPR[EPVS]-1659877387983
========
default :
value=objectValue;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877387984
GPR[SPVAP]-1659877387984
GPR[EPVAP]-1659877388707
GPR[EPVS]-1659877388707
========
default :
tmp=value;
f0=objectValue;
value=objectValue;

Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877388709
GPR[SPVAP]-1659877388709
GPR[EPVAP]-1659877389458
GPR[EPVS]-1659877389458
========
case 1 :

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877389459
GPR[SPVAP]-1659877389459
GPR[EPVAP]-1659877390644
GPR[SPVATF]-1659877390644
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877391710
GPR[EPVS]-1659877391710
========
default :
f2=objectValue;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877391712
GPR[SPVAP]-1659877391712
GPR[EPVAP]-1659877392441
GPR[EPVS]-1659877392441
========
default :
tmp=value;
f2=objectValue;
value=objectValue;

Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877392443
GPR[SPVAP]-1659877392443
GPR[EPVAP]-1659877393189
GPR[EPVS]-1659877393189
========
case 3 :

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877393190
GPR[SPVAP]-1659877393190
GPR[EPVAP]-1659877394344
GPR[SPVATF]-1659877394344
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877395427
GPR[EPVS]-1659877395427
========
case 3 :

default :
tmp=value;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877395429
GPR[SPVAP]-1659877395429
GPR[EPVAP]-1659877396162
GPR[EPVS]-1659877396162
========
case 3 :

default :
value=objectValue;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877396164
GPR[SPVAP]-1659877396164
GPR[EPVAP]-1659877396887
GPR[EPVS]-1659877396887
========
default :
f4=objectValue;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877396889
GPR[SPVAP]-1659877396889
GPR[EPVAP]-1659877397621
GPR[EPVS]-1659877397621
========
default :
index=FIELDS_STORE_SIZE;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877397623
GPR[SPVAP]-1659877397623
GPR[EPVAP]-1659877398350
GPR[EPVS]-1659877398350
========
default :
tmp=value;
f4=objectValue;
value=objectValue;
index=FIELDS_STORE_SIZE;

Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877398351
GPR[SPVAP]-1659877398351
GPR[EPVAP]-1659877399095
GPR[EPVS]-1659877399095
========
default :

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


========
GPR[SPVS]-1659877399096
GPR[SPVAP]-1659877399096
GPR[EPVAP]-1659877399829
GPR[EPVS]-1659877399829
========
case 1 :

default :
f0=objectValue;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877399831
GPR[SPVAP]-1659877399831
GPR[EPVAP]-1659877400568
GPR[EPVS]-1659877400568
========
case 3 :

default :
f2=objectValue;
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;



========
GPR[SPVS]-1659877400570
GPR[SPVAP]-1659877400570
GPR[EPVAP]-1659877401328
GPR[EPVS]-1659877401328
========
for(int i=COLUMN_BITS;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877403499
GPR[SPVAP]-1659877403499
GPR[EPVAP]-1659877404086
GPR[EPVS]-1659877404086
========
for(int i=0;i<keys.length;i++){
hexSize=2;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877404088
GPR[SPVAP]-1659877404088
GPR[EPVAP]-1659877404658
GPR[EPVS]-1659877404658
========
for(int i=0;i<keys.length;i++){
hexSize=4;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877404661
GPR[SPVAP]-1659877404661
GPR[EPVAP]-1659877405237
GPR[EPVS]-1659877405237
========
for(int i=0;i<keys.length;i++){
sb.append("] [end line: ");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877405239
GPR[SPVAP]-1659877405239
GPR[EPVAP]-1659877405818
GPR[EPVS]-1659877405818
========
for(int i=0;i<keys.length;i++){
sb.append(']');
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877405820
GPR[SPVAP]-1659877405820
GPR[EPVAP]-1659877406401
GPR[EPVS]-1659877406401
========
for(int i=0;i<keys.length;i++){
sb.append("] [end line: ");
sb.append(']');

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877406402
GPR[SPVAP]-1659877406402
GPR[EPVAP]-1659877406986
GPR[EPVS]-1659877406986
========
for(int i=0;i<nodeNames.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877406988
GPR[SPVAP]-1659877406988
GPR[EPVAP]-1659877407562
GPR[EPVS]-1659877407562
========
new StringBuilder().append(INDENT);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877407569
GPR[SPVAP]-1659877407569
GPR[EPVAP]-1659877408151
GPR[EPVS]-1659877408151
========
new StringBuilder().append(" {\n");
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877408153
GPR[SPVAP]-1659877408153
GPR[EPVAP]-1659877408735
GPR[EPVS]-1659877408735
========
new StringBuilder().append("node [color=lightblue2, style=filled];\n");
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877408737
GPR[SPVAP]-1659877408737
GPR[EPVAP]-1659877409315
GPR[EPVS]-1659877409315
========
new StringBuilder().append("}\n");
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877409316
GPR[SPVAP]-1659877409316
GPR[EPVAP]-1659877409891
GPR[EPVS]-1659877409891
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
coalescedLog.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877409893
GPR[SPVAP]-1659877409893
GPR[EPVAP]-1659877410466
GPR[EPVS]-1659877410466
========
for(int i=0;i<=keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877410468
GPR[SPVAP]-1659877410468
GPR[EPVAP]-1659877411043
GPR[EPVS]-1659877411043
========
for(int i=0;i<COLUMN_BITS;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877411045
GPR[SPVAP]-1659877411045
GPR[EPVAP]-1659877411620
GPR[EPVS]-1659877411621
========
sb.append("TOTAL NAMES: "+countOf(TriState.BOTH,TriState.BOTH));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877411622
GPR[SPVAP]-1659877411622
GPR[EPVAP]-1659877412241
GPR[EPVS]-1659877412241
========
sb.append("TOTAL CLASSES: "+countOf(TriState.TRUE,TriState.BOTH));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877412243
GPR[SPVAP]-1659877412243
GPR[EPVAP]-1659877412831
GPR[EPVS]-1659877412831
========
sb.append("TOTAL STATIC FUNCTIONS: "+countOf(TriState.FALSE,TriState.BOTH));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877412832
GPR[SPVAP]-1659877412832
GPR[EPVAP]-1659877413419
GPR[EPVS]-1659877413419
========
sb.append("REFERENCED NAMES: "+countOf(TriState.BOTH,TriState.TRUE));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877413420
GPR[SPVAP]-1659877413420
GPR[EPVAP]-1659877413999
GPR[EPVS]-1659877413999
========
sb.append("REFERENCED CLASSES: "+countOf(TriState.TRUE,TriState.TRUE));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877414001
GPR[SPVAP]-1659877414001
GPR[EPVAP]-1659877414581
GPR[EPVS]-1659877414581
========
sb.append("REFERENCED STATIC FUNCTIONS: "+countOf(TriState.FALSE,TriState.TRUE));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877414583
GPR[SPVAP]-1659877414583
GPR[EPVAP]-1659877415172
GPR[EPVS]-1659877415172
========
sb.append("ALL NAMES\n");
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877415174
GPR[SPVAP]-1659877415174
GPR[EPVAP]-1659877415762
GPR[EPVS]-1659877415762
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");
b.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877415764
GPR[SPVAP]-1659877415764
GPR[EPVAP]-1659877416385
GPR[EPVS]-1659877416385
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877416387
GPR[SPVAP]-1659877416387
GPR[EPVAP]-1659877416958
GPR[EPVS]-1659877416958
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
b.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877416960
GPR[SPVAP]-1659877416960
GPR[EPVAP]-1659877417534
GPR[EPVS]-1659877417534
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value==null||COLUMN_BITS<=0){
return details();
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877417536
GPR[SPVAP]-1659877417536
GPR[EPVAP]-1659877418136
GPR[EPVS]-1659877418136
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value==null||COLUMN_BITS<=0){
return details();
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877418138
GPR[SPVAP]-1659877418138
GPR[EPVAP]-1659877418727
GPR[EPVS]-1659877418727
========
new StringBuffer(details()).append(" (");
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877418729
GPR[SPVAP]-1659877418729
GPR[EPVAP]-1659877419315
GPR[EPVS]-1659877419315
========
if(value!=null){
new StringBuffer(details()).append(sourceName);
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877419317
GPR[SPVAP]-1659877419317
GPR[EPVAP]-1659877419895
GPR[EPVS]-1659877419895
========
if(COLUMN_BITS>0){
new StringBuffer(details()).append('#');
buf.append(lineNumber);
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877419896
GPR[SPVAP]-1659877419896
GPR[EPVAP]-1659877420473
GPR[EPVS]-1659877420473
========
new StringBuffer(details()).append(')');
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877420474
GPR[SPVAP]-1659877420474
GPR[EPVAP]-1659877421050
GPR[EPVS]-1659877421050
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
out.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877421052
GPR[SPVAP]-1659877421052
GPR[EPVAP]-1659877421630
GPR[EPVS]-1659877421630
========
sb.append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877421632
GPR[SPVAP]-1659877421632
GPR[EPVAP]-1659877422215
GPR[EPVS]-1659877422215
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.add(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877422216
GPR[SPVAP]-1659877422216
GPR[EPVAP]-1659877422810
GPR[EPVS]-1659877422810
========
for(int i=0;i<length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877422812
GPR[SPVAP]-1659877422812
GPR[EPVAP]-1659877423391
GPR[EPVS]-1659877423391
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
b=divResult[1];
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877423394
GPR[SPVAP]-1659877423394
GPR[EPVAP]-1659877423975
GPR[EPVS]-1659877423975
========
for(int i=0;i<keys.length;i++){
if((COLUMN_BITS<0)){
if(COLUMN_BITS>0){
if(((COLUMN_BITS>0)||(COLUMN_BITS==0&&(length)))){
return COLUMN_BITS+1;
}
}
return COLUMN_BITS+1;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877423976
GPR[SPVAP]-1659877423976
GPR[EPVAP]-1659877424559
GPR[EPVS]-1659877424559
========
for(int i=0;i<keys.length;i++){
if(COLUMN_BITS>0){
return COLUMN_BITS+1;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877424560
GPR[SPVAP]-1659877424560
GPR[EPVAP]-1659877425142
GPR[EPVS]-1659877425142
========
for(int i=0;i<keys.length;i++){
if(i==COLUMN_BITS)break;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877425144
GPR[SPVAP]-1659877425144
GPR[EPVAP]-1659877425717
GPR[EPVS]-1659877425717
========
for(int i=0;i<keys.length;i++){
b=divResult[1];
if((COLUMN_BITS<0)){
if(COLUMN_BITS>0){
if(((COLUMN_BITS>0)||(COLUMN_BITS==0&&(length)))){
return COLUMN_BITS+1;
}
}
return COLUMN_BITS+1;
}
if(COLUMN_BITS>0){
return COLUMN_BITS+1;
}
if(i==COLUMN_BITS)break;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877425719
GPR[SPVAP]-1659877425719
GPR[EPVAP]-1659877426299
GPR[EPVS]-1659877426299
========
for(int i=0;i<Math.min(type,MAX_LIMIT);i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877426301
GPR[SPVAP]-1659877426301
GPR[EPVAP]-1659877426880
GPR[EPVS]-1659877426880
========
if(type==Math.min(type,MAX_LIMIT)){
return sb.toString();
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877426882
GPR[SPVAP]-1659877426882
GPR[EPVAP]-1659877427459
GPR[EPVS]-1659877427459
========
new CRC32().update(str.getBytes());
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877427461
GPR[SPVAP]-1659877427461
GPR[EPVAP]-1659877428040
GPR[EPVS]-1659877428040
========
sb.append('_');
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877428042
GPR[SPVAP]-1659877428042
GPR[EPVAP]-1659877428623
GPR[EPVS]-1659877428623
========
sb.append(Long.toHexString(new CRC32().getValue()&length));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877428625
GPR[SPVAP]-1659877428625
GPR[EPVAP]-1659877429200
GPR[EPVS]-1659877429200
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");
builder.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877429202
GPR[SPVAP]-1659877429202
GPR[EPVAP]-1659877429786
GPR[EPVS]-1659877429786
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877429788
GPR[SPVAP]-1659877429788
GPR[EPVAP]-1659877430362
GPR[EPVS]-1659877430362
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
builder.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877430363
GPR[SPVAP]-1659877430363
GPR[EPVAP]-1659877430939
GPR[EPVS]-1659877430939
========
for(int i=0;i<keys.length;i++){
start=-1;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877430940
GPR[SPVAP]-1659877430940
GPR[EPVAP]-1659877431526
GPR[EPVS]-1659877431526
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
start=COLUMN_BITS+1;
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877431528
GPR[SPVAP]-1659877431528
GPR[EPVAP]-1659877432114
GPR[EPVS]-1659877432114
========
for(int i=0;i<keys.length;i++){
COLUMN_BITS++;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877432119
GPR[SPVAP]-1659877432119
GPR[EPVAP]-1659877432695
GPR[EPVS]-1659877432695
========
for(int i=0;i<keys.length;i++){
start=COLUMN_BITS+1;
COLUMN_BITS++;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877432696
GPR[SPVAP]-1659877432696
GPR[EPVAP]-1659877433270
GPR[EPVS]-1659877433270
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
code.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877433273
GPR[SPVAP]-1659877433273
GPR[EPVAP]-1659877433848
GPR[EPVS]-1659877433848
========
COLUMN_BITS+=value.length();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877433851
GPR[SPVAP]-1659877433851
GPR[EPVAP]-1659877434429
GPR[EPVS]-1659877434429
========
sb.append(value);
for(int i=0;i<length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877434430
GPR[SPVAP]-1659877434430
GPR[EPVAP]-1659877435002
GPR[EPVS]-1659877435002
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
result.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877435004
GPR[SPVAP]-1659877435004
GPR[EPVAP]-1659877435586
GPR[EPVS]-1659877435586
========
for(int i=0;i<length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877435588
GPR[SPVAP]-1659877435588
GPR[EPVAP]-1659877436191
GPR[EPVS]-1659877436191
========
if(type==DTOSTR_FIXED&&(number>=1.0E21||d<=-1.0E21))mode=DTOSTR_STANDARD;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877436193
GPR[SPVAP]-1659877436193
GPR[EPVAP]-1659877436789
GPR[EPVS]-1659877436789
========
sb.append("...[").append(jsType.toString()).append("]");
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877436790
GPR[SPVAP]-1659877436790
GPR[EPVAP]-1659877437372
GPR[EPVS]-1659877437372
========
for(int i=0;i<=length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877437374
GPR[SPVAP]-1659877437374
GPR[EPVAP]-1659877437959
GPR[EPVS]-1659877437959
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
message.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877437961
GPR[SPVAP]-1659877437961
GPR[EPVAP]-1659877438534
GPR[EPVS]-1659877438534
========
for(int i=0;i<keys.length;i++){
++i;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877438536
GPR[SPVAP]-1659877438536
GPR[EPVAP]-1659877439112
GPR[EPVS]-1659877439113
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
paths.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877439115
GPR[SPVAP]-1659877439115
GPR[EPVAP]-1659877439694
GPR[EPVS]-1659877439694
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
d-=L*number;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877439696
GPR[SPVAP]-1659877439696
GPR[EPVAP]-1659877440274
GPR[EPVS]-1659877440274
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
d*=10.0;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877440275
GPR[SPVAP]-1659877440275
GPR[EPVAP]-1659877440880
GPR[EPVS]-1659877440880
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
d-=L*number;
d*=10.0;

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877440881
GPR[SPVAP]-1659877440881
GPR[EPVAP]-1659877441459
GPR[EPVS]-1659877441459
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(number<number){
return i+1;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877441462
GPR[SPVAP]-1659877441462
GPR[EPVAP]-1659877442041
GPR[EPVS]-1659877442041
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(number<number){
return i+1;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877442043
GPR[SPVAP]-1659877442043
GPR[EPVAP]-1659877442619
GPR[EPVS]-1659877442619
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
L=(long)number;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877442621
GPR[SPVAP]-1659877442621
GPR[EPVAP]-1659877443199
GPR[EPVS]-1659877443199
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
d-=L;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877443200
GPR[SPVAP]-1659877443200
GPR[EPVAP]-1659877443783
GPR[EPVS]-1659877443783
========
for(int i=0;i<keys.length;i++){
if(++COLUMN_BITS>=length)break;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877443785
GPR[SPVAP]-1659877443785
GPR[EPVAP]-1659877444366
GPR[EPVS]-1659877444366
========
for(int i=0;i<keys.length;i++){
eps*=10.0;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877444368
GPR[SPVAP]-1659877444368
GPR[EPVAP]-1659877444960
GPR[EPVS]-1659877444960
========
for(int i=0;i<keys.length;i++){
d*=10.0;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877444961
GPR[SPVAP]-1659877444961
GPR[EPVAP]-1659877445548
GPR[EPVS]-1659877445548
========
for(int i=0;i<keys.length;i++){
L=(long)number;
d-=L;
if(++COLUMN_BITS>=length)break;
eps*=10.0;
d*=10.0;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877445551
GPR[SPVAP]-1659877445551
GPR[EPVAP]-1659877446129
GPR[EPVS]-1659877446129
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.checkState(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877446130
GPR[SPVAP]-1659877446130
GPR[EPVAP]-1659877446723
GPR[EPVS]-1659877446723
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
L=(long)number;
d-=L;

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877446725
GPR[SPVAP]-1659877446725
GPR[EPVAP]-1659877447315
GPR[EPVS]-1659877447315
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
L=(long)number;
d-=L;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877447317
GPR[SPVAP]-1659877447317
GPR[EPVAP]-1659877447894
GPR[EPVS]-1659877447894
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");
sb.append(propToString(type));
b.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877447897
GPR[SPVAP]-1659877447897
GPR[EPVAP]-1659877448475
GPR[EPVS]-1659877448475
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
b.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877448476
GPR[SPVAP]-1659877448476
GPR[EPVAP]-1659877449055
GPR[EPVS]-1659877449055
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
COLUMN_BITS++;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877449057
GPR[SPVAP]-1659877449057
GPR[EPVAP]-1659877449635
GPR[EPVS]-1659877449635
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb=new StringBuffer(L+3);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877449636
GPR[SPVAP]-1659877449636
GPR[EPVAP]-1659877450218
GPR[EPVS]-1659877450218
========
for(int i=0;i<keys.length;i++){
lineLength=0;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877450220
GPR[SPVAP]-1659877450220
GPR[EPVAP]-1659877450796
GPR[EPVS]-1659877450796
========
for(int i=0;i<keys.length;i++){
COLUMN_BITS++;
lineLength=0;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877450798
GPR[SPVAP]-1659877450798
GPR[EPVAP]-1659877451387
GPR[EPVS]-1659877451387
========
for(int i=0;i<keys.length;i++){
COLUMN_BITS++;
int type=keys[i];
PropListItem x=lookupProperty(type);
code.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877451388
GPR[SPVAP]-1659877451388
GPR[EPVAP]-1659877451967
GPR[EPVS]-1659877451967
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877451968
GPR[SPVAP]-1659877451968
GPR[EPVAP]-1659877452573
GPR[EPVS]-1659877452573
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877452575
GPR[SPVAP]-1659877452575
GPR[EPVAP]-1659877453157
GPR[EPVS]-1659877453157
========
maybeEndStatement();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877453158
GPR[SPVAP]-1659877453158
GPR[EPVAP]-1659877453742
GPR[EPVS]-1659877453742
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877453743
GPR[SPVAP]-1659877453743
GPR[EPVAP]-1659877454317
GPR[EPVS]-1659877454317
========
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877454319
GPR[SPVAP]-1659877454319
GPR[EPVAP]-1659877454907
GPR[EPVS]-1659877454907
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
code.append(" [");
code.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877454909
GPR[SPVAP]-1659877454909
GPR[EPVAP]-1659877455495
GPR[EPVS]-1659877455495
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
code.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877455496
GPR[SPVAP]-1659877455496
GPR[EPVAP]-1659877456072
GPR[EPVS]-1659877456072
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
lineLength=0;
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877456074
GPR[SPVAP]-1659877456074
GPR[EPVAP]-1659877456664
GPR[EPVS]-1659877456664
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
COLUMN_BITS++;
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877456665
GPR[SPVAP]-1659877456665
GPR[EPVAP]-1659877457255
GPR[EPVS]-1659877457255
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
lineLength=0;
COLUMN_BITS++;

sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877457256
GPR[SPVAP]-1659877457256
GPR[EPVAP]-1659877457846
GPR[EPVS]-1659877457846
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
COLUMN_BITS++;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877457849
GPR[SPVAP]-1659877457849
GPR[EPVAP]-1659877458434
GPR[EPVS]-1659877458434
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(NodeUtil.isLatin(str)){
return s;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877458436
GPR[SPVAP]-1659877458436
GPR[EPVAP]-1659877459013
GPR[EPVS]-1659877459013
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(NodeUtil.isLatin(str)){
return s;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877459014
GPR[SPVAP]-1659877459014
GPR[EPVAP]-1659877459598
GPR[EPVS]-1659877459598
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.multiply(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877459600
GPR[SPVAP]-1659877459600
GPR[EPVAP]-1659877460177
GPR[EPVS]-1659877460177
========
for(int i=0;i<keys.length;i++){
if(i>=length)break;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877460179
GPR[SPVAP]-1659877460179
GPR[EPVAP]-1659877460757
GPR[EPVS]-1659877460757
========
for(int i=0;i<keys.length;i++){
b=divResult[1];
if(i>=length)break;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877460758
GPR[SPVAP]-1659877460758
GPR[EPVAP]-1659877461360
GPR[EPVS]-1659877461360
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
s2+=Log2P;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877461363
GPR[SPVAP]-1659877461363
GPR[EPVAP]-1659877461951
GPR[EPVS]-1659877461951
========
if(-(i>>>Exp_shift1&Exp_mask>>Exp_shift1)==0)s2=-1;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877461953
GPR[SPVAP]-1659877461953
GPR[EPVAP]-1659877462539
GPR[EPVS]-1659877462539
========
COLUMN_BITS+=Bias+P;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877462541
GPR[SPVAP]-1659877462541
GPR[EPVAP]-1659877463132
GPR[EPVS]-1659877463132
========
sb.append('.');
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877463133
GPR[SPVAP]-1659877463133
GPR[EPVAP]-1659877463709
GPR[EPVS]-1659877463709
========
if((COLUMN_BITS=(word0(number)>>>Exp_shift1&(Exp_mask>>Exp_shift1)))!=0){
number=setWord0(d,(word0(d)&Frac_mask1)|Exp_11);
i-=Bias;
printType=false;
}else {
i=new int[1][0]+new int[1][0];
serialVersionUID=(i>32)?word0(d)<<(64-i)|word1(d)>>>(i-32):word1(d)<<(32-i);
d2=setWord0(x,word0(x)-31*Exp_msk1);
i-=(Bias+(P-1)-1)+1;
denorm=true;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877463712
GPR[SPVAP]-1659877463712
GPR[EPVAP]-1659877464290
GPR[EPVS]-1659877464290
========
number=(number-1.5)*0.28952965+0.17609125+COLUMN_BITS*0.30103;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877464291
GPR[SPVAP]-1659877464291
GPR[EPVAP]-1659877464874
GPR[EPVS]-1659877464874
========
i=(int)number;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877464876
GPR[SPVAP]-1659877464876
GPR[EPVAP]-1659877465451
GPR[EPVS]-1659877465451
========
if(number<0.0&&ds!=i)k--;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877465453
GPR[SPVAP]-1659877465453
GPR[EPVAP]-1659877466031
GPR[EPVS]-1659877466031
========
printType=true;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877466032
GPR[SPVAP]-1659877466032
GPR[EPVAP]-1659877466611
GPR[EPVS]-1659877466611
========
if(i>=0&&k<=Ten_pmax){
if(number<keys[k])k--;
printType=false;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877466613
GPR[SPVAP]-1659877466613
GPR[EPVAP]-1659877467196
GPR[EPVS]-1659877467196
========
COLUMN_BITS=new int[1][0]-COLUMN_BITS;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877467197
GPR[SPVAP]-1659877467197
GPR[EPVAP]-1659877467777
GPR[EPVS]-1659877467777
========
if(COLUMN_BITS>=0){
COLUMN_BITS=0;
COLUMN_BITS=j;
}else {
b2=-j;
s2=0;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877467780
GPR[SPVAP]-1659877467780
GPR[EPVAP]-1659877468358
GPR[EPVS]-1659877468358
========
if(i>=0){
COLUMN_BITS=0;
COLUMN_BITS=k;
COLUMN_BITS+=k;
}else {
COLUMN_BITS-=k;
b5=-k;
s5=0;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877468361
GPR[SPVAP]-1659877468361
GPR[EPVAP]-1659877468938
GPR[EPVS]-1659877468938
========
appendInferredPaths(str);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877468941
GPR[SPVAP]-1659877468941
GPR[EPVAP]-1659877469528
GPR[EPVS]-1659877469528
========
sb.append(";\n");
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877469530
GPR[SPVAP]-1659877469530
GPR[EPVAP]-1659877470105
GPR[EPVS]-1659877470105
========
for(int i=0;i<keys.length;i++){
maybeLineBreak();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877470106
GPR[SPVAP]-1659877470106
GPR[EPVAP]-1659877470694
GPR[EPVS]-1659877470694
========
for(int i=0;i<keys.length;i++){
endLine();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877470696
GPR[SPVAP]-1659877470696
GPR[EPVAP]-1659877471271
GPR[EPVS]-1659877471271
========
for(int i=0;i<keys.length;i++){
statementNeedsEnded=false;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877471272
GPR[SPVAP]-1659877471272
GPR[EPVAP]-1659877471856
GPR[EPVS]-1659877471856
========
for(int i=0;i<keys.length;i++){
maybeLineBreak();
endLine();
statementNeedsEnded=false;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877471858
GPR[SPVAP]-1659877471858
GPR[EPVAP]-1659877472439
GPR[EPVS]-1659877472439
========
appendInferredPaths(getExportedPath());
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877472440
GPR[SPVAP]-1659877472440
GPR[EPVAP]-1659877473010
GPR[EPVS]-1659877473010
========
if(printType)throw onSeledMutation();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877473044
GPR[SPVAP]-1659877473044
GPR[EPVAP]-1659877473657
GPR[EPVS]-1659877473657
========
COLUMN_BITS=N+1;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877473658
GPR[SPVAP]-1659877473658
GPR[EPVAP]-1659877474247
GPR[EPVS]-1659877474247
========
setImpl(N,objectValue);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877474249
GPR[SPVAP]-1659877474249
GPR[EPVAP]-1659877474847
GPR[EPVS]-1659877474847
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.equals("function")){
JSType getNativeType(U2U_CONSTRUCTOR_TYPE)=getNativeType(U2U_CONSTRUCTOR_TYPE);
return length&&ctorType.isSubtype(type)?ctorType:null;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877474849
GPR[SPVAP]-1659877474849
GPR[EPVAP]-1659877475431
GPR[EPVS]-1659877475431
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.equals("function")){
JSType getNativeType(U2U_CONSTRUCTOR_TYPE)=getNativeType(U2U_CONSTRUCTOR_TYPE);
return length&&ctorType.isSubtype(type)?ctorType:null;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877475433
GPR[SPVAP]-1659877475433
GPR[EPVAP]-1659877476024
GPR[EPVS]-1659877476024
========
if(COLUMN_BITS<0)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877476026
GPR[SPVAP]-1659877476026
GPR[EPVAP]-1659877476617
GPR[EPVS]-1659877476617
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.equals("function")){
return getNativeType(U2U_CONSTRUCTOR_TYPE);
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877476619
GPR[SPVAP]-1659877476619
GPR[EPVAP]-1659877477204
GPR[EPVS]-1659877477204
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.equals("function")){
return getNativeType(U2U_CONSTRUCTOR_TYPE);
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877477205
GPR[SPVAP]-1659877477205
GPR[EPVAP]-1659877477788
GPR[EPVS]-1659877477788
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(x==null){
return intValue;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877477790
GPR[SPVAP]-1659877477790
GPR[EPVAP]-1659877478366
GPR[EPVS]-1659877478366
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(x==null){
return intValue;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877478368
GPR[SPVAP]-1659877478368
GPR[EPVAP]-1659877478947
GPR[EPVS]-1659877478947
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(x==null){
return null;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877478949
GPR[SPVAP]-1659877478949
GPR[EPVAP]-1659877479525
GPR[EPVS]-1659877479525
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(x==null){
return null;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877479526
GPR[SPVAP]-1659877479526
GPR[EPVAP]-1659877480103
GPR[EPVS]-1659877480103
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(obj==objectValue||(current!=null&&current.equals(obj))){
return i;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877480105
GPR[SPVAP]-1659877480105
GPR[EPVAP]-1659877480679
GPR[EPVS]-1659877480679
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(obj==objectValue||(current!=null&&current.equals(obj))){
return i;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877480681
GPR[SPVAP]-1659877480681
GPR[EPVAP]-1659877481282
GPR[EPVS]-1659877481282
========
for(int i=0;i<keys.length;i++){
--i;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877481284
GPR[SPVAP]-1659877481284
GPR[EPVAP]-1659877481863
GPR[EPVS]-1659877481863
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
f0=objectValue;
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877481865
GPR[SPVAP]-1659877481865
GPR[EPVAP]-1659877482445
GPR[EPVS]-1659877482445
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
f1=objectValue;
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877482447
GPR[SPVAP]-1659877482447
GPR[EPVAP]-1659877483023
GPR[EPVS]-1659877483023
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
f2=objectValue;
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877483024
GPR[SPVAP]-1659877483024
GPR[EPVAP]-1659877483655
GPR[EPVS]-1659877483655
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
f3=objectValue;
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877483656
GPR[SPVAP]-1659877483656
GPR[EPVAP]-1659877484255
GPR[EPVS]-1659877484255
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
f4=objectValue;
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877484256
GPR[SPVAP]-1659877484256
GPR[EPVAP]-1659877484839
GPR[EPVS]-1659877484839
========
if(!(0<=COLUMN_BITS&&index<=N))throw onInvalidIndex(index,N+1);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877484840
GPR[SPVAP]-1659877484840
GPR[EPVAP]-1659877485426
GPR[EPVS]-1659877485426
========
if(printType)throw onSeledMutation();
COLUMN_BITS=N+1;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877485427
GPR[SPVAP]-1659877485427
GPR[EPVAP]-1659877486021
GPR[EPVS]-1659877486021
========
for(int i=0;i<children.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877486028
GPR[SPVAP]-1659877486028
GPR[EPVAP]-1659877486611
GPR[EPVS]-1659877486611
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException("duplicate child");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877486612
GPR[SPVAP]-1659877486612
GPR[EPVAP]-1659877487186
GPR[EPVS]-1659877487186
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException("duplicate child");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877487188
GPR[SPVAP]-1659877487188
GPR[EPVAP]-1659877487768
GPR[EPVS]-1659877487768
========
for(int i=0;i<keys.length;i++){
children[i-1].next=children[i];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877487770
GPR[SPVAP]-1659877487770
GPR[EPVAP]-1659877488343
GPR[EPVS]-1659877488343
========
for(int i=0;i<keys.length;i++){
children[i-1].parent=this;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877488345
GPR[SPVAP]-1659877488345
GPR[EPVAP]-1659877488923
GPR[EPVS]-1659877488923
========
for(int i=0;i<keys.length;i++){
children[i-1].next=children[i];
children[i-1].parent=this;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877488925
GPR[SPVAP]-1659877488925
GPR[EPVAP]-1659877489501
GPR[EPVS]-1659877489501
========
this.x=COLUMN_BITS;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877489502
GPR[SPVAP]-1659877489502
GPR[EPVAP]-1659877490073
GPR[EPVS]-1659877490073
========
parent=null;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877490074
GPR[SPVAP]-1659877490074
GPR[EPVAP]-1659877490647
GPR[EPVS]-1659877490647
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877490648
GPR[SPVAP]-1659877490648
GPR[EPVAP]-1659877491245
GPR[EPVS]-1659877491245
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(Token.printTrees){
StringBuilder sb=new StringBuilder();
toString(sb,printSource,printAnnotations,printType);
return sb.toString();
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877491247
GPR[SPVAP]-1659877491247
GPR[EPVAP]-1659877491835
GPR[EPVS]-1659877491835
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
toString(sb,printSource,printAnnotations,printType);
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877491836
GPR[SPVAP]-1659877491836
GPR[EPVAP]-1659877492442
GPR[EPVS]-1659877492442
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException("StringNode: str is null");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877492444
GPR[SPVAP]-1659877492444
GPR[EPVAP]-1659877493028
GPR[EPVS]-1659877493028
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException("StringNode: str is null");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877493029
GPR[SPVAP]-1659877493029
GPR[EPVAP]-1659877493639
GPR[EPVS]-1659877493639
========
super(type,COLUMN_BITS,COLUMN_BITS);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877493641
GPR[SPVAP]-1659877493641
GPR[EPVAP]-1659877494214
GPR[EPVS]-1659877494214
========
this.str=str;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877494216
GPR[SPVAP]-1659877494216
GPR[EPVAP]-1659877494799
GPR[EPVS]-1659877494799
========
for(int i=0;i<arr.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877494802
GPR[SPVAP]-1659877494802
GPR[EPVAP]-1659877495391
GPR[EPVS]-1659877495391
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(null==length){
return next.cloneTree();
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877495393
GPR[SPVAP]-1659877495393
GPR[EPVAP]-1659877495997
GPR[EPVS]-1659877495997
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(null==length){
return next.cloneTree();
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877495998
GPR[SPVAP]-1659877495998
GPR[EPVAP]-1659877496591
GPR[EPVS]-1659877496591
========
for(int i=0;i<indices1.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877496593
GPR[SPVAP]-1659877496593
GPR[EPVAP]-1659877497174
GPR[EPVS]-1659877497174
========
for(int i=0;i<componentNames.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877497176
GPR[SPVAP]-1659877497176
GPR[EPVAP]-1659877497751
GPR[EPVS]-1659877497751
========
Arrays.sort(keys);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877497753
GPR[SPVAP]-1659877497753
GPR[EPVAP]-1659877498334
GPR[EPVS]-1659877498334
========
super(type);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877498336
GPR[SPVAP]-1659877498336
GPR[EPVAP]-1659877498924
GPR[EPVS]-1659877498924
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException("StringNode: str is null");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException("StringNode: str is null");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877498927
GPR[SPVAP]-1659877498927
GPR[EPVAP]-1659877499510
GPR[EPVS]-1659877499510
========
this.str=str;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException("StringNode: str is null");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877499512
GPR[SPVAP]-1659877499512
GPR[EPVAP]-1659877500087
GPR[EPVS]-1659877500087
========
this.str=str;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException("StringNode: str is null");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877500089
GPR[SPVAP]-1659877500089
GPR[EPVAP]-1659877500660
GPR[EPVS]-1659877500660
========
this.str=str;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException("StringNode: str is null");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException("StringNode: str is null");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877500662
GPR[SPVAP]-1659877500662
GPR[EPVAP]-1659877501237
GPR[EPVS]-1659877501237
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
lineMapping=new LineMapping();
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877501239
GPR[SPVAP]-1659877501239
GPR[EPVAP]-1659877501817
GPR[EPVS]-1659877501817
========
for(int i=0;i<keys.length;i++){
lineMapping.lineNumber=COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877501818
GPR[SPVAP]-1659877501818
GPR[EPVAP]-1659877502398
GPR[EPVS]-1659877502398
========
for(int i=0;i<keys.length;i++){
lineMapping=new LineMapping();
lineMapping.lineNumber=COLUMN_BITS;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877502401
GPR[SPVAP]-1659877502401
GPR[EPVAP]-1659877502989
GPR[EPVS]-1659877502989
========
for(int i=0;i<files.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877502990
GPR[SPVAP]-1659877502990
GPR[EPVAP]-1659877503565
GPR[EPVS]-1659877503565
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
c=getChar();
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877503567
GPR[SPVAP]-1659877503567
GPR[EPVAP]-1659877504157
GPR[EPVS]-1659877504157
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(x==null){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877504159
GPR[SPVAP]-1659877504159
GPR[EPVAP]-1659877504744
GPR[EPVS]-1659877504744
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(x==null){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877504746
GPR[SPVAP]-1659877504746
GPR[EPVAP]-1659877505323
GPR[EPVS]-1659877505323
========
for(int i=0;i<keys.length;i++){
addToString(type);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877505482
GPR[SPVAP]-1659877505482
GPR[EPVAP]-1659877506071
GPR[EPVS]-1659877506071
========
for(int i=0;i<keys.length;i++){
c=getChar();
addToString(type);

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877506072
GPR[SPVAP]-1659877506072
GPR[EPVAP]-1659877506653
GPR[EPVS]-1659877506653
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
ancestorBlock=next;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877506655
GPR[SPVAP]-1659877506655
GPR[EPVAP]-1659877507234
GPR[EPVS]-1659877507234
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
addingRoot=next;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877507236
GPR[SPVAP]-1659877507236
GPR[EPVAP]-1659877507813
GPR[EPVS]-1659877507813
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(!Character.isJavaIdentifierPart(str.charAt(i)))return false;
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877507815
GPR[SPVAP]-1659877507815
GPR[EPVAP]-1659877508395
GPR[EPVS]-1659877508395
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(!Character.isJavaIdentifierPart(str.charAt(i)))return false;
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877508397
GPR[SPVAP]-1659877508397
GPR[EPVAP]-1659877508979
GPR[EPVS]-1659877508979
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
addingRoot=next.getLastChild();
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877508981
GPR[SPVAP]-1659877508981
GPR[EPVAP]-1659877509573
GPR[EPVS]-1659877509573
========
for(int i=0;i<keys.length;i++){
if(i!=obj)return false;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877509575
GPR[SPVAP]-1659877509575
GPR[EPVAP]-1659877510159
GPR[EPVS]-1659877510159
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(next.getType()==type){
return c;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877510160
GPR[SPVAP]-1659877510160
GPR[EPVAP]-1659877510741
GPR[EPVS]-1659877510741
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(next.getType()==type){
return c;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877510742
GPR[SPVAP]-1659877510742
GPR[EPVAP]-1659877511318
GPR[EPVS]-1659877511318
========
for(int i=0;i<parameterTypes.length-1;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877511320
GPR[SPVAP]-1659877511320
GPR[EPVAP]-1659877511918
GPR[EPVS]-1659877511918
========
for(int i=0;i<keys.length;i++){
if(printType){
keys[ivaluesShift+index]=COLUMN_BITS;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877511920
GPR[SPVAP]-1659877511920
GPR[EPVAP]-1659877512521
GPR[EPVS]-1659877512521
========
for(int i=0;i<edgeList.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877512525
GPR[SPVAP]-1659877512525
GPR[EPVAP]-1659877513099
GPR[EPVS]-1659877513099
========
for(int i=0;i<keys.length;i++){
edgeList[i]=formatNodeName(COLUMN_BITS)+ARROW;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877513100
GPR[SPVAP]-1659877513100
GPR[EPVAP]-1659877513675
GPR[EPVS]-1659877513675
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
if(obj==null)break;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877513678
GPR[SPVAP]-1659877513678
GPR[EPVAP]-1659877514251
GPR[EPVS]-1659877514251
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=Token.AND;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877514254
GPR[SPVAP]-1659877514254
GPR[EPVAP]-1659877514839
GPR[EPVS]-1659877514839
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=Token.OR;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877514841
GPR[SPVAP]-1659877514841
GPR[EPVAP]-1659877515486
GPR[EPVS]-1659877515486
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException("keepSimplifiedHookExpression must keep at least 1 branch");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877515488
GPR[SPVAP]-1659877515488
GPR[EPVAP]-1659877516076
GPR[EPVS]-1659877516076
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException("keepSimplifiedHookExpression must keep at least 1 branch");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877516078
GPR[SPVAP]-1659877516078
GPR[EPVAP]-1659877516657
GPR[EPVS]-1659877516657
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
compiler.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877516658
GPR[SPVAP]-1659877516658
GPR[EPVAP]-1659877517243
GPR[EPVS]-1659877517244
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.report(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877517245
GPR[SPVAP]-1659877517245
GPR[EPVAP]-1659877517820
GPR[EPVS]-1659877517820
========
for(int i=0;i<obj;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877517822
GPR[SPVAP]-1659877517822
GPR[EPVAP]-1659877518399
GPR[EPVS]-1659877518399
========
for(int i=0;i<keys.length;i++){
if(Character.isUpperCase(str.charAt(i))||!Character.isLetter(str.charAt(i))){
return true;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877518401
GPR[SPVAP]-1659877518401
GPR[EPVAP]-1659877518976
GPR[EPVS]-1659877518976
========
for(int i=0;i<keys.length;i++){
if(keys[i]!=EMPTY&&keys[i]!=DELETED){
result[--n]=keys[i];
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877518978
GPR[SPVAP]-1659877518978
GPR[EPVAP]-1659877519557
GPR[EPVS]-1659877519557
========
for(int i=0;i<keys.length;i++){
replaceWithEmpty(next,next.getParent());
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877519561
GPR[SPVAP]-1659877519561
GPR[EPVAP]-1659877520140
GPR[EPVS]-1659877520140
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
replaceWithNull(next,next);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877520141
GPR[SPVAP]-1659877520141
GPR[EPVAP]-1659877520742
GPR[EPVS]-1659877520742
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
COLUMN_BITS++;
value="target block property";
break;


case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877520744
GPR[SPVAP]-1659877520744
GPR[EPVAP]-1659877521330
GPR[EPVS]-1659877521330
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
COLUMN_BITS++;
value="last local block";
break;


case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877521332
GPR[SPVAP]-1659877521332
GPR[EPVAP]-1659877521934
GPR[EPVS]-1659877521934
========
for(int i=0;i<keys.length;i++){
if(i==length){
try{
if(!fillSourceBuffer()){
break;
}
}catch (IOException ioe) {
  break;
}

}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877521936
GPR[SPVAP]-1659877521936
GPR[EPVAP]-1659877522536
GPR[EPVS]-1659877522536
========
for(int i=0;i<keys.length;i++){
if(ScriptRuntime.isJSLineTerminator(type)){
break;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877522537
GPR[SPVAP]-1659877522537
GPR[EPVAP]-1659877523115
GPR[EPVS]-1659877523115
========
for(int i=0;i<keys.length;i++){
if(i==length){
try{
if(!fillSourceBuffer()){
break;
}
}catch (IOException ioe) {
  break;
}

}
if(ScriptRuntime.isJSLineTerminator(type)){
break;
}

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877523116
GPR[SPVAP]-1659877523116
GPR[EPVAP]-1659877523697
GPR[EPVS]-1659877523697
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.name(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877523699
GPR[SPVAP]-1659877523699
GPR[EPVAP]-1659877524275
GPR[EPVS]-1659877524275
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
err.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877524277
GPR[SPVAP]-1659877524277
GPR[EPVAP]-1659877524851
GPR[EPVS]-1659877524851
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
--COLUMN_BITS;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877524853
GPR[SPVAP]-1659877524853
GPR[EPVAP]-1659877525430
GPR[EPVS]-1659877525430
========
for(int i=0;i<parts.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877525432
GPR[SPVAP]-1659877525432
GPR[EPVAP]-1659877526015
GPR[EPVS]-1659877526015
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
cssNames.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877526016
GPR[SPVAP]-1659877526016
GPR[EPVAP]-1659877526599
GPR[EPVS]-1659877526599
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
compiler.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877526600
GPR[SPVAP]-1659877526600
GPR[EPVAP]-1659877527190
GPR[EPVS]-1659877527190
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.report(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877527192
GPR[SPVAP]-1659877527192
GPR[EPVAP]-1659877527771
GPR[EPVS]-1659877527771
========
for(int i=0;i<keys.length;i++){
replaceWithEmpty(next,next.getParent());
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
replaceWithNull(next,next);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877527773
GPR[SPVAP]-1659877527773
GPR[EPVAP]-1659877528362
GPR[EPVS]-1659877528362
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
bag=new Object[L-1];
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877528365
GPR[SPVAP]-1659877528365
GPR[EPVAP]-1659877528954
GPR[EPVS]-1659877528954
========
for(int i=0;i<lineMapping.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877528956
GPR[SPVAP]-1659877528956
GPR[EPVAP]-1659877529533
GPR[EPVS]-1659877529533
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
charToMap.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877529535
GPR[SPVAP]-1659877529535
GPR[EPVAP]-1659877530127
GPR[EPVS]-1659877530127
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=Integer.MAX_VALUE;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877530129
GPR[SPVAP]-1659877530129
GPR[EPVAP]-1659877530707
GPR[EPVS]-1659877530707
========
for(int i=0;i<=lineMapping.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877530708
GPR[SPVAP]-1659877530708
GPR[EPVAP]-1659877531291
GPR[EPVS]-1659877531291
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=firstChars.length;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877531299
GPR[SPVAP]-1659877531299
GPR[EPVAP]-1659877531883
GPR[EPVS]-1659877531883
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=nonFirstChars.length;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877531884
GPR[SPVAP]-1659877531884
GPR[EPVAP]-1659877532479
GPR[EPVS]-1659877532479
========
for(int i=0;i<keys.length;i++){
name+=firstChars[pos];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877532481
GPR[SPVAP]-1659877532481
GPR[EPVAP]-1659877533056
GPR[EPVS]-1659877533056
========
for(int i=0;i<keys.length;i++){
i/=firstChars.length;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877533058
GPR[SPVAP]-1659877533058
GPR[EPVAP]-1659877533637
GPR[EPVS]-1659877533637
========
for(int i=0;i<keys.length;i++){
name+=firstChars[pos];
i/=firstChars.length;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877533638
GPR[SPVAP]-1659877533638
GPR[EPVAP]-1659877534227
GPR[EPVS]-1659877534227
========
for(int i=0;i<keys.length;i++){
i--;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877534229
GPR[SPVAP]-1659877534229
GPR[EPVAP]-1659877534822
GPR[EPVS]-1659877534822
========
for(int i=0;i<keys.length;i++){
name+=nonFirstChars[pos];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877534823
GPR[SPVAP]-1659877534823
GPR[EPVAP]-1659877535398
GPR[EPVS]-1659877535398
========
for(int i=0;i<keys.length;i++){
i/=nonFirstChars.length;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877535399
GPR[SPVAP]-1659877535400
GPR[EPVAP]-1659877535969
GPR[EPVS]-1659877535969
========
for(int i=0;i<keys.length;i++){
i--;
name+=nonFirstChars[pos];
i/=nonFirstChars.length;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877535970
GPR[SPVAP]-1659877535970
GPR[EPVAP]-1659877536548
GPR[EPVS]-1659877536548
========
obj=COLUMN_BITS;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877536551
GPR[SPVAP]-1659877536551
GPR[EPVAP]-1659877537139
GPR[EPVS]-1659877537139
========
if(length&&obj<2)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877537141
GPR[SPVAP]-1659877537141
GPR[EPVAP]-1659877537741
GPR[EPVS]-1659877537741
========
if(COLUMN_BITS<0)Kit.codeBug();
obj=COLUMN_BITS;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877537743
GPR[SPVAP]-1659877537743
GPR[EPVAP]-1659877538314
GPR[EPVS]-1659877538314
========
if(COLUMN_BITS<0)Kit.codeBug();
if(length&&obj<2)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877538316
GPR[SPVAP]-1659877538316
GPR[EPVAP]-1659877538901
GPR[EPVS]-1659877538901
========
obj=COLUMN_BITS;
if(length&&obj<2)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877538902
GPR[SPVAP]-1659877538902
GPR[EPVAP]-1659877539483
GPR[EPVS]-1659877539484
========
if(COLUMN_BITS<0)Kit.codeBug();
obj=COLUMN_BITS;
if(length&&obj<2)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877539485
GPR[SPVAP]-1659877539485
GPR[EPVAP]-1659877540071
GPR[EPVS]-1659877540071
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalStateException("DecomposeExpression depth exceeded on :\n"+next.toStringTree());

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877540073
GPR[SPVAP]-1659877540073
GPR[EPVAP]-1659877540647
GPR[EPVS]-1659877540647
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalStateException("DecomposeExpression depth exceeded on :\n"+next.toStringTree());

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877540649
GPR[SPVAP]-1659877540649
GPR[EPVAP]-1659877541235
GPR[EPVS]-1659877541235
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
globalNames.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877541237
GPR[SPVAP]-1659877541237
GPR[EPVAP]-1659877541817
GPR[EPVS]-1659877541817
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.join(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877541819
GPR[SPVAP]-1659877541819
GPR[EPVAP]-1659877542415
GPR[EPVS]-1659877542415
========
for(int i=0;i<keys.length;i++){
if(obj!=null&&obj!=DELETED){
int type=keys[oldKeys.length+i];
int insertNewKey(obj,type)=insertNewKey(obj,type);
values[index]=oldValues[i];
--COLUMN_BITS;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877542418
GPR[SPVAP]-1659877542418
GPR[EPVAP]-1659877542991
GPR[EPVS]-1659877542991
========
if(type!=Node.NON_SPECIALCALL){
setRequiresActivation();
new Node(COLUMN_BITS,next,COLUMN_BITS,COLUMN_BITS).putIntProp(Node.SPECIALCALL_PROP,type);
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877542994
GPR[SPVAP]-1659877542994
GPR[EPVAP]-1659877543570
GPR[EPVS]-1659877543570
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(i+1>=next.getChildCount()){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877543573
GPR[SPVAP]-1659877543573
GPR[EPVAP]-1659877544147
GPR[EPVS]-1659877544147
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(i+1>=next.getChildCount()){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877544149
GPR[SPVAP]-1659877544149
GPR[EPVAP]-1659877544725
GPR[EPVS]-1659877544725
========
case Token.STRING :

for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877544727
GPR[SPVAP]-1659877544727
GPR[EPVAP]-1659877545311
GPR[EPVS]-1659877545311
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj==null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877545316
GPR[SPVAP]-1659877545316
GPR[EPVAP]-1659877546284
GPR[EPVS]-1659877546284
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj==UniqueTag.NULL_VALUE){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877546287
GPR[SPVAP]-1659877546287
GPR[EPVAP]-1659877546900
GPR[EPVS]-1659877546900
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=UniqueTag.NULL_VALUE){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877546902
GPR[SPVAP]-1659877546902
GPR[EPVAP]-1659877547495
GPR[EPVS]-1659877547495
========
for(int i=0;i<keys.length;i++){
addExpr(first.getNext(),type);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877547497
GPR[SPVAP]-1659877547497
GPR[EPVAP]-1659877548097
GPR[EPVS]-1659877548097
========
for(int i=0;i<keys.length;i++){
addExpr(last,type);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877548099
GPR[SPVAP]-1659877548099
GPR[EPVAP]-1659877548698
GPR[EPVS]-1659877548698
========
for(int i=0;i<keys.length;i++){
addExpr(first.getNext(),type);
addExpr(last,type);

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877548701
GPR[SPVAP]-1659877548701
GPR[EPVAP]-1659877549303
GPR[EPVS]-1659877549303
========
case Token.REGEXP :

for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877549304
GPR[SPVAP]-1659877549304
GPR[EPVAP]-1659877549884
GPR[EPVS]-1659877549884
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(obj!=null&&var.isLocal()){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877549886
GPR[SPVAP]-1659877549886
GPR[EPVAP]-1659877550457
GPR[EPVS]-1659877550457
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(obj!=null&&var.isLocal()){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877550459
GPR[SPVAP]-1659877550459
GPR[EPVAP]-1659877551059
GPR[EPVS]-1659877551059
========
parent.replaceChild(next,new Node(type));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877551060
GPR[SPVAP]-1659877551060
GPR[EPVAP]-1659877551637
GPR[EPVS]-1659877551637
========
cur=next;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877551640
GPR[SPVAP]-1659877551640
GPR[EPVAP]-1659877552212
GPR[EPVS]-1659877552212
========
swtich (type){
case Token.CATCH :
Preconditions.checkState(next.getChildCount()==3);
Preconditions.checkState(n.getFirstChild().getType()==Token.NAME);
traverseBranch(n.getFirstChild(),n);
traverseBranch(n.getFirstChild().getNext().getNext(),n);
break;

case Token.FUNCTION :
traverseFunction(n,parent);
break;

default :
for(Node obj=n.getFirstChild();child!=null;){
Node next=child.getNext();
traverseBranch(child,n);
child=next;
}
break;

}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877552214
GPR[SPVAP]-1659877552214
GPR[EPVAP]-1659877552790
GPR[EPVS]-1659877552790
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
refInfo.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877552792
GPR[SPVAP]-1659877552792
GPR[EPVAP]-1659877553366
GPR[EPVS]-1659877553366
========
COLUMN_BITS=0;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877553369
GPR[SPVAP]-1659877553369
GPR[EPVAP]-1659877553972
GPR[EPVS]-1659877553972
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(next==null){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877553975
GPR[SPVAP]-1659877553975
GPR[EPVAP]-1659877554560
GPR[EPVS]-1659877554560
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(next==null){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877554561
GPR[SPVAP]-1659877554561
GPR[EPVAP]-1659877555138
GPR[EPVS]-1659877555138
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(cur.getType()==Token.NAME&&str.equals(curNode.getString())){
next=null;
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877555140
GPR[SPVAP]-1659877555140
GPR[EPVAP]-1659877555721
GPR[EPVS]-1659877555721
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(cur.getType()==Token.NAME&&str.equals(curNode.getString())){
next=null;
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877555723
GPR[SPVAP]-1659877555723
GPR[EPVAP]-1659877556299
GPR[EPVS]-1659877556299
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
lookAhead=null;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877556300
GPR[SPVAP]-1659877556300
GPR[EPVAP]-1659877556873
GPR[EPVS]-1659877556873
========
if(printType){
if(i==Token.NAME&&!str.equals(next.getString())){
boolean false=false;
if(next==null){
blocked=true;
}else {
boolean (next.getType()==Token.ASSIGN&&next==nextParent.getFirstChild())=(nextParent.getType()==Token.ASSIGN&&nextNode==nextParent.getFirstChild());
boolean (next.getType()==Token.VAR)=(nextParent.getType()==Token.VAR);
if(!assignsName&&!isVarDeclaration){
blocked=true;
}
}
if(blocked){
next=null;
return ;
}
}
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877556874
GPR[SPVAP]-1659877556874
GPR[EPVAP]-1659877557450
GPR[EPVS]-1659877557450
========
if(NodeUtil.nodeTypeMayHaveSideEffects(next)&&i!=Token.NAME||type==Token.NAME&&next.getType()==Token.CATCH){
next=null;
return ;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877557451
GPR[SPVAP]-1659877557451
GPR[EPVAP]-1659877558031
GPR[EPVS]-1659877558031
========
next=next;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877558032
GPR[SPVAP]-1659877558032
GPR[EPVAP]-1659877558613
GPR[EPVS]-1659877558613
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(obj==null){
return !next.hasChildren();
}else {
return n.hasChildren()&&labelName.equals(n.getFirstChild().getString());
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877558615
GPR[SPVAP]-1659877558615
GPR[EPVAP]-1659877559186
GPR[EPVS]-1659877559187
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(obj==null){
return !next.hasChildren();
}else {
return n.hasChildren()&&labelName.equals(n.getFirstChild().getString());
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877559188
GPR[SPVAP]-1659877559188
GPR[EPVAP]-1659877559776
GPR[EPVS]-1659877559777
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(TYPEDEF_NAME.equals(next.getLastChild().getQualifiedName())){
return next.getFirstChild().getQualifiedName();
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877559778
GPR[SPVAP]-1659877559778
GPR[EPVAP]-1659877560365
GPR[EPVS]-1659877560365
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(TYPEDEF_NAME.equals(next.getLastChild().getQualifiedName())){
return next.getFirstChild().getQualifiedName();
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877560366
GPR[SPVAP]-1659877560366
GPR[EPVAP]-1659877560948
GPR[EPVS]-1659877560948
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(TYPEDEF_NAME.equals(next.getFirstChild().getFirstChild().getQualifiedName())){
return firstChild.getString();
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877560950
GPR[SPVAP]-1659877560950
GPR[EPVAP]-1659877561516
GPR[EPVS]-1659877561516
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(TYPEDEF_NAME.equals(next.getFirstChild().getFirstChild().getQualifiedName())){
return firstChild.getString();
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877561518
GPR[SPVAP]-1659877561518
GPR[EPVAP]-1659877562102
GPR[EPVS]-1659877562102
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.indexOf(".prototype.")==-1){
return false;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877562104
GPR[SPVAP]-1659877562104
GPR[EPVAP]-1659877562683
GPR[EPVS]-1659877562683
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.indexOf(".prototype.")==-1){
return false;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877562684
GPR[SPVAP]-1659877562684
GPR[EPVAP]-1659877563271
GPR[EPVS]-1659877563271
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
i++;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877563272
GPR[SPVAP]-1659877563272
GPR[EPVAP]-1659877563846
GPR[EPVS]-1659877563846
========
case Token.GETELEM :

for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877563849
GPR[SPVAP]-1659877563849
GPR[EPVAP]-1659877564429
GPR[EPVS]-1659877564429
========
for(int i=0;i<keys.length;i++){
keys=new int[N*2];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877564431
GPR[SPVAP]-1659877564431
GPR[EPVAP]-1659877565013
GPR[EPVS]-1659877565013
========
keys[COLUMN_BITS+i]=COLUMN_BITS;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877565015
GPR[SPVAP]-1659877565015
GPR[EPVAP]-1659877565589
GPR[EPVS]-1659877565589
========
COLUMN_BITS=(int)(Double.doubleToLongBits(number)>>>32)&Frac_mask;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877565593
GPR[SPVAP]-1659877565593
GPR[EPVAP]-1659877566185
GPR[EPVS]-1659877566185
========
COLUMN_BITS&=0x7fffffff;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877566187
GPR[SPVAP]-1659877566187
GPR[EPVAP]-1659877566766
GPR[EPVS]-1659877566766
========
if((COLUMN_BITS=((int)(Double.doubleToLongBits(number)>>>32)>>>Exp_shift))!=0)COLUMN_BITS|=Exp_msk1;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877566767
GPR[SPVAP]-1659877566767
GPR[EPVAP]-1659877567340
GPR[EPVS]-1659877567340
========
for(int i=0;i<keys.length;i++){
next.removeChild(next.getFirstChild().getNext());
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877567344
GPR[SPVAP]-1659877567344
GPR[EPVAP]-1659877567915
GPR[EPVS]-1659877567915
========
for(int i=0;i<keys.length;i++){
parent.replaceChild(next,next.getFirstChild().getNext());
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877567916
GPR[SPVAP]-1659877567916
GPR[EPVAP]-1659877568499
GPR[EPVS]-1659877568499
========
for(int i=0;i<keys.length;i++){
next.removeChild(next.getFirstChild().getNext());
parent.replaceChild(next,next.getFirstChild().getNext());

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877568501
GPR[SPVAP]-1659877568501
GPR[EPVAP]-1659877569083
GPR[EPVS]-1659877569083
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.charAt(0)==0){
return (str.length()==1)?0L:-1L;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877569085
GPR[SPVAP]-1659877569085
GPR[EPVAP]-1659877569667
GPR[EPVS]-1659877569667
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.charAt(0)==0){
return (str.length()==1)?0L:-1L;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877569668
GPR[SPVAP]-1659877569668
GPR[EPVAP]-1659877570242
GPR[EPVS]-1659877570242
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(!(0<=str.charAt(0)&&c<=9)){
return -1;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877570244
GPR[SPVAP]-1659877570244
GPR[EPVAP]-1659877570823
GPR[EPVS]-1659877570823
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(!(0<=str.charAt(0)&&c<=9)){
return -1;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877570824
GPR[SPVAP]-1659877570824
GPR[EPVAP]-1659877571410
GPR[EPVS]-1659877571410
========
for(int i=0;i<keys.length;i++){
v=10*str.charAt(0)+str.charAt(0);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877571412
GPR[SPVAP]-1659877571412
GPR[EPVAP]-1659877571996
GPR[EPVS]-1659877571996
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if((str.charAt(0)>>>32)==0){
return v;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877571997
GPR[SPVAP]-1659877571997
GPR[EPVAP]-1659877572578
GPR[EPVS]-1659877572578
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if((str.charAt(0)>>>32)==0){
return v;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877572580
GPR[SPVAP]-1659877572580
GPR[EPVAP]-1659877573155
GPR[EPVS]-1659877573155
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(!NodeUtil.isGetProp(next.getFirstChild())){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877573158
GPR[SPVAP]-1659877573158
GPR[EPVAP]-1659877573730
GPR[EPVS]-1659877573730
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(!NodeUtil.isGetProp(next.getFirstChild())){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877573732
GPR[SPVAP]-1659877573732
GPR[EPVAP]-1659877574300
GPR[EPVS]-1659877574300
========
Preconditions.checkArgument(NodeUtil.isCall(next));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877574302
GPR[SPVAP]-1659877574302
GPR[EPVAP]-1659877574908
GPR[EPVS]-1659877574908
========
if(next.getFirstChild().getQualifiedName()==null){
return ;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877574910
GPR[SPVAP]-1659877574910
GPR[EPVAP]-1659877575491
GPR[EPVS]-1659877575491
========
if(!"goog.exportSymbol".equals(next.getFirstChild().getQualifiedName())){
return ;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877575492
GPR[SPVAP]-1659877575492
GPR[EPVAP]-1659877576071
GPR[EPVS]-1659877576071
========
if(!NodeUtil.isString(next.getFirstChild().getNext())){
return ;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877576072
GPR[SPVAP]-1659877576072
GPR[EPVAP]-1659877576662
GPR[EPVS]-1659877576662
========
if(obj.getQualifiedName()==null||obj.getNext()!=null){
return ;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877576665
GPR[SPVAP]-1659877576665
GPR[EPVAP]-1659877577249
GPR[EPVS]-1659877577249
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
parent.replaceChild(next,new Node(Token.FALSE));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877577251
GPR[SPVAP]-1659877577251
GPR[EPVAP]-1659877577854
GPR[EPVS]-1659877577854
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
parent.replaceChild(next,new Node(Token.TRUE));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877577856
GPR[SPVAP]-1659877577856
GPR[EPVAP]-1659877578438
GPR[EPVS]-1659877578438
========
for(int i=0;i<keys.length;i++){
if(!Character.isJavaIdentifierPart(str.charAt(i))){
if(str.charAt(i)=='\\'){
if(!((i+5)<length)&&(str.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(str.charAt(i+3),0)&&0<=Kit.xDigitToInt(str.charAt(i+4),0)&&0<=Kit.xDigitToInt(str.charAt(i+5),0)){
return true;
}
}
return false;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877578440
GPR[SPVAP]-1659877578440
GPR[EPVAP]-1659877579020
GPR[EPVS]-1659877579020
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
if(L<2)throw new IllegalArgumentException();
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877579022
GPR[SPVAP]-1659877579022
GPR[EPVAP]-1659877579610
GPR[EPVS]-1659877579610
========
for(int i=0;i<keys.length;i++){
bag=new Object[L+1];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877579611
GPR[SPVAP]-1659877579611
GPR[EPVAP]-1659877580199
GPR[EPVS]-1659877580199
========
for(int i=0;i<keys.length;i++){
if(L<2)throw new IllegalArgumentException();
bag=new Object[L+1];

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877580200
GPR[SPVAP]-1659877580200
GPR[EPVAP]-1659877580778
GPR[EPVS]-1659877580778
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=ensureProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877580780
GPR[SPVAP]-1659877580780
GPR[EPVAP]-1659877581358
GPR[EPVS]-1659877581358
========
for(int i=0;i<keys.length;i++){
item.objectValue=objectValue;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877581359
GPR[SPVAP]-1659877581359
GPR[EPVAP]-1659877581940
GPR[EPVS]-1659877581940
========
for(int i=0;i<keys.length;i++){
buffer=new byte[type];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877581941
GPR[SPVAP]-1659877581941
GPR[EPVAP]-1659877582515
GPR[EPVS]-1659877582515
========
for(int i=0;i<keys.length;i++){
stringBuffer=new char[stringBuffer.length*2];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877582517
GPR[SPVAP]-1659877582517
GPR[EPVAP]-1659877583123
GPR[EPVS]-1659877583123
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
compiler.report(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877583124
GPR[SPVAP]-1659877583124
GPR[EPVAP]-1659877583711
GPR[EPVS]-1659877583711
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
if(i<0){
break;
}
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877583712
GPR[SPVAP]-1659877583713
GPR[EPVAP]-1659877584285
GPR[EPVS]-1659877584285
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
cursor+=i;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877584287
GPR[SPVAP]-1659877584287
GPR[EPVAP]-1659877584868
GPR[EPVS]-1659877584868
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
if(i<0){
break;
}
cursor+=i;

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877584869
GPR[SPVAP]-1659877584869
GPR[EPVAP]-1659877585447
GPR[EPVS]-1659877585447
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
if(i<0){
break;
}
cursor+=i;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877585448
GPR[SPVAP]-1659877585448
GPR[EPVAP]-1659877586033
GPR[EPVS]-1659877586033
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
if(i<0){
break;
}
if(i<0){
break;
}
cursor+=i;

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877586035
GPR[SPVAP]-1659877586035
GPR[EPVAP]-1659877586616
GPR[EPVS]-1659877586616
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
cursor+=i;
if(i<0){
break;
}
cursor+=i;

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877586617
GPR[SPVAP]-1659877586617
GPR[EPVAP]-1659877587203
GPR[EPVS]-1659877587203
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
if(i<0){
break;
}
cursor+=i;
if(i<0){
break;
}
cursor+=i;

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877587205
GPR[SPVAP]-1659877587205
GPR[EPVAP]-1659877587791
GPR[EPVS]-1659877587791
========
for(int i=0;i<keys.length;i++){
sourceEnd-=COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877587793
GPR[SPVAP]-1659877587793
GPR[EPVAP]-1659877588373
GPR[EPVS]-1659877588373
========
for(int i=0;i<keys.length;i++){
sourceCursor-=COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877588374
GPR[SPVAP]-1659877588374
GPR[EPVAP]-1659877588961
GPR[EPVS]-1659877588961
========
for(int i=0;i<keys.length;i++){
lineStart=0;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877588963
GPR[SPVAP]-1659877588963
GPR[EPVAP]-1659877589536
GPR[EPVS]-1659877589536
========
for(int i=0;i<keys.length;i++){
sourceEnd-=COLUMN_BITS;
sourceCursor-=COLUMN_BITS;
lineStart=0;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877589537
GPR[SPVAP]-1659877589537
GPR[EPVAP]-1659877590114
GPR[EPVS]-1659877590114
========
for(int i=0;i<keys.length;i++){
sourceBuffer=new char[sourceBuffer.length*2];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877590116
GPR[SPVAP]-1659877590116
GPR[EPVAP]-1659877590694
GPR[EPVS]-1659877590694
========
if(length!=null)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877590696
GPR[SPVAP]-1659877590696
GPR[EPVAP]-1659877591280
GPR[EPVS]-1659877591280
========
if(i<0){
return false;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877591281
GPR[SPVAP]-1659877591281
GPR[EPVAP]-1659877591867
GPR[EPVS]-1659877591867
========
type+=i;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877591869
GPR[SPVAP]-1659877591869
GPR[EPVAP]-1659877592445
GPR[EPVS]-1659877592445
========
if(COLUMN_BITS<=sourceBuffer.length)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877592447
GPR[SPVAP]-1659877592447
GPR[EPVAP]-1659877593054
GPR[EPVS]-1659877593054
========
case Token.CONST :

for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877593057
GPR[SPVAP]-1659877593057
GPR[EPVAP]-1659877593631
GPR[EPVS]-1659877593631
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(0==(COLUMN_BITS&1)){
return true;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877593635
GPR[SPVAP]-1659877593635
GPR[EPVAP]-1659877594210
GPR[EPVS]-1659877594210
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(0==(COLUMN_BITS&1)){
return true;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877594212
GPR[SPVAP]-1659877594212
GPR[EPVAP]-1659877594798
GPR[EPVS]-1659877594798
========
if(type>sourceBuffer.length){
increaseSourceCapacity(nextTop);
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877594801
GPR[SPVAP]-1659877594801
GPR[EPVAP]-1659877595379
GPR[EPVS]-1659877595379
========
++sourcePosition;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877595381
GPR[SPVAP]-1659877595381
GPR[EPVAP]-1659877595960
GPR[EPVS]-1659877595960
========
sourcePosition=type;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877595962
GPR[SPVAP]-1659877595962
GPR[EPVAP]-1659877596542
GPR[EPVS]-1659877596542
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new FlagUsageException("Module \'"+str);

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877596544
GPR[SPVAP]-1659877596544
GPR[EPVAP]-1659877597124
GPR[EPVS]-1659877597124
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new FlagUsageException("Module \'"+str);

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877597126
GPR[SPVAP]-1659877597126
GPR[EPVAP]-1659877597727
GPR[EPVS]-1659877597727
========
for(int i=0;i<keys.length;i++){
next.removeChild(next.getFirstChild());
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877597729
GPR[SPVAP]-1659877597729
GPR[EPVAP]-1659877598310
GPR[EPVS]-1659877598310
========
for(int i=0;i<keys.length;i++){
new Node(Token.IF).addChildToBack(next.getFirstChild());
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877598312
GPR[SPVAP]-1659877598312
GPR[EPVAP]-1659877598883
GPR[EPVS]-1659877598883
========
for(int i=0;i<keys.length;i++){
next.removeChild(next.getFirstChild());
new Node(Token.IF).addChildToBack(next.getFirstChild());

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877598884
GPR[SPVAP]-1659877598884
GPR[EPVAP]-1659877599471
GPR[EPVS]-1659877599471
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
next.removeChild(next);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877599473
GPR[SPVAP]-1659877599473
GPR[EPVAP]-1659877600053
GPR[EPVS]-1659877600053
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
new Node(Token.IF).addChildToBack(next);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877600054
GPR[SPVAP]-1659877600054
GPR[EPVAP]-1659877600626
GPR[EPVS]-1659877600626
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
new Node(Token.IF).addChildToBack(new Node(Token.BLOCK,NodeUtil.newExpr(next)));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877600628
GPR[SPVAP]-1659877600628
GPR[EPVAP]-1659877601201
GPR[EPVS]-1659877601201
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
parent.getParent().replaceChild(parent,new Node(Token.IF));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877601202
GPR[SPVAP]-1659877601202
GPR[EPVAP]-1659877601776
GPR[EPVS]-1659877601776
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
next.removeChild(next);
new Node(Token.IF).addChildToBack(next);
next.removeChild(next);
new Node(Token.IF).addChildToBack(new Node(Token.BLOCK,NodeUtil.newExpr(next)));
parent.getParent().replaceChild(parent,new Node(Token.IF));

swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877601777
GPR[SPVAP]-1659877601777
GPR[EPVAP]-1659877602351
GPR[EPVS]-1659877602351
========
Preconditions.checkArgument(ancestors.length>0);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877602353
GPR[SPVAP]-1659877602353
GPR[EPVAP]-1659877602929
GPR[EPVS]-1659877602929
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877602932
GPR[SPVAP]-1659877602932
GPR[EPVAP]-1659877603509
GPR[EPVS]-1659877603509
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877603511
GPR[SPVAP]-1659877603511
GPR[EPVAP]-1659877604092
GPR[EPVS]-1659877604092
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(COLUMN_BITS>=comments.length){
return ci;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877604094
GPR[SPVAP]-1659877604094
GPR[EPVAP]-1659877604680
GPR[EPVS]-1659877604680
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(COLUMN_BITS>=comments.length){
return ci;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877604681
GPR[SPVAP]-1659877604681
GPR[EPVAP]-1659877605261
GPR[EPVS]-1659877605261
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(keys[type>>>(32-COLUMN_BITS)]==COLUMN_BITS){
return type>>>(32-COLUMN_BITS);
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877605264
GPR[SPVAP]-1659877605264
GPR[EPVAP]-1659877605854
GPR[EPVS]-1659877605854
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(keys[type>>>(32-COLUMN_BITS)]==COLUMN_BITS){
return type>>>(32-COLUMN_BITS);
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877605856
GPR[SPVAP]-1659877605856
GPR[EPVAP]-1659877606438
GPR[EPVS]-1659877606438
========
for(int i=0;i<keys.length;i++){
++COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877606440
GPR[SPVAP]-1659877606440
GPR[EPVAP]-1659877607020
GPR[EPVS]-1659877607020
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(COLUMN_BITS==COLUMN_BITS){
return -1;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877607024
GPR[SPVAP]-1659877607024
GPR[EPVAP]-1659877607609
GPR[EPVS]-1659877607609
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(COLUMN_BITS==COLUMN_BITS){
return -1;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877607611
GPR[SPVAP]-1659877607611
GPR[EPVAP]-1659877608191
GPR[EPVS]-1659877608191
========
++COLUMN_BITS;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877608193
GPR[SPVAP]-1659877608193
GPR[EPVAP]-1659877608771
GPR[EPVS]-1659877608771
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(i>length){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877608773
GPR[SPVAP]-1659877608773
GPR[EPVAP]-1659877609351
GPR[EPVS]-1659877609351
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(i>length){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877609353
GPR[SPVAP]-1659877609353
GPR[EPVAP]-1659877609929
GPR[EPVS]-1659877609929
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(COLUMN_BITS!=0){
return keys[ivaluesShift+length];
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877609937
GPR[SPVAP]-1659877609937
GPR[EPVAP]-1659877610519
GPR[EPVS]-1659877610519
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(COLUMN_BITS!=0){
return keys[ivaluesShift+length];
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877610521
GPR[SPVAP]-1659877610521
GPR[EPVAP]-1659877611110
GPR[EPVS]-1659877611110
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
index=(type>>>(32-COLUMN_BITS)+obj)&(1<<COLUMN_BITS)-1;
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877611113
GPR[SPVAP]-1659877611113
GPR[EPVAP]-1659877611694
GPR[EPVS]-1659877611694
========
if(printType&&COLUMN_BITS!=COLUMN_BITS)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877611696
GPR[SPVAP]-1659877611696
GPR[EPVAP]-1659877612276
GPR[EPVS]-1659877612276
========
if(printType&&COLUMN_BITS==1<<COLUMN_BITS)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877612277
GPR[SPVAP]-1659877612277
GPR[EPVAP]-1659877612854
GPR[EPVS]-1659877612854
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.write(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877612856
GPR[SPVAP]-1659877612856
GPR[EPVAP]-1659877613450
GPR[EPVS]-1659877613450
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
name=next.getString()+str;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877613452
GPR[SPVAP]-1659877613452
GPR[EPVAP]-1659877614026
GPR[EPVS]-1659877614026
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
nameInfo.name=str;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877614027
GPR[SPVAP]-1659877614027
GPR[EPVAP]-1659877614603
GPR[EPVS]-1659877614603
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
name=next.getString()+str;
nameInfo.name=str;

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877614604
GPR[SPVAP]-1659877614604
GPR[EPVAP]-1659877615180
GPR[EPVS]-1659877615180
========
for(int i=0;i<str.length();i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877615182
GPR[SPVAP]-1659877615182
GPR[EPVAP]-1659877615777
GPR[EPVS]-1659877615777
========
for(int i=0;i<keys.length;i++){
if(obj>LARGEST_BASIC_LATIN){
return false;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877615778
GPR[SPVAP]-1659877615779
GPR[EPVAP]-1659877616355
GPR[EPVS]-1659877616355
========
if(sourcePosition==sb.length()-1){
char i=sb.charAt(len-1);
if(ch==';'){
preferredBreakPosition=len;
}
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877616357
GPR[SPVAP]-1659877616357
GPR[EPVAP]-1659877616935
GPR[EPVS]-1659877616935
========
maybeCutLine();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877616936
GPR[SPVAP]-1659877616936
GPR[EPVAP]-1659877617513
GPR[EPVS]-1659877617513
========
if(i==0){
return str;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877617515
GPR[SPVAP]-1659877617515
GPR[EPVAP]-1659877618087
GPR[EPVS]-1659877618087
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(getFirstChild().getQualifiedName()==null){
return null;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877618089
GPR[SPVAP]-1659877618089
GPR[EPVAP]-1659877618685
GPR[EPVS]-1659877618685
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(getFirstChild().getQualifiedName()==null){
return null;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877618686
GPR[SPVAP]-1659877618686
GPR[EPVAP]-1659877619260
GPR[EPVS]-1659877619260
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(type==Token.THIS){
return "this";
}else {
return null;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877619261
GPR[SPVAP]-1659877619261
GPR[EPVAP]-1659877619847
GPR[EPVS]-1659877619847
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(type==Token.THIS){
return "this";
}else {
return null;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877619848
GPR[SPVAP]-1659877619848
GPR[EPVAP]-1659877620427
GPR[EPVS]-1659877620427
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.charAt(type)=='\n'){
return new SimpleRegion(COLUMN_BITS,COLUMN_BITS,js.substring(COLUMN_BITS,last));
}else {
return new SimpleRegion(startLine,endLine,js.substring(pos));
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877620430
GPR[SPVAP]-1659877620430
GPR[EPVAP]-1659877621012
GPR[EPVS]-1659877621012
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.charAt(type)=='\n'){
return new SimpleRegion(COLUMN_BITS,COLUMN_BITS,js.substring(COLUMN_BITS,last));
}else {
return new SimpleRegion(startLine,endLine,js.substring(pos));
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877621015
GPR[SPVAP]-1659877621015
GPR[EPVAP]-1659877621587
GPR[EPVS]-1659877621587
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
marker.annotation=new JSDocInfo.StringPosition();
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877621589
GPR[SPVAP]-1659877621589
GPR[EPVAP]-1659877622162
GPR[EPVS]-1659877622162
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
currentMarker.name=new JSDocInfo.StringPosition();
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877622165
GPR[SPVAP]-1659877622165
GPR[EPVAP]-1659877622743
GPR[EPVS]-1659877622743
========
for(int i=0;i<keys.length;i++){
this.sourceBuffer=new char[512];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877622744
GPR[SPVAP]-1659877622744
GPR[EPVAP]-1659877623323
GPR[EPVS]-1659877623323
========
for(int i=0;i<keys.length;i++){
this.sourceEnd=0;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877623325
GPR[SPVAP]-1659877623325
GPR[EPVAP]-1659877623903
GPR[EPVS]-1659877623903
========
for(int i=0;i<keys.length;i++){
this.sourceBuffer=new char[512];
this.sourceEnd=0;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877623905
GPR[SPVAP]-1659877623905
GPR[EPVAP]-1659877624485
GPR[EPVS]-1659877624485
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
this.sourceString=str;
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877624487
GPR[SPVAP]-1659877624487
GPR[EPVAP]-1659877625069
GPR[EPVS]-1659877625069
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
next.setString(getNameForId(li.id));
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877625071
GPR[SPVAP]-1659877625071
GPR[EPVAP]-1659877625650
GPR[EPVS]-1659877625650
========
x=str.charAt(str.length()-1);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877625652
GPR[SPVAP]-1659877625652
GPR[EPVAP]-1659877626230
GPR[EPVS]-1659877626230
========
i+=str.length();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877626231
GPR[SPVAP]-1659877626231
GPR[EPVAP]-1659877626811
GPR[EPVS]-1659877626811
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(info.numOccurrences>info.numOccurrencesInfrequentlyExecuted){
return true;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877626813
GPR[SPVAP]-1659877626813
GPR[EPVAP]-1659877627391
GPR[EPVS]-1659877627391
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(info.numOccurrences>info.numOccurrencesInfrequentlyExecuted){
return true;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877627392
GPR[SPVAP]-1659877627392
GPR[EPVAP]-1659877627966
GPR[EPVS]-1659877627966
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(!NodeUtil.isGetProp(next)||!NodeUtil.isImmutableValue(next)){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877627969
GPR[SPVAP]-1659877627969
GPR[EPVAP]-1659877628546
GPR[EPVS]-1659877628546
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(!NodeUtil.isGetProp(next)||!NodeUtil.isImmutableValue(next)){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877628548
GPR[SPVAP]-1659877628548
GPR[EPVAP]-1659877629123
GPR[EPVS]-1659877629123
========
if((next.getFirstChild().getType()!=Token.STRING)||(!next.getFirstChild().getNext().getString().equals("indexOf")&&!functionName.getString().equals("lastIndexOf"))){
return ;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877629124
GPR[SPVAP]-1659877629124
GPR[EPVAP]-1659877629706
GPR[EPVS]-1659877629706
========
if(NodeUtil.getStringValue(next)==null){
return ;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877629708
GPR[SPVAP]-1659877629708
GPR[EPVAP]-1659877630290
GPR[EPVS]-1659877630290
========
if(obj!=null){
if((secondArg.getNext()!=null)||(secondArg.getType()!=Token.NUMBER)){
return ;
}else {
type=(int)secondArg.getDouble();
}
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877630292
GPR[SPVAP]-1659877630292
GPR[EPVAP]-1659877630871
GPR[EPVS]-1659877630871
========
parent.replaceChild(next,Node.newNumber(next.getFirstChild().getNext().getString().equals("indexOf")?NodeUtil.getStringValue(next.getFirstChild()).indexOf(NodeUtil.getStringValue(next),type):lstring.lastIndexOf(searchValue,fromIndex)));
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877630872
GPR[SPVAP]-1659877630872
GPR[EPVAP]-1659877631455
GPR[EPVS]-1659877631455
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
nameGenerator.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877631457
GPR[SPVAP]-1659877631457
GPR[EPVAP]-1659877632035
GPR[EPVS]-1659877632035
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
renameMap.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877632037
GPR[SPVAP]-1659877632037
GPR[EPVAP]-1659877632615
GPR[EPVS]-1659877632615
========
obj.setString(str);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877632617
GPR[SPVAP]-1659877632617
GPR[EPVAP]-1659877633197
GPR[EPVS]-1659877633197
========
x+=str.length();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877633199
GPR[SPVAP]-1659877633199
GPR[EPVAP]-1659877633778
GPR[EPVS]-1659877633778
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.println(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877633780
GPR[SPVAP]-1659877633780
GPR[EPVAP]-1659877634359
GPR[EPVS]-1659877634359
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(NodeUtil.mayHaveSideEffects(next)){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877634361
GPR[SPVAP]-1659877634361
GPR[EPVAP]-1659877634939
GPR[EPVS]-1659877634939
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(NodeUtil.mayHaveSideEffects(next)){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877634941
GPR[SPVAP]-1659877634941
GPR[EPVAP]-1659877635525
GPR[EPVS]-1659877635525
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(COLUMN_BITS!=0){
return keys[ivaluesShift+length];
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(COLUMN_BITS!=0){
return keys[ivaluesShift+length];
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877635528
GPR[SPVAP]-1659877635528
GPR[EPVAP]-1659877636103
GPR[EPVS]-1659877636103
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException("prefix has invalid characters, "+"must be one of: ");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877636110
GPR[SPVAP]-1659877636110
GPR[EPVAP]-1659877636686
GPR[EPVS]-1659877636686
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException("prefix has invalid characters, "+"must be one of: ");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877636688
GPR[SPVAP]-1659877636688
GPR[EPVAP]-1659877637271
GPR[EPVS]-1659877637271
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
externPropertyNames.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877637272
GPR[SPVAP]-1659877637272
GPR[EPVAP]-1659877637865
GPR[EPVS]-1659877637865
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalStateException("No inputs");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877637867
GPR[SPVAP]-1659877637867
GPR[EPVAP]-1659877638451
GPR[EPVS]-1659877638451
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalStateException("No inputs");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877638452
GPR[SPVAP]-1659877638452
GPR[EPVAP]-1659877639034
GPR[EPVS]-1659877639034
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(!areSafeFlagsToFold(next.getString())){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877639036
GPR[SPVAP]-1659877639036
GPR[EPVAP]-1659877639619
GPR[EPVS]-1659877639619
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(!areSafeFlagsToFold(next.getString())){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877639620
GPR[SPVAP]-1659877639620
GPR[EPVAP]-1659877640187
GPR[EPVS]-1659877640187
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new FlagUsageException("Expected 2-4 colon-delimited parts in "+"module spec: ");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877640189
GPR[SPVAP]-1659877640189
GPR[EPVAP]-1659877640773
GPR[EPVS]-1659877640773
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new FlagUsageException("Expected 2-4 colon-delimited parts in "+"module spec: ");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877640774
GPR[SPVAP]-1659877640774
GPR[EPVAP]-1659877641363
GPR[EPVS]-1659877641363
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(next.getType()!=Token.FUNCTION){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877641365
GPR[SPVAP]-1659877641365
GPR[EPVAP]-1659877641946
GPR[EPVS]-1659877641946
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(next.getType()!=Token.FUNCTION){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877641947
GPR[SPVAP]-1659877641947
GPR[EPVAP]-1659877642527
GPR[EPVS]-1659877642527
========
if(i<0){
return ;
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877642528
GPR[SPVAP]-1659877642528
GPR[EPVAP]-1659877643109
GPR[EPVS]-1659877643109
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if((str.length()==0)||Character.isUpperCase(name.charAt(0))){
return false;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877643111
GPR[SPVAP]-1659877643111
GPR[EPVAP]-1659877643683
GPR[EPVS]-1659877643683
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if((str.length()==0)||Character.isUpperCase(name.charAt(0))){
return false;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877643685
GPR[SPVAP]-1659877643685
GPR[EPVAP]-1659877644267
GPR[EPVS]-1659877644267
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new ParseException("Bad line: "+str,0);

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877644269
GPR[SPVAP]-1659877644269
GPR[EPVAP]-1659877644850
GPR[EPVS]-1659877644850
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new ParseException("Bad line: "+str,0);

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877644851
GPR[SPVAP]-1659877644851
GPR[EPVAP]-1659877645450
GPR[EPVS]-1659877645450
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877645452
GPR[SPVAP]-1659877645452
GPR[EPVAP]-1659877646027
GPR[EPVS]-1659877646027
========
maybeEndStatement();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877646029
GPR[SPVAP]-1659877646029
GPR[EPVAP]-1659877646598
GPR[EPVS]-1659877646598
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877646600
GPR[SPVAP]-1659877646600
GPR[EPVAP]-1659877647176
GPR[EPVS]-1659877647176
========
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877647178
GPR[SPVAP]-1659877647178
GPR[EPVAP]-1659877647751
GPR[EPVS]-1659877647751
========
maybeEndStatement();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877647753
GPR[SPVAP]-1659877647753
GPR[EPVAP]-1659877648324
GPR[EPVS]-1659877648324
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877648325
GPR[SPVAP]-1659877648325
GPR[EPVAP]-1659877648897
GPR[EPVS]-1659877648897
========
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877648899
GPR[SPVAP]-1659877648899
GPR[EPVAP]-1659877649490
GPR[EPVS]-1659877649490
========
maybeEndStatement();
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877649491
GPR[SPVAP]-1659877649491
GPR[EPVAP]-1659877650069
GPR[EPVS]-1659877650069
========
maybeEndStatement();
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877650070
GPR[SPVAP]-1659877650070
GPR[EPVAP]-1659877650651
GPR[EPVS]-1659877650651
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877650653
GPR[SPVAP]-1659877650653
GPR[EPVAP]-1659877651232
GPR[EPVS]-1659877651232
========
maybeEndStatement();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877651233
GPR[SPVAP]-1659877651233
GPR[EPVAP]-1659877651827
GPR[EPVS]-1659877651827
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877651828
GPR[SPVAP]-1659877651828
GPR[EPVAP]-1659877652407
GPR[EPVS]-1659877652407
========
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877652408
GPR[SPVAP]-1659877652408
GPR[EPVAP]-1659877652987
GPR[EPVS]-1659877652987
========
maybeEndStatement();
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877652988
GPR[SPVAP]-1659877652988
GPR[EPVAP]-1659877653567
GPR[EPVS]-1659877653567
========
maybeEndStatement();
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877653568
GPR[SPVAP]-1659877653568
GPR[EPVAP]-1659877654143
GPR[EPVS]-1659877654143
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877654145
GPR[SPVAP]-1659877654145
GPR[EPVAP]-1659877654723
GPR[EPVS]-1659877654723
========
maybeEndStatement();
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877654725
GPR[SPVAP]-1659877654725
GPR[EPVAP]-1659877655313
GPR[EPVS]-1659877655313
========
maybeEndStatement();
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877655315
GPR[SPVAP]-1659877655315
GPR[EPVAP]-1659877655887
GPR[EPVS]-1659877655887
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877655888
GPR[SPVAP]-1659877655888
GPR[EPVAP]-1659877656460
GPR[EPVS]-1659877656460
========
maybeEndStatement();
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877656461
GPR[SPVAP]-1659877656461
GPR[EPVAP]-1659877657045
GPR[EPVS]-1659877657045
========
maybeEndStatement();
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877657047
GPR[SPVAP]-1659877657047
GPR[EPVAP]-1659877657624
GPR[EPVS]-1659877657624
========
maybeEndStatement();
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877657625
GPR[SPVAP]-1659877657625
GPR[EPVAP]-1659877658208
GPR[EPVS]-1659877658208
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877658210
GPR[SPVAP]-1659877658210
GPR[EPVAP]-1659877658791
GPR[EPVS]-1659877658791
========
maybeEndStatement();
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877658792
GPR[SPVAP]-1659877658792
GPR[EPVAP]-1659877659372
GPR[EPVS]-1659877659372
========
maybeEndStatement();
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
append(value);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877659374
GPR[SPVAP]-1659877659374
GPR[EPVAP]-1659877659971
GPR[EPVS]-1659877659971
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877659973
GPR[SPVAP]-1659877659973
GPR[EPVAP]-1659877660563
GPR[EPVS]-1659877660563
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.length()==0){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877660564
GPR[SPVAP]-1659877660564
GPR[EPVAP]-1659877661151
GPR[EPVS]-1659877661151
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if("Infinity".equals(next.getString())){
return true;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877661152
GPR[SPVAP]-1659877661152
GPR[EPVAP]-1659877661731
GPR[EPVS]-1659877661731
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if("Infinity".equals(next.getString())){
return true;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877661732
GPR[SPVAP]-1659877661732
GPR[EPVAP]-1659877662310
GPR[EPVS]-1659877662310
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.length()<=1){
return false;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877662311
GPR[SPVAP]-1659877662311
GPR[EPVAP]-1659877662890
GPR[EPVS]-1659877662890
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.length()<=1){
return false;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877662892
GPR[SPVAP]-1659877662892
GPR[EPVAP]-1659877663475
GPR[EPVS]-1659877663475
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.length()==0){
return false;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877663477
GPR[SPVAP]-1659877663477
GPR[EPVAP]-1659877664059
GPR[EPVS]-1659877664059
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.length()==0){
return false;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877664062
GPR[SPVAP]-1659877664062
GPR[EPVAP]-1659877664634
GPR[EPVS]-1659877664634
========
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
reportError("msg.bad.prop");
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}

========
GPR[SPVS]-1659877664636
GPR[SPVAP]-1659877664636
GPR[EPVAP]-1659877665228
GPR[EPVS]-1659877665228
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
if(serialVersionUID<0)Kit.codeBug();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877667317
GPR[SPVAP]-1659877667317
GPR[EPVAP]-1659877667890
GPR[EPVS]-1659877667890
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");
b.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877667894
GPR[SPVAP]-1659877667894
GPR[EPVAP]-1659877668464
GPR[EPVS]-1659877668464
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877668466
GPR[SPVAP]-1659877668466
GPR[EPVAP]-1659877669038
GPR[EPVS]-1659877669038
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
b.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877669040
GPR[SPVAP]-1659877669040
GPR[EPVAP]-1659877669617
GPR[EPVS]-1659877669617
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
sb.append(error.sourceName);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877669619
GPR[SPVAP]-1659877669619
GPR[EPVAP]-1659877670198
GPR[EPVS]-1659877670198
========
if(printAnnotations){
sb.append(": ");
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877670200
GPR[SPVAP]-1659877670200
GPR[EPVAP]-1659877670788
GPR[EPVS]-1659877670788
========
if(printAnnotations){
sb.append(error.sourceName);
sb.append(": ");

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877670790
GPR[SPVAP]-1659877670790
GPR[EPVAP]-1659877671371
GPR[EPVS]-1659877671371
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(value.length()==0){
return sb.substring(0,builder.length()-1);
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877671373
GPR[SPVAP]-1659877671373
GPR[EPVAP]-1659877671954
GPR[EPVS]-1659877671954
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(value.length()==0){
return sb.substring(0,builder.length()-1);
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877671956
GPR[SPVAP]-1659877671956
GPR[EPVAP]-1659877672539
GPR[EPVS]-1659877672539
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
line=str.substring(start);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877672540
GPR[SPVAP]-1659877672540
GPR[EPVAP]-1659877673115
GPR[EPVS]-1659877673115
========
if(printAnnotations){
append(value);
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877673117
GPR[SPVAP]-1659877673117
GPR[EPVAP]-1659877673690
GPR[EPVS]-1659877673690
========
if(printAnnotations){
append(" ");
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877673692
GPR[SPVAP]-1659877673692
GPR[EPVAP]-1659877674274
GPR[EPVS]-1659877674274
========
if(printAnnotations){
append(value);
append(" ");

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877674276
GPR[SPVAP]-1659877674276
GPR[EPVAP]-1659877674853
GPR[EPVS]-1659877674853
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
COLUMN_BITS++;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877674856
GPR[SPVAP]-1659877674856
GPR[EPVAP]-1659877675431
GPR[EPVS]-1659877675431
========
if(printAnnotations){
protectHex=false;
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877675432
GPR[SPVAP]-1659877675432
GPR[EPVAP]-1659877676009
GPR[EPVS]-1659877676009
========
sb.append(value);
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877676011
GPR[SPVAP]-1659877676011
GPR[EPVAP]-1659877676590
GPR[EPVS]-1659877676590
========
if(type==Math.min(type,MAX_LIMIT)){
return sb.toString();
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877676592
GPR[SPVAP]-1659877676592
GPR[EPVAP]-1659877677198
GPR[EPVS]-1659877677198
========
new CRC32().update(str.getBytes());
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877677200
GPR[SPVAP]-1659877677200
GPR[EPVAP]-1659877677774
GPR[EPVS]-1659877677774
========
sb.append('_');
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877677776
GPR[SPVAP]-1659877677776
GPR[EPVAP]-1659877678349
GPR[EPVS]-1659877678349
========
sb.append(Long.toHexString(new CRC32().getValue()&length));
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877678351
GPR[SPVAP]-1659877678351
GPR[EPVAP]-1659877678928
GPR[EPVS]-1659877678928
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877678930
GPR[SPVAP]-1659877678930
GPR[EPVAP]-1659877679508
GPR[EPVS]-1659877679508
========
sb.append("function (");
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877679509
GPR[SPVAP]-1659877679509
GPR[EPVAP]-1659877680087
GPR[EPVS]-1659877680087
========
if(i>0){
if(printAnnotations){
sb.append(", ");
}
Node call.parameters.getFirstChild()=call.parameters.getFirstChild();
if(p.isVarArgs()){
appendVarArgsString(b,p.getJSType());
}else {
b.append(p.getJSType().toString());
}
p=p.getNext();
while(p!=null){
b.append(", ");
if(p.isVarArgs()){
appendVarArgsString(b,p.getJSType());
}else {
b.append(p.getJSType().toString());
}
p=p.getNext();
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877680089
GPR[SPVAP]-1659877680089
GPR[EPVAP]-1659877680675
GPR[EPVS]-1659877680675
========
sb.append(")");
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877680677
GPR[SPVAP]-1659877680677
GPR[EPVAP]-1659877681270
GPR[EPVS]-1659877681270
========
if(printAnnotations){
sb.append(next.toString());
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877681272
GPR[SPVAP]-1659877681272
GPR[EPVAP]-1659877681850
GPR[EPVS]-1659877681850
========
if(printAnnotations){
sb.append('\n');
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877681852
GPR[SPVAP]-1659877681852
GPR[EPVAP]-1659877682442
GPR[EPVS]-1659877682442
========
if(printAnnotations){
sb.append(next.toString());
sb.append('\n');

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877682444
GPR[SPVAP]-1659877682444
GPR[EPVAP]-1659877683025
GPR[EPVS]-1659877683025
========
if(printAnnotations){
sb.append("<li>PROTOTYPES: ");
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877683034
GPR[SPVAP]-1659877683034
GPR[EPVAP]-1659877683641
GPR[EPVS]-1659877683641
========
if(printAnnotations){
sb.append("<li>REFERS TO: ");
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877683644
GPR[SPVAP]-1659877683644
GPR[EPVAP]-1659877684216
GPR[EPVS]-1659877684216
========
if(printAnnotations){
sb.append("<li>REFERENCED BY: ");
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877684218
GPR[SPVAP]-1659877684218
GPR[EPVAP]-1659877684806
GPR[EPVS]-1659877684806
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
code.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877684810
GPR[SPVAP]-1659877684810
GPR[EPVAP]-1659877685387
GPR[EPVS]-1659877685387
========
COLUMN_BITS+=value.length();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877685389
GPR[SPVAP]-1659877685389
GPR[EPVAP]-1659877685977
GPR[EPVS]-1659877685977
========
sb.append(value);
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877685979
GPR[SPVAP]-1659877685979
GPR[EPVAP]-1659877686558
GPR[EPVS]-1659877686558
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
S=mhi=null;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877686560
GPR[SPVAP]-1659877686560
GPR[EPVAP]-1659877687150
GPR[EPVS]-1659877687150
========
if(printAnnotations){
COLUMN_BITS++;
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877687152
GPR[SPVAP]-1659877687152
GPR[EPVAP]-1659877687727
GPR[EPVS]-1659877687727
========
if(printAnnotations){
S=mhi=null;
COLUMN_BITS++;

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877687728
GPR[SPVAP]-1659877687728
GPR[EPVAP]-1659877688317
GPR[EPVS]-1659877688317
========
if(printAnnotations){
sb.append(str);
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877688319
GPR[SPVAP]-1659877688319
GPR[EPVAP]-1659877688914
GPR[EPVS]-1659877688914
========
append((char)COLUMN_BITS);
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877688916
GPR[SPVAP]-1659877688916
GPR[EPVAP]-1659877689510
GPR[EPVS]-1659877689510
========
append((char)Token.EOL);
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877689512
GPR[SPVAP]-1659877689512
GPR[EPVAP]-1659877690101
GPR[EPVS]-1659877690101
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
COLUMN_BITS++;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877690104
GPR[SPVAP]-1659877690104
GPR[EPVAP]-1659877690688
GPR[EPVS]-1659877690688
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
lastCh='0';
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877690689
GPR[SPVAP]-1659877690689
GPR[EPVAP]-1659877691266
GPR[EPVS]-1659877691266
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
COLUMN_BITS++;
lastCh='0';

swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877691268
GPR[SPVAP]-1659877691268
GPR[EPVAP]-1659877691848
GPR[EPVS]-1659877691848
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
d+=number;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877691850
GPR[SPVAP]-1659877691850
GPR[EPVAP]-1659877692454
GPR[EPVS]-1659877692454
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
i++;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877692456
GPR[SPVAP]-1659877692456
GPR[EPVAP]-1659877693032
GPR[EPVS]-1659877693032
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
i++;
lastCh='0';

swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877693033
GPR[SPVAP]-1659877693033
GPR[EPVAP]-1659877693607
GPR[EPVS]-1659877693607
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
COLUMN_BITS++;
lastCh='0';
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877693610
GPR[SPVAP]-1659877693610
GPR[EPVAP]-1659877694189
GPR[EPVS]-1659877694189
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
COLUMN_BITS++;
COLUMN_BITS++;
lastCh='0';

swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877694191
GPR[SPVAP]-1659877694191
GPR[EPVAP]-1659877694771
GPR[EPVS]-1659877694771
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
lastCh='0';
COLUMN_BITS++;
lastCh='0';

swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877694772
GPR[SPVAP]-1659877694772
GPR[EPVAP]-1659877695350
GPR[EPVS]-1659877695350
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
COLUMN_BITS++;
lastCh='0';
COLUMN_BITS++;
lastCh='0';

swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877695351
GPR[SPVAP]-1659877695351
GPR[EPVAP]-1659877695925
GPR[EPVS]-1659877695925
========
number=number-length;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877695929
GPR[SPVAP]-1659877695929
GPR[EPVAP]-1659877696506
GPR[EPVS]-1659877696506
========
COLUMN_BITS+=Bias+P;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877696507
GPR[SPVAP]-1659877696507
GPR[EPVAP]-1659877697090
GPR[EPVS]-1659877697090
========
sb.append('.');
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877697092
GPR[SPVAP]-1659877697092
GPR[EPVAP]-1659877697667
GPR[EPVS]-1659877697667
========
if((COLUMN_BITS=(word0(number)>>>Exp_shift1&(Exp_mask>>Exp_shift1)))!=0){
number=setWord0(d,(word0(d)&Frac_mask1)|Exp_11);
i-=Bias;
printType=false;
}else {
i=new int[1][0]+keys[0];
serialVersionUID=(i>32)?word0(d)<<(64-i)|word1(d)>>>(i-32):word1(d)<<(32-i);
d2=setWord0(x,word0(x)-31*Exp_msk1);
i-=(Bias+(P-1)-1)+1;
denorm=true;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877697671
GPR[SPVAP]-1659877697671
GPR[EPVAP]-1659877698254
GPR[EPVS]-1659877698254
========
number=(number-1.5)*0.28952965+0.17609125+COLUMN_BITS*0.30103;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877698256
GPR[SPVAP]-1659877698256
GPR[EPVAP]-1659877698830
GPR[EPVS]-1659877698830
========
i=(int)number;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877698832
GPR[SPVAP]-1659877698832
GPR[EPVAP]-1659877699421
GPR[EPVS]-1659877699421
========
if(number<0.0&&ds!=i)k--;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877699423
GPR[SPVAP]-1659877699423
GPR[EPVAP]-1659877700002
GPR[EPVS]-1659877700002
========
printType=true;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877700003
GPR[SPVAP]-1659877700003
GPR[EPVAP]-1659877700579
GPR[EPVS]-1659877700579
========
COLUMN_BITS=new int[1][0]-COLUMN_BITS;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877700580
GPR[SPVAP]-1659877700580
GPR[EPVAP]-1659877701160
GPR[EPVS]-1659877701160
========
if(COLUMN_BITS>=0){
COLUMN_BITS=0;
COLUMN_BITS=j;
}else {
b2=-j;
s2=0;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877701163
GPR[SPVAP]-1659877701163
GPR[EPVAP]-1659877702113
GPR[EPVS]-1659877702113
========
if(i>=0){
COLUMN_BITS=0;
COLUMN_BITS=k;
COLUMN_BITS+=k;
}else {
COLUMN_BITS-=k;
b5=-k;
s5=0;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877702121
GPR[SPVAP]-1659877702121
GPR[EPVAP]-1659877702875
GPR[EPVS]-1659877702875
========
if(N>=FIELDS_STORE_SIZE){
ensureCapacity(N+1);
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877702877
GPR[SPVAP]-1659877702877
GPR[EPVAP]-1659877703474
GPR[EPVS]-1659877703474
========
COLUMN_BITS=N+1;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877703476
GPR[SPVAP]-1659877703476
GPR[EPVAP]-1659877704081
GPR[EPVS]-1659877704081
========
setImpl(N,objectValue);
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877704082
GPR[SPVAP]-1659877704082
GPR[EPVAP]-1659877704682
GPR[EPVS]-1659877704682
========
if(printAnnotations)throw onSeledMutation();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877704684
GPR[SPVAP]-1659877704684
GPR[EPVAP]-1659877705281
GPR[EPVS]-1659877705281
========
setImpl(type,objectValue);
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877705283
GPR[SPVAP]-1659877705283
GPR[EPVAP]-1659877705891
GPR[EPVS]-1659877705891
========
if(printAnnotations)throw onSeledMutation();
COLUMN_BITS=N+1;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877705895
GPR[SPVAP]-1659877705895
GPR[EPVAP]-1659877706472
GPR[EPVS]-1659877706472
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<children.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877706478
GPR[SPVAP]-1659877706478
GPR[EPVAP]-1659877707062
GPR[EPVS]-1659877707062
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException("duplicate child");

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877707063
GPR[SPVAP]-1659877707063
GPR[EPVAP]-1659877707655
GPR[EPVS]-1659877707655
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException("duplicate child");

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877707657
GPR[SPVAP]-1659877707657
GPR[EPVAP]-1659877708261
GPR[EPVS]-1659877708261
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
children[i-1].next=children[i];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877708262
GPR[SPVAP]-1659877708262
GPR[EPVAP]-1659877708833
GPR[EPVS]-1659877708833
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
children[i-1].parent=this;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877708834
GPR[SPVAP]-1659877708834
GPR[EPVAP]-1659877709412
GPR[EPVS]-1659877709412
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
children[i-1].next=children[i];
children[i-1].parent=this;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877709414
GPR[SPVAP]-1659877709414
GPR[EPVAP]-1659877709991
GPR[EPVS]-1659877709991
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
this.first=children[0];
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877709993
GPR[SPVAP]-1659877709993
GPR[EPVAP]-1659877710574
GPR[EPVS]-1659877710574
========
if(printAnnotations){
this.last=children[children.length-1];
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877710576
GPR[SPVAP]-1659877710576
GPR[EPVAP]-1659877711155
GPR[EPVS]-1659877711155
========
if(printAnnotations){
children[children.length-1].parent=this;
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877711157
GPR[SPVAP]-1659877711157
GPR[EPVAP]-1659877711743
GPR[EPVS]-1659877711743
========
if(printAnnotations){
if(null!=this.obj.next){
throw new IllegalArgumentException("duplicate child");
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877711745
GPR[SPVAP]-1659877711745
GPR[EPVAP]-1659877712318
GPR[EPVS]-1659877712318
========
if(printAnnotations){
this.first=children[0];
this.last=children[children.length-1];
children[children.length-1].parent=this;
if(null!=this.obj.next){
throw new IllegalArgumentException("duplicate child");
}

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877712320
GPR[SPVAP]-1659877712320
GPR[EPVAP]-1659877712910
GPR[EPVS]-1659877712910
========
this.x=COLUMN_BITS;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877712913
GPR[SPVAP]-1659877712913
GPR[EPVAP]-1659877713492
GPR[EPVS]-1659877713492
========
parent=null;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877713494
GPR[SPVAP]-1659877713494
GPR[EPVAP]-1659877714071
GPR[EPVS]-1659877714071
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<indices1.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877714074
GPR[SPVAP]-1659877714074
GPR[EPVAP]-1659877714654
GPR[EPVS]-1659877714654
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
--COLUMN_BITS;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877714656
GPR[SPVAP]-1659877714656
GPR[EPVAP]-1659877715241
GPR[EPVS]-1659877715241
========
case Token.RC :

if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877715245
GPR[SPVAP]-1659877715245
GPR[EPVAP]-1659877715823
GPR[EPVS]-1659877715823
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
compiler.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877715826
GPR[SPVAP]-1659877715826
GPR[EPVAP]-1659877716412
GPR[EPVS]-1659877716412
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.report(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877716413
GPR[SPVAP]-1659877716413
GPR[EPVAP]-1659877716992
GPR[EPVS]-1659877716992
========
if(printAnnotations){
parts[i]=str;
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877716996
GPR[SPVAP]-1659877716996
GPR[EPVAP]-1659877717574
GPR[EPVS]-1659877717574
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
compiler.report(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877717576
GPR[SPVAP]-1659877717576
GPR[EPVAP]-1659877718178
GPR[EPVS]-1659877718178
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
bag=new Object[L-1];
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877718180
GPR[SPVAP]-1659877718180
GPR[EPVAP]-1659877718761
GPR[EPVS]-1659877718761
========
if(printAnnotations){
next.putProp(Node.SKIP_INDEXES_PROP,keys);
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877718763
GPR[SPVAP]-1659877718763
GPR[EPVAP]-1659877719344
GPR[EPVS]-1659877719344
========
obj=COLUMN_BITS;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877719347
GPR[SPVAP]-1659877719347
GPR[EPVAP]-1659877719920
GPR[EPVS]-1659877719920
========
if(length&&obj<2)Kit.codeBug();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877719922
GPR[SPVAP]-1659877719922
GPR[EPVAP]-1659877720505
GPR[EPVS]-1659877720505
========
obj=COLUMN_BITS;
if(length&&obj<2)Kit.codeBug();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877720507
GPR[SPVAP]-1659877720507
GPR[EPVAP]-1659877721083
GPR[EPVS]-1659877721083
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.join(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877721085
GPR[SPVAP]-1659877721085
GPR[EPVAP]-1659877721656
GPR[EPVS]-1659877721656
========
COLUMN_BITS=0;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877721660
GPR[SPVAP]-1659877721660
GPR[EPVAP]-1659877722232
GPR[EPVS]-1659877722232
========
if(type!=Node.NON_SPECIALCALL){
setRequiresActivation();
new Node(COLUMN_BITS,next,COLUMN_BITS,COLUMN_BITS).putIntProp(Node.SPECIALCALL_PROP,type);
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877722235
GPR[SPVAP]-1659877722235
GPR[EPVAP]-1659877722819
GPR[EPVS]-1659877722819
========
case Token.STRING :

if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877722820
GPR[SPVAP]-1659877722820
GPR[EPVAP]-1659877723393
GPR[EPVS]-1659877723393
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
changed=true;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877723396
GPR[SPVAP]-1659877723396
GPR[EPVAP]-1659877723971
GPR[EPVS]-1659877723971
========
if(COLUMN_BITS==0){
int N=1<<COLUMN_BITS;
if(keys.length!=N*2){
int[] new int[N*2]=new int[N*2];
System.arraycopy(keys,0,tmp,0,N);
keys=tmp;
}
ivaluesShift=N;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877723974
GPR[SPVAP]-1659877723974
GPR[EPVAP]-1659877724553
GPR[EPVS]-1659877724553
========
keys[COLUMN_BITS+i]=COLUMN_BITS;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877724554
GPR[SPVAP]-1659877724554
GPR[EPVAP]-1659877725161
GPR[EPVS]-1659877725161
========
cur=next;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877725163
GPR[SPVAP]-1659877725163
GPR[EPVAP]-1659877725743
GPR[EPVS]-1659877725743
========
swtich (type){
case Token.CATCH :
Preconditions.checkState(next.getChildCount()==3);
Preconditions.checkState(n.getFirstChild().getType()==Token.NAME);
traverseBranch(n.getFirstChild(),n);
traverseBranch(n.getFirstChild().getNext().getNext(),n);
break;

case Token.FUNCTION :
traverseFunction(n,parent);
break;

default :
for(Node obj=n.getFirstChild();child!=null;){
Node next=child.getNext();
traverseBranch(child,n);
child=next;
}
break;

}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877725744
GPR[SPVAP]-1659877725744
GPR[EPVAP]-1659877726338
GPR[EPVS]-1659877726338
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(next==null){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877726341
GPR[SPVAP]-1659877726341
GPR[EPVAP]-1659877726923
GPR[EPVS]-1659877726923
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(next==null){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877726925
GPR[SPVAP]-1659877726925
GPR[EPVAP]-1659877727508
GPR[EPVS]-1659877727508
========
if(printAnnotations){
if(cur.getType()==Token.NAME&&str.equals(cur.getString())){
lookAhead=null;
return ;
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877727509
GPR[SPVAP]-1659877727509
GPR[EPVAP]-1659877728081
GPR[EPVS]-1659877728081
========
if(printAnnotations){
if(i==Token.NAME&&!str.equals(next.getString())){
boolean false=false;
if(next==null){
blocked=true;
}else {
boolean (next.getType()==Token.ASSIGN&&next==nextParent.getFirstChild())=(nextParent.getType()==Token.ASSIGN&&nextNode==nextParent.getFirstChild());
boolean (next.getType()==Token.VAR)=(nextParent.getType()==Token.VAR);
if(!assignsName&&!isVarDeclaration){
blocked=true;
}
}
if(blocked){
next=null;
return ;
}
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877728083
GPR[SPVAP]-1659877728083
GPR[EPVAP]-1659877728658
GPR[EPVS]-1659877728658
========
if(NodeUtil.nodeTypeMayHaveSideEffects(next)&&i!=Token.NAME||type==Token.NAME&&next.getType()==Token.CATCH){
next=null;
return ;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877728659
GPR[SPVAP]-1659877728659
GPR[EPVAP]-1659877729247
GPR[EPVS]-1659877729247
========
next=next;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877729248
GPR[SPVAP]-1659877729248
GPR[EPVAP]-1659877729821
GPR[EPVS]-1659877729821
========
case 3 :

if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877729824
GPR[SPVAP]-1659877729824
GPR[EPVAP]-1659877730418
GPR[EPVS]-1659877730418
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(TYPEDEF_NAME.equals(next.getLastChild().getQualifiedName())){
return next.getFirstChild().getQualifiedName();
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877730420
GPR[SPVAP]-1659877730420
GPR[EPVAP]-1659877731003
GPR[EPVS]-1659877731003
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(TYPEDEF_NAME.equals(next.getLastChild().getQualifiedName())){
return next.getFirstChild().getQualifiedName();
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877731004
GPR[SPVAP]-1659877731004
GPR[EPVAP]-1659877731587
GPR[EPVS]-1659877731587
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(obj==null){
return !next.hasChildren();
}else {
return n.hasChildren()&&labelName.equals(n.getFirstChild().getString());
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877731589
GPR[SPVAP]-1659877731589
GPR[EPVAP]-1659877732167
GPR[EPVS]-1659877732167
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(obj==null){
return !next.hasChildren();
}else {
return n.hasChildren()&&labelName.equals(n.getFirstChild().getString());
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877732169
GPR[SPVAP]-1659877732169
GPR[EPVAP]-1659877732746
GPR[EPVS]-1659877732746
========
case Token.LB :

if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877732748
GPR[SPVAP]-1659877732748
GPR[EPVAP]-1659877733325
GPR[EPVS]-1659877733325
========
case Token.CONTINUE :

if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877733327
GPR[SPVAP]-1659877733327
GPR[EPVAP]-1659877733909
GPR[EPVS]-1659877733909
========
case Token.VAR :

if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877733910
GPR[SPVAP]-1659877733910
GPR[EPVAP]-1659877734483
GPR[EPVS]-1659877734483
========
if(printAnnotations){
open=close=colon=-1;
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877734485
GPR[SPVAP]-1659877734485
GPR[EPVAP]-1659877735062
GPR[EPVS]-1659877735062
========
if(printAnnotations){
b2+=COLUMN_BITS;
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877735065
GPR[SPVAP]-1659877735065
GPR[EPVAP]-1659877735651
GPR[EPVS]-1659877735651
========
if(printAnnotations){
s2+=COLUMN_BITS;
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877735653
GPR[SPVAP]-1659877735653
GPR[EPVAP]-1659877736235
GPR[EPVS]-1659877736235
========
if(printAnnotations){
mhi=BigInteger.valueOf(1);
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877736237
GPR[SPVAP]-1659877736237
GPR[EPVAP]-1659877736811
GPR[EPVS]-1659877736811
========
if(printAnnotations){
b2+=COLUMN_BITS;
s2+=COLUMN_BITS;
mhi=BigInteger.valueOf(1);

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877736812
GPR[SPVAP]-1659877736813
GPR[EPVAP]-1659877737393
GPR[EPVS]-1659877737393
========
case Token.GETELEM :

if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877737396
GPR[SPVAP]-1659877737396
GPR[EPVAP]-1659877737979
GPR[EPVS]-1659877737979
========
COLUMN_BITS=(int)(Double.doubleToLongBits(number)>>>32)&Frac_mask;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877737982
GPR[SPVAP]-1659877737982
GPR[EPVAP]-1659877738560
GPR[EPVS]-1659877738560
========
COLUMN_BITS&=0x7fffffff;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877738562
GPR[SPVAP]-1659877738562
GPR[EPVAP]-1659877739139
GPR[EPVS]-1659877739139
========
if(printAnnotations){
if(value!=null){
parent.replaceChild(next,Node.newString(value));
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877739141
GPR[SPVAP]-1659877739141
GPR[EPVAP]-1659877739730
GPR[EPVS]-1659877739730
========
Preconditions.checkArgument(NodeUtil.isCall(next));
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877739732
GPR[SPVAP]-1659877739732
GPR[EPVAP]-1659877740315
GPR[EPVS]-1659877740315
========
if(next.getFirstChild().getQualifiedName()==null){
return ;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877740317
GPR[SPVAP]-1659877740317
GPR[EPVAP]-1659877740905
GPR[EPVS]-1659877740905
========
if(!"goog.exportSymbol".equals(next.getFirstChild().getQualifiedName())){
return ;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877740906
GPR[SPVAP]-1659877740906
GPR[EPVAP]-1659877741494
GPR[EPVS]-1659877741494
========
if(!NodeUtil.isString(next.getFirstChild().getNext())){
return ;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877741496
GPR[SPVAP]-1659877741496
GPR[EPVAP]-1659877742074
GPR[EPVS]-1659877742074
========
if(obj.getQualifiedName()==null||obj.getNext()!=null){
return ;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877742075
GPR[SPVAP]-1659877742075
GPR[EPVAP]-1659877742649
GPR[EPVS]-1659877742649
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
parent.replaceChild(next,new Node(Token.FALSE));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877742652
GPR[SPVAP]-1659877742652
GPR[EPVAP]-1659877743238
GPR[EPVS]-1659877743238
========
if(printAnnotations){
if(next.getType()==Token.NAME&&"Object".equals(next.getString())){
parent.replaceChild(next,new Node(Token.TRUE));
return ;
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877743240
GPR[SPVAP]-1659877743240
GPR[EPVAP]-1659877743818
GPR[EPVS]-1659877743818
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.charAt(0)==0){
return (str.length()==1)?0L:-1L;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877743820
GPR[SPVAP]-1659877743820
GPR[EPVAP]-1659877744412
GPR[EPVS]-1659877744412
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.charAt(0)==0){
return (str.length()==1)?0L:-1L;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877744414
GPR[SPVAP]-1659877744414
GPR[EPVAP]-1659877744998
GPR[EPVS]-1659877744998
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
c-='0';
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877745000
GPR[SPVAP]-1659877745000
GPR[EPVAP]-1659877745597
GPR[EPVS]-1659877745597
========
if(printAnnotations){
if(1<=str.charAt(0)&&str.charAt(0)<=9){
long serialVersionUID=str.charAt(0);
for(int i=1;i!=str.length();++i){
c=str.charAt(i)-'0';
if(!(0<=str.charAt(0)&&str.charAt(0)<=9)){
return -1;
}
v=10*str.charAt(0)+str.charAt(0);
}
if((str.charAt(0)>>>32)==0){
return str.charAt(0);
}
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877745599
GPR[SPVAP]-1659877745599
GPR[EPVAP]-1659877746174
GPR[EPVS]-1659877746174
========
if(printAnnotations){
c-='0';
if(1<=str.charAt(0)&&str.charAt(0)<=9){
long serialVersionUID=str.charAt(0);
for(int i=1;i!=str.length();++i){
c=str.charAt(i)-'0';
if(!(0<=str.charAt(0)&&str.charAt(0)<=9)){
return -1;
}
v=10*str.charAt(0)+str.charAt(0);
}
if((str.charAt(0)>>>32)==0){
return str.charAt(0);
}
}

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877746175
GPR[SPVAP]-1659877746175
GPR[EPVAP]-1659877746755
GPR[EPVS]-1659877746755
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(!((i+5)<length)&&(str.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(s.charAt(i+3),0)&&0<=Kit.xDigitToInt(s.charAt(i+4),0)&&0<=Kit.xDigitToInt(s.charAt(i+5),0)){
return true;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877746757
GPR[SPVAP]-1659877746757
GPR[EPVAP]-1659877747339
GPR[EPVS]-1659877747339
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(!((i+5)<length)&&(str.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(s.charAt(i+3),0)&&0<=Kit.xDigitToInt(s.charAt(i+4),0)&&0<=Kit.xDigitToInt(s.charAt(i+5),0)){
return true;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877747340
GPR[SPVAP]-1659877747340
GPR[EPVAP]-1659877747920
GPR[EPVS]-1659877747920
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
++COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877747924
GPR[SPVAP]-1659877747924
GPR[EPVAP]-1659877748502
GPR[EPVS]-1659877748502
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(keys[type>>>(32-COLUMN_BITS)]==COLUMN_BITS){
return type>>>(32-COLUMN_BITS);
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877748503
GPR[SPVAP]-1659877748503
GPR[EPVAP]-1659877749081
GPR[EPVS]-1659877749081
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(keys[type>>>(32-COLUMN_BITS)]==COLUMN_BITS){
return type>>>(32-COLUMN_BITS);
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877749082
GPR[SPVAP]-1659877749082
GPR[EPVAP]-1659877749662
GPR[EPVS]-1659877749662
========
if(i<COLUMN_BITS){
newCapacity=minimalCapacity;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877749664
GPR[SPVAP]-1659877749664
GPR[EPVAP]-1659877750242
GPR[EPVS]-1659877750242
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
sourceEnd-=COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877750244
GPR[SPVAP]-1659877750244
GPR[EPVAP]-1659877750822
GPR[EPVS]-1659877750822
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
sourceCursor-=COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877750824
GPR[SPVAP]-1659877750824
GPR[EPVAP]-1659877751411
GPR[EPVS]-1659877751411
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
lineStart=0;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877751412
GPR[SPVAP]-1659877751412
GPR[EPVAP]-1659877752019
GPR[EPVS]-1659877752019
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
sourceEnd-=COLUMN_BITS;
sourceCursor-=COLUMN_BITS;
lineStart=0;

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877752020
GPR[SPVAP]-1659877752020
GPR[EPVAP]-1659877752595
GPR[EPVS]-1659877752595
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
sourceBuffer=new char[sourceBuffer.length*2];
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877752596
GPR[SPVAP]-1659877752596
GPR[EPVAP]-1659877753172
GPR[EPVS]-1659877753172
========
if(length!=null)Kit.codeBug();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877753174
GPR[SPVAP]-1659877753174
GPR[EPVAP]-1659877753748
GPR[EPVS]-1659877753748
========
if(i<0){
return false;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877753750
GPR[SPVAP]-1659877753750
GPR[EPVAP]-1659877754338
GPR[EPVS]-1659877754338
========
type+=i;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877754340
GPR[SPVAP]-1659877754340
GPR[EPVAP]-1659877754919
GPR[EPVS]-1659877754919
========
if(printAnnotations){
if(!NodeUtil.mayHaveSideEffects(next)&&next!=null){
next.removeChild(next);
next.replaceChild(next,next);
Node new Node(Token.NOT)=new Node(Token.NOT);
next.replaceChild(next,new Node(Token.NOT));
new Node(Token.NOT).addChildToFront(next);
cond=new Node(Token.NOT);
thenBody=next.getNext();
elseBody=null;
changes=true;
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877754922
GPR[SPVAP]-1659877754922
GPR[EPVAP]-1659877755500
GPR[EPVS]-1659877755500
========
if(printAnnotations){
if(!NodeUtil.mayHaveSideEffects(next)&&next==null){
if(NodeUtil.mayHaveSideEffects(next)){
next.removeChild(next);
parent.replaceChild(next,NodeUtil.newExpr(next));
}else {
NodeUtil.removeChild(parent,next);
}
return true;
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877755501
GPR[SPVAP]-1659877755501
GPR[EPVAP]-1659877756078
GPR[EPVS]-1659877756078
========
if(printAnnotations){
if(!NodeUtil.mayHaveSideEffects(next)&&next!=null){
next.removeChild(next);
next.replaceChild(next,next);
Node new Node(Token.NOT)=new Node(Token.NOT);
next.replaceChild(next,new Node(Token.NOT));
new Node(Token.NOT).addChildToFront(next);
cond=new Node(Token.NOT);
thenBody=next.getNext();
elseBody=null;
changes=true;
}
if(!NodeUtil.mayHaveSideEffects(next)&&next==null){
if(NodeUtil.mayHaveSideEffects(next)){
next.removeChild(next);
parent.replaceChild(next,NodeUtil.newExpr(next));
}else {
NodeUtil.removeChild(parent,next);
}
return true;
}

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877756080
GPR[SPVAP]-1659877756080
GPR[EPVAP]-1659877756655
GPR[EPVS]-1659877756655
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
next.removeChild(next.getFirstChild());
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877756657
GPR[SPVAP]-1659877756657
GPR[EPVAP]-1659877757275
GPR[EPVS]-1659877757275
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
new Node(Token.IF).addChildToBack(next.getFirstChild());
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877757276
GPR[SPVAP]-1659877757276
GPR[EPVAP]-1659877757851
GPR[EPVS]-1659877757851
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
next.removeChild(next.getFirstChild());
new Node(Token.IF).addChildToBack(next.getFirstChild());

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877757853
GPR[SPVAP]-1659877757853
GPR[EPVAP]-1659877758431
GPR[EPVS]-1659877758431
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
next.removeChild(next);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877758433
GPR[SPVAP]-1659877758433
GPR[EPVAP]-1659877759006
GPR[EPVS]-1659877759006
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
new Node(Token.IF).addChildToBack(next);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877759008
GPR[SPVAP]-1659877759008
GPR[EPVAP]-1659877759613
GPR[EPVS]-1659877759613
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
new Node(Token.IF).addChildToBack(new Node(Token.BLOCK,NodeUtil.newExpr(next)));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877759615
GPR[SPVAP]-1659877759615
GPR[EPVAP]-1659877760194
GPR[EPVS]-1659877760194
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
parent.getParent().replaceChild(parent,new Node(Token.IF));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877760196
GPR[SPVAP]-1659877760196
GPR[EPVAP]-1659877760770
GPR[EPVS]-1659877760770
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
next.removeChild(next);
new Node(Token.IF).addChildToBack(next);
next.removeChild(next);
new Node(Token.IF).addChildToBack(new Node(Token.BLOCK,NodeUtil.newExpr(next)));
parent.getParent().replaceChild(parent,new Node(Token.IF));

swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877760772
GPR[SPVAP]-1659877760772
GPR[EPVAP]-1659877761359
GPR[EPVS]-1659877761359
========
if(printAnnotations){
Preconditions.checkState(type==Token.HOOK);
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877761361
GPR[SPVAP]-1659877761361
GPR[EPVAP]-1659877761943
GPR[EPVS]-1659877761943
========
if(printAnnotations){
keys[index]=DELETED;
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877761945
GPR[SPVAP]-1659877761945
GPR[EPVAP]-1659877762522
GPR[EPVS]-1659877762522
========
if(printAnnotations){
if(COLUMN_BITS!=0){
keys[ivaluesShift+index]=0;
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877762523
GPR[SPVAP]-1659877762523
GPR[EPVAP]-1659877763097
GPR[EPVS]-1659877763097
========
if(printAnnotations){
keys[index]=DELETED;
--COLUMN_BITS;
if(COLUMN_BITS!=0){
keys[ivaluesShift+index]=0;
}

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877763098
GPR[SPVAP]-1659877763098
GPR[EPVAP]-1659877763674
GPR[EPVS]-1659877763674
========
if(printAnnotations&&keys!=null&&keys[-1]!=EMPTY)Kit.codeBug();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877763677
GPR[SPVAP]-1659877763677
GPR[EPVAP]-1659877764258
GPR[EPVS]-1659877764258
========
if(-1>=0){
COLUMN_BITS=firstDeleted;
}else {
if(keys==null||COLUMN_BITS*4>=(1<<COLUMN_BITS)*3){
rehashTable(printType);
keys=this.keys;
return insertNewKey(COLUMN_BITS);
}
++occupiedCount;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877764260
GPR[SPVAP]-1659877764260
GPR[EPVAP]-1659877764843
GPR[EPVS]-1659877764843
========
keys[-1]=COLUMN_BITS;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877764844
GPR[SPVAP]-1659877764844
GPR[EPVAP]-1659877765424
GPR[EPVS]-1659877765424
========
++COLUMN_BITS;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877765426
GPR[SPVAP]-1659877765426
GPR[EPVAP]-1659877766003
GPR[EPVS]-1659877766003
========
if(type>sourceBuffer.length){
increaseSourceCapacity(nextTop);
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877766005
GPR[SPVAP]-1659877766005
GPR[EPVAP]-1659877766584
GPR[EPVS]-1659877766584
========
++sourcePosition;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877766586
GPR[SPVAP]-1659877766586
GPR[EPVAP]-1659877767168
GPR[EPVS]-1659877767168
========
sourcePosition=type;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877767169
GPR[SPVAP]-1659877767169
GPR[EPVAP]-1659877767751
GPR[EPVS]-1659877767751
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new FlagUsageException("Module \'"+str);

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877767754
GPR[SPVAP]-1659877767754
GPR[EPVAP]-1659877768327
GPR[EPVS]-1659877768327
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new FlagUsageException("Module \'"+str);

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877768328
GPR[SPVAP]-1659877768328
GPR[EPVAP]-1659877768911
GPR[EPVS]-1659877768911
========
if(printType&&COLUMN_BITS==1<<COLUMN_BITS)Kit.codeBug();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877768914
GPR[SPVAP]-1659877768914
GPR[EPVAP]-1659877769490
GPR[EPVS]-1659877769490
========
if(keys[type>>>(32-COLUMN_BITS)]!=EMPTY){
int (1<<COLUMN_BITS)-1=(1<<COLUMN_BITS)-1;
int obj=tableLookupStep(type,mask,power);
int i=index;
do {
if(printType&&keys[index]==DELETED)Kit.codeBug();
index=(index+step)&mask;
if(check&&firstIndex==index)Kit.codeBug();
} while(keys[index]!=EMPTY);
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877769492
GPR[SPVAP]-1659877769492
GPR[EPVAP]-1659877770078
GPR[EPVS]-1659877770078
========
keys[type>>>(32-COLUMN_BITS)]=COLUMN_BITS;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877770080
GPR[SPVAP]-1659877770080
GPR[EPVAP]-1659877770665
GPR[EPVS]-1659877770665
========
if(printAnnotations){
if(data.length<COLUMN_BITS){
alloc=COLUMN_BITS;
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877770667
GPR[SPVAP]-1659877770667
GPR[EPVAP]-1659877771248
GPR[EPVS]-1659877771248
========
if(printAnnotations){
data=new Object[data.length];
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877771250
GPR[SPVAP]-1659877771250
GPR[EPVAP]-1659877771827
GPR[EPVS]-1659877771827
========
if(printAnnotations){
if(data.length<COLUMN_BITS){
alloc=COLUMN_BITS;
}
data=new Object[data.length];

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877771828
GPR[SPVAP]-1659877771828
GPR[EPVAP]-1659877772398
GPR[EPVS]-1659877772398
========
Preconditions.checkArgument(ancestors.length>0);
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877772400
GPR[SPVAP]-1659877772400
GPR[EPVAP]-1659877772978
GPR[EPVS]-1659877772978
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877772980
GPR[SPVAP]-1659877772980
GPR[EPVAP]-1659877773555
GPR[EPVS]-1659877773555
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877773557
GPR[SPVAP]-1659877773557
GPR[EPVAP]-1659877774144
GPR[EPVS]-1659877774144
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877774147
GPR[SPVAP]-1659877774147
GPR[EPVAP]-1659877774717
GPR[EPVS]-1659877774717
========
if(printAnnotations){
sb.append('*');
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877774719
GPR[SPVAP]-1659877774719
GPR[EPVAP]-1659877775303
GPR[EPVS]-1659877775303
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.write(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877775306
GPR[SPVAP]-1659877775306
GPR[EPVAP]-1659877775881
GPR[EPVS]-1659877775881
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
size+=i;
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877775882
GPR[SPVAP]-1659877775882
GPR[EPVAP]-1659877776458
GPR[EPVS]-1659877776458
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
lastChar=str.charAt(i-1);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877776460
GPR[SPVAP]-1659877776460
GPR[EPVAP]-1659877777045
GPR[EPVS]-1659877777045
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
size+=i;
lastChar=str.charAt(i-1);

for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877777047
GPR[SPVAP]-1659877777047
GPR[EPVAP]-1659877777630
GPR[EPVS]-1659877777630
========
if(sourcePosition==sb.length()-1){
char i=sb.charAt(len-1);
if(ch==';'){
preferredBreakPosition=len;
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877777632
GPR[SPVAP]-1659877777632
GPR[EPVAP]-1659877778211
GPR[EPVS]-1659877778211
========
maybeCutLine();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877778213
GPR[SPVAP]-1659877778213
GPR[EPVAP]-1659877778795
GPR[EPVS]-1659877778795
========
if(i==0){
return str;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877778797
GPR[SPVAP]-1659877778797
GPR[EPVAP]-1659877779377
GPR[EPVS]-1659877779377
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(str.charAt(type)=='\n'){
return new SimpleRegion(COLUMN_BITS,COLUMN_BITS,js.substring(COLUMN_BITS,last));
}else {
return new SimpleRegion(startLine,endLine,js.substring(pos));
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877779380
GPR[SPVAP]-1659877779380
GPR[EPVAP]-1659877779962
GPR[EPVS]-1659877779962
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(str.charAt(type)=='\n'){
return new SimpleRegion(COLUMN_BITS,COLUMN_BITS,js.substring(COLUMN_BITS,last));
}else {
return new SimpleRegion(startLine,endLine,js.substring(pos));
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877779964
GPR[SPVAP]-1659877779964
GPR[EPVAP]-1659877780544
GPR[EPVS]-1659877780544
========
if(printAnnotations){
if(prop.mutatorCount>=COLUMN_BITS){
prop.aliasMutator=true;
}
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877780546
GPR[SPVAP]-1659877780546
GPR[EPVAP]-1659877781125
GPR[EPVS]-1659877781125
========
if(printAnnotations){
sb.append('*');
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877781127
GPR[SPVAP]-1659877781127
GPR[EPVAP]-1659877781714
GPR[EPVS]-1659877781714
========
if((next.getFirstChild().getType()!=Token.STRING)||(!next.getFirstChild().getNext().getString().equals("indexOf")&&!functionName.getString().equals("lastIndexOf"))){
return ;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877781716
GPR[SPVAP]-1659877781716
GPR[EPVAP]-1659877782293
GPR[EPVS]-1659877782293
========
if(NodeUtil.getStringValue(next)==null){
return ;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877782295
GPR[SPVAP]-1659877782295
GPR[EPVAP]-1659877782879
GPR[EPVS]-1659877782879
========
if(obj!=null){
if((secondArg.getNext()!=null)||(secondArg.getType()!=Token.NUMBER)){
return ;
}else {
type=(int)secondArg.getDouble();
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877782880
GPR[SPVAP]-1659877782880
GPR[EPVAP]-1659877783456
GPR[EPVS]-1659877783456
========
parent.replaceChild(next,Node.newNumber(next.getFirstChild().getNext().getString().equals("indexOf")?NodeUtil.getStringValue(next.getFirstChild()).indexOf(NodeUtil.getStringValue(next),type):lstring.lastIndexOf(searchValue,fromIndex)));
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877783458
GPR[SPVAP]-1659877783458
GPR[EPVAP]-1659877784038
GPR[EPVS]-1659877784038
========
x=str.charAt(str.length()-1);
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877784040
GPR[SPVAP]-1659877784040
GPR[EPVAP]-1659877784626
GPR[EPVS]-1659877784626
========
i+=str.length();
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877784627
GPR[SPVAP]-1659877784627
GPR[EPVAP]-1659877785201
GPR[EPVS]-1659877785201
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(NodeUtil.mayHaveSideEffects(next)){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877785207
GPR[SPVAP]-1659877785207
GPR[EPVAP]-1659877785785
GPR[EPVS]-1659877785785
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(NodeUtil.mayHaveSideEffects(next)){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877785786
GPR[SPVAP]-1659877785786
GPR[EPVAP]-1659877786366
GPR[EPVS]-1659877786366
========
if(printAnnotations){
Preconditions.checkState(i!=-1);
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877786367
GPR[SPVAP]-1659877786367
GPR[EPVAP]-1659877786942
GPR[EPVS]-1659877786942
========
if(printAnnotations){
parent.replaceChild(next,Node.newNumber(i));
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877786944
GPR[SPVAP]-1659877786944
GPR[EPVAP]-1659877787523
GPR[EPVS]-1659877787523
========
if(printAnnotations){
Preconditions.checkState(i!=-1);
parent.replaceChild(next,Node.newNumber(i));

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877787524
GPR[SPVAP]-1659877787524
GPR[EPVAP]-1659877788098
GPR[EPVS]-1659877788098
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
if(!areSafeFlagsToFold(next.getString())){
return ;
}
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877788101
GPR[SPVAP]-1659877788101
GPR[EPVAP]-1659877788675
GPR[EPVS]-1659877788675
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
if(!areSafeFlagsToFold(next.getString())){
return ;
}
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877788676
GPR[SPVAP]-1659877788676
GPR[EPVAP]-1659877789297
GPR[EPVS]-1659877789297
========
if(printAnnotations){
int[] keys=getSortedPropTypes();
pattern=makeForwardSlashBracketSafe(next);
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877789308
GPR[SPVAP]-1659877789308
GPR[EPVAP]-1659877790145
GPR[EPVS]-1659877790145
========
if(printAnnotations){
parent.replaceChild(next,next);
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877790146
GPR[SPVAP]-1659877790147
GPR[EPVAP]-1659877790726
GPR[EPVS]-1659877790726
========
if(printAnnotations){
pattern=makeForwardSlashBracketSafe(next);
parent.replaceChild(next,next);

int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877790728
GPR[SPVAP]-1659877790728
GPR[EPVAP]-1659877792023
GPR[EPVS]-1659877792023
========
if(i<0){
return ;
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}

========
GPR[SPVS]-1659877792032
GPR[SPVAP]-1659877792032
GPR[EPVAP]-1659877792811
GPR[EPVS]-1659877792811
========
if(jsTypeString!=null){
b.append(" : ");
b.append(jsTypeString);
}

========
GPR[SPVS]-1659877793946
GPR[SPVAP]-1659877793946
GPR[EPVAP]-1659877794677
GPR[EPVS]-1659877794677
========
if(error.sourceName!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877794678
GPR[SPVAP]-1659877794678
GPR[EPVAP]-1659877795435
GPR[EPVS]-1659877795435
========
if(jsTypeString!=null){
b.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877795437
GPR[SPVAP]-1659877795437
GPR[EPVAP]-1659877796166
GPR[EPVS]-1659877796166
========
if(jsTypeString!=null){
sb.append(" : ");
b.append(jsTypeString);
}

========
GPR[SPVS]-1659877796168
GPR[SPVAP]-1659877796168
GPR[EPVAP]-1659877796907
GPR[EPVS]-1659877796907
========
if(jsTypeString!=null){
sb.append(" : ");
sb.append(error.lineNumber);
}

========
GPR[SPVS]-1659877796908
GPR[SPVAP]-1659877796908
GPR[EPVAP]-1659877797639
GPR[EPVS]-1659877797639
========
if(jsTypeString!=null){
sb.append(": ");
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877797641
GPR[SPVAP]-1659877797641
GPR[EPVAP]-1659877798823
GPR[SPVATF]-1659877798823
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877799900
GPR[EPVS]-1659877799900
========
sb.append(getLevelName(printType?CheckLevel.WARNING:CheckLevel.ERROR));
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877799902
GPR[SPVAP]-1659877799902
GPR[EPVAP]-1659877800661
GPR[EPVS]-1659877800661
========
sb.append(" - ");
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877800663
GPR[SPVAP]-1659877800663
GPR[EPVAP]-1659877801836
GPR[SPVATF]-1659877801836
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877802921
GPR[EPVS]-1659877802921
========
if(error.sourceName!=null){
sb.append(": ");
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877802923
GPR[SPVAP]-1659877802923
GPR[EPVAP]-1659877803675
GPR[EPVS]-1659877803675
========
sb.append(" - ");
if(error.sourceName!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877803676
GPR[SPVAP]-1659877803676
GPR[EPVAP]-1659877804411
GPR[EPVS]-1659877804411
========
sb.append(" - ");
if(jsTypeString!=null){
sb.append(": ");
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877804412
GPR[SPVAP]-1659877804412
GPR[EPVAP]-1659877805598
GPR[SPVATF]-1659877805598
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877806685
GPR[EPVS]-1659877806685
========
sb.append(" - ");
if(error.sourceName!=null){
sb.append(": ");
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877806686
GPR[SPVAP]-1659877806686
GPR[EPVAP]-1659877807431
GPR[EPVS]-1659877807431
========
if(jsTypeString!=-1){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877807432
GPR[SPVAP]-1659877807432
GPR[EPVAP]-1659877808175
GPR[EPVS]-1659877808175
========
if(jsTypeString!=null){
sb.append(" : ");
sb.append(call.returnType);
}

========
GPR[SPVS]-1659877808177
GPR[SPVAP]-1659877808177
GPR[EPVAP]-1659877808911
GPR[EPVS]-1659877808911
========
sb.append(")");
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877808912
GPR[SPVAP]-1659877808912
GPR[EPVAP]-1659877810088
GPR[SPVATF]-1659877810088
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877811195
GPR[EPVS]-1659877811195
========
sb.append(")");
if(jsTypeString!=null){
b.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877811197
GPR[SPVAP]-1659877811197
GPR[EPVAP]-1659877811967
GPR[EPVS]-1659877811967
========
sb.append(")");
if(jsTypeString!=null){
sb.append(" : ");
b.append(jsTypeString);
}

========
GPR[SPVS]-1659877811969
GPR[SPVAP]-1659877811969
GPR[EPVAP]-1659877812698
GPR[EPVS]-1659877812698
========
sb.append(")");
if(jsTypeString!=null){
b.append(" : ");
b.append(jsTypeString);
}

========
GPR[SPVS]-1659877812700
GPR[SPVAP]-1659877812700
GPR[EPVAP]-1659877813434
GPR[EPVS]-1659877813434
========
if(jsTypeString==null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877813438
GPR[SPVAP]-1659877813438
GPR[EPVAP]-1659877814613
GPR[SPVATF]-1659877814613
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877815736
GPR[EPVS]-1659877815736
========
if(Token.EOL!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877815738
GPR[SPVAP]-1659877815738
GPR[EPVAP]-1659877816478
GPR[EPVS]-1659877816478
========
new StringBuffer(str).append(" (");
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877816480
GPR[SPVAP]-1659877816480
GPR[EPVAP]-1659877817211
GPR[EPVS]-1659877817211
========
append((char)jsTypeString);
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877817212
GPR[SPVAP]-1659877817212
GPR[EPVAP]-1659877817939
GPR[EPVS]-1659877817939
========
append((char)Token.EOL);
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877817941
GPR[SPVAP]-1659877817941
GPR[EPVAP]-1659877818679
GPR[EPVS]-1659877818679
========
appendInferredPaths(getExportedPath());
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877818682
GPR[SPVAP]-1659877818682
GPR[EPVAP]-1659877819420
GPR[EPVS]-1659877819420
========
sb.append(";\n");
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877819421
GPR[SPVAP]-1659877819421
GPR[EPVAP]-1659877820610
GPR[SPVATF]-1659877820610
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877821686
GPR[EPVS]-1659877821686
========
if(jsTypeString!=null){
if(str.length()==0){
return sb.substring(0,builder.length()-1);
}
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877821689
GPR[SPVAP]-1659877821689
GPR[EPVAP]-1659877822451
GPR[EPVS]-1659877822451
========
sb.append("  ");
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877822452
GPR[SPVAP]-1659877822452
GPR[EPVAP]-1659877823678
GPR[SPVATF]-1659877823678
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877824762
GPR[EPVS]-1659877824762
========
if(Token.LC!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877824764
GPR[SPVAP]-1659877824764
GPR[EPVAP]-1659877825509
GPR[EPVS]-1659877825509
========
if(Token.NAME!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877825511
GPR[SPVAP]-1659877825511
GPR[EPVAP]-1659877826245
GPR[EPVS]-1659877826245
========
if(Token.NAME==null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877826247
GPR[SPVAP]-1659877826247
GPR[EPVAP]-1659877826967
GPR[EPVS]-1659877826967
========
if(Token.SEMI!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877826969
GPR[SPVAP]-1659877826969
GPR[EPVAP]-1659877827706
GPR[EPVS]-1659877827706
========
case Token.RC :

if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877827708
GPR[SPVAP]-1659877827708
GPR[EPVAP]-1659877828287
GPR[EPVS]-1659877828287
========
if(Token.EOL==null){
sb.append(" : ");
sb.append(jsTypeString);
}

========
GPR[SPVS]-1659877828288
GPR[SPVAP]-1659877828288
GPR[EPVAP]-1659877829028
GPR[EPVS]-1659877829028
========
if(jsType==null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877830278
GPR[SPVAP]-1659877830278
GPR[EPVAP]-1659877831445
GPR[SPVATF]-1659877831445
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877832532
GPR[EPVS]-1659877832532
========
if(jsType!=FunctionNode.FUNCTION_EXPRESSION){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877832534
GPR[SPVAP]-1659877832534
GPR[EPVAP]-1659877833265
GPR[EPVS]-1659877833265
========
if(jsType!=next){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877833267
GPR[SPVAP]-1659877833267
GPR[EPVAP]-1659877833995
GPR[EPVS]-1659877833995
========
if(type!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877833997
GPR[SPVAP]-1659877833997
GPR[EPVAP]-1659877834733
GPR[EPVS]-1659877834733
========
if(jsType==FunctionNode.FUNCTION_EXPRESSION){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877834735
GPR[SPVAP]-1659877834735
GPR[EPVAP]-1659877835474
GPR[EPVS]-1659877835474
========
if(jsType!=null&&!jsType.isUnknownType()&&!jsType.isEmptyType()){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877835476
GPR[SPVAP]-1659877835476
GPR[EPVAP]-1659877836659
GPR[SPVATF]-1659877836659
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877837779
GPR[EPVS]-1659877837779
========
if(retType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877837780
GPR[SPVAP]-1659877837780
GPR[EPVAP]-1659877838512
GPR[EPVS]-1659877838512
========
if(PRIVATE!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877838516
GPR[SPVAP]-1659877838516
GPR[EPVAP]-1659877839251
GPR[EPVS]-1659877839251
========
if(EXPR_RESULT!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877839253
GPR[SPVAP]-1659877839253
GPR[EPVAP]-1659877839989
GPR[EPVS]-1659877839989
========
if(jsType.autoboxesTo()!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}

========
GPR[SPVS]-1659877839991
GPR[SPVAP]-1659877839991
GPR[EPVAP]-1659877841170
GPR[SPVATF]-1659877841170
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877842271
GPR[EPVS]-1659877842271
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(matchToken(Token.NAME)){
if(!matchToken(Token.LP)){
mustMatchToken(Token.LP,"msg.no.paren.parms");
}
}else {
name="";
if(!matchToken(Token.LP)){
mustMatchToken(Token.LP,"msg.no.paren.parms");
}
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877846327
GPR[SPVAP]-1659877846327
GPR[EPVAP]-1659877846912
GPR[EPVS]-1659877846912
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
currentScriptOrFn=fn;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877846914
GPR[SPVAP]-1659877846914
GPR[EPVAP]-1659877847503
GPR[EPVS]-1659877847503
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
nestingOfWith=0;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877847505
GPR[SPVAP]-1659877847505
GPR[EPVAP]-1659877848094
GPR[EPVS]-1659877848094
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
labelSet=null;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877848096
GPR[SPVAP]-1659877848096
GPR[EPVAP]-1659877848678
GPR[EPVS]-1659877848678
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
loopSet=null;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877848679
GPR[SPVAP]-1659877848679
GPR[EPVAP]-1659877849277
GPR[EPVS]-1659877849277
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
loopAndSwitchSet=null;
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877849279
GPR[SPVAP]-1659877849279
GPR[EPVAP]-1659877849859
GPR[EPVS]-1659877849859
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
fn.setEncodedSourceBounds(COLUMN_BITS,COLUMN_BITS);
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877849860
GPR[SPVAP]-1659877849860
GPR[EPVAP]-1659877850447
GPR[EPVS]-1659877850447
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
fn.setSourceName(str);
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877850449
GPR[SPVAP]-1659877850449
GPR[EPVAP]-1659877851023
GPR[EPVS]-1659877851023
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
fn.setBaseLineno(COLUMN_BITS);
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877851025
GPR[SPVAP]-1659877851025
GPR[EPVAP]-1659877851609
GPR[EPVS]-1659877851609
========
{
sb.append(Token.name(type));
if(this instanceof StringNode){
sb.append(' ');
sb.append(getString());
}else if(type==Token.FUNCTION){
sb.append(' ');
sb.append(first.getString());
}else if(this instanceof ScriptOrFnNode){
ScriptOrFnNode sof=(ScriptOrFnNode)this;
if(this instanceof FunctionNode){
FunctionNode fn=(FunctionNode)this;
sb.append(' ');
sb.append(fn.getFunctionName());
}
if(printSource){
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');
}
}else if(type==Token.NUMBER){
sb.append(' ');
sb.append(getDouble());
}
if(matchToken(Token.NAME)){
if(!matchToken(Token.LP)){
mustMatchToken(Token.LP,"msg.no.paren.parms");
}
}else {
name="";
if(!matchToken(Token.LP)){
mustMatchToken(Token.LP,"msg.no.paren.parms");
}
}
currentScriptOrFn=fn;
nestingOfWith=0;
labelSet=null;
loopSet=null;
loopAndSwitchSet=null;
fn.setEncodedSourceBounds(COLUMN_BITS,COLUMN_BITS);
fn.setSourceName(str);
fn.setBaseLineno(COLUMN_BITS);

if(printSource){
int lineno=getLineno();
if(lineno!=-1){
sb.append(' ');
sb.append(lineno);
}
}
if(printAnnotations){
int[] keys=getSortedPropTypes();
for(int i=0;i<keys.length;i++){
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");
String value;
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');
}
}
if(printType){
if(jsType!=null){
String jsTypeString=jsType.toString();
if(jsTypeString!=null){
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}

========
GPR[SPVS]-1659877851611
GPR[SPVAP]-1659877851611
GPR[EPVAP]-1659877852184
GPR[EPVS]-1659877852184
GPR[ESUN]-1659877852320
GPR[SSUN]-1659877852320
com.google.javascript.rhino.Node,889
GPR[ESUN]-1659877852584
GPR[SSUN]-1659877852584
com.google.javascript.rhino.Node,890
========
{
sb.append(' ');
sb.info(getString());
}

========
GPR[SPVS]-1659877854027
GPR[SPVAP]-1659877854027
GPR[EPVAP]-1659877854832
GPR[EPVS]-1659877854832
========
{
builder.append(' ');
sb.append(getString());
}

========
GPR[SPVS]-1659877854834
GPR[SPVAP]-1659877854834
GPR[EPVAP]-1659877855676
GPR[EPVS]-1659877855676
========
{
start=-1;
sb.append(' ');
sb.append(getString());
}

========
GPR[SPVS]-1659877855677
GPR[SPVAP]-1659877855677
GPR[EPVAP]-1659877856521
GPR[EPVS]-1659877856521
========
{
sb.report(' ');
sb.append(getString());
}

========
GPR[SPVS]-1659877856525
GPR[SPVAP]-1659877856525
GPR[EPVAP]-1659877857327
GPR[EPVS]-1659877857327
========
{
info=(JSDocInfo)parent.getProp(Node.JSDOC_INFO_PROP);
sb.append(' ');
sb.append(getString());
}

========
GPR[SPVS]-1659877857328
GPR[SPVAP]-1659877857328
GPR[EPVAP]-1659877858177
GPR[EPVS]-1659877858177
GPR[ESUN]-1659877858178
GPR[SSUN]-1659877858178
com.google.javascript.rhino.Node,891
GPR[ESUN]-1659877858327
GPR[SSUN]-1659877858327
com.google.javascript.rhino.Node,892
GPR[ESUN]-1659877858492
GPR[SSUN]-1659877858492
com.google.javascript.rhino.Node,893
========
{
sb.append(' ');
sb.info(first.getString());
}

========
GPR[SPVS]-1659877860027
GPR[SPVAP]-1659877860027
GPR[EPVAP]-1659877861022
GPR[EPVS]-1659877861022
========
{
builder.append(' ');
sb.append(first.getString());
}

========
GPR[SPVS]-1659877861030
GPR[SPVAP]-1659877861030
GPR[EPVAP]-1659877862203
GPR[EPVS]-1659877862203
========
{
start=-1;
sb.append(' ');
sb.append(first.getString());
}

========
GPR[SPVS]-1659877862204
GPR[SPVAP]-1659877862204
GPR[EPVAP]-1659877863061
GPR[EPVS]-1659877863061
========
{
sb.report(' ');
sb.append(first.getString());
}

========
GPR[SPVS]-1659877863067
GPR[SPVAP]-1659877863067
GPR[EPVAP]-1659877863935
GPR[EPVS]-1659877863935
========
{
info=(JSDocInfo)first.getProp(Node.JSDOC_INFO_PROP);
sb.append(' ');
sb.append(first.getString());
}

========
GPR[SPVS]-1659877863937
GPR[SPVAP]-1659877863937
GPR[EPVAP]-1659877864775
GPR[EPVS]-1659877864775
GPR[ESUN]-1659877864777
GPR[SSUN]-1659877864777
com.google.javascript.rhino.Node,894
GPR[ESUN]-1659877864997
GPR[SSUN]-1659877864997
com.google.javascript.rhino.Node,895
GPR[ESUN]-1659877865238
GPR[SSUN]-1659877865238
com.google.javascript.rhino.Node,896
GPR[ESUN]-1659877866556
GPR[SSUN]-1659877866556
com.google.javascript.rhino.Node,897
GPR[ESUN]-1659877866705
GPR[SSUN]-1659877866705
com.google.javascript.rhino.Node,902
GPR[ESUN]-1659877866845
GPR[SSUN]-1659877866845
com.google.javascript.rhino.Node,903
========
sb.append(sof.getEndLineno());
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877868166
GPR[SPVAP]-1659877868166
GPR[EPVAP]-1659877871731
GPR[SPVATF]-1659877871731
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877872857
GPR[EPVS]-1659877872857
========
sb.append(']');
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877872859
GPR[SPVAP]-1659877872859
GPR[EPVAP]-1659877874065
GPR[SPVATF]-1659877874065
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877875169
GPR[EPVS]-1659877875169
========
sb.append(sof.getEndLineno());
sb.append(']');
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877875171
GPR[SPVAP]-1659877875171
GPR[EPVAP]-1659877876347
GPR[SPVATF]-1659877876347
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877877440
GPR[EPVS]-1659877877440
========
coalescedLog.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877877441
GPR[SPVAP]-1659877877441
GPR[EPVAP]-1659877878175
GPR[EPVS]-1659877878175
========
b.append(" [source name: ");
b.append(sof.getSourceName());
b.append("] [encoded source length: ");

========
GPR[SPVS]-1659877878178
GPR[SPVAP]-1659877878178
GPR[EPVAP]-1659877878915
GPR[EPVS]-1659877878915
========
sb.append(" [source name: ");
b.append(sof.getSourceName());
b.append("] [encoded source length: ");

========
GPR[SPVS]-1659877878917
GPR[SPVAP]-1659877878917
GPR[EPVAP]-1659877879654
GPR[EPVS]-1659877879654
========
b.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877879656
GPR[SPVAP]-1659877879656
GPR[EPVAP]-1659877880394
GPR[EPVS]-1659877880394
========
sb.append(" [source name: ");
b.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877880396
GPR[SPVAP]-1659877880396
GPR[EPVAP]-1659877881137
GPR[EPVS]-1659877881137
========
sb.append(" [source name: ");
sb.append(sof.getSourceName());
b.append("] [encoded source length: ");

========
GPR[SPVS]-1659877881138
GPR[SPVAP]-1659877881138
GPR[EPVAP]-1659877881877
GPR[EPVS]-1659877881877
========
sb.append('\n');
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877881878
GPR[SPVAP]-1659877881878
GPR[EPVAP]-1659877883067
GPR[SPVATF]-1659877883067
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877884212
GPR[EPVS]-1659877884212
========
builder.append(" [source name: ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877884213
GPR[SPVAP]-1659877884213
GPR[EPVAP]-1659877884967
GPR[EPVS]-1659877884967
========
builder.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877884969
GPR[SPVAP]-1659877884969
GPR[EPVAP]-1659877885735
GPR[EPVS]-1659877885735
========
sb.append(" [source name: ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877885736
GPR[SPVAP]-1659877885736
GPR[EPVAP]-1659877886465
GPR[EPVS]-1659877886465
========
b.append(" [source name: ");
b.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877886467
GPR[SPVAP]-1659877886467
GPR[EPVAP]-1659877887183
GPR[EPVS]-1659877887183
========
sb.append(" [source name: ");
assignmentLog.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877887421
GPR[SPVAP]-1659877887421
GPR[EPVAP]-1659877888156
GPR[EPVS]-1659877888156
========
sb.add(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877888157
GPR[SPVAP]-1659877888157
GPR[EPVAP]-1659877888900
GPR[EPVS]-1659877888900
========
debug.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877888901
GPR[SPVAP]-1659877888901
GPR[EPVAP]-1659877889650
GPR[EPVS]-1659877889650
========
append('D');
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877889652
GPR[SPVAP]-1659877889652
GPR[EPVAP]-1659877890395
GPR[EPVS]-1659877890395
========
append((char)(serialVersionUID>>48));
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877890396
GPR[SPVAP]-1659877890396
GPR[EPVAP]-1659877891130
GPR[EPVS]-1659877891130
========
append((char)(serialVersionUID>>32));
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877891132
GPR[SPVAP]-1659877891132
GPR[EPVAP]-1659877891857
GPR[EPVS]-1659877891857
========
builder.append(" [source name: ");
builder.append(sof.getSourceName());
builder.append("] [encoded source length: ");

========
GPR[SPVS]-1659877891859
GPR[SPVAP]-1659877891859
GPR[EPVAP]-1659877892597
GPR[EPVS]-1659877892597
========
sb.append(" [source name: ");
builder.append(sof.getSourceName());
builder.append("] [encoded source length: ");

========
GPR[SPVS]-1659877892599
GPR[SPVAP]-1659877892599
GPR[EPVAP]-1659877893370
GPR[EPVS]-1659877893370
========
sb.append(" [source name: ");
sb.append(sof.getSourceName());
builder.append("] [encoded source length: ");

========
GPR[SPVS]-1659877893371
GPR[SPVAP]-1659877893371
GPR[EPVAP]-1659877894105
GPR[EPVS]-1659877894105
========
sb.append(" {\n");
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877894106
GPR[SPVAP]-1659877894106
GPR[EPVAP]-1659877895298
GPR[SPVATF]-1659877895298
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877896388
GPR[EPVS]-1659877896388
========
sb.append(" {\n");
builder.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877896389
GPR[SPVAP]-1659877896389
GPR[EPVAP]-1659877897126
GPR[EPVS]-1659877897126
========
sb.append(" {\n");
sb.append(" [source name: ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877897128
GPR[SPVAP]-1659877897128
GPR[EPVAP]-1659877897865
GPR[EPVS]-1659877897865
========
sb.append(" {\n");
builder.append(" [source name: ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877897866
GPR[SPVAP]-1659877897866
GPR[EPVAP]-1659877898607
GPR[EPVS]-1659877898607
========
sb.append("| ");
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877898609
GPR[SPVAP]-1659877898609
GPR[EPVAP]-1659877899783
GPR[SPVATF]-1659877899783
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877900863
GPR[EPVS]-1659877900863
========
builder.append(" [source name: ");
sb.append(sof.getSourceName());
builder.append("] [encoded source length: ");

========
GPR[SPVS]-1659877900865
GPR[SPVAP]-1659877900865
GPR[EPVAP]-1659877901592
GPR[EPVS]-1659877901592
========
sb.append("| ");
builder.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877901594
GPR[SPVAP]-1659877901594
GPR[EPVAP]-1659877902343
GPR[EPVS]-1659877902343
========
sb.append("| ");
sb.append(" [source name: ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877902344
GPR[SPVAP]-1659877902344
GPR[EPVAP]-1659877903090
GPR[EPVS]-1659877903090
========
sb.append("| ");
sb.append(" [source name: ");
sb.append(sof.getSourceName());
builder.append("] [encoded source length: ");

========
GPR[SPVS]-1659877903092
GPR[SPVAP]-1659877903092
GPR[EPVAP]-1659877903825
GPR[EPVS]-1659877903825
========
sb.append("| ");
builder.append(" [source name: ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877903826
GPR[SPVAP]-1659877903826
GPR[EPVAP]-1659877904557
GPR[EPVS]-1659877904557
========
sb.append("| ");
builder.append(" [source name: ");
sb.append(sof.getSourceName());
builder.append("] [encoded source length: ");

========
GPR[SPVS]-1659877904558
GPR[SPVAP]-1659877904558
GPR[EPVAP]-1659877905304
GPR[EPVS]-1659877905304
========
sb.append("| ");
sb.append(" [source name: ");
builder.append(sof.getSourceName());
builder.append("] [encoded source length: ");

========
GPR[SPVS]-1659877905305
GPR[SPVAP]-1659877905305
GPR[EPVAP]-1659877906041
GPR[EPVS]-1659877906041
========
sb.append("| ");
builder.append(" [source name: ");
builder.append(sof.getSourceName());
builder.append("] [encoded source length: ");

========
GPR[SPVS]-1659877906042
GPR[SPVAP]-1659877906042
GPR[EPVAP]-1659877906778
GPR[EPVS]-1659877906778
========
out.append(" [source name: ");
out.append(sof.getSourceName());
out.append("] [encoded source length: ");

========
GPR[SPVS]-1659877906781
GPR[SPVAP]-1659877906781
GPR[EPVAP]-1659877907534
GPR[EPVS]-1659877907534
========
sb.append(" [source name: ");
out.append(sof.getSourceName());
out.append("] [encoded source length: ");

========
GPR[SPVS]-1659877907536
GPR[SPVAP]-1659877907536
GPR[EPVAP]-1659877908271
GPR[EPVS]-1659877908271
========
out.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877908272
GPR[SPVAP]-1659877908272
GPR[EPVAP]-1659877908997
GPR[EPVS]-1659877908997
========
sb.append(" [source name: ");
out.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877908998
GPR[SPVAP]-1659877908998
GPR[EPVAP]-1659877909733
GPR[EPVS]-1659877909733
========
sb.append(" [source name: ");
sb.append(sof.getSourceName());
out.append("] [encoded source length: ");

========
GPR[SPVS]-1659877909734
GPR[SPVAP]-1659877909734
GPR[EPVAP]-1659877910464
GPR[EPVS]-1659877910464
========
traverseNodes(next);
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877910466
GPR[SPVAP]-1659877910466
GPR[EPVAP]-1659877911193
GPR[EPVS]-1659877911193
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877911195
GPR[SPVAP]-1659877911195
GPR[EPVAP]-1659877911935
GPR[EPVS]-1659877911936
========
result.append(" [source name: ");
result.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877911937
GPR[SPVAP]-1659877911937
GPR[EPVAP]-1659877912661
GPR[EPVS]-1659877912661
========
result.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877912663
GPR[SPVAP]-1659877912663
GPR[EPVAP]-1659877913436
GPR[EPVS]-1659877913436
========
sb.append(" [source name: ");
result.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877913453
GPR[SPVAP]-1659877913453
GPR[EPVAP]-1659877914216
GPR[EPVS]-1659877914216
========
initCodeSourceBuilder.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877914218
GPR[SPVAP]-1659877914218
GPR[EPVAP]-1659877914944
GPR[EPVS]-1659877914944
========
debugLog_.append(" [source name: ");
debugLog_.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877914947
GPR[SPVAP]-1659877914947
GPR[EPVAP]-1659877915728
GPR[EPVS]-1659877915728
========
debugLog_.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877915729
GPR[SPVAP]-1659877915729
GPR[EPVAP]-1659877916486
GPR[EPVS]-1659877916486
========
sb.append(" [source name: ");
debugLog_.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877916488
GPR[SPVAP]-1659877916488
GPR[EPVAP]-1659877917226
GPR[EPVS]-1659877917226
========
message.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877917228
GPR[SPVAP]-1659877917228
GPR[EPVAP]-1659877917970
GPR[EPVS]-1659877917970
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877917972
GPR[SPVAP]-1659877917972
GPR[EPVAP]-1659877918704
GPR[EPVS]-1659877918704
========
sb.append(" [source name: ");
sb.append(sof.getSourceName());
start=COLUMN_BITS+1;
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877918707
GPR[SPVAP]-1659877918707
GPR[EPVAP]-1659877919441
GPR[EPVS]-1659877919441
========
paths.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877919443
GPR[SPVAP]-1659877919443
GPR[EPVAP]-1659877920167
GPR[EPVS]-1659877920167
========
COLUMN_BITS++;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877920169
GPR[SPVAP]-1659877920169
GPR[EPVAP]-1659877920891
GPR[EPVS]-1659877920891
========
sb.update(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877920892
GPR[SPVAP]-1659877920892
GPR[EPVAP]-1659877921625
GPR[EPVS]-1659877921625
========
code.append(" [source name: ");
code.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877921626
GPR[SPVAP]-1659877921626
GPR[EPVAP]-1659877922362
GPR[EPVS]-1659877922362
========
code.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877922364
GPR[SPVAP]-1659877922364
GPR[EPVAP]-1659877923094
GPR[EPVS]-1659877923094
========
sb.append(" [source name: ");
code.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877923095
GPR[SPVAP]-1659877923095
GPR[EPVAP]-1659877923826
GPR[EPVS]-1659877923826
========
if(null==sb){
return next.cloneTree();
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877923829
GPR[SPVAP]-1659877923829
GPR[EPVAP]-1659877924569
GPR[EPVS]-1659877924569
========
number-=L;
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877924571
GPR[SPVAP]-1659877924571
GPR[EPVAP]-1659877925310
GPR[EPVS]-1659877925310
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877925312
GPR[SPVAP]-1659877925312
GPR[EPVAP]-1659877926042
GPR[EPVS]-1659877926042
========
maybeEndStatement();
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877926043
GPR[SPVAP]-1659877926043
GPR[EPVAP]-1659877926779
GPR[EPVS]-1659877926779
========
if(str.length()==0){
return ;
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877926781
GPR[SPVAP]-1659877926781
GPR[EPVAP]-1659877927510
GPR[EPVS]-1659877927510
========
case '\r' :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877927512
GPR[SPVAP]-1659877927512
GPR[EPVAP]-1659877928088
GPR[EPVS]-1659877928088
========
appendInferredPaths(str);
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877928090
GPR[SPVAP]-1659877928090
GPR[EPVAP]-1659877928829
GPR[EPVS]-1659877928829
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877928831
GPR[SPVAP]-1659877928831
GPR[EPVAP]-1659877929562
GPR[EPVS]-1659877929562
========
case '\"' :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877929564
GPR[SPVAP]-1659877929564
GPR[EPVAP]-1659877930148
GPR[EPVS]-1659877930148
========
case '>' :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877930149
GPR[SPVAP]-1659877930149
GPR[EPVAP]-1659877930731
GPR[EPVS]-1659877930731
========
appendInferredPaths(getExportedPath());
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877930732
GPR[SPVAP]-1659877930732
GPR[EPVAP]-1659877931456
GPR[EPVS]-1659877931456
========
sb.multiply(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877931458
GPR[SPVAP]-1659877931458
GPR[EPVAP]-1659877932190
GPR[EPVS]-1659877932190
========
sb.append(" [source name: ");
sb.multiply(sof.getSourceName());
sb.multiply("] [encoded source length: ");

========
GPR[SPVS]-1659877932193
GPR[SPVAP]-1659877932193
GPR[EPVAP]-1659877932955
GPR[EPVS]-1659877932955
========
sb.append(" [source name: ");
sb.multiply(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877932956
GPR[SPVAP]-1659877932956
GPR[EPVAP]-1659877933689
GPR[EPVS]-1659877933689
========
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.multiply("] [encoded source length: ");

========
GPR[SPVS]-1659877933690
GPR[SPVAP]-1659877933690
GPR[EPVAP]-1659877934425
GPR[EPVS]-1659877934425
========
sb.append(" [source name: ");
if(COLUMN_BITS==COLUMN_BITS)break;
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877934427
GPR[SPVAP]-1659877934427
GPR[EPVAP]-1659877935155
GPR[EPVS]-1659877935155
========
sb.append(" [source name: ");
sb.append(sof.getSourceName());
this.sb=new StringBuilder();
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877935157
GPR[SPVAP]-1659877935157
GPR[EPVAP]-1659877935905
GPR[EPVS]-1659877935905
========
sb.report(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877935907
GPR[SPVAP]-1659877935907
GPR[EPVAP]-1659877936637
GPR[EPVS]-1659877936637
========
compiler.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877936639
GPR[SPVAP]-1659877936639
GPR[EPVAP]-1659877937372
GPR[EPVS]-1659877937372
========
reads.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877937373
GPR[SPVAP]-1659877937373
GPR[EPVAP]-1659877938104
GPR[EPVS]-1659877938104
========
writes.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877938106
GPR[SPVAP]-1659877938106
GPR[EPVAP]-1659877938843
GPR[EPVS]-1659877938843
========
externMethodsWithoutSignatures.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877938844
GPR[SPVAP]-1659877938844
GPR[EPVAP]-1659877939567
GPR[EPVS]-1659877939567
========
compiler.report(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877939569
GPR[SPVAP]-1659877939569
GPR[EPVAP]-1659877940303
GPR[EPVS]-1659877940303
========
objectNode.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877940305
GPR[SPVAP]-1659877940305
GPR[EPVAP]-1659877941033
GPR[EPVS]-1659877941033
========
sb.addEntry(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877941035
GPR[SPVAP]-1659877941035
GPR[EPVAP]-1659877941771
GPR[EPVS]-1659877941771
========
if(COLUMN_BITS<0){
return ;
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877941773
GPR[SPVAP]-1659877941773
GPR[EPVAP]-1659877943006
GPR[SPVATF]-1659877943006
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877944080
GPR[EPVS]-1659877944080
========
next.removeChild(next.getLastChild());
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877944082
GPR[SPVAP]-1659877944082
GPR[EPVAP]-1659877945259
GPR[SPVATF]-1659877945259
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877946322
GPR[EPVS]-1659877946322
========
parent.replaceChild(next,next.getLastChild());
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877946324
GPR[SPVAP]-1659877946324
GPR[EPVAP]-1659877947502
GPR[SPVATF]-1659877947502
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877948609
GPR[EPVS]-1659877948609
========
next.removeChild(next.getLastChild());
parent.replaceChild(next,next.getLastChild());
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877948611
GPR[SPVAP]-1659877948611
GPR[EPVAP]-1659877949807
GPR[SPVATF]-1659877949807
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877950886
GPR[EPVS]-1659877950886
========
startMarkerStack.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877950888
GPR[SPVAP]-1659877950888
GPR[EPVAP]-1659877951643
GPR[EPVS]-1659877951643
========
for(Node next : next.getAncestors()){
int type=ancestor.getType();
if(type==Token.SCRIPT||type==Token.BLOCK){
next=ancestor;
break;
}
next=ancestor;
}
sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877951644
GPR[SPVAP]-1659877951644
GPR[EPVAP]-1659877952400
GPR[EPVS]-1659877952400
========
case Token.GET :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877952401
GPR[SPVAP]-1659877952401
GPR[EPVAP]-1659877952979
GPR[EPVS]-1659877952979
========
case Token.RC :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877952981
GPR[SPVAP]-1659877952981
GPR[EPVAP]-1659877953555
GPR[EPVS]-1659877953555
========
case FUNCTION_END :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877953557
GPR[SPVAP]-1659877953557
GPR[EPVAP]-1659877954131
GPR[EPVS]-1659877954131
========
case Token.WHILE :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877954133
GPR[SPVAP]-1659877954133
GPR[EPVAP]-1659877954707
GPR[EPVS]-1659877954707
========
default :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877954709
GPR[SPVAP]-1659877954709
GPR[EPVAP]-1659877955299
GPR[EPVS]-1659877955299
========
case Token.FALSE :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877955300
GPR[SPVAP]-1659877955300
GPR[EPVAP]-1659877955886
GPR[EPVS]-1659877955886
========
case Token.THIS :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877955888
GPR[SPVAP]-1659877955888
GPR[EPVAP]-1659877956457
GPR[EPVS]-1659877956457
========
case Token.RB :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877956459
GPR[SPVAP]-1659877956459
GPR[EPVAP]-1659877957036
GPR[EPVS]-1659877957036
========
case Token.NEW :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877957039
GPR[SPVAP]-1659877957039
GPR[EPVAP]-1659877957611
GPR[EPVS]-1659877957611
========
case Token.IF :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877957613
GPR[SPVAP]-1659877957613
GPR[EPVAP]-1659877958187
GPR[EPVS]-1659877958187
========
case Token.FOR :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877958188
GPR[SPVAP]-1659877958188
GPR[EPVAP]-1659877958774
GPR[EPVS]-1659877958774
========
case Token.WITH :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877958777
GPR[SPVAP]-1659877958777
GPR[EPVAP]-1659877959366
GPR[EPVS]-1659877959366
========
case Token.DO :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877959368
GPR[SPVAP]-1659877959368
GPR[EPVAP]-1659877959942
GPR[EPVS]-1659877959942
========
case Token.CATCH :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877959944
GPR[SPVAP]-1659877959944
GPR[EPVAP]-1659877960518
GPR[EPVS]-1659877960518
========
case Token.THROW :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877960521
GPR[SPVAP]-1659877960521
GPR[EPVAP]-1659877961100
GPR[EPVS]-1659877961100
========
case Token.DEFAULT :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877961102
GPR[SPVAP]-1659877961102
GPR[EPVAP]-1659877961680
GPR[EPVS]-1659877961680
========
case Token.ASSIGN_ADD :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877961682
GPR[SPVAP]-1659877961682
GPR[EPVAP]-1659877962255
GPR[EPVS]-1659877962255
========
case Token.ASSIGN_MUL :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877962256
GPR[SPVAP]-1659877962256
GPR[EPVAP]-1659877962833
GPR[EPVS]-1659877962833
========
case Token.ASSIGN_MOD :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877962835
GPR[SPVAP]-1659877962835
GPR[EPVAP]-1659877963410
GPR[EPVS]-1659877963410
========
case Token.ASSIGN_BITXOR :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877963412
GPR[SPVAP]-1659877963412
GPR[EPVAP]-1659877963999
GPR[EPVS]-1659877963999
========
case Token.ASSIGN_LSH :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877964001
GPR[SPVAP]-1659877964001
GPR[EPVAP]-1659877964579
GPR[EPVS]-1659877964579
========
case Token.ASSIGN_URSH :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877964580
GPR[SPVAP]-1659877964580
GPR[EPVAP]-1659877965158
GPR[EPVS]-1659877965158
========
case Token.OBJECTLIT :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877965159
GPR[SPVAP]-1659877965159
GPR[EPVAP]-1659877965734
GPR[EPVS]-1659877965734
========
case Token.AND :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877965736
GPR[SPVAP]-1659877965736
GPR[EPVAP]-1659877966323
GPR[EPVS]-1659877966323
========
case Token.BITXOR :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877966325
GPR[SPVAP]-1659877966325
GPR[EPVAP]-1659877966923
GPR[EPVS]-1659877966923
========
case Token.SHEQ :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877966924
GPR[SPVAP]-1659877966924
GPR[EPVAP]-1659877967515
GPR[EPVS]-1659877967515
========
case Token.EQ :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877967516
GPR[SPVAP]-1659877967516
GPR[EPVAP]-1659877968107
GPR[EPVS]-1659877968107
========
case Token.LE :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877968110
GPR[SPVAP]-1659877968110
GPR[EPVAP]-1659877968686
GPR[EPVS]-1659877968686
========
case Token.GE :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877968688
GPR[SPVAP]-1659877968688
GPR[EPVAP]-1659877969275
GPR[EPVS]-1659877969275
========
case Token.INSTANCEOF :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877969276
GPR[SPVAP]-1659877969276
GPR[EPVAP]-1659877969863
GPR[EPVS]-1659877969863
========
case Token.RSH :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877969864
GPR[SPVAP]-1659877969864
GPR[EPVAP]-1659877970451
GPR[EPVS]-1659877970451
========
case Token.TYPEOF :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877970453
GPR[SPVAP]-1659877970453
GPR[EPVAP]-1659877971041
GPR[EPVS]-1659877971041
========
case Token.CONST :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877971042
GPR[SPVAP]-1659877971042
GPR[EPVAP]-1659877971612
GPR[EPVS]-1659877971612
========
case Token.BITNOT :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877971614
GPR[SPVAP]-1659877971614
GPR[EPVAP]-1659877972196
GPR[EPVS]-1659877972196
========
case Token.NEG :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877972197
GPR[SPVAP]-1659877972197
GPR[EPVAP]-1659877972768
GPR[EPVS]-1659877972768
========
case Token.DEC :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877972770
GPR[SPVAP]-1659877972770
GPR[EPVAP]-1659877973352
GPR[EPVS]-1659877973352
========
case Token.SUB :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877973353
GPR[SPVAP]-1659877973353
GPR[EPVAP]-1659877973939
GPR[EPVS]-1659877973939
========
case Token.DIV :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877973941
GPR[SPVAP]-1659877973941
GPR[EPVAP]-1659877974524
GPR[EPVS]-1659877974524
========
case Token.COLONCOLON :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877974526
GPR[SPVAP]-1659877974526
GPR[EPVAP]-1659877975102
GPR[EPVS]-1659877975102
========
case Token.DOTQUERY :

sb.append(" [source name: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");

========
GPR[SPVS]-1659877975104
GPR[SPVAP]-1659877975104
GPR[EPVAP]-1659877975695
GPR[EPVS]-1659877975695
GPR[ESUN]-1659877975695
GPR[SSUN]-1659877975695
com.google.javascript.rhino.Node,904
GPR[ESUN]-1659877975987
GPR[SSUN]-1659877975987
com.google.javascript.rhino.Node,905
========
sb.append("] [base line: ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877977286
GPR[SPVAP]-1659877977286
GPR[EPVAP]-1659877980856
GPR[SPVATF]-1659877980856
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877981945
GPR[EPVS]-1659877981945
========
sb.append(sof.getBaseLineno());
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877981947
GPR[SPVAP]-1659877981947
GPR[EPVAP]-1659877983115
GPR[SPVATF]-1659877983115
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877984234
GPR[EPVS]-1659877984234
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877984235
GPR[SPVAP]-1659877984235
GPR[EPVAP]-1659877985403
GPR[SPVATF]-1659877985403
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877986499
GPR[EPVS]-1659877986499
========
coalescedLog.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877986501
GPR[SPVAP]-1659877986501
GPR[EPVAP]-1659877987227
GPR[EPVS]-1659877987227
========
builder.append(sof.getSourceName());
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877987229
GPR[SPVAP]-1659877987229
GPR[EPVAP]-1659877987965
GPR[EPVS]-1659877987965
========
sb.append(sof.getSourceName());
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877987967
GPR[SPVAP]-1659877987967
GPR[EPVAP]-1659877988690
GPR[EPVS]-1659877988690
========
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877988691
GPR[SPVAP]-1659877988691
GPR[EPVAP]-1659877989417
GPR[EPVS]-1659877989417
========
sb.append(sof.getSourceName());
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877989418
GPR[SPVAP]-1659877989418
GPR[EPVAP]-1659877990163
GPR[EPVS]-1659877990163
========
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877990164
GPR[SPVAP]-1659877990164
GPR[EPVAP]-1659877990913
GPR[EPVS]-1659877990913
========
sb.append(INDENT);
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877990915
GPR[SPVAP]-1659877990915
GPR[EPVAP]-1659877991660
GPR[EPVS]-1659877991660
========
sb.append("node [color=lightblue2, style=filled];\n");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877991662
GPR[SPVAP]-1659877991662
GPR[EPVAP]-1659877992843
GPR[SPVATF]-1659877992843
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659877993929
GPR[EPVS]-1659877993929
========
builder.append(sof.getSourceName());
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877993931
GPR[SPVAP]-1659877993931
GPR[EPVAP]-1659877994672
GPR[EPVS]-1659877994672
========
b.append(sof.getSourceName());
b.append("] [encoded source length: ");
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877994674
GPR[SPVAP]-1659877994674
GPR[EPVAP]-1659877995405
GPR[EPVS]-1659877995405
========
sb.append(sof.getSourceName());
b.append("] [encoded source length: ");
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877995406
GPR[SPVAP]-1659877995406
GPR[EPVAP]-1659877996133
GPR[EPVS]-1659877996133
========
b.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877996134
GPR[SPVAP]-1659877996134
GPR[EPVAP]-1659877996857
GPR[EPVS]-1659877996857
========
sb.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877996858
GPR[SPVAP]-1659877996858
GPR[EPVAP]-1659877997583
GPR[EPVS]-1659877997583
========
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877997585
GPR[SPVAP]-1659877997585
GPR[EPVAP]-1659877998323
GPR[EPVS]-1659877998323
========
sb.append('\n');
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659877998324
GPR[SPVAP]-1659877998324
GPR[EPVAP]-1659877999505
GPR[SPVATF]-1659877999505
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878000592
GPR[EPVS]-1659878000592
========
sb.append(sof.getSourceName());
assignmentLog.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878000593
GPR[SPVAP]-1659878000593
GPR[EPVAP]-1659878001330
GPR[EPVS]-1659878001330
========
sb.append(sof.getSourceName());
sb.info("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878001332
GPR[SPVAP]-1659878001332
GPR[EPVAP]-1659878002061
GPR[EPVS]-1659878002061
========
sb.add(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878002063
GPR[SPVAP]-1659878002063
GPR[EPVAP]-1659878002793
GPR[EPVS]-1659878002793
========
debug.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878002794
GPR[SPVAP]-1659878002794
GPR[EPVAP]-1659878003531
GPR[EPVS]-1659878003531
========
traverseNodes(next);
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878003532
GPR[SPVAP]-1659878003532
GPR[EPVAP]-1659878004263
GPR[EPVS]-1659878004263
========
b.append(sof.getSourceName());
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878004265
GPR[SPVAP]-1659878004265
GPR[EPVAP]-1659878004992
GPR[EPVS]-1659878004992
========
sb.append("| ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878004994
GPR[SPVAP]-1659878004994
GPR[EPVAP]-1659878006173
GPR[SPVATF]-1659878006173
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878007247
GPR[EPVS]-1659878007247
========
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878007248
GPR[SPVAP]-1659878007248
GPR[EPVAP]-1659878007975
GPR[EPVS]-1659878007975
========
sb.append("| ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878007977
GPR[SPVAP]-1659878007977
GPR[EPVAP]-1659878008713
GPR[EPVS]-1659878008713
========
sb.append("| ");
sb.append(sof.getSourceName());
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878008715
GPR[SPVAP]-1659878008715
GPR[EPVAP]-1659878009480
GPR[EPVS]-1659878009481
========
sb.append("| ");
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878009483
GPR[SPVAP]-1659878009483
GPR[EPVAP]-1659878010222
GPR[EPVS]-1659878010222
========
sb.append("| ");
builder.append(sof.getSourceName());
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878010223
GPR[SPVAP]-1659878010223
GPR[EPVAP]-1659878010968
GPR[EPVS]-1659878010968
========
sb.append("| ");
builder.append(sof.getSourceName());
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878010970
GPR[SPVAP]-1659878010970
GPR[EPVAP]-1659878011717
GPR[EPVS]-1659878011717
========
sb.append("| ");
sb.append(sof.getSourceName());
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878011719
GPR[SPVAP]-1659878011719
GPR[EPVAP]-1659878012456
GPR[EPVS]-1659878012456
========
sb.append("| ");
builder.append(sof.getSourceName());
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878012457
GPR[SPVAP]-1659878012457
GPR[EPVAP]-1659878013195
GPR[EPVS]-1659878013196
========
append('D');
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878013198
GPR[SPVAP]-1659878013198
GPR[EPVAP]-1659878013921
GPR[EPVS]-1659878013921
========
append((char)(serialVersionUID>>48));
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878013923
GPR[SPVAP]-1659878013923
GPR[EPVAP]-1659878014670
GPR[EPVS]-1659878014670
========
append((char)(serialVersionUID>>32));
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878014672
GPR[SPVAP]-1659878014672
GPR[EPVAP]-1659878015399
GPR[EPVS]-1659878015399
========
out.append(sof.getSourceName());
out.append("] [encoded source length: ");
out.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878015401
GPR[SPVAP]-1659878015401
GPR[EPVAP]-1659878016135
GPR[EPVS]-1659878016135
========
sb.append(sof.getSourceName());
out.append("] [encoded source length: ");
out.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878016136
GPR[SPVAP]-1659878016136
GPR[EPVAP]-1659878016873
GPR[EPVS]-1659878016873
========
out.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878016875
GPR[SPVAP]-1659878016875
GPR[EPVAP]-1659878017610
GPR[EPVS]-1659878017610
========
sb.append(sof.getSourceName());
out.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878017612
GPR[SPVAP]-1659878017612
GPR[EPVAP]-1659878018351
GPR[EPVS]-1659878018351
========
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
out.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878018352
GPR[SPVAP]-1659878018352
GPR[EPVAP]-1659878019087
GPR[EPVS]-1659878019087
========
result.append(sof.getSourceName());
result.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878019089
GPR[SPVAP]-1659878019089
GPR[EPVAP]-1659878019823
GPR[EPVS]-1659878019823
========
result.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878019824
GPR[SPVAP]-1659878019824
GPR[EPVAP]-1659878020591
GPR[EPVS]-1659878020591
========
sb.append(sof.getSourceName());
result.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878020592
GPR[SPVAP]-1659878020592
GPR[EPVAP]-1659878021324
GPR[EPVS]-1659878021324
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878021326
GPR[SPVAP]-1659878021326
GPR[EPVAP]-1659878022088
GPR[EPVS]-1659878022088
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878022090
GPR[SPVAP]-1659878022090
GPR[EPVAP]-1659878022839
GPR[EPVS]-1659878022839
========
debugLog_.append(sof.getSourceName());
debugLog_.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878022841
GPR[SPVAP]-1659878022841
GPR[EPVAP]-1659878023581
GPR[EPVS]-1659878023581
========
debugLog_.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878023582
GPR[SPVAP]-1659878023582
GPR[EPVAP]-1659878024796
GPR[EPVS]-1659878024796
========
sb.append(sof.getSourceName());
debugLog_.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878024799
GPR[SPVAP]-1659878024799
GPR[EPVAP]-1659878025593
GPR[EPVS]-1659878025593
========
initCodeSourceBuilder.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878025594
GPR[SPVAP]-1659878025594
GPR[EPVAP]-1659878026339
GPR[EPVS]-1659878026339
========
paths.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878026341
GPR[SPVAP]-1659878026341
GPR[EPVAP]-1659878027113
GPR[EPVS]-1659878027113
========
sb.checkState(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878027115
GPR[SPVAP]-1659878027115
GPR[EPVAP]-1659878027883
GPR[EPVS]-1659878027883
========
sb.update(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878027885
GPR[SPVAP]-1659878027885
GPR[EPVAP]-1659878028674
GPR[EPVS]-1659878028674
========
message.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878028675
GPR[SPVAP]-1659878028675
GPR[EPVAP]-1659878029407
GPR[EPVS]-1659878029407
========
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
start=COLUMN_BITS+1;
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878029409
GPR[SPVAP]-1659878029409
GPR[EPVAP]-1659878030141
GPR[EPVS]-1659878030141
========
COLUMN_BITS++;
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878030143
GPR[SPVAP]-1659878030143
GPR[EPVAP]-1659878030891
GPR[EPVS]-1659878030891
========
code.append(sof.getSourceName());
code.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878030893
GPR[SPVAP]-1659878030893
GPR[EPVAP]-1659878031646
GPR[EPVS]-1659878031646
========
code.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878031647
GPR[SPVAP]-1659878031647
GPR[EPVAP]-1659878032389
GPR[EPVS]-1659878032389
========
sb.append(sof.getSourceName());
code.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878032391
GPR[SPVAP]-1659878032391
GPR[EPVAP]-1659878033130
GPR[EPVS]-1659878033130
========
if(null==sb){
return next.cloneTree();
}
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878033132
GPR[SPVAP]-1659878033132
GPR[EPVAP]-1659878033855
GPR[EPVS]-1659878033855
========
maybeEndStatement();
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878033857
GPR[SPVAP]-1659878033857
GPR[EPVAP]-1659878034576
GPR[EPVS]-1659878034576
========
if(str.length()==0){
return ;
}
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878034577
GPR[SPVAP]-1659878034577
GPR[EPVAP]-1659878035331
GPR[EPVS]-1659878035331
========
number-=L;
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878035333
GPR[SPVAP]-1659878035333
GPR[EPVAP]-1659878036079
GPR[EPVS]-1659878036079
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878036081
GPR[SPVAP]-1659878036081
GPR[EPVAP]-1659878036811
GPR[EPVS]-1659878036811
========
appendInferredPaths(str);
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878036813
GPR[SPVAP]-1659878036813
GPR[EPVAP]-1659878037548
GPR[EPVS]-1659878037548
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878037550
GPR[SPVAP]-1659878037550
GPR[EPVAP]-1659878038283
GPR[EPVS]-1659878038283
========
str=trimEnd(line);
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878038285
GPR[SPVAP]-1659878038285
GPR[EPVAP]-1659878039030
GPR[EPVS]-1659878039030
========
appendInferredPaths(getExportedPath());
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878039031
GPR[SPVAP]-1659878039031
GPR[EPVAP]-1659878039759
GPR[EPVS]-1659878039759
========
sb.multiply(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878039761
GPR[SPVAP]-1659878039761
GPR[EPVAP]-1659878040495
GPR[EPVS]-1659878040495
========
case '\"' :

sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878040497
GPR[SPVAP]-1659878040497
GPR[EPVAP]-1659878041068
GPR[EPVS]-1659878041068
========
case '>' :

sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878041069
GPR[SPVAP]-1659878041069
GPR[EPVAP]-1659878041651
GPR[EPVS]-1659878041651
========
sb.append(sof.getSourceName());
sb.multiply("] [encoded source length: ");
sb.multiply(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878041653
GPR[SPVAP]-1659878041653
GPR[EPVAP]-1659878042384
GPR[EPVS]-1659878042384
========
sb.append(sof.getSourceName());
sb.multiply("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878042385
GPR[SPVAP]-1659878042385
GPR[EPVAP]-1659878043130
GPR[EPVS]-1659878043130
========
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.multiply(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878043131
GPR[SPVAP]-1659878043131
GPR[EPVAP]-1659878043877
GPR[EPVS]-1659878043877
========
sb.append(sof.getSourceName());
if(COLUMN_BITS==COLUMN_BITS)break;
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878043879
GPR[SPVAP]-1659878043879
GPR[EPVAP]-1659878044607
GPR[EPVS]-1659878044607
========
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
this.sb=new StringBuilder();
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878044609
GPR[SPVAP]-1659878044609
GPR[EPVAP]-1659878045334
GPR[EPVS]-1659878045334
========
sb.report(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878045336
GPR[SPVAP]-1659878045336
GPR[EPVAP]-1659878046074
GPR[EPVS]-1659878046074
========
externMethodsWithoutSignatures.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878046075
GPR[SPVAP]-1659878046075
GPR[EPVAP]-1659878046803
GPR[EPVS]-1659878046803
========
reads.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878046805
GPR[SPVAP]-1659878046805
GPR[EPVAP]-1659878047542
GPR[EPVS]-1659878047542
========
writes.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878047544
GPR[SPVAP]-1659878047544
GPR[EPVAP]-1659878048268
GPR[EPVS]-1659878048268
========
compiler.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878048269
GPR[SPVAP]-1659878048269
GPR[EPVAP]-1659878048997
GPR[EPVS]-1659878048997
========
compiler.report(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878049000
GPR[SPVAP]-1659878049000
GPR[EPVAP]-1659878049754
GPR[EPVS]-1659878049754
========
objectNode.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878049756
GPR[SPVAP]-1659878049756
GPR[EPVAP]-1659878050488
GPR[EPVS]-1659878050488
========
sb.addEntry(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878050490
GPR[SPVAP]-1659878050490
GPR[EPVAP]-1659878051227
GPR[EPVS]-1659878051227
========
if(COLUMN_BITS<0){
return ;
}
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878051229
GPR[SPVAP]-1659878051229
GPR[EPVAP]-1659878052419
GPR[SPVATF]-1659878052419
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878053513
GPR[EPVS]-1659878053513
========
next.removeChild(next.getLastChild());
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878053515
GPR[SPVAP]-1659878053515
GPR[EPVAP]-1659878054694
GPR[SPVATF]-1659878054694
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878055787
GPR[EPVS]-1659878055787
========
parent.replaceChild(next,next.getLastChild());
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878055788
GPR[SPVAP]-1659878055788
GPR[EPVAP]-1659878056977
GPR[SPVATF]-1659878056977
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878058057
GPR[EPVS]-1659878058057
========
next.removeChild(next.getLastChild());
parent.replaceChild(next,next.getLastChild());
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878058058
GPR[SPVAP]-1659878058058
GPR[EPVAP]-1659878059241
GPR[SPVATF]-1659878059241
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878060318
GPR[EPVS]-1659878060318
========
startMarkerStack.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878060320
GPR[SPVAP]-1659878060320
GPR[EPVAP]-1659878061047
GPR[EPVS]-1659878061047
========
for(Node next : next.getAncestors()){
int type=ancestor.getType();
if(type==Token.SCRIPT||type==Token.BLOCK){
next=ancestor;
break;
}
next=ancestor;
}
sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878061048
GPR[SPVAP]-1659878061048
GPR[EPVAP]-1659878061779
GPR[EPVS]-1659878061779
========
case Token.RC :

sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878061781
GPR[SPVAP]-1659878061781
GPR[EPVAP]-1659878062353
GPR[EPVS]-1659878062353
========
case Token.GET :

sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878062355
GPR[SPVAP]-1659878062355
GPR[EPVAP]-1659878062932
GPR[EPVS]-1659878062932
========
case FUNCTION_END :

sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878062933
GPR[SPVAP]-1659878062933
GPR[EPVAP]-1659878063512
GPR[EPVS]-1659878063512
========
case Token.WHILE :

sb.append(sof.getSourceName());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());

========
GPR[SPVS]-1659878063514
GPR[SPVAP]-1659878063514
GPR[EPVAP]-1659878064091
GPR[EPVS]-1659878064091
GPR[ESUN]-1659878064091
GPR[SSUN]-1659878064091
com.google.javascript.rhino.Node,906
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878065519
GPR[SPVAP]-1659878065519
GPR[EPVAP]-1659878069113
GPR[SPVATF]-1659878069113
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878070219
GPR[EPVS]-1659878070219
========
sb.append("] [base line: ");
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878070220
GPR[SPVAP]-1659878070220
GPR[EPVAP]-1659878071407
GPR[SPVATF]-1659878071407
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878072477
GPR[EPVS]-1659878072477
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878072479
GPR[SPVAP]-1659878072479
GPR[EPVAP]-1659878073689
GPR[SPVATF]-1659878073689
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878074768
GPR[EPVS]-1659878074768
========
sb.append(']');
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878074770
GPR[SPVAP]-1659878074770
GPR[EPVAP]-1659878075961
GPR[SPVATF]-1659878075961
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878077067
GPR[EPVS]-1659878077067
========
coalescedLog.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878077068
GPR[SPVAP]-1659878077068
GPR[EPVAP]-1659878077802
GPR[EPVS]-1659878077802
========
b.append("] [encoded source length: ");
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
b.append("] [base line: ");

========
GPR[SPVS]-1659878077804
GPR[SPVAP]-1659878077804
GPR[EPVAP]-1659878078543
GPR[EPVS]-1659878078543
========
sb.append("] [encoded source length: ");
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
b.append("] [base line: ");

========
GPR[SPVS]-1659878078545
GPR[SPVAP]-1659878078545
GPR[EPVAP]-1659878079290
GPR[EPVS]-1659878079290
========
b.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878079292
GPR[SPVAP]-1659878079292
GPR[EPVAP]-1659878080029
GPR[EPVS]-1659878080029
========
sb.append("] [encoded source length: ");
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878080031
GPR[SPVAP]-1659878080031
GPR[EPVAP]-1659878080775
GPR[EPVS]-1659878080775
========
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
b.append("] [base line: ");

========
GPR[SPVS]-1659878080777
GPR[SPVAP]-1659878080777
GPR[EPVAP]-1659878081505
GPR[EPVS]-1659878081505
========
sb.append('\n');
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878081506
GPR[SPVAP]-1659878081506
GPR[EPVAP]-1659878082687
GPR[SPVATF]-1659878082687
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878083775
GPR[EPVS]-1659878083775
========
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878083777
GPR[SPVAP]-1659878083777
GPR[EPVAP]-1659878084505
GPR[EPVS]-1659878084505
========
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878084507
GPR[SPVAP]-1659878084507
GPR[EPVAP]-1659878085233
GPR[EPVS]-1659878085233
========
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878085235
GPR[SPVAP]-1659878085235
GPR[EPVAP]-1659878085991
GPR[EPVS]-1659878085991
========
sb.append("] [encoded source length: ");
assignmentLog.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878085993
GPR[SPVAP]-1659878085993
GPR[EPVAP]-1659878086719
GPR[EPVS]-1659878086719
========
b.append("] [encoded source length: ");
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878086721
GPR[SPVAP]-1659878086721
GPR[EPVAP]-1659878087450
GPR[EPVS]-1659878087450
========
sb.append("] [encoded source length: ");
sb.info(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878087452
GPR[SPVAP]-1659878087452
GPR[EPVAP]-1659878088188
GPR[EPVS]-1659878088188
========
sb.add("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878088190
GPR[SPVAP]-1659878088190
GPR[EPVAP]-1659878088918
GPR[EPVS]-1659878088918
========
debug.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878088919
GPR[SPVAP]-1659878088919
GPR[EPVAP]-1659878089656
GPR[EPVS]-1659878089656
========
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");

========
GPR[SPVS]-1659878089659
GPR[SPVAP]-1659878089659
GPR[EPVAP]-1659878090402
GPR[EPVS]-1659878090402
========
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");

========
GPR[SPVS]-1659878090404
GPR[SPVAP]-1659878090404
GPR[EPVAP]-1659878091143
GPR[EPVS]-1659878091143
========
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");

========
GPR[SPVS]-1659878091145
GPR[SPVAP]-1659878091145
GPR[EPVAP]-1659878091879
GPR[EPVS]-1659878091879
========
sb.append(" {\n");
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878091881
GPR[SPVAP]-1659878091881
GPR[EPVAP]-1659878093050
GPR[SPVATF]-1659878093050
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878094112
GPR[EPVS]-1659878094112
========
sb.append(" {\n");
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878094114
GPR[SPVAP]-1659878094114
GPR[EPVAP]-1659878094840
GPR[EPVS]-1659878094840
========
sb.append(" {\n");
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878094841
GPR[SPVAP]-1659878094841
GPR[EPVAP]-1659878095571
GPR[EPVS]-1659878095571
========
sb.append(" {\n");
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878095572
GPR[SPVAP]-1659878095572
GPR[EPVAP]-1659878096309
GPR[EPVS]-1659878096309
========
sb.append("| ");
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878096311
GPR[SPVAP]-1659878096311
GPR[EPVAP]-1659878097495
GPR[SPVATF]-1659878097496
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878098598
GPR[EPVS]-1659878098598
========
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");

========
GPR[SPVS]-1659878098601
GPR[SPVAP]-1659878098601
GPR[EPVAP]-1659878099361
GPR[EPVS]-1659878099361
========
sb.append("| ");
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878099363
GPR[SPVAP]-1659878099363
GPR[EPVAP]-1659878100080
GPR[EPVS]-1659878100080
========
sb.append("| ");
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878100082
GPR[SPVAP]-1659878100082
GPR[EPVAP]-1659878100819
GPR[EPVS]-1659878100819
========
sb.append("| ");
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");

========
GPR[SPVS]-1659878100820
GPR[SPVAP]-1659878100820
GPR[EPVAP]-1659878101559
GPR[EPVS]-1659878101559
========
sb.append("| ");
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878101561
GPR[SPVAP]-1659878101561
GPR[EPVAP]-1659878102331
GPR[EPVS]-1659878102331
========
sb.append("| ");
builder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");

========
GPR[SPVS]-1659878102333
GPR[SPVAP]-1659878102333
GPR[EPVAP]-1659878103074
GPR[EPVS]-1659878103074
========
sb.append("| ");
sb.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");

========
GPR[SPVS]-1659878103075
GPR[SPVAP]-1659878103075
GPR[EPVAP]-1659878103809
GPR[EPVS]-1659878103809
========
sb.append("| ");
builder.append("] [encoded source length: ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");

========
GPR[SPVS]-1659878103810
GPR[SPVAP]-1659878103810
GPR[EPVAP]-1659878104542
GPR[EPVS]-1659878104542
========
append('D');
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878104544
GPR[SPVAP]-1659878104544
GPR[EPVAP]-1659878105269
GPR[EPVS]-1659878105269
========
append((char)(serialVersionUID>>48));
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878105271
GPR[SPVAP]-1659878105271
GPR[EPVAP]-1659878106027
GPR[EPVS]-1659878106027
========
append((char)(serialVersionUID>>32));
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878106028
GPR[SPVAP]-1659878106028
GPR[EPVAP]-1659878106766
GPR[EPVS]-1659878106766
========
out.append("] [encoded source length: ");
out.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
out.append("] [base line: ");

========
GPR[SPVS]-1659878106768
GPR[SPVAP]-1659878106768
GPR[EPVAP]-1659878107503
GPR[EPVS]-1659878107503
========
sb.append("] [encoded source length: ");
out.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
out.append("] [base line: ");

========
GPR[SPVS]-1659878107504
GPR[SPVAP]-1659878107504
GPR[EPVAP]-1659878108237
GPR[EPVS]-1659878108237
========
out.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878108238
GPR[SPVAP]-1659878108238
GPR[EPVAP]-1659878108972
GPR[EPVS]-1659878108972
========
sb.append("] [encoded source length: ");
out.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878108973
GPR[SPVAP]-1659878108973
GPR[EPVAP]-1659878109707
GPR[EPVS]-1659878109707
========
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
out.append("] [base line: ");

========
GPR[SPVS]-1659878109708
GPR[SPVAP]-1659878109708
GPR[EPVAP]-1659878110437
GPR[EPVS]-1659878110437
========
traverseNodes(next);
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878110439
GPR[SPVAP]-1659878110439
GPR[EPVAP]-1659878111190
GPR[EPVS]-1659878111190
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878111192
GPR[SPVAP]-1659878111192
GPR[EPVAP]-1659878111931
GPR[EPVS]-1659878111931
========
result.append("] [encoded source length: ");
result.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878111933
GPR[SPVAP]-1659878111933
GPR[EPVAP]-1659878112695
GPR[EPVS]-1659878112695
========
result.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878112697
GPR[SPVAP]-1659878112697
GPR[EPVAP]-1659878113457
GPR[EPVS]-1659878113457
========
sb.append("] [encoded source length: ");
result.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878113458
GPR[SPVAP]-1659878113458
GPR[EPVAP]-1659878114189
GPR[EPVS]-1659878114189
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878114192
GPR[SPVAP]-1659878114192
GPR[EPVAP]-1659878114918
GPR[EPVS]-1659878114918
========
initCodeSourceBuilder.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878114919
GPR[SPVAP]-1659878114919
GPR[EPVAP]-1659878115661
GPR[EPVS]-1659878115661
========
debugLog_.append("] [encoded source length: ");
debugLog_.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878115662
GPR[SPVAP]-1659878115662
GPR[EPVAP]-1659878116396
GPR[EPVS]-1659878116396
========
debugLog_.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878116397
GPR[SPVAP]-1659878116397
GPR[EPVAP]-1659878117151
GPR[EPVS]-1659878117151
========
sb.append("] [encoded source length: ");
debugLog_.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878117152
GPR[SPVAP]-1659878117152
GPR[EPVAP]-1659878117891
GPR[EPVS]-1659878117891
========
paths.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878117893
GPR[SPVAP]-1659878117893
GPR[EPVAP]-1659878118621
GPR[EPVS]-1659878118621
========
message.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878118623
GPR[SPVAP]-1659878118623
GPR[EPVAP]-1659878119355
GPR[EPVS]-1659878119355
========
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
start=COLUMN_BITS+1;
sb.append("] [base line: ");

========
GPR[SPVS]-1659878119358
GPR[SPVAP]-1659878119358
GPR[EPVAP]-1659878120087
GPR[EPVS]-1659878120087
========
sb.update("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878120089
GPR[SPVAP]-1659878120089
GPR[EPVAP]-1659878120818
GPR[EPVS]-1659878120818
========
COLUMN_BITS++;
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878120819
GPR[SPVAP]-1659878120819
GPR[EPVAP]-1659878121550
GPR[EPVS]-1659878121550
========
code.append("] [encoded source length: ");
code.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878121552
GPR[SPVAP]-1659878121552
GPR[EPVAP]-1659878122282
GPR[EPVS]-1659878122283
========
code.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878122284
GPR[SPVAP]-1659878122284
GPR[EPVAP]-1659878123025
GPR[EPVS]-1659878123025
========
sb.append("] [encoded source length: ");
code.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878123027
GPR[SPVAP]-1659878123027
GPR[EPVAP]-1659878123785
GPR[EPVS]-1659878123785
========
if(null==sb){
return next.cloneTree();
}
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878123788
GPR[SPVAP]-1659878123788
GPR[EPVAP]-1659878124514
GPR[EPVS]-1659878124514
========
maybeEndStatement();
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878124516
GPR[SPVAP]-1659878124516
GPR[EPVAP]-1659878125271
GPR[EPVS]-1659878125271
========
if(str.length()==0){
return ;
}
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878125272
GPR[SPVAP]-1659878125272
GPR[EPVAP]-1659878126031
GPR[EPVS]-1659878126031
========
number-=L;
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878126033
GPR[SPVAP]-1659878126033
GPR[EPVAP]-1659878126759
GPR[EPVS]-1659878126759
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878126762
GPR[SPVAP]-1659878126762
GPR[EPVAP]-1659878127505
GPR[EPVS]-1659878127505
========
appendInferredPaths(str);
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878127507
GPR[SPVAP]-1659878127507
GPR[EPVAP]-1659878128237
GPR[EPVS]-1659878128237
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878128239
GPR[SPVAP]-1659878128239
GPR[EPVAP]-1659878128966
GPR[EPVS]-1659878128966
========
appendInferredPaths(getExportedPath());
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878128968
GPR[SPVAP]-1659878128968
GPR[EPVAP]-1659878129707
GPR[EPVS]-1659878129707
========
case '\"' :

sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878129709
GPR[SPVAP]-1659878129709
GPR[EPVAP]-1659878130287
GPR[EPVS]-1659878130287
========
case '>' :

sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878130289
GPR[SPVAP]-1659878130289
GPR[EPVAP]-1659878130861
GPR[EPVS]-1659878130861
========
sb.multiply("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878130863
GPR[SPVAP]-1659878130863
GPR[EPVAP]-1659878131591
GPR[EPVS]-1659878131591
========
sb.append("] [encoded source length: ");
sb.multiply(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.multiply("] [base line: ");

========
GPR[SPVS]-1659878131594
GPR[SPVAP]-1659878131594
GPR[EPVAP]-1659878132338
GPR[EPVS]-1659878132338
========
sb.append("] [encoded source length: ");
sb.multiply(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878132340
GPR[SPVAP]-1659878132340
GPR[EPVAP]-1659878133071
GPR[EPVS]-1659878133071
========
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.multiply("] [base line: ");

========
GPR[SPVS]-1659878133072
GPR[SPVAP]-1659878133072
GPR[EPVAP]-1659878133810
GPR[EPVS]-1659878133810
========
sb.append("] [encoded source length: ");
if(COLUMN_BITS==COLUMN_BITS)break;
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878133811
GPR[SPVAP]-1659878133811
GPR[EPVAP]-1659878134543
GPR[EPVS]-1659878134543
========
sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
this.sb=new StringBuilder();
sb.append("] [base line: ");

========
GPR[SPVS]-1659878134545
GPR[SPVAP]-1659878134545
GPR[EPVAP]-1659878135318
GPR[EPVS]-1659878135318
========
case Token.GET :

sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878135320
GPR[SPVAP]-1659878135320
GPR[EPVAP]-1659878135898
GPR[EPVS]-1659878135898
========
case Token.RC :

sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878135900
GPR[SPVAP]-1659878135900
GPR[EPVAP]-1659878136489
GPR[EPVS]-1659878136489
========
case FUNCTION_END :

sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878136490
GPR[SPVAP]-1659878136490
GPR[EPVAP]-1659878137086
GPR[EPVS]-1659878137086
========
case Token.WHILE :

sb.append("] [encoded source length: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");

========
GPR[SPVS]-1659878137088
GPR[SPVAP]-1659878137088
GPR[EPVAP]-1659878137681
GPR[EPVS]-1659878137681
GPR[ESUN]-1659878137681
GPR[SSUN]-1659878137681
com.google.javascript.rhino.Node,908
========
sb.append("] [base line: ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878139184
GPR[SPVAP]-1659878139184
GPR[EPVAP]-1659878142792
GPR[SPVATF]-1659878142793
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878143881
GPR[EPVS]-1659878143881
========
sb.append(sof.getBaseLineno());
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878143883
GPR[SPVAP]-1659878143883
GPR[EPVAP]-1659878145054
GPR[SPVATF]-1659878145054
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878146140
GPR[EPVS]-1659878146140
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878146141
GPR[SPVAP]-1659878146141
GPR[EPVAP]-1659878147335
GPR[SPVATF]-1659878147335
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878148418
GPR[EPVS]-1659878148418
========
coalescedLog.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878148419
GPR[SPVAP]-1659878148419
GPR[EPVAP]-1659878149143
GPR[EPVS]-1659878149143
========
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878149145
GPR[SPVAP]-1659878149145
GPR[EPVAP]-1659878149872
GPR[EPVS]-1659878149872
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878149874
GPR[SPVAP]-1659878149874
GPR[EPVAP]-1659878150603
GPR[EPVS]-1659878150603
========
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878150604
GPR[SPVAP]-1659878150604
GPR[EPVAP]-1659878151333
GPR[EPVS]-1659878151333
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878151334
GPR[SPVAP]-1659878151334
GPR[EPVAP]-1659878152083
GPR[EPVS]-1659878152083
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878152085
GPR[SPVAP]-1659878152085
GPR[EPVAP]-1659878152830
GPR[EPVS]-1659878152830
========
sb.append(INDENT);
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878152832
GPR[SPVAP]-1659878152832
GPR[EPVAP]-1659878153566
GPR[EPVS]-1659878153566
========
sb.append("node [color=lightblue2, style=filled];\n");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878153568
GPR[SPVAP]-1659878153568
GPR[EPVAP]-1659878154792
GPR[SPVATF]-1659878154792
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878155875
GPR[EPVS]-1659878155875
========
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878155877
GPR[SPVAP]-1659878155877
GPR[EPVAP]-1659878156656
GPR[EPVS]-1659878156656
========
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
b.append("] [base line: ");
b.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878156661
GPR[SPVAP]-1659878156661
GPR[EPVAP]-1659878157401
GPR[EPVS]-1659878157401
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
b.append("] [base line: ");
b.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878157403
GPR[SPVAP]-1659878157403
GPR[EPVAP]-1659878158136
GPR[EPVS]-1659878158136
========
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878158137
GPR[SPVAP]-1659878158137
GPR[EPVAP]-1659878158877
GPR[EPVS]-1659878158877
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
b.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878158878
GPR[SPVAP]-1659878158878
GPR[EPVAP]-1659878159599
GPR[EPVS]-1659878159599
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
b.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878159601
GPR[SPVAP]-1659878159601
GPR[EPVAP]-1659878160329
GPR[EPVS]-1659878160329
========
sb.append('\n');
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878160330
GPR[SPVAP]-1659878160330
GPR[EPVAP]-1659878161531
GPR[SPVATF]-1659878161531
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878162636
GPR[EPVS]-1659878162636
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
assignmentLog.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878162638
GPR[SPVAP]-1659878162638
GPR[EPVAP]-1659878163368
GPR[EPVS]-1659878163368
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.info("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878163370
GPR[SPVAP]-1659878163370
GPR[EPVAP]-1659878164118
GPR[EPVS]-1659878164118
========
sb.add(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878164120
GPR[SPVAP]-1659878164120
GPR[EPVAP]-1659878164859
GPR[EPVS]-1659878164859
========
debug.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878164860
GPR[SPVAP]-1659878164860
GPR[EPVAP]-1659878165622
GPR[EPVS]-1659878165622
========
traverseNodes(next);
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878165624
GPR[SPVAP]-1659878165624
GPR[EPVAP]-1659878166357
GPR[EPVS]-1659878166357
========
b.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
b.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878166359
GPR[SPVAP]-1659878166359
GPR[EPVAP]-1659878167146
GPR[EPVS]-1659878167146
========
sb.append("| ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878167148
GPR[SPVAP]-1659878167148
GPR[EPVAP]-1659878168324
GPR[SPVATF]-1659878168324
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878169428
GPR[EPVS]-1659878169428
========
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878169429
GPR[SPVAP]-1659878169429
GPR[EPVAP]-1659878170168
GPR[EPVS]-1659878170168
========
sb.append("| ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878170169
GPR[SPVAP]-1659878170169
GPR[EPVAP]-1659878170897
GPR[EPVS]-1659878170897
========
sb.append("| ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878170898
GPR[SPVAP]-1659878170898
GPR[EPVAP]-1659878171642
GPR[EPVS]-1659878171642
========
sb.append("| ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878171643
GPR[SPVAP]-1659878171643
GPR[EPVAP]-1659878172374
GPR[EPVS]-1659878172374
========
sb.append("| ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878172376
GPR[SPVAP]-1659878172376
GPR[EPVAP]-1659878173116
GPR[EPVS]-1659878173116
========
sb.append("| ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878173117
GPR[SPVAP]-1659878173117
GPR[EPVAP]-1659878173847
GPR[EPVS]-1659878173847
========
sb.append("| ");
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878173848
GPR[SPVAP]-1659878173848
GPR[EPVAP]-1659878174591
GPR[EPVS]-1659878174591
========
sb.append("| ");
builder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878174592
GPR[SPVAP]-1659878174592
GPR[EPVAP]-1659878175358
GPR[EPVS]-1659878175358
========
sb.doubleToLongBits(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878175360
GPR[SPVAP]-1659878175360
GPR[EPVAP]-1659878176093
GPR[EPVS]-1659878176093
========
append('D');
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878176095
GPR[SPVAP]-1659878176095
GPR[EPVAP]-1659878176828
GPR[EPVS]-1659878176828
========
append((char)(serialVersionUID>>48));
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878176830
GPR[SPVAP]-1659878176830
GPR[EPVAP]-1659878177570
GPR[EPVS]-1659878177570
========
append((char)(serialVersionUID>>32));
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878177571
GPR[SPVAP]-1659878177571
GPR[EPVAP]-1659878178304
GPR[EPVS]-1659878178304
========
out.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
out.append("] [base line: ");
out.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878178306
GPR[SPVAP]-1659878178306
GPR[EPVAP]-1659878179035
GPR[EPVS]-1659878179035
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
out.append("] [base line: ");
out.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878179037
GPR[SPVAP]-1659878179037
GPR[EPVAP]-1659878179788
GPR[EPVS]-1659878179788
========
out.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878179790
GPR[SPVAP]-1659878179790
GPR[EPVAP]-1659878180519
GPR[EPVS]-1659878180519
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
out.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878180520
GPR[SPVAP]-1659878180520
GPR[EPVAP]-1659878181249
GPR[EPVS]-1659878181249
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
out.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878181250
GPR[SPVAP]-1659878181251
GPR[EPVAP]-1659878181985
GPR[EPVS]-1659878181985
========
result.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
result.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878181987
GPR[SPVAP]-1659878181987
GPR[EPVAP]-1659878182715
GPR[EPVS]-1659878182715
========
result.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878182716
GPR[SPVAP]-1659878182716
GPR[EPVAP]-1659878183473
GPR[EPVS]-1659878183473
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
result.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878183474
GPR[SPVAP]-1659878183474
GPR[EPVAP]-1659878184239
GPR[EPVS]-1659878184239
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878184240
GPR[SPVAP]-1659878184240
GPR[EPVAP]-1659878184965
GPR[EPVS]-1659878184965
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878184966
GPR[SPVAP]-1659878184966
GPR[EPVAP]-1659878185697
GPR[EPVS]-1659878185697
========
debugLog_.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
debugLog_.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878185698
GPR[SPVAP]-1659878185698
GPR[EPVAP]-1659878186447
GPR[EPVS]-1659878186447
========
debugLog_.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878186449
GPR[SPVAP]-1659878186449
GPR[EPVAP]-1659878187211
GPR[EPVS]-1659878187211
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
debugLog_.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878187215
GPR[SPVAP]-1659878187215
GPR[EPVAP]-1659878188462
GPR[EPVS]-1659878188462
========
initCodeSourceBuilder.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878188464
GPR[SPVAP]-1659878188464
GPR[EPVAP]-1659878189202
GPR[EPVS]-1659878189202
========
paths.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878189205
GPR[SPVAP]-1659878189205
GPR[EPVAP]-1659878189967
GPR[EPVS]-1659878189967
========
sb.checkState(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878189969
GPR[SPVAP]-1659878189969
GPR[EPVAP]-1659878190721
GPR[EPVS]-1659878190721
========
sb.update(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878190723
GPR[SPVAP]-1659878190723
GPR[EPVAP]-1659878191519
GPR[EPVS]-1659878191519
========
message.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878191521
GPR[SPVAP]-1659878191521
GPR[EPVAP]-1659878192273
GPR[EPVS]-1659878192273
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
start=COLUMN_BITS+1;
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878192275
GPR[SPVAP]-1659878192275
GPR[EPVAP]-1659878193005
GPR[EPVS]-1659878193005
========
sb.setLength(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878193007
GPR[SPVAP]-1659878193007
GPR[EPVAP]-1659878194190
GPR[SPVATF]-1659878194190
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878195292
GPR[EPVS]-1659878195292
========
COLUMN_BITS++;
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878195293
GPR[SPVAP]-1659878195293
GPR[EPVAP]-1659878196023
GPR[EPVS]-1659878196023
========
code.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
code.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878196026
GPR[SPVAP]-1659878196026
GPR[EPVAP]-1659878196776
GPR[EPVS]-1659878196776
========
code.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878196778
GPR[SPVAP]-1659878196778
GPR[EPVAP]-1659878197569
GPR[EPVS]-1659878197569
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
code.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878197570
GPR[SPVAP]-1659878197570
GPR[EPVAP]-1659878198301
GPR[EPVS]-1659878198301
========
if(null==sb){
return next.cloneTree();
}
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878198303
GPR[SPVAP]-1659878198303
GPR[EPVAP]-1659878199058
GPR[EPVS]-1659878199058
========
COLUMN_BITS++;
sb.setLength(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878199060
GPR[SPVAP]-1659878199060
GPR[EPVAP]-1659878199798
GPR[EPVS]-1659878199798
========
maybeEndStatement();
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878199801
GPR[SPVAP]-1659878199801
GPR[EPVAP]-1659878200539
GPR[EPVS]-1659878200539
========
if(str.length()==0){
return ;
}
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878200540
GPR[SPVAP]-1659878200540
GPR[EPVAP]-1659878201267
GPR[EPVS]-1659878201267
========
number-=L;
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878201269
GPR[SPVAP]-1659878201269
GPR[EPVAP]-1659878202005
GPR[EPVS]-1659878202005
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878202006
GPR[SPVAP]-1659878202006
GPR[EPVAP]-1659878202742
GPR[EPVS]-1659878202742
========
appendInferredPaths(str);
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878202744
GPR[SPVAP]-1659878202744
GPR[EPVAP]-1659878203479
GPR[EPVS]-1659878203479
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878203480
GPR[SPVAP]-1659878203480
GPR[EPVAP]-1659878204208
GPR[EPVS]-1659878204208
========
str=trimEnd(line);
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878204210
GPR[SPVAP]-1659878204210
GPR[EPVAP]-1659878204946
GPR[EPVS]-1659878204946
========
appendInferredPaths(getExportedPath());
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878204947
GPR[SPVAP]-1659878204948
GPR[EPVAP]-1659878205692
GPR[EPVS]-1659878205692
========
sb.multiply(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878205694
GPR[SPVAP]-1659878205694
GPR[EPVAP]-1659878206423
GPR[EPVS]-1659878206423
========
case '\"' :

sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878206424
GPR[SPVAP]-1659878206424
GPR[EPVAP]-1659878206999
GPR[EPVS]-1659878206999
========
case '>' :

sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878207000
GPR[SPVAP]-1659878207000
GPR[EPVAP]-1659878207586
GPR[EPVS]-1659878207586
========
sb.charAt(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878207589
GPR[SPVAP]-1659878207589
GPR[EPVAP]-1659878208765
GPR[SPVATF]-1659878208765
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878209827
GPR[EPVS]-1659878209827
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.multiply("] [base line: ");
sb.multiply(sof.getBaseLineno());

========
GPR[SPVS]-1659878209829
GPR[SPVAP]-1659878209829
GPR[EPVAP]-1659878210566
GPR[EPVS]-1659878210566
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.multiply("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878210568
GPR[SPVAP]-1659878210568
GPR[EPVAP]-1659878211324
GPR[EPVS]-1659878211324
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.multiply(sof.getBaseLineno());

========
GPR[SPVS]-1659878211326
GPR[SPVAP]-1659878211326
GPR[EPVAP]-1659878212057
GPR[EPVS]-1659878212057
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
if(COLUMN_BITS==COLUMN_BITS)break;
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878212059
GPR[SPVAP]-1659878212059
GPR[EPVAP]-1659878212789
GPR[EPVS]-1659878212789
========
sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
this.sb=new StringBuilder();
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878212790
GPR[SPVAP]-1659878212790
GPR[EPVAP]-1659878213521
GPR[EPVS]-1659878213521
========
case Token.RC :

sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878213523
GPR[SPVAP]-1659878213523
GPR[EPVAP]-1659878214100
GPR[EPVS]-1659878214100
========
case Token.GET :

sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878214101
GPR[SPVAP]-1659878214101
GPR[EPVAP]-1659878214679
GPR[EPVS]-1659878214679
========
case FUNCTION_END :

sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878214680
GPR[SPVAP]-1659878214680
GPR[EPVAP]-1659878215267
GPR[EPVS]-1659878215267
========
case Token.WHILE :

sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());

========
GPR[SPVS]-1659878215268
GPR[SPVAP]-1659878215268
GPR[EPVAP]-1659878215843
GPR[EPVS]-1659878215843
GPR[ESUN]-1659878215843
GPR[SSUN]-1659878215843
com.google.javascript.rhino.Node,909
========
sb.append(sof.getEndLineno());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878217247
GPR[SPVAP]-1659878217247
GPR[EPVAP]-1659878220827
GPR[SPVATF]-1659878220827
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878221914
GPR[EPVS]-1659878221914
========
sb.append(']');
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878221916
GPR[SPVAP]-1659878221916
GPR[EPVAP]-1659878223102
GPR[SPVATF]-1659878223102
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878224227
GPR[EPVS]-1659878224227
========
sb.append(sof.getEndLineno());
sb.append(']');
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878224229
GPR[SPVAP]-1659878224229
GPR[EPVAP]-1659878225408
GPR[SPVATF]-1659878225408
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878226495
GPR[EPVS]-1659878226495
========
coalescedLog.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878226497
GPR[SPVAP]-1659878226497
GPR[EPVAP]-1659878227250
GPR[EPVS]-1659878227250
========
b.append("] [base line: ");
b.append(sof.getBaseLineno());
b.append("] [end line: ");

========
GPR[SPVS]-1659878227252
GPR[SPVAP]-1659878227252
GPR[EPVAP]-1659878227977
GPR[EPVS]-1659878227977
========
sb.append("] [base line: ");
b.append(sof.getBaseLineno());
b.append("] [end line: ");

========
GPR[SPVS]-1659878227978
GPR[SPVAP]-1659878227978
GPR[EPVAP]-1659878228701
GPR[EPVS]-1659878228701
========
b.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878228703
GPR[SPVAP]-1659878228703
GPR[EPVAP]-1659878229449
GPR[EPVS]-1659878229449
========
sb.append("] [base line: ");
b.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878229450
GPR[SPVAP]-1659878229450
GPR[EPVAP]-1659878230193
GPR[EPVS]-1659878230193
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
b.append("] [end line: ");

========
GPR[SPVS]-1659878230194
GPR[SPVAP]-1659878230194
GPR[EPVAP]-1659878230936
GPR[EPVS]-1659878230937
========
sb.append('\n');
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878230938
GPR[SPVAP]-1659878230938
GPR[EPVAP]-1659878232117
GPR[SPVATF]-1659878232117
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878233196
GPR[EPVS]-1659878233196
========
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878233199
GPR[SPVAP]-1659878233199
GPR[EPVAP]-1659878233927
GPR[EPVS]-1659878233927
========
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878233929
GPR[SPVAP]-1659878233929
GPR[EPVAP]-1659878234652
GPR[EPVS]-1659878234652
========
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878234653
GPR[SPVAP]-1659878234653
GPR[EPVAP]-1659878235382
GPR[EPVS]-1659878235382
========
b.append("] [base line: ");
b.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878235385
GPR[SPVAP]-1659878235385
GPR[EPVAP]-1659878236114
GPR[EPVS]-1659878236114
========
sb.append("] [base line: ");
assignmentLog.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878236116
GPR[SPVAP]-1659878236116
GPR[EPVAP]-1659878236863
GPR[EPVS]-1659878236863
========
sb.add("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878236864
GPR[SPVAP]-1659878236864
GPR[EPVAP]-1659878237595
GPR[EPVS]-1659878237595
========
debug.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878237596
GPR[SPVAP]-1659878237596
GPR[EPVAP]-1659878238336
GPR[EPVS]-1659878238336
========
append('D');
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878238338
GPR[SPVAP]-1659878238338
GPR[EPVAP]-1659878239061
GPR[EPVS]-1659878239061
========
append((char)(serialVersionUID>>48));
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878239062
GPR[SPVAP]-1659878239062
GPR[EPVAP]-1659878239806
GPR[EPVS]-1659878239806
========
append((char)(serialVersionUID>>32));
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878239808
GPR[SPVAP]-1659878239808
GPR[EPVAP]-1659878240573
GPR[EPVS]-1659878240573
========
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());
builder.append("] [end line: ");

========
GPR[SPVS]-1659878240575
GPR[SPVAP]-1659878240575
GPR[EPVAP]-1659878241325
GPR[EPVS]-1659878241325
========
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());
builder.append("] [end line: ");

========
GPR[SPVS]-1659878241326
GPR[SPVAP]-1659878241326
GPR[EPVAP]-1659878242056
GPR[EPVS]-1659878242056
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
builder.append("] [end line: ");

========
GPR[SPVS]-1659878242058
GPR[SPVAP]-1659878242058
GPR[EPVAP]-1659878242801
GPR[EPVS]-1659878242801
========
sb.append(" {\n");
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878242803
GPR[SPVAP]-1659878242803
GPR[EPVAP]-1659878243986
GPR[SPVATF]-1659878243986
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878245056
GPR[EPVS]-1659878245056
========
sb.append(" {\n");
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878245057
GPR[SPVAP]-1659878245057
GPR[EPVAP]-1659878245795
GPR[EPVS]-1659878245795
========
sb.append(" {\n");
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878245796
GPR[SPVAP]-1659878245796
GPR[EPVAP]-1659878246529
GPR[EPVS]-1659878246529
========
sb.append(" {\n");
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878246530
GPR[SPVAP]-1659878246530
GPR[EPVAP]-1659878247266
GPR[EPVS]-1659878247266
========
sb.append("| ");
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878247268
GPR[SPVAP]-1659878247268
GPR[EPVAP]-1659878248453
GPR[SPVATF]-1659878248453
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878249523
GPR[EPVS]-1659878249523
========
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());
builder.append("] [end line: ");

========
GPR[SPVS]-1659878249525
GPR[SPVAP]-1659878249525
GPR[EPVAP]-1659878250274
GPR[EPVS]-1659878250274
========
sb.append("| ");
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878250276
GPR[SPVAP]-1659878250276
GPR[EPVAP]-1659878251005
GPR[EPVS]-1659878251005
========
sb.append("| ");
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878251007
GPR[SPVAP]-1659878251007
GPR[EPVAP]-1659878251746
GPR[EPVS]-1659878251746
========
sb.append("| ");
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
builder.append("] [end line: ");

========
GPR[SPVS]-1659878251748
GPR[SPVAP]-1659878251748
GPR[EPVAP]-1659878252489
GPR[EPVS]-1659878252489
========
sb.append("| ");
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878252490
GPR[SPVAP]-1659878252490
GPR[EPVAP]-1659878253218
GPR[EPVS]-1659878253218
========
sb.append("| ");
builder.append("] [base line: ");
sb.append(sof.getBaseLineno());
builder.append("] [end line: ");

========
GPR[SPVS]-1659878253219
GPR[SPVAP]-1659878253219
GPR[EPVAP]-1659878253948
GPR[EPVS]-1659878253948
========
sb.append("| ");
sb.append("] [base line: ");
builder.append(sof.getBaseLineno());
builder.append("] [end line: ");

========
GPR[SPVS]-1659878253949
GPR[SPVAP]-1659878253949
GPR[EPVAP]-1659878254680
GPR[EPVS]-1659878254680
========
sb.append("| ");
builder.append("] [base line: ");
builder.append(sof.getBaseLineno());
builder.append("] [end line: ");

========
GPR[SPVS]-1659878254681
GPR[SPVAP]-1659878254681
GPR[EPVAP]-1659878255419
GPR[EPVS]-1659878255419
========
out.append("] [base line: ");
out.append(sof.getBaseLineno());
out.append("] [end line: ");

========
GPR[SPVS]-1659878255422
GPR[SPVAP]-1659878255422
GPR[EPVAP]-1659878256185
GPR[EPVS]-1659878256185
========
sb.append("] [base line: ");
out.append(sof.getBaseLineno());
out.append("] [end line: ");

========
GPR[SPVS]-1659878256186
GPR[SPVAP]-1659878256186
GPR[EPVAP]-1659878256911
GPR[EPVS]-1659878256911
========
out.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878256913
GPR[SPVAP]-1659878256913
GPR[EPVAP]-1659878257636
GPR[EPVS]-1659878257636
========
sb.append("] [base line: ");
out.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878257638
GPR[SPVAP]-1659878257638
GPR[EPVAP]-1659878258393
GPR[EPVS]-1659878258393
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
out.append("] [end line: ");

========
GPR[SPVS]-1659878258394
GPR[SPVAP]-1659878258394
GPR[EPVAP]-1659878259124
GPR[EPVS]-1659878259124
========
traverseNodes(next);
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878259126
GPR[SPVAP]-1659878259126
GPR[EPVAP]-1659878259849
GPR[EPVS]-1659878259849
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878259851
GPR[SPVAP]-1659878259851
GPR[EPVAP]-1659878260592
GPR[EPVS]-1659878260592
========
result.append("] [base line: ");
result.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878260594
GPR[SPVAP]-1659878260594
GPR[EPVAP]-1659878261331
GPR[EPVS]-1659878261331
========
result.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878261333
GPR[SPVAP]-1659878261333
GPR[EPVAP]-1659878262065
GPR[EPVS]-1659878262065
========
sb.append("] [base line: ");
result.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878262066
GPR[SPVAP]-1659878262066
GPR[EPVAP]-1659878262799
GPR[EPVS]-1659878262799
========
initCodeSourceBuilder.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878262801
GPR[SPVAP]-1659878262801
GPR[EPVAP]-1659878263543
GPR[EPVS]-1659878263543
========
debugLog_.append("] [base line: ");
debugLog_.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878263546
GPR[SPVAP]-1659878263546
GPR[EPVAP]-1659878264295
GPR[EPVS]-1659878264295
========
debugLog_.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878264297
GPR[SPVAP]-1659878264297
GPR[EPVAP]-1659878265029
GPR[EPVS]-1659878265029
========
sb.append("] [base line: ");
debugLog_.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878265030
GPR[SPVAP]-1659878265030
GPR[EPVAP]-1659878265794
GPR[EPVS]-1659878265794
========
message.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878265796
GPR[SPVAP]-1659878265796
GPR[EPVAP]-1659878266532
GPR[EPVS]-1659878266532
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878266533
GPR[SPVAP]-1659878266533
GPR[EPVAP]-1659878267275
GPR[EPVS]-1659878267275
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
start=COLUMN_BITS+1;
sb.append("] [end line: ");

========
GPR[SPVS]-1659878267277
GPR[SPVAP]-1659878267277
GPR[EPVAP]-1659878268038
GPR[EPVS]-1659878268038
========
paths.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878268039
GPR[SPVAP]-1659878268039
GPR[EPVAP]-1659878268765
GPR[EPVS]-1659878268765
========
COLUMN_BITS++;
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878268767
GPR[SPVAP]-1659878268767
GPR[EPVAP]-1659878269493
GPR[EPVS]-1659878269493
========
sb.update("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878269495
GPR[SPVAP]-1659878269495
GPR[EPVAP]-1659878270221
GPR[EPVS]-1659878270221
========
code.append("] [base line: ");
code.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878270223
GPR[SPVAP]-1659878270223
GPR[EPVAP]-1659878271003
GPR[EPVS]-1659878271003
========
code.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878271005
GPR[SPVAP]-1659878271005
GPR[EPVAP]-1659878271761
GPR[EPVS]-1659878271761
========
sb.append("] [base line: ");
code.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878271763
GPR[SPVAP]-1659878271763
GPR[EPVAP]-1659878272499
GPR[EPVS]-1659878272499
========
if(null==sb){
return next.cloneTree();
}
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878272501
GPR[SPVAP]-1659878272501
GPR[EPVAP]-1659878273232
GPR[EPVS]-1659878273232
========
number-=L;
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878273234
GPR[SPVAP]-1659878273234
GPR[EPVAP]-1659878273968
GPR[EPVS]-1659878273968
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878273969
GPR[SPVAP]-1659878273969
GPR[EPVAP]-1659878274723
GPR[EPVS]-1659878274723
========
maybeEndStatement();
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878274725
GPR[SPVAP]-1659878274725
GPR[EPVAP]-1659878275469
GPR[EPVS]-1659878275469
========
if(str.length()==0){
return ;
}
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878275471
GPR[SPVAP]-1659878275471
GPR[EPVAP]-1659878276221
GPR[EPVS]-1659878276221
========
case '\r' :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878276223
GPR[SPVAP]-1659878276223
GPR[EPVAP]-1659878276801
GPR[EPVS]-1659878276801
========
appendInferredPaths(str);
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878276803
GPR[SPVAP]-1659878276803
GPR[EPVAP]-1659878277531
GPR[EPVS]-1659878277531
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878277532
GPR[SPVAP]-1659878277532
GPR[EPVAP]-1659878278265
GPR[EPVS]-1659878278265
========
case '\"' :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878278266
GPR[SPVAP]-1659878278266
GPR[EPVAP]-1659878278843
GPR[EPVS]-1659878278843
========
case '>' :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878278845
GPR[SPVAP]-1659878278845
GPR[EPVAP]-1659878279424
GPR[EPVS]-1659878279424
========
appendInferredPaths(getExportedPath());
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878279426
GPR[SPVAP]-1659878279426
GPR[EPVAP]-1659878280149
GPR[EPVS]-1659878280149
========
sb.multiply("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878280151
GPR[SPVAP]-1659878280151
GPR[EPVAP]-1659878280886
GPR[EPVS]-1659878280886
========
sb.append("] [base line: ");
sb.multiply(sof.getBaseLineno());
sb.multiply("] [end line: ");

========
GPR[SPVS]-1659878280888
GPR[SPVAP]-1659878280888
GPR[EPVAP]-1659878281618
GPR[EPVS]-1659878281618
========
sb.append("] [base line: ");
sb.multiply(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878281620
GPR[SPVAP]-1659878281620
GPR[EPVAP]-1659878282393
GPR[EPVS]-1659878282393
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.multiply("] [end line: ");

========
GPR[SPVS]-1659878282395
GPR[SPVAP]-1659878282395
GPR[EPVAP]-1659878283129
GPR[EPVS]-1659878283129
========
sb.append("] [base line: ");
if(COLUMN_BITS==COLUMN_BITS)break;
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878283131
GPR[SPVAP]-1659878283131
GPR[EPVAP]-1659878283864
GPR[EPVS]-1659878283864
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
this.sb=new StringBuilder();
sb.append("] [end line: ");

========
GPR[SPVS]-1659878283866
GPR[SPVAP]-1659878283866
GPR[EPVAP]-1659878284589
GPR[EPVS]-1659878284589
========
case Token.GET :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878284591
GPR[SPVAP]-1659878284591
GPR[EPVAP]-1659878285162
GPR[EPVS]-1659878285162
========
case Token.RC :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878285164
GPR[SPVAP]-1659878285164
GPR[EPVAP]-1659878285746
GPR[EPVS]-1659878285746
========
case FUNCTION_END :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878285747
GPR[SPVAP]-1659878285747
GPR[EPVAP]-1659878286344
GPR[EPVS]-1659878286344
========
case Token.WHILE :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878286345
GPR[SPVAP]-1659878286345
GPR[EPVAP]-1659878286920
GPR[EPVS]-1659878286920
========
default :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878286921
GPR[SPVAP]-1659878286921
GPR[EPVAP]-1659878287506
GPR[EPVS]-1659878287506
========
case Token.FALSE :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878287508
GPR[SPVAP]-1659878287508
GPR[EPVAP]-1659878288096
GPR[EPVS]-1659878288096
========
case Token.THIS :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878288098
GPR[SPVAP]-1659878288098
GPR[EPVAP]-1659878288669
GPR[EPVS]-1659878288669
========
case Token.RB :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878288670
GPR[SPVAP]-1659878288670
GPR[EPVAP]-1659878289249
GPR[EPVS]-1659878289249
========
case Token.NEW :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878289250
GPR[SPVAP]-1659878289250
GPR[EPVAP]-1659878289836
GPR[EPVS]-1659878289836
========
case Token.IF :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878289837
GPR[SPVAP]-1659878289837
GPR[EPVAP]-1659878290411
GPR[EPVS]-1659878290411
========
case Token.FOR :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878290414
GPR[SPVAP]-1659878290414
GPR[EPVAP]-1659878291003
GPR[EPVS]-1659878291003
========
case Token.WITH :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878291004
GPR[SPVAP]-1659878291004
GPR[EPVAP]-1659878291581
GPR[EPVS]-1659878291581
========
case Token.DO :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878291582
GPR[SPVAP]-1659878291582
GPR[EPVAP]-1659878292160
GPR[EPVS]-1659878292160
========
case Token.CATCH :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878292161
GPR[SPVAP]-1659878292161
GPR[EPVAP]-1659878292734
GPR[EPVS]-1659878292734
========
case Token.THROW :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878292735
GPR[SPVAP]-1659878292735
GPR[EPVAP]-1659878293310
GPR[EPVS]-1659878293310
========
case Token.DEFAULT :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878293311
GPR[SPVAP]-1659878293312
GPR[EPVAP]-1659878293887
GPR[EPVS]-1659878293887
========
case Token.ASSIGN_ADD :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878293889
GPR[SPVAP]-1659878293889
GPR[EPVAP]-1659878294470
GPR[EPVS]-1659878294470
========
case Token.ASSIGN_MUL :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878294472
GPR[SPVAP]-1659878294472
GPR[EPVAP]-1659878295051
GPR[EPVS]-1659878295051
========
case Token.ASSIGN_MOD :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878295053
GPR[SPVAP]-1659878295053
GPR[EPVAP]-1659878295633
GPR[EPVS]-1659878295633
========
case Token.ASSIGN_BITXOR :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878295634
GPR[SPVAP]-1659878295634
GPR[EPVAP]-1659878296209
GPR[EPVS]-1659878296209
========
case Token.ASSIGN_LSH :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878296211
GPR[SPVAP]-1659878296211
GPR[EPVAP]-1659878296780
GPR[EPVS]-1659878296780
========
case Token.ASSIGN_URSH :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878296782
GPR[SPVAP]-1659878296782
GPR[EPVAP]-1659878297355
GPR[EPVS]-1659878297355
========
case Token.OBJECTLIT :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878297357
GPR[SPVAP]-1659878297357
GPR[EPVAP]-1659878297936
GPR[EPVS]-1659878297936
========
case Token.AND :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878297937
GPR[SPVAP]-1659878297937
GPR[EPVAP]-1659878298515
GPR[EPVS]-1659878298515
========
case Token.BITXOR :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878298517
GPR[SPVAP]-1659878298517
GPR[EPVAP]-1659878299094
GPR[EPVS]-1659878299094
========
case Token.SHEQ :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878299096
GPR[SPVAP]-1659878299096
GPR[EPVAP]-1659878299674
GPR[EPVS]-1659878299674
========
case Token.EQ :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878299675
GPR[SPVAP]-1659878299675
GPR[EPVAP]-1659878300244
GPR[EPVS]-1659878300244
========
case Token.LE :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878300246
GPR[SPVAP]-1659878300246
GPR[EPVAP]-1659878300824
GPR[EPVS]-1659878300824
========
case Token.GE :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878300826
GPR[SPVAP]-1659878300826
GPR[EPVAP]-1659878301412
GPR[EPVS]-1659878301412
========
case Token.INSTANCEOF :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878301414
GPR[SPVAP]-1659878301414
GPR[EPVAP]-1659878301996
GPR[EPVS]-1659878301996
========
case Token.RSH :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878301997
GPR[SPVAP]-1659878301997
GPR[EPVAP]-1659878302574
GPR[EPVS]-1659878302574
========
case Token.TYPEOF :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878302575
GPR[SPVAP]-1659878302575
GPR[EPVAP]-1659878303166
GPR[EPVS]-1659878303166
========
case Token.CONST :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878303167
GPR[SPVAP]-1659878303167
GPR[EPVAP]-1659878303767
GPR[EPVS]-1659878303767
========
case Token.BITNOT :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878303768
GPR[SPVAP]-1659878303768
GPR[EPVAP]-1659878304339
GPR[EPVS]-1659878304339
========
case Token.NEG :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878304341
GPR[SPVAP]-1659878304341
GPR[EPVAP]-1659878304915
GPR[EPVS]-1659878304915
========
case Token.DEC :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878304917
GPR[SPVAP]-1659878304917
GPR[EPVAP]-1659878305492
GPR[EPVS]-1659878305492
========
case Token.SUB :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878305493
GPR[SPVAP]-1659878305493
GPR[EPVAP]-1659878306070
GPR[EPVS]-1659878306070
========
case Token.DIV :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878306072
GPR[SPVAP]-1659878306072
GPR[EPVAP]-1659878306652
GPR[EPVS]-1659878306652
========
case Token.COLONCOLON :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878306654
GPR[SPVAP]-1659878306654
GPR[EPVAP]-1659878307234
GPR[EPVS]-1659878307234
========
case Token.DOTQUERY :

sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");

========
GPR[SPVS]-1659878307236
GPR[SPVAP]-1659878307236
GPR[EPVAP]-1659878307815
GPR[EPVS]-1659878307815
GPR[ESUN]-1659878307815
GPR[SSUN]-1659878307815
com.google.javascript.rhino.Node,910
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878309284
GPR[SPVAP]-1659878309284
GPR[EPVAP]-1659878312877
GPR[SPVATF]-1659878312877
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878313984
GPR[EPVS]-1659878313984
========
sb.append(sof.getBaseLineno());
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878313985
GPR[SPVAP]-1659878313985
GPR[EPVAP]-1659878315155
GPR[SPVATF]-1659878315155
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878316238
GPR[EPVS]-1659878316238
========
sb.append("] [base line: ");
sb.append(sof.getBaseLineno());
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878316240
GPR[SPVAP]-1659878316240
GPR[EPVAP]-1659878317422
GPR[SPVATF]-1659878317422
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878318485
GPR[EPVS]-1659878318485
========
coalescedLog.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878318486
GPR[SPVAP]-1659878318486
GPR[EPVAP]-1659878319244
GPR[EPVS]-1659878319244
========
builder.append(sof.getBaseLineno());
builder.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878319247
GPR[SPVAP]-1659878319247
GPR[EPVAP]-1659878319981
GPR[EPVS]-1659878319981
========
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878319983
GPR[SPVAP]-1659878319983
GPR[EPVAP]-1659878320706
GPR[EPVS]-1659878320706
========
sb.append(sof.getBaseLineno());
builder.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878320708
GPR[SPVAP]-1659878320708
GPR[EPVAP]-1659878321422
GPR[EPVS]-1659878321422
========
b.append(sof.getBaseLineno());
b.append("] [end line: ");
b.append(sof.getEndLineno());

========
GPR[SPVS]-1659878321424
GPR[SPVAP]-1659878321424
GPR[EPVAP]-1659878322179
GPR[EPVS]-1659878322179
========
sb.append(sof.getBaseLineno());
b.append("] [end line: ");
b.append(sof.getEndLineno());

========
GPR[SPVS]-1659878322180
GPR[SPVAP]-1659878322180
GPR[EPVAP]-1659878322955
GPR[EPVS]-1659878322955
========
b.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878322956
GPR[SPVAP]-1659878322956
GPR[EPVAP]-1659878323710
GPR[EPVS]-1659878323710
========
sb.append(sof.getBaseLineno());
b.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878323712
GPR[SPVAP]-1659878323712
GPR[EPVAP]-1659878324441
GPR[EPVS]-1659878324441
========
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
b.append(sof.getEndLineno());

========
GPR[SPVS]-1659878324442
GPR[SPVAP]-1659878324442
GPR[EPVAP]-1659878325196
GPR[EPVS]-1659878325196
========
sb.append('\n');
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878325197
GPR[SPVAP]-1659878325197
GPR[EPVAP]-1659878326401
GPR[SPVATF]-1659878326401
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878327487
GPR[EPVS]-1659878327487
========
sb.append(sof.getBaseLineno());
assignmentLog.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878327489
GPR[SPVAP]-1659878327489
GPR[EPVAP]-1659878328214
GPR[EPVS]-1659878328214
========
sb.append(sof.getBaseLineno());
sb.info("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878328216
GPR[SPVAP]-1659878328216
GPR[EPVAP]-1659878328953
GPR[EPVS]-1659878328953
========
b.append(sof.getBaseLineno());
b.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878328955
GPR[SPVAP]-1659878328955
GPR[EPVAP]-1659878329727
GPR[EPVS]-1659878329727
========
sb.add(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878329728
GPR[SPVAP]-1659878329728
GPR[EPVAP]-1659878330462
GPR[EPVS]-1659878330462
========
debug.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878330463
GPR[SPVAP]-1659878330463
GPR[EPVAP]-1659878331190
GPR[EPVS]-1659878331190
========
traverseNodes(next);
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878331191
GPR[SPVAP]-1659878331191
GPR[EPVAP]-1659878331945
GPR[EPVS]-1659878331945
========
builder.append(sof.getBaseLineno());
builder.append("] [end line: ");
builder.append(sof.getEndLineno());

========
GPR[SPVS]-1659878331947
GPR[SPVAP]-1659878331947
GPR[EPVAP]-1659878332678
GPR[EPVS]-1659878332678
========
sb.append(sof.getBaseLineno());
builder.append("] [end line: ");
builder.append(sof.getEndLineno());

========
GPR[SPVS]-1659878332680
GPR[SPVAP]-1659878332680
GPR[EPVAP]-1659878333418
GPR[EPVS]-1659878333418
========
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
builder.append(sof.getEndLineno());

========
GPR[SPVS]-1659878333420
GPR[SPVAP]-1659878333420
GPR[EPVAP]-1659878334160
GPR[EPVS]-1659878334160
========
sb.append("| ");
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878334162
GPR[SPVAP]-1659878334162
GPR[EPVAP]-1659878335348
GPR[SPVATF]-1659878335348
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878336410
GPR[EPVS]-1659878336410
========
sb.append("| ");
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878336412
GPR[SPVAP]-1659878336412
GPR[EPVAP]-1659878337181
GPR[EPVS]-1659878337181
========
sb.append("| ");
sb.append(sof.getBaseLineno());
builder.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878337182
GPR[SPVAP]-1659878337182
GPR[EPVAP]-1659878337907
GPR[EPVS]-1659878337907
========
sb.append("| ");
builder.append(sof.getBaseLineno());
builder.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878337909
GPR[SPVAP]-1659878337909
GPR[EPVAP]-1659878338633
GPR[EPVS]-1659878338633
========
sb.doubleToLongBits(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878338635
GPR[SPVAP]-1659878338635
GPR[EPVAP]-1659878339375
GPR[EPVS]-1659878339375
========
append('D');
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878339376
GPR[SPVAP]-1659878339376
GPR[EPVAP]-1659878340127
GPR[EPVS]-1659878340127
========
append((char)(serialVersionUID>>48));
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878340128
GPR[SPVAP]-1659878340128
GPR[EPVAP]-1659878340929
GPR[EPVS]-1659878340929
========
append((char)(serialVersionUID>>32));
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878340931
GPR[SPVAP]-1659878340931
GPR[EPVAP]-1659878341674
GPR[EPVS]-1659878341674
========
out.append(sof.getBaseLineno());
out.append("] [end line: ");
out.append(sof.getEndLineno());

========
GPR[SPVS]-1659878341676
GPR[SPVAP]-1659878341676
GPR[EPVAP]-1659878342414
GPR[EPVS]-1659878342414
========
sb.append(sof.getBaseLineno());
out.append("] [end line: ");
out.append(sof.getEndLineno());

========
GPR[SPVS]-1659878342415
GPR[SPVAP]-1659878342415
GPR[EPVAP]-1659878343153
GPR[EPVS]-1659878343153
========
out.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878343154
GPR[SPVAP]-1659878343154
GPR[EPVAP]-1659878343894
GPR[EPVS]-1659878343894
========
sb.append(sof.getBaseLineno());
out.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878343895
GPR[SPVAP]-1659878343895
GPR[EPVAP]-1659878344633
GPR[EPVS]-1659878344633
========
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
out.append(sof.getEndLineno());

========
GPR[SPVS]-1659878344635
GPR[SPVAP]-1659878344635
GPR[EPVAP]-1659878345361
GPR[EPVS]-1659878345361
========
builder.append(sof.getBaseLineno());
sb.append("] [end line: ");
builder.append(sof.getEndLineno());

========
GPR[SPVS]-1659878345364
GPR[SPVAP]-1659878345364
GPR[EPVAP]-1659878346098
GPR[EPVS]-1659878346098
========
result.append(sof.getBaseLineno());
result.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878346100
GPR[SPVAP]-1659878346100
GPR[EPVAP]-1659878346829
GPR[EPVS]-1659878346829
========
result.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878346831
GPR[SPVAP]-1659878346831
GPR[EPVAP]-1659878347590
GPR[EPVS]-1659878347590
========
sb.append(sof.getBaseLineno());
result.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878347592
GPR[SPVAP]-1659878347592
GPR[EPVAP]-1659878348324
GPR[EPVS]-1659878348324
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878348325
GPR[SPVAP]-1659878348325
GPR[EPVAP]-1659878349055
GPR[EPVS]-1659878349055
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878349068
GPR[SPVAP]-1659878349068
GPR[EPVAP]-1659878349808
GPR[EPVS]-1659878349808
========
debugLog_.append(sof.getBaseLineno());
debugLog_.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878349810
GPR[SPVAP]-1659878349810
GPR[EPVAP]-1659878350609
GPR[EPVS]-1659878350609
========
debugLog_.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878350612
GPR[SPVAP]-1659878350612
GPR[EPVAP]-1659878351811
GPR[EPVS]-1659878351811
========
sb.append(sof.getBaseLineno());
debugLog_.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878351813
GPR[SPVAP]-1659878351813
GPR[EPVAP]-1659878352601
GPR[EPVS]-1659878352601
========
initCodeSourceBuilder.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878352603
GPR[SPVAP]-1659878352603
GPR[EPVAP]-1659878353415
GPR[EPVS]-1659878353415
========
sb.checkState(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878353417
GPR[SPVAP]-1659878353417
GPR[EPVAP]-1659878354168
GPR[EPVS]-1659878354168
========
message.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878354170
GPR[SPVAP]-1659878354170
GPR[EPVAP]-1659878354921
GPR[EPVS]-1659878354921
========
paths.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878354923
GPR[SPVAP]-1659878354923
GPR[EPVAP]-1659878355672
GPR[EPVS]-1659878355672
========
sb.update(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878355675
GPR[SPVAP]-1659878355675
GPR[EPVAP]-1659878356408
GPR[EPVS]-1659878356408
========
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
start=COLUMN_BITS+1;
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878356410
GPR[SPVAP]-1659878356410
GPR[EPVAP]-1659878357141
GPR[EPVS]-1659878357141
========
sb.setLength(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878357143
GPR[SPVAP]-1659878357143
GPR[EPVAP]-1659878358317
GPR[SPVATF]-1659878358317
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878359411
GPR[EPVS]-1659878359411
========
COLUMN_BITS++;
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878359413
GPR[SPVAP]-1659878359413
GPR[EPVAP]-1659878360152
GPR[EPVS]-1659878360153
========
code.append(sof.getBaseLineno());
code.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878360154
GPR[SPVAP]-1659878360154
GPR[EPVAP]-1659878360889
GPR[EPVS]-1659878360889
========
code.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878360891
GPR[SPVAP]-1659878360891
GPR[EPVAP]-1659878361619
GPR[EPVS]-1659878361619
========
sb.append(sof.getBaseLineno());
code.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878361621
GPR[SPVAP]-1659878361621
GPR[EPVAP]-1659878362348
GPR[EPVS]-1659878362348
========
if(null==sb){
return next.cloneTree();
}
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878362350
GPR[SPVAP]-1659878362350
GPR[EPVAP]-1659878363075
GPR[EPVS]-1659878363075
========
COLUMN_BITS++;
sb.setLength(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878363077
GPR[SPVAP]-1659878363077
GPR[EPVAP]-1659878363806
GPR[EPVS]-1659878363806
========
maybeEndStatement();
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878363808
GPR[SPVAP]-1659878363808
GPR[EPVAP]-1659878364589
GPR[EPVS]-1659878364589
========
if(str.length()==0){
return ;
}
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878364590
GPR[SPVAP]-1659878364590
GPR[EPVAP]-1659878365343
GPR[EPVS]-1659878365343
========
number-=L;
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878365346
GPR[SPVAP]-1659878365346
GPR[EPVAP]-1659878366073
GPR[EPVS]-1659878366073
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878366075
GPR[SPVAP]-1659878366075
GPR[EPVAP]-1659878366812
GPR[EPVS]-1659878366812
========
appendInferredPaths(str);
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878366815
GPR[SPVAP]-1659878366815
GPR[EPVAP]-1659878367542
GPR[EPVS]-1659878367542
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878367543
GPR[SPVAP]-1659878367543
GPR[EPVAP]-1659878368281
GPR[EPVS]-1659878368281
========
appendInferredPaths(getExportedPath());
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878368283
GPR[SPVAP]-1659878368283
GPR[EPVAP]-1659878369010
GPR[EPVS]-1659878369010
========
case '\"' :

sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878369011
GPR[SPVAP]-1659878369011
GPR[EPVAP]-1659878369593
GPR[EPVS]-1659878369593
========
case '>' :

sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878369594
GPR[SPVAP]-1659878369594
GPR[EPVAP]-1659878370175
GPR[EPVS]-1659878370175
========
sb.multiply(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878370177
GPR[SPVAP]-1659878370177
GPR[EPVAP]-1659878370911
GPR[EPVS]-1659878370911
========
sb.charAt(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878370912
GPR[SPVAP]-1659878370912
GPR[EPVAP]-1659878372079
GPR[SPVATF]-1659878372079
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878373149
GPR[EPVS]-1659878373149
========
sb.append(sof.getBaseLineno());
sb.multiply("] [end line: ");
sb.multiply(sof.getEndLineno());

========
GPR[SPVS]-1659878373151
GPR[SPVAP]-1659878373151
GPR[EPVAP]-1659878373878
GPR[EPVS]-1659878373878
========
sb.append(sof.getBaseLineno());
sb.multiply("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878373879
GPR[SPVAP]-1659878373879
GPR[EPVAP]-1659878374612
GPR[EPVS]-1659878374612
========
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.multiply(sof.getEndLineno());

========
GPR[SPVS]-1659878374614
GPR[SPVAP]-1659878374614
GPR[EPVAP]-1659878375367
GPR[EPVS]-1659878375367
========
sb.append(sof.getBaseLineno());
if(COLUMN_BITS==COLUMN_BITS)break;
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878375369
GPR[SPVAP]-1659878375369
GPR[EPVAP]-1659878376093
GPR[EPVS]-1659878376093
========
sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
this.sb=new StringBuilder();
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878376095
GPR[SPVAP]-1659878376095
GPR[EPVAP]-1659878376829
GPR[EPVS]-1659878376829
========
case Token.RC :

sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878376831
GPR[SPVAP]-1659878376831
GPR[EPVAP]-1659878377411
GPR[EPVS]-1659878377411
========
case Token.GET :

sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878377416
GPR[SPVAP]-1659878377416
GPR[EPVAP]-1659878377995
GPR[EPVS]-1659878377995
========
case FUNCTION_END :

sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878377996
GPR[SPVAP]-1659878377996
GPR[EPVAP]-1659878378570
GPR[EPVS]-1659878378570
========
case Token.WHILE :

sb.append(sof.getBaseLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());

========
GPR[SPVS]-1659878378572
GPR[SPVAP]-1659878378572
GPR[EPVAP]-1659878379149
GPR[EPVS]-1659878379149
GPR[ESUN]-1659878379149
GPR[SSUN]-1659878379149
com.google.javascript.rhino.Node,911
========
sb.append(sof.getEndLineno());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878380577
GPR[SPVAP]-1659878380577
GPR[EPVAP]-1659878384231
GPR[SPVATF]-1659878384231
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878385325
GPR[EPVS]-1659878385325
========
sb.append(']');
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878385327
GPR[SPVAP]-1659878385328
GPR[EPVAP]-1659878386495
GPR[SPVATF]-1659878386495
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878387604
GPR[EPVS]-1659878387604
========
sb.append(sof.getEndLineno());
sb.append(']');
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878387605
GPR[SPVAP]-1659878387605
GPR[EPVAP]-1659878388811
GPR[SPVATF]-1659878388811
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878389882
GPR[EPVS]-1659878389882
========
coalescedLog.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878389884
GPR[SPVAP]-1659878389884
GPR[EPVAP]-1659878390615
GPR[EPVS]-1659878390615
========
b.append("] [end line: ");
b.append(sof.getEndLineno());
b.append(']');

========
GPR[SPVS]-1659878390617
GPR[SPVAP]-1659878390617
GPR[EPVAP]-1659878391348
GPR[EPVS]-1659878391348
========
sb.append("] [end line: ");
b.append(sof.getEndLineno());
b.append(']');

========
GPR[SPVS]-1659878391349
GPR[SPVAP]-1659878391349
GPR[EPVAP]-1659878392073
GPR[EPVS]-1659878392073
========
b.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878392075
GPR[SPVAP]-1659878392075
GPR[EPVAP]-1659878392807
GPR[EPVS]-1659878392807
========
sb.append("] [end line: ");
b.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878392808
GPR[SPVAP]-1659878392808
GPR[EPVAP]-1659878393545
GPR[EPVS]-1659878393545
========
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
b.append(']');

========
GPR[SPVS]-1659878393547
GPR[SPVAP]-1659878393547
GPR[EPVAP]-1659878394284
GPR[EPVS]-1659878394284
========
sb.append('\n');
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878394285
GPR[SPVAP]-1659878394285
GPR[EPVAP]-1659878395468
GPR[SPVATF]-1659878395468
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878396556
GPR[EPVS]-1659878396556
========
builder.append("] [end line: ");
builder.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878396558
GPR[SPVAP]-1659878396558
GPR[EPVAP]-1659878397285
GPR[EPVS]-1659878397285
========
builder.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878397287
GPR[SPVAP]-1659878397287
GPR[EPVAP]-1659878398017
GPR[EPVS]-1659878398017
========
sb.append("] [end line: ");
builder.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878398019
GPR[SPVAP]-1659878398019
GPR[EPVAP]-1659878398759
GPR[EPVS]-1659878398759
========
b.append("] [end line: ");
b.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878398761
GPR[SPVAP]-1659878398761
GPR[EPVAP]-1659878399503
GPR[EPVS]-1659878399503
========
sb.append("] [end line: ");
assignmentLog.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878399505
GPR[SPVAP]-1659878399505
GPR[EPVAP]-1659878400228
GPR[EPVS]-1659878400228
========
sb.add("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878400230
GPR[SPVAP]-1659878400230
GPR[EPVAP]-1659878400991
GPR[EPVS]-1659878400991
========
debug.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878400993
GPR[SPVAP]-1659878400993
GPR[EPVAP]-1659878401718
GPR[EPVS]-1659878401718
========
append('D');
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878401721
GPR[SPVAP]-1659878401721
GPR[EPVAP]-1659878402455
GPR[EPVS]-1659878402455
========
append((char)(serialVersionUID>>48));
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878402457
GPR[SPVAP]-1659878402457
GPR[EPVAP]-1659878403194
GPR[EPVS]-1659878403194
========
append((char)(serialVersionUID>>32));
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878403196
GPR[SPVAP]-1659878403196
GPR[EPVAP]-1659878403927
GPR[EPVS]-1659878403927
========
builder.append("] [end line: ");
builder.append(sof.getEndLineno());
builder.append(']');

========
GPR[SPVS]-1659878403928
GPR[SPVAP]-1659878403928
GPR[EPVAP]-1659878404657
GPR[EPVS]-1659878404657
========
sb.append("] [end line: ");
builder.append(sof.getEndLineno());
builder.append(']');

========
GPR[SPVS]-1659878404658
GPR[SPVAP]-1659878404658
GPR[EPVAP]-1659878405433
GPR[EPVS]-1659878405433
========
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
builder.append(']');

========
GPR[SPVS]-1659878405435
GPR[SPVAP]-1659878405435
GPR[EPVAP]-1659878406175
GPR[EPVS]-1659878406175
========
sb.append(" {\n");
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878406176
GPR[SPVAP]-1659878406176
GPR[EPVAP]-1659878407367
GPR[SPVATF]-1659878407367
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878408441
GPR[EPVS]-1659878408441
========
sb.append(" {\n");
builder.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878408443
GPR[SPVAP]-1659878408443
GPR[EPVAP]-1659878409173
GPR[EPVS]-1659878409173
========
sb.append(" {\n");
sb.append("] [end line: ");
builder.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878409175
GPR[SPVAP]-1659878409175
GPR[EPVAP]-1659878409905
GPR[EPVS]-1659878409905
========
sb.append(" {\n");
builder.append("] [end line: ");
builder.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878409907
GPR[SPVAP]-1659878409907
GPR[EPVAP]-1659878410639
GPR[EPVS]-1659878410639
========
sb.append("| ");
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878410641
GPR[SPVAP]-1659878410641
GPR[EPVAP]-1659878411806
GPR[SPVATF]-1659878411806
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878412918
GPR[EPVS]-1659878412918
========
builder.append("] [end line: ");
sb.append(sof.getEndLineno());
builder.append(']');

========
GPR[SPVS]-1659878412920
GPR[SPVAP]-1659878412920
GPR[EPVAP]-1659878413656
GPR[EPVS]-1659878413656
========
sb.append("| ");
builder.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878413658
GPR[SPVAP]-1659878413658
GPR[EPVAP]-1659878414394
GPR[EPVS]-1659878414395
========
sb.append("| ");
sb.append("] [end line: ");
builder.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878414396
GPR[SPVAP]-1659878414396
GPR[EPVAP]-1659878415121
GPR[EPVS]-1659878415121
========
sb.append("| ");
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
builder.append(']');

========
GPR[SPVS]-1659878415123
GPR[SPVAP]-1659878415123
GPR[EPVAP]-1659878415844
GPR[EPVS]-1659878415844
========
sb.append("| ");
builder.append("] [end line: ");
builder.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878415846
GPR[SPVAP]-1659878415846
GPR[EPVAP]-1659878416588
GPR[EPVS]-1659878416588
========
sb.append("| ");
builder.append("] [end line: ");
sb.append(sof.getEndLineno());
builder.append(']');

========
GPR[SPVS]-1659878416590
GPR[SPVAP]-1659878416590
GPR[EPVAP]-1659878417315
GPR[EPVS]-1659878417315
========
sb.append("| ");
sb.append("] [end line: ");
builder.append(sof.getEndLineno());
builder.append(']');

========
GPR[SPVS]-1659878417317
GPR[SPVAP]-1659878417317
GPR[EPVAP]-1659878418045
GPR[EPVS]-1659878418045
========
sb.append("| ");
builder.append("] [end line: ");
builder.append(sof.getEndLineno());
builder.append(']');

========
GPR[SPVS]-1659878418047
GPR[SPVAP]-1659878418047
GPR[EPVAP]-1659878418776
GPR[EPVS]-1659878418776
========
out.append("] [end line: ");
out.append(sof.getEndLineno());
out.append(']');

========
GPR[SPVS]-1659878418779
GPR[SPVAP]-1659878418779
GPR[EPVAP]-1659878419515
GPR[EPVS]-1659878419515
========
sb.append("] [end line: ");
out.append(sof.getEndLineno());
out.append(']');

========
GPR[SPVS]-1659878419516
GPR[SPVAP]-1659878419516
GPR[EPVAP]-1659878420249
GPR[EPVS]-1659878420249
========
out.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878420250
GPR[SPVAP]-1659878420250
GPR[EPVAP]-1659878420983
GPR[EPVS]-1659878420983
========
sb.append("] [end line: ");
out.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878420984
GPR[SPVAP]-1659878420984
GPR[EPVAP]-1659878421746
GPR[EPVS]-1659878421746
========
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
out.append(']');

========
GPR[SPVS]-1659878421747
GPR[SPVAP]-1659878421747
GPR[EPVAP]-1659878422475
GPR[EPVS]-1659878422475
========
traverseNodes(next);
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878422476
GPR[SPVAP]-1659878422476
GPR[EPVAP]-1659878423231
GPR[EPVS]-1659878423231
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878423232
GPR[SPVAP]-1659878423232
GPR[EPVAP]-1659878423971
GPR[EPVS]-1659878423971
========
result.append("] [end line: ");
result.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878423973
GPR[SPVAP]-1659878423973
GPR[EPVAP]-1659878424697
GPR[EPVS]-1659878424697
========
result.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878424699
GPR[SPVAP]-1659878424699
GPR[EPVAP]-1659878425445
GPR[EPVS]-1659878425445
========
sb.append("] [end line: ");
result.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878425446
GPR[SPVAP]-1659878425446
GPR[EPVAP]-1659878426220
GPR[EPVS]-1659878426220
========
initCodeSourceBuilder.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878426222
GPR[SPVAP]-1659878426222
GPR[EPVAP]-1659878426947
GPR[EPVS]-1659878426947
========
debugLog_.append("] [end line: ");
debugLog_.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878426948
GPR[SPVAP]-1659878426948
GPR[EPVAP]-1659878427671
GPR[EPVS]-1659878427671
========
debugLog_.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878427672
GPR[SPVAP]-1659878427672
GPR[EPVAP]-1659878428404
GPR[EPVS]-1659878428404
========
sb.append("] [end line: ");
debugLog_.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878428406
GPR[SPVAP]-1659878428406
GPR[EPVAP]-1659878429166
GPR[EPVS]-1659878429166
========
message.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878429167
GPR[SPVAP]-1659878429167
GPR[EPVAP]-1659878429899
GPR[EPVS]-1659878429899
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878429901
GPR[SPVAP]-1659878429901
GPR[EPVAP]-1659878430640
GPR[EPVS]-1659878430640
========
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
start=COLUMN_BITS+1;
sb.append(']');

========
GPR[SPVS]-1659878430642
GPR[SPVAP]-1659878430642
GPR[EPVAP]-1659878431391
GPR[EPVS]-1659878431391
========
paths.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878431392
GPR[SPVAP]-1659878431392
GPR[EPVAP]-1659878432144
GPR[EPVS]-1659878432144
========
COLUMN_BITS++;
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878432146
GPR[SPVAP]-1659878432146
GPR[EPVAP]-1659878432883
GPR[EPVS]-1659878432883
========
sb.update("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878432885
GPR[SPVAP]-1659878432885
GPR[EPVAP]-1659878433609
GPR[EPVS]-1659878433609
========
code.append("] [end line: ");
code.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878433611
GPR[SPVAP]-1659878433611
GPR[EPVAP]-1659878434333
GPR[EPVS]-1659878434333
========
code.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878434335
GPR[SPVAP]-1659878434335
GPR[EPVAP]-1659878435069
GPR[EPVS]-1659878435069
========
sb.append("] [end line: ");
code.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878435070
GPR[SPVAP]-1659878435070
GPR[EPVAP]-1659878435804
GPR[EPVS]-1659878435804
========
if(null==sb){
return next.cloneTree();
}
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878435806
GPR[SPVAP]-1659878435806
GPR[EPVAP]-1659878436536
GPR[EPVS]-1659878436536
========
number-=L;
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878436539
GPR[SPVAP]-1659878436539
GPR[EPVAP]-1659878437287
GPR[EPVS]-1659878437287
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878437289
GPR[SPVAP]-1659878437289
GPR[EPVAP]-1659878438043
GPR[EPVS]-1659878438043
========
maybeEndStatement();
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878438045
GPR[SPVAP]-1659878438045
GPR[EPVAP]-1659878438770
GPR[EPVS]-1659878438770
========
if(str.length()==0){
return ;
}
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878438772
GPR[SPVAP]-1659878438772
GPR[EPVAP]-1659878439510
GPR[EPVS]-1659878439510
========
case '\r' :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878439512
GPR[SPVAP]-1659878439512
GPR[EPVAP]-1659878440088
GPR[EPVS]-1659878440088
========
appendInferredPaths(str);
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878440091
GPR[SPVAP]-1659878440091
GPR[EPVAP]-1659878440844
GPR[EPVS]-1659878440844
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878440846
GPR[SPVAP]-1659878440846
GPR[EPVAP]-1659878441576
GPR[EPVS]-1659878441576
========
case '\"' :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878441577
GPR[SPVAP]-1659878441577
GPR[EPVAP]-1659878442147
GPR[EPVS]-1659878442147
========
case '>' :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878442149
GPR[SPVAP]-1659878442149
GPR[EPVAP]-1659878442741
GPR[EPVS]-1659878442741
========
appendInferredPaths(getExportedPath());
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878442742
GPR[SPVAP]-1659878442742
GPR[EPVAP]-1659878443477
GPR[EPVS]-1659878443477
========
sb.multiply("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878443479
GPR[SPVAP]-1659878443479
GPR[EPVAP]-1659878444208
GPR[EPVS]-1659878444208
========
sb.append("] [end line: ");
sb.multiply(sof.getEndLineno());
sb.multiply(']');

========
GPR[SPVS]-1659878444215
GPR[SPVAP]-1659878444215
GPR[EPVAP]-1659878444963
GPR[EPVS]-1659878444963
========
sb.append("] [end line: ");
sb.multiply(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878444964
GPR[SPVAP]-1659878444964
GPR[EPVAP]-1659878445712
GPR[EPVS]-1659878445712
========
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.multiply(']');

========
GPR[SPVS]-1659878445714
GPR[SPVAP]-1659878445714
GPR[EPVAP]-1659878446443
GPR[EPVS]-1659878446443
========
sb.append("] [end line: ");
if(COLUMN_BITS==COLUMN_BITS)break;
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878446444
GPR[SPVAP]-1659878446444
GPR[EPVAP]-1659878447192
GPR[EPVS]-1659878447192
========
sb.append("] [end line: ");
sb.append(sof.getEndLineno());
this.sb=new StringBuilder();
sb.append(']');

========
GPR[SPVS]-1659878447194
GPR[SPVAP]-1659878447194
GPR[EPVAP]-1659878447930
GPR[EPVS]-1659878447930
========
case Token.GET :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878447932
GPR[SPVAP]-1659878447932
GPR[EPVAP]-1659878448507
GPR[EPVS]-1659878448507
========
case Token.RC :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878448508
GPR[SPVAP]-1659878448508
GPR[EPVAP]-1659878449084
GPR[EPVS]-1659878449084
========
case FUNCTION_END :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878449085
GPR[SPVAP]-1659878449085
GPR[EPVAP]-1659878449678
GPR[EPVS]-1659878449678
========
case Token.WHILE :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878449680
GPR[SPVAP]-1659878449680
GPR[EPVAP]-1659878450255
GPR[EPVS]-1659878450255
========
default :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878450256
GPR[SPVAP]-1659878450256
GPR[EPVAP]-1659878450839
GPR[EPVS]-1659878450839
========
case Token.FALSE :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878450840
GPR[SPVAP]-1659878450840
GPR[EPVAP]-1659878451433
GPR[EPVS]-1659878451433
========
case Token.THIS :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878451434
GPR[SPVAP]-1659878451434
GPR[EPVAP]-1659878452013
GPR[EPVS]-1659878452013
========
case Token.RB :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878452014
GPR[SPVAP]-1659878452014
GPR[EPVAP]-1659878452598
GPR[EPVS]-1659878452598
========
case Token.NEW :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878452601
GPR[SPVAP]-1659878452601
GPR[EPVAP]-1659878453176
GPR[EPVS]-1659878453176
========
case Token.IF :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878453178
GPR[SPVAP]-1659878453178
GPR[EPVAP]-1659878453750
GPR[EPVS]-1659878453750
========
case Token.FOR :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878453751
GPR[SPVAP]-1659878453751
GPR[EPVAP]-1659878454327
GPR[EPVS]-1659878454327
========
case Token.WITH :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878454329
GPR[SPVAP]-1659878454329
GPR[EPVAP]-1659878454904
GPR[EPVS]-1659878454904
========
case Token.DO :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878454905
GPR[SPVAP]-1659878454905
GPR[EPVAP]-1659878455486
GPR[EPVS]-1659878455486
========
case Token.CATCH :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878455488
GPR[SPVAP]-1659878455488
GPR[EPVAP]-1659878456061
GPR[EPVS]-1659878456061
========
case Token.THROW :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878456063
GPR[SPVAP]-1659878456063
GPR[EPVAP]-1659878456636
GPR[EPVS]-1659878456636
========
case Token.DEFAULT :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878456638
GPR[SPVAP]-1659878456638
GPR[EPVAP]-1659878457212
GPR[EPVS]-1659878457212
========
case Token.ASSIGN_ADD :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878457214
GPR[SPVAP]-1659878457214
GPR[EPVAP]-1659878457801
GPR[EPVS]-1659878457801
========
case Token.ASSIGN_MUL :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878457803
GPR[SPVAP]-1659878457803
GPR[EPVAP]-1659878458377
GPR[EPVS]-1659878458377
========
case Token.ASSIGN_MOD :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878458379
GPR[SPVAP]-1659878458379
GPR[EPVAP]-1659878458959
GPR[EPVS]-1659878458959
========
case Token.ASSIGN_BITXOR :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878458960
GPR[SPVAP]-1659878458960
GPR[EPVAP]-1659878459541
GPR[EPVS]-1659878459541
========
case Token.ASSIGN_LSH :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878459543
GPR[SPVAP]-1659878459543
GPR[EPVAP]-1659878460123
GPR[EPVS]-1659878460123
========
case Token.ASSIGN_URSH :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878460125
GPR[SPVAP]-1659878460125
GPR[EPVAP]-1659878460706
GPR[EPVS]-1659878460706
========
case Token.OBJECTLIT :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878460707
GPR[SPVAP]-1659878460707
GPR[EPVAP]-1659878461289
GPR[EPVS]-1659878461289
========
case Token.AND :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878461290
GPR[SPVAP]-1659878461291
GPR[EPVAP]-1659878461868
GPR[EPVS]-1659878461868
========
case Token.BITXOR :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878461870
GPR[SPVAP]-1659878461870
GPR[EPVAP]-1659878462445
GPR[EPVS]-1659878462445
========
case Token.SHEQ :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878462447
GPR[SPVAP]-1659878462447
GPR[EPVAP]-1659878463019
GPR[EPVS]-1659878463019
========
case Token.EQ :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878463021
GPR[SPVAP]-1659878463021
GPR[EPVAP]-1659878463597
GPR[EPVS]-1659878463597
========
case Token.LE :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878463598
GPR[SPVAP]-1659878463598
GPR[EPVAP]-1659878464184
GPR[EPVS]-1659878464184
========
case Token.GE :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878464185
GPR[SPVAP]-1659878464185
GPR[EPVAP]-1659878464767
GPR[EPVS]-1659878464767
========
case Token.INSTANCEOF :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878464768
GPR[SPVAP]-1659878464768
GPR[EPVAP]-1659878465342
GPR[EPVS]-1659878465342
========
case Token.RSH :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878465344
GPR[SPVAP]-1659878465344
GPR[EPVAP]-1659878465921
GPR[EPVS]-1659878465921
========
case Token.TYPEOF :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878465922
GPR[SPVAP]-1659878465922
GPR[EPVAP]-1659878466500
GPR[EPVS]-1659878466500
========
case Token.CONST :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878466502
GPR[SPVAP]-1659878466502
GPR[EPVAP]-1659878467111
GPR[EPVS]-1659878467111
========
case Token.BITNOT :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878467112
GPR[SPVAP]-1659878467112
GPR[EPVAP]-1659878467696
GPR[EPVS]-1659878467696
========
case Token.NEG :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878467697
GPR[SPVAP]-1659878467697
GPR[EPVAP]-1659878468284
GPR[EPVS]-1659878468284
========
case Token.DEC :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878468286
GPR[SPVAP]-1659878468286
GPR[EPVAP]-1659878468884
GPR[EPVS]-1659878468884
========
case Token.SUB :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878468886
GPR[SPVAP]-1659878468886
GPR[EPVAP]-1659878469469
GPR[EPVS]-1659878469469
========
case Token.DIV :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878469471
GPR[SPVAP]-1659878469471
GPR[EPVAP]-1659878470046
GPR[EPVS]-1659878470046
========
case Token.COLONCOLON :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878470047
GPR[SPVAP]-1659878470047
GPR[EPVAP]-1659878470623
GPR[EPVS]-1659878470623
========
case Token.DOTQUERY :

sb.append("] [end line: ");
sb.append(sof.getEndLineno());
sb.append(']');

========
GPR[SPVS]-1659878470625
GPR[SPVAP]-1659878470625
GPR[EPVAP]-1659878471201
GPR[EPVS]-1659878471201
GPR[ESUN]-1659878471201
GPR[SSUN]-1659878471201
com.google.javascript.rhino.Node,912
GPR[ESUN]-1659878471556
GPR[SSUN]-1659878471556
com.google.javascript.rhino.Node,914
GPR[ESUN]-1659878471701
GPR[SSUN]-1659878471701
com.google.javascript.rhino.Node,918
GPR[ESUN]-1659878471841
GPR[SSUN]-1659878471841
com.google.javascript.rhino.Node,919
GPR[ESUN]-1659878471996
GPR[SSUN]-1659878471996
com.google.javascript.rhino.Node,920
GPR[ESUN]-1659878472148
GPR[SSUN]-1659878472148
com.google.javascript.rhino.Node,921
GPR[ESUN]-1659878472289
GPR[SSUN]-1659878472289
com.google.javascript.rhino.Node,922
GPR[ESUN]-1659878472440
GPR[SSUN]-1659878472440
com.google.javascript.rhino.Node,926
GPR[ESUN]-1659878472596
GPR[SSUN]-1659878472596
com.google.javascript.rhino.Node,927
GPR[ESUN]-1659878474883
GPR[SSUN]-1659878474883
com.google.javascript.rhino.Node,928
GPR[ESUN]-1659878475033
GPR[SSUN]-1659878475033
com.google.javascript.rhino.Node,929
========
sb.append(propToString(type));
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878476593
GPR[SPVAP]-1659878476593
GPR[EPVAP]-1659878480215
GPR[SPVATF]-1659878480215
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878481290
GPR[EPVS]-1659878481290
========
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");

========
GPR[SPVS]-1659878481292
GPR[SPVAP]-1659878481292
GPR[EPVAP]-1659878482012
GPR[EPVS]-1659878482012
========
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");

========
GPR[SPVS]-1659878482013
GPR[SPVAP]-1659878482013
GPR[EPVAP]-1659878482749
GPR[EPVS]-1659878482749
========
sb.append("] [end line: ");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878482751
GPR[SPVAP]-1659878482751
GPR[EPVAP]-1659878483934
GPR[SPVATF]-1659878483934
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878485035
GPR[EPVS]-1659878485035
========
sb.append(']');
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878485037
GPR[SPVAP]-1659878485037
GPR[EPVAP]-1659878486217
GPR[SPVATF]-1659878486217
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878487311
GPR[EPVS]-1659878487311
========
sb.append("] [end line: ");
sb.append(']');
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878487313
GPR[SPVAP]-1659878487313
GPR[EPVAP]-1659878488489
GPR[SPVATF]-1659878488489
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878489602
GPR[EPVS]-1659878489602
========
sb.append(" - ");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878489604
GPR[SPVAP]-1659878489604
GPR[EPVAP]-1659878490778
GPR[SPVATF]-1659878490778
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878491893
GPR[EPVS]-1659878491893
========
sb.append(error.description);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878491894
GPR[SPVAP]-1659878491894
GPR[EPVAP]-1659878492628
GPR[EPVS]-1659878492628
========
sb.append('\n');
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878492629
GPR[SPVAP]-1659878492630
GPR[EPVAP]-1659878493838
GPR[SPVATF]-1659878493838
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878494924
GPR[EPVS]-1659878494924
========
sb.append(" - ");
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");

========
GPR[SPVS]-1659878494926
GPR[SPVAP]-1659878494926
GPR[EPVAP]-1659878495652
GPR[EPVS]-1659878495652
========
sb.append('\n');
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");

========
GPR[SPVS]-1659878495654
GPR[SPVAP]-1659878495654
GPR[EPVAP]-1659878496411
GPR[EPVS]-1659878496411
========
sb.append(" - ");
sb.append('\n');
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878496412
GPR[SPVAP]-1659878496412
GPR[EPVAP]-1659878497591
GPR[SPVATF]-1659878497591
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878498695
GPR[EPVS]-1659878498695
========
sb.append(" - ");
sb.append('\n');
int type=keys[i];
PropListItem x=lookupProperty(type);
b.append(" [");

========
GPR[SPVS]-1659878498697
GPR[SPVAP]-1659878498697
GPR[EPVAP]-1659878499434
GPR[EPVS]-1659878499434
========
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.add(" [");

========
GPR[SPVS]-1659878499436
GPR[SPVAP]-1659878499436
GPR[EPVAP]-1659878500164
GPR[EPVS]-1659878500164
========
int type=keys[i];
PropListItem x=lookupProperty(type);
debug.append(" [");

========
GPR[SPVS]-1659878500165
GPR[SPVAP]-1659878500165
GPR[EPVAP]-1659878500923
GPR[EPVS]-1659878500923
========
sb.append(a.oldName).append(" => ").append(str).append('\n');
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878500931
GPR[SPVAP]-1659878500931
GPR[EPVAP]-1659878501709
GPR[EPVS]-1659878501709
========
sb.append('.');
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878501710
GPR[SPVAP]-1659878501710
GPR[EPVAP]-1659878502891
GPR[SPVATF]-1659878502891
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878503967
GPR[EPVS]-1659878503967
========
int type=keys[i];
PropListItem x=lookupProperty(type);
coalescedLog.append(" [");

========
GPR[SPVS]-1659878503969
GPR[SPVAP]-1659878503969
GPR[EPVAP]-1659878504706
GPR[EPVS]-1659878504706
========
append('D');
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878504708
GPR[SPVAP]-1659878504708
GPR[EPVAP]-1659878505444
GPR[EPVS]-1659878505444
========
append((char)(serialVersionUID>>48));
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878505446
GPR[SPVAP]-1659878505446
GPR[EPVAP]-1659878506197
GPR[EPVS]-1659878506197
========
append((char)(serialVersionUID>>32));
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878506199
GPR[SPVAP]-1659878506199
GPR[EPVAP]-1659878506953
GPR[EPVS]-1659878506953
========
sb.append(INDENT);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878506955
GPR[SPVAP]-1659878506955
GPR[EPVAP]-1659878507719
GPR[EPVS]-1659878507719
========
sb.append("node [color=lightblue2, style=filled];\n");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878507720
GPR[SPVAP]-1659878507720
GPR[EPVAP]-1659878508915
GPR[SPVATF]-1659878508915
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878510031
GPR[EPVS]-1659878510031
========
sb.append("node [color=lightblue2, style=filled];\n");
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");

========
GPR[SPVS]-1659878510032
GPR[SPVAP]-1659878510032
GPR[EPVAP]-1659878510766
GPR[EPVS]-1659878510766
========
int type=keys[i];
PropListItem x=lookupProperty(type);
debugLog_.append(" [");

========
GPR[SPVS]-1659878510768
GPR[SPVAP]-1659878510768
GPR[EPVAP]-1659878511515
GPR[EPVS]-1659878511515
========
if(str!=null){
new StringBuffer(str).append(sourceName);
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878511517
GPR[SPVAP]-1659878511517
GPR[EPVAP]-1659878512307
GPR[EPVS]-1659878512307
========
int type=keys[i];
PropListItem x=lookupProperty(type);
result.append(" [");

========
GPR[SPVS]-1659878512308
GPR[SPVAP]-1659878512308
GPR[EPVAP]-1659878513062
GPR[EPVS]-1659878513062
========
int type=keys[i];
PropListItem x=lookupProperty(type);
code.append(" [");

========
GPR[SPVS]-1659878513064
GPR[SPVAP]-1659878513064
GPR[EPVAP]-1659878513797
GPR[EPVS]-1659878513797
========
sb.append(str);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878513798
GPR[SPVAP]-1659878513798
GPR[EPVAP]-1659878514525
GPR[EPVS]-1659878514525
========
COLUMN_BITS+=str.length();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878514527
GPR[SPVAP]-1659878514527
GPR[EPVAP]-1659878515312
GPR[EPVS]-1659878515312
========
type=COLUMN_BITS+1;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878515314
GPR[SPVAP]-1659878515314
GPR[EPVAP]-1659878516671
GPR[SPVATF]-1659878516671
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878518280
GPR[EPVS]-1659878518280
========
COLUMN_BITS=str.indexOf('\n',type);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878518281
GPR[SPVAP]-1659878518281
GPR[EPVAP]-1659878519046
GPR[EPVS]-1659878519046
========
type=COLUMN_BITS+1;
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");

========
GPR[SPVS]-1659878519048
GPR[SPVAP]-1659878519048
GPR[EPVAP]-1659878519814
GPR[EPVS]-1659878519814
========
int type=keys[i];
PropListItem x=lookupProperty(type);
message.append(" [");

========
GPR[SPVS]-1659878519816
GPR[SPVAP]-1659878519816
GPR[EPVAP]-1659878520571
GPR[EPVS]-1659878520571
========
int type=keys[i];
PropListItem x=lookupProperty(type);
initCodeSourceBuilder.append(" [");

========
GPR[SPVS]-1659878520573
GPR[SPVAP]-1659878520573
GPR[EPVAP]-1659878521310
GPR[EPVS]-1659878521310
========
if(node.prototypeNames.size()>0){
sb.append("<li>PROTOTYPES: ");
Iterator<String> node.prototypeNames.iterator()=node.prototypeNames.iterator();
while(protoIter.hasNext()){
sb.append(protoIter.next());
if(protoIter.hasNext()){
sb.append(", ");
}
}
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878521312
GPR[SPVAP]-1659878521312
GPR[EPVAP]-1659878521919
GPR[EPVS]-1659878521919
========
sb.append(COLUMN_BITS);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878521920
GPR[SPVAP]-1659878521920
GPR[EPVAP]-1659878523126
GPR[SPVATF]-1659878523126
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878524230
GPR[EPVS]-1659878524230
========
sb.append("| ");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878524232
GPR[SPVAP]-1659878524232
GPR[EPVAP]-1659878525427
GPR[SPVATF]-1659878525427
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878526502
GPR[EPVS]-1659878526502
========
sb.append(COLUMN_BITS);
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");

========
GPR[SPVS]-1659878526504
GPR[SPVAP]-1659878526504
GPR[EPVAP]-1659878527255
GPR[EPVS]-1659878527255
========
sb.append("| ");
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");

========
GPR[SPVS]-1659878527256
GPR[SPVAP]-1659878527256
GPR[EPVAP]-1659878527991
GPR[EPVS]-1659878527991
========
sb.append(COLUMN_BITS);
sb.append("| ");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878527993
GPR[SPVAP]-1659878527993
GPR[EPVAP]-1659878529214
GPR[SPVATF]-1659878529214
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878530300
GPR[EPVS]-1659878530300
========
sb.append(COLUMN_BITS);
sb.append("| ");
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");

========
GPR[SPVS]-1659878530308
GPR[SPVAP]-1659878530308
GPR[EPVAP]-1659878531038
GPR[EPVS]-1659878531038
========
int type=keys[i];
PropListItem x=lookupProperty(type);
out.append(" [");

========
GPR[SPVS]-1659878531039
GPR[SPVAP]-1659878531039
GPR[EPVAP]-1659878531768
GPR[EPVS]-1659878531768
========
int type=keys[i];
PropListItem x=lookupProperty(COLUMN_BITS);
sb.append(" [");

========
GPR[SPVS]-1659878531770
GPR[SPVAP]-1659878531770
GPR[EPVAP]-1659878532978
GPR[SPVATF]-1659878532978
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878534054
GPR[EPVS]-1659878534054
========
if(lookupProperty(COLUMN_BITS)==null){
item=new PropListItem();
item.type=COLUMN_BITS;
item.next=propListHead;
propListHead=item;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878534055
GPR[SPVAP]-1659878534055
GPR[EPVAP]-1659878534808
GPR[EPVS]-1659878534808
========
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.checkState(" [");

========
GPR[SPVS]-1659878534809
GPR[SPVAP]-1659878534809
GPR[EPVAP]-1659878535551
GPR[EPVS]-1659878535551
========
if(sb.length()>0){
sb.append('.');
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878535552
GPR[SPVAP]-1659878535552
GPR[EPVAP]-1659878536714
GPR[SPVATF]-1659878536714
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878537810
GPR[EPVS]-1659878537810
========
if(sb.length()>0){
sb.append('.');
}
sb.append(str);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878537812
GPR[SPVAP]-1659878537812
GPR[EPVAP]-1659878538555
GPR[EPVS]-1659878538555
========
COLUMN_BITS++;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878538557
GPR[SPVAP]-1659878538557
GPR[EPVAP]-1659878539292
GPR[EPVS]-1659878539292
========
sb.append(Long.toHexString(serialVersionUID));
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878539294
GPR[SPVAP]-1659878539294
GPR[EPVAP]-1659878540509
GPR[SPVATF]-1659878540509
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878541590
GPR[EPVS]-1659878541590
========
if(!sb.add(sb.toString())){
encoded+="_"+COLUMN_BITS;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878541592
GPR[SPVAP]-1659878541592
GPR[EPVAP]-1659878542345
GPR[EPVS]-1659878542345
========
if(x==null){
return intValue;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878542347
GPR[SPVAP]-1659878542347
GPR[EPVAP]-1659878543068
GPR[EPVS]-1659878543068
========
int type=keys[i];
PropListItem x=lookupProperty(type);
number-=L;
sb.append(" [");

========
GPR[SPVS]-1659878543069
GPR[SPVAP]-1659878543069
GPR[EPVAP]-1659878543802
GPR[EPVS]-1659878543802
========
if(number<number){
return COLUMN_BITS+1;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878543803
GPR[SPVAP]-1659878543803
GPR[EPVAP]-1659878544529
GPR[EPVS]-1659878544529
========
sb.append(" */\n");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878544531
GPR[SPVAP]-1659878544531
GPR[EPVAP]-1659878545702
GPR[SPVATF]-1659878545702
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878546783
GPR[EPVS]-1659878546783
========
if(x==null){
return null;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878546785
GPR[SPVAP]-1659878546785
GPR[EPVAP]-1659878547510
GPR[EPVS]-1659878547510
========
int type=keys[i];
PropListItem x=lookupProperty(type);
paths.append(" [");

========
GPR[SPVS]-1659878547512
GPR[SPVAP]-1659878547512
GPR[EPVAP]-1659878548231
GPR[EPVS]-1659878548231
========
sb.append("OVERALL STATS<ul>");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878548233
GPR[SPVAP]-1659878548233
GPR[EPVAP]-1659878549420
GPR[SPVATF]-1659878549420
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878550487
GPR[EPVS]-1659878550487
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878550489
GPR[SPVAP]-1659878550489
GPR[EPVAP]-1659878551225
GPR[EPVS]-1659878551225
========
sb.append("TOTAL CLASSES: "+countOf(TriState.TRUE,TriState.BOTH));
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878551226
GPR[SPVAP]-1659878551226
GPR[EPVAP]-1659878551958
GPR[EPVS]-1659878551958
========
sb.append("TOTAL STATIC FUNCTIONS: "+countOf(TriState.FALSE,TriState.BOTH));
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878551959
GPR[SPVAP]-1659878551959
GPR[EPVAP]-1659878552707
GPR[EPVS]-1659878552707
========
x+=str.length();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878552708
GPR[SPVAP]-1659878552708
GPR[EPVAP]-1659878553448
GPR[EPVS]-1659878553448
========
int type=keys[i];
PropListItem x=lookupProperty(type);
if(null==sb){
return next.cloneTree();
}
sb.append(" [");

========
GPR[SPVS]-1659878553450
GPR[SPVAP]-1659878553450
GPR[EPVAP]-1659878554174
GPR[EPVS]-1659878554174
========
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.multiply(" [");

========
GPR[SPVS]-1659878554176
GPR[SPVAP]-1659878554176
GPR[EPVAP]-1659878554930
GPR[EPVS]-1659878554930
========
x=next();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878554932
GPR[SPVAP]-1659878554932
GPR[EPVAP]-1659878555659
GPR[EPVS]-1659878555659
========
addExpr(first,NodeUtil.precedence(type));
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878555661
GPR[SPVAP]-1659878555661
GPR[EPVAP]-1659878556416
GPR[EPVS]-1659878556416
========
int type=keys[i];
PropListItem x=lookupProperty(type);
appendInferredPaths(str);
sb.append(" [");

========
GPR[SPVS]-1659878556418
GPR[SPVAP]-1659878556418
GPR[EPVAP]-1659878557160
GPR[EPVS]-1659878557160
========
int type=keys[i];
PropListItem x=lookupProperty(type);
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append(" [");

========
GPR[SPVS]-1659878557161
GPR[SPVAP]-1659878557161
GPR[EPVAP]-1659878557919
GPR[EPVS]-1659878557919
========
int type=keys[i];
PropListItem x=lookupProperty(type);
str=trimEnd(line);
sb.append(" [");

========
GPR[SPVS]-1659878557921
GPR[SPVAP]-1659878557921
GPR[EPVAP]-1659878558674
GPR[EPVS]-1659878558674
========
x=next();
int type=keys[i];
PropListItem x=lookupProperty(type);
builder.append(" [");

========
GPR[SPVS]-1659878558675
GPR[SPVAP]-1659878558675
GPR[EPVAP]-1659878559411
GPR[EPVS]-1659878559411
========
x=State.SEARCHING_ANNOTATION;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878559413
GPR[SPVAP]-1659878559413
GPR[EPVAP]-1659878560146
GPR[EPVS]-1659878560146
========
if(!getThisSlot().getType().isNone()){
new StringBuilder(32).append("this:");
b.append(getThisSlot().getType().toString());
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878560148
GPR[SPVAP]-1659878560148
GPR[EPVAP]-1659878560890
GPR[EPVS]-1659878560890
========
Preconditions.checkArgument(right.next==null);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878560892
GPR[SPVAP]-1659878560892
GPR[EPVAP]-1659878561624
GPR[EPVS]-1659878561624
========
type=COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878561626
GPR[SPVAP]-1659878561626
GPR[EPVAP]-1659878562805
GPR[SPVATF]-1659878562805
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878563900
GPR[EPVS]-1659878563900
========
parent=null;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878563901
GPR[SPVAP]-1659878563901
GPR[EPVAP]-1659878565067
GPR[SPVATF]-1659878565067
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878566170
GPR[EPVS]-1659878566170
========
x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878566172
GPR[SPVAP]-1659878566172
GPR[EPVAP]-1659878566926
GPR[EPVS]-1659878566926
========
type=COLUMN_BITS;
parent=null;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878566927
GPR[SPVAP]-1659878566927
GPR[EPVAP]-1659878568103
GPR[SPVATF]-1659878568103
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878569187
GPR[EPVS]-1659878569187
========
int type=keys[i];
PropListItem x=lookupProperty(type);
case Token.FALSE :

sb.append(" [");

========
GPR[SPVS]-1659878569189
GPR[SPVAP]-1659878569189
GPR[EPVAP]-1659878569783
GPR[EPVS]-1659878569783
========
case Token.CONTINUE :

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878569784
GPR[SPVAP]-1659878569784
GPR[EPVAP]-1659878570368
GPR[EPVS]-1659878570368
========
if(i==COLUMN_BITS)break;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878570370
GPR[SPVAP]-1659878570370
GPR[EPVAP]-1659878571539
GPR[SPVATF]-1659878571539
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878572668
GPR[EPVS]-1659878572668
========
int type=keys[i];
PropListItem x=lookupProperty(type);
appendInferredPaths(getExportedPath());
sb.append(" [");

========
GPR[SPVS]-1659878572669
GPR[SPVAP]-1659878572669
GPR[EPVAP]-1659878573411
GPR[EPVS]-1659878573411
========
Preconditions.checkArgument(right.next==null,"second new child has existing sibling");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878573412
GPR[SPVAP]-1659878573412
GPR[EPVAP]-1659878574176
GPR[EPVS]-1659878574176
========
type=COLUMN_BITS;
x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878574178
GPR[SPVAP]-1659878574178
GPR[EPVAP]-1659878574905
GPR[EPVS]-1659878574905
========
parent=null;
x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878574906
GPR[SPVAP]-1659878574906
GPR[EPVAP]-1659878575699
GPR[EPVS]-1659878575699
========
type=COLUMN_BITS;
parent=null;
x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878575701
GPR[SPVAP]-1659878575701
GPR[EPVAP]-1659878576457
GPR[EPVS]-1659878576457
========
Preconditions.checkArgument(child.next==null,"new child has existing sibling");
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878576460
GPR[SPVAP]-1659878576460
GPR[EPVAP]-1659878577219
GPR[EPVS]-1659878577219
========
first=x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878577221
GPR[SPVAP]-1659878577221
GPR[EPVAP]-1659878577951
GPR[EPVS]-1659878577951
========
int type=keys[i];
PropListItem x=lookupProperty(type);
compiler.append(" [");

========
GPR[SPVS]-1659878577953
GPR[SPVAP]-1659878577953
GPR[EPVAP]-1659878578683
GPR[EPVS]-1659878578683
========
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.report(" [");

========
GPR[SPVS]-1659878578684
GPR[SPVAP]-1659878578684
GPR[EPVAP]-1659878579423
GPR[EPVS]-1659878579423
========
int type=keys[i];
PropListItem x=lookupProperty(type);
maybeEndStatement();
sb.append(" [");

========
GPR[SPVS]-1659878579425
GPR[SPVAP]-1659878579425
GPR[EPVAP]-1659878580170
GPR[EPVS]-1659878580170
========
int type=keys[i];
PropListItem x=lookupProperty(type);
if(str.length()==0){
return ;
}
sb.append(" [");

========
GPR[SPVS]-1659878580172
GPR[SPVAP]-1659878580172
GPR[EPVAP]-1659878580931
GPR[EPVS]-1659878580931
========
append(str);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878580932
GPR[SPVAP]-1659878580932
GPR[EPVAP]-1659878581659
GPR[EPVS]-1659878581659
========
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.name(" [");

========
GPR[SPVS]-1659878581660
GPR[SPVAP]-1659878581660
GPR[EPVAP]-1659878582401
GPR[EPVS]-1659878582401
========
int type=keys[i];
PropListItem x=lookupProperty(type);
compiler.report(" [");

========
GPR[SPVS]-1659878582403
GPR[SPVAP]-1659878582403
GPR[EPVAP]-1659878583131
GPR[EPVS]-1659878583131
========
Preconditions.checkNotNull(next);
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878583134
GPR[SPVAP]-1659878583134
GPR[EPVAP]-1659878584311
GPR[SPVATF]-1659878584311
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878585404
GPR[EPVS]-1659878585404
========
int type=keys[i];
PropListItem x=lookupProperty(type);
liveSet.append(" [");

========
GPR[SPVS]-1659878585414
GPR[SPVAP]-1659878585414
GPR[EPVAP]-1659878586156
GPR[EPVS]-1659878586156
========
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.or(" [");

========
GPR[SPVS]-1659878586157
GPR[SPVAP]-1659878586157
GPR[EPVAP]-1659878586912
GPR[EPVS]-1659878586912
========
int type=keys[i];
PropListItem x=lookupProperty(type);
globalNames.append(" [");

========
GPR[SPVS]-1659878586916
GPR[SPVAP]-1659878586916
GPR[EPVAP]-1659878587640
GPR[EPVS]-1659878587640
========
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.join(" [");

========
GPR[SPVS]-1659878587643
GPR[SPVAP]-1659878587643
GPR[EPVAP]-1659878588360
GPR[EPVS]-1659878588360
========
if(i==sourcePosition){
try{
if(!fillSourceBuffer()){
break;
}
}catch (IOException ioe) {
  break;
}

i=COLUMN_BITS+COLUMN_BITS;
}
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878588362
GPR[SPVAP]-1659878588362
GPR[EPVAP]-1659878589094
GPR[EPVS]-1659878589094
========
int type=keys[i];
PropListItem x=lookupProperty(type);
--i;
sb.append(" [");

========
GPR[SPVS]-1659878589097
GPR[SPVAP]-1659878589097
GPR[EPVAP]-1659878590277
GPR[SPVATF]-1659878590277
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878591348
GPR[EPVS]-1659878591348
========
int type=keys[i];
PropListItem x=lookupProperty(type);
refInfo.append(" [");

========
GPR[SPVS]-1659878591352
GPR[SPVAP]-1659878591352
GPR[EPVAP]-1659878592087
GPR[EPVS]-1659878592087
========
if(printType&&COLUMN_BITS==1<<COLUMN_BITS)Kit.codeBug();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878592088
GPR[SPVAP]-1659878592088
GPR[EPVAP]-1659878593273
GPR[SPVATF]-1659878593273
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878594365
GPR[EPVS]-1659878594365
========
int type=keys[i];
PropListItem x=lookupProperty(type);
if(type==-1){
return false;
}
sb.append(" [");

========
GPR[SPVS]-1659878594368
GPR[SPVAP]-1659878594368
GPR[EPVAP]-1659878595094
GPR[EPVS]-1659878595094
========
this.sb=new StringBuilder();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878595096
GPR[SPVAP]-1659878595096
GPR[EPVAP]-1659878595821
GPR[EPVS]-1659878595821
========
case FUNCTION_END :

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878595823
GPR[SPVAP]-1659878595823
GPR[EPVAP]-1659878596406
GPR[EPVS]-1659878596406
========
COLUMN_BITS=i;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878596408
GPR[SPVAP]-1659878596408
GPR[EPVAP]-1659878597122
GPR[EPVS]-1659878597122
========
if(printType&&COLUMN_BITS<2)Kit.codeBug();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878597123
GPR[SPVAP]-1659878597123
GPR[EPVAP]-1659878598345
GPR[SPVATF]-1659878598345
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878599427
GPR[EPVS]-1659878599427
========
COLUMN_BITS=i;
if(printType&&COLUMN_BITS<2)Kit.codeBug();
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878599429
GPR[SPVAP]-1659878599429
GPR[EPVAP]-1659878600157
GPR[EPVS]-1659878600157
========
case Token.RC :

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878600159
GPR[SPVAP]-1659878600159
GPR[EPVAP]-1659878600734
GPR[EPVS]-1659878600734
========
int type=keys[i];
PropListItem x=lookupProperty(type);
charToMap.append(" [");

========
GPR[SPVS]-1659878600736
GPR[SPVAP]-1659878600736
GPR[EPVAP]-1659878601461
GPR[EPVS]-1659878601461
========
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.valueOf(" [");

========
GPR[SPVS]-1659878601464
GPR[SPVAP]-1659878601464
GPR[EPVAP]-1659878602236
GPR[EPVS]-1659878602236
========
Preconditions.checkArgument(right.next==null);
type=COLUMN_BITS;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878602238
GPR[SPVAP]-1659878602238
GPR[EPVAP]-1659878602978
GPR[EPVS]-1659878602978
========
Preconditions.checkArgument(right.next==null);
parent=null;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878602980
GPR[SPVAP]-1659878602980
GPR[EPVAP]-1659878603721
GPR[EPVS]-1659878603721
========
Preconditions.checkArgument(right.next==null);
x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878603722
GPR[SPVAP]-1659878603722
GPR[EPVAP]-1659878604449
GPR[EPVS]-1659878604449
========
Preconditions.checkArgument(right.next==null);
type=COLUMN_BITS;
parent=null;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878604450
GPR[SPVAP]-1659878604450
GPR[EPVAP]-1659878605177
GPR[EPVS]-1659878605177
========
Preconditions.checkArgument(right.next==null);
type=COLUMN_BITS;
x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878605178
GPR[SPVAP]-1659878605178
GPR[EPVAP]-1659878605906
GPR[EPVS]-1659878605906
========
Preconditions.checkArgument(right.next==null);
parent=null;
x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878605908
GPR[SPVAP]-1659878605908
GPR[EPVAP]-1659878606644
GPR[EPVS]-1659878606644
========
Preconditions.checkArgument(right.next==null);
type=COLUMN_BITS;
parent=null;
x=next;
int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878606646
GPR[SPVAP]-1659878606646
GPR[EPVAP]-1659878607383
GPR[EPVS]-1659878607383
========
case '\"' :

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878607385
GPR[SPVAP]-1659878607385
GPR[EPVAP]-1659878607958
GPR[EPVS]-1659878607958
========
case '>' :

int type=keys[i];
PropListItem x=lookupProperty(type);
sb.append(" [");

========
GPR[SPVS]-1659878607960
GPR[SPVAP]-1659878607960
GPR[EPVAP]-1659878608537
GPR[EPVS]-1659878608537
========
int type=keys[i];
PropListItem x=lookupProperty(type);
err.append(" [");

========
GPR[SPVS]-1659878608539
GPR[SPVAP]-1659878608539
GPR[EPVAP]-1659878609264
GPR[EPVS]-1659878609264
========
int type=keys[i];
PropListItem x=lookupProperty(type);
if(str==null){
tokenname="---";
}
sb.append(" [");

========
GPR[SPVS]-1659878609266
GPR[SPVAP]-1659878609266
GPR[EPVAP]-1659878610001
GPR[EPVS]-1659878610001
GPR[ESUN]-1659878610002
GPR[SSUN]-1659878610002
com.google.javascript.rhino.Node,930
GPR[ESUN]-1659878610305
GPR[SSUN]-1659878610305
com.google.javascript.rhino.Node,931
========
sb.append(": ");
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878611647
GPR[SPVAP]-1659878611647
GPR[EPVAP]-1659878615189
GPR[SPVATF]-1659878615189
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878616279
GPR[EPVS]-1659878616279
========
PropListItem x=lookupProperty(type);
builder.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878616280
GPR[SPVAP]-1659878616280
GPR[EPVAP]-1659878617009
GPR[EPVS]-1659878617009
========
PropListItem x=lookupProperty(type);
builder.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878617011
GPR[SPVAP]-1659878617011
GPR[EPVAP]-1659878617737
GPR[EPVS]-1659878617737
========
PropListItem x=lookupProperty(type);
sb.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878617739
GPR[SPVAP]-1659878617739
GPR[EPVAP]-1659878618469
GPR[EPVS]-1659878618469
========
sb.append(" {\n");
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878618471
GPR[SPVAP]-1659878618471
GPR[EPVAP]-1659878619663
GPR[SPVATF]-1659878619663
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878620774
GPR[EPVS]-1659878620774
========
sb.append(INDENT);
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878620776
GPR[SPVAP]-1659878620776
GPR[EPVAP]-1659878621505
GPR[EPVS]-1659878621505
========
sb.append("node [color=lightblue2, style=filled];\n");
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878621507
GPR[SPVAP]-1659878621507
GPR[EPVAP]-1659878622679
GPR[SPVATF]-1659878622679
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878623755
GPR[EPVS]-1659878623755
========
sb.append(" {\n");
sb.append("node [color=lightblue2, style=filled];\n");
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878623757
GPR[SPVAP]-1659878623757
GPR[EPVAP]-1659878624943
GPR[SPVATF]-1659878624943
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878626016
GPR[EPVS]-1659878626016
========
sb.append(']');
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878626018
GPR[SPVAP]-1659878626018
GPR[EPVAP]-1659878627193
GPR[SPVATF]-1659878627193
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878628290
GPR[EPVS]-1659878628290
========
PropListItem x=lookupProperty(type);
coalescedLog.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878628291
GPR[SPVAP]-1659878628291
GPR[EPVAP]-1659878629057
GPR[EPVS]-1659878629057
========
PropListItem x=lookupProperty(type);
b.append(" [");
b.append(propToString(type));

========
GPR[SPVS]-1659878629060
GPR[SPVAP]-1659878629060
GPR[EPVAP]-1659878629793
GPR[EPVS]-1659878629793
========
PropListItem x=lookupProperty(type);
b.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878629795
GPR[SPVAP]-1659878629795
GPR[EPVAP]-1659878630536
GPR[EPVS]-1659878630536
========
PropListItem x=lookupProperty(type);
sb.append(" [");
b.append(propToString(type));

========
GPR[SPVS]-1659878630538
GPR[SPVAP]-1659878630538
GPR[EPVAP]-1659878631262
GPR[EPVS]-1659878631262
========
sb.append(error.description);
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878631263
GPR[SPVAP]-1659878631263
GPR[EPVAP]-1659878632009
GPR[EPVS]-1659878632009
========
sb.append('\n');
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878632011
GPR[SPVAP]-1659878632011
GPR[EPVAP]-1659878633243
GPR[SPVATF]-1659878633243
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878634356
GPR[EPVS]-1659878634356
========
PropListItem x=lookupProperty(type);
sb.append(" [");
assignmentLog.append(propToString(type));

========
GPR[SPVS]-1659878634359
GPR[SPVAP]-1659878634359
GPR[EPVAP]-1659878635096
GPR[EPVS]-1659878635096
========
PropListItem x=lookupProperty(type);
sb.add(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878635098
GPR[SPVAP]-1659878635098
GPR[EPVAP]-1659878635827
GPR[EPVS]-1659878635827
========
PropListItem x=lookupProperty(type);
debug.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878635829
GPR[SPVAP]-1659878635829
GPR[EPVAP]-1659878636650
GPR[EPVS]-1659878636650
========
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.info(propToString(type));

========
GPR[SPVS]-1659878636652
GPR[SPVAP]-1659878636652
GPR[EPVAP]-1659878637397
GPR[EPVS]-1659878637397
========
sb.append(type);
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878637406
GPR[SPVAP]-1659878637406
GPR[EPVAP]-1659878638578
GPR[SPVATF]-1659878638578
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878639673
GPR[EPVS]-1659878639673
========
sb.append("| ");
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878639675
GPR[SPVAP]-1659878639675
GPR[EPVAP]-1659878640872
GPR[SPVATF]-1659878640872
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878641976
GPR[EPVS]-1659878641976
========
sb.append(type);
PropListItem x=lookupProperty(type);
builder.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878641978
GPR[SPVAP]-1659878641978
GPR[EPVAP]-1659878642717
GPR[EPVS]-1659878642717
========
sb.append("| ");
PropListItem x=lookupProperty(type);
builder.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878642718
GPR[SPVAP]-1659878642718
GPR[EPVAP]-1659878643444
GPR[EPVS]-1659878643444
========
sb.append(type);
PropListItem x=lookupProperty(type);
sb.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878643445
GPR[SPVAP]-1659878643445
GPR[EPVAP]-1659878644179
GPR[EPVS]-1659878644179
========
sb.append("| ");
PropListItem x=lookupProperty(type);
sb.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878644180
GPR[SPVAP]-1659878644180
GPR[EPVAP]-1659878644929
GPR[EPVS]-1659878644929
========
sb.append(type);
sb.append("| ");
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878644930
GPR[SPVAP]-1659878644930
GPR[EPVAP]-1659878646102
GPR[SPVATF]-1659878646102
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878647176
GPR[EPVS]-1659878647176
========
sb.append(type);
PropListItem x=lookupProperty(type);
builder.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878647179
GPR[SPVAP]-1659878647179
GPR[EPVAP]-1659878647965
GPR[EPVS]-1659878647965
========
sb.append("| ");
PropListItem x=lookupProperty(type);
builder.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878647966
GPR[SPVAP]-1659878647966
GPR[EPVAP]-1659878648715
GPR[EPVS]-1659878648715
========
sb.append(type);
sb.append("| ");
PropListItem x=lookupProperty(type);
builder.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878648717
GPR[SPVAP]-1659878648717
GPR[EPVAP]-1659878649459
GPR[EPVS]-1659878649459
========
sb.append(type);
sb.append("| ");
PropListItem x=lookupProperty(type);
sb.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878649461
GPR[SPVAP]-1659878649461
GPR[EPVAP]-1659878650210
GPR[EPVS]-1659878650210
========
sb.append(type);
sb.append("| ");
PropListItem x=lookupProperty(type);
builder.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878650211
GPR[SPVAP]-1659878650211
GPR[EPVAP]-1659878650935
GPR[EPVS]-1659878650935
========
append('D');
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878650937
GPR[SPVAP]-1659878650937
GPR[EPVAP]-1659878651665
GPR[EPVS]-1659878651665
========
append((char)(serialVersionUID>>48));
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878651667
GPR[SPVAP]-1659878651667
GPR[EPVAP]-1659878652394
GPR[EPVS]-1659878652394
========
append((char)(serialVersionUID>>32));
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878652396
GPR[SPVAP]-1659878652396
GPR[EPVAP]-1659878653121
GPR[EPVS]-1659878653121
========
traverseNodes(next);
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878653123
GPR[SPVAP]-1659878653123
GPR[EPVAP]-1659878653861
GPR[EPVS]-1659878653861
========
PropListItem x=lookupProperty(type);
out.append(" [");
out.append(propToString(type));

========
GPR[SPVS]-1659878653863
GPR[SPVAP]-1659878653863
GPR[EPVAP]-1659878654606
GPR[EPVS]-1659878654606
========
PropListItem x=lookupProperty(type);
out.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878654607
GPR[SPVAP]-1659878654607
GPR[EPVAP]-1659878655338
GPR[EPVS]-1659878655338
========
PropListItem x=lookupProperty(type);
sb.append(" [");
out.append(propToString(type));

========
GPR[SPVS]-1659878655339
GPR[SPVAP]-1659878655339
GPR[EPVAP]-1659878656074
GPR[EPVS]-1659878656074
========
PropListItem x=lookupProperty(type);
result.append(" [");
result.append(propToString(type));

========
GPR[SPVS]-1659878656076
GPR[SPVAP]-1659878656076
GPR[EPVAP]-1659878656849
GPR[EPVS]-1659878656849
========
PropListItem x=lookupProperty(type);
result.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878656850
GPR[SPVAP]-1659878656850
GPR[EPVAP]-1659878657574
GPR[EPVS]-1659878657574
========
PropListItem x=lookupProperty(type);
sb.append(" [");
result.append(propToString(type));

========
GPR[SPVS]-1659878657576
GPR[SPVAP]-1659878657576
GPR[EPVAP]-1659878658315
GPR[EPVS]-1659878658315
========
sb.append("TOTAL STATIC FUNCTIONS: "+countOf(TriState.FALSE,TriState.BOTH));
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878658317
GPR[SPVAP]-1659878658317
GPR[EPVAP]-1659878659057
GPR[EPVS]-1659878659057
========
PropListItem x=lookupProperty(type);
debugLog_.append(" [");
debugLog_.append(propToString(type));

========
GPR[SPVS]-1659878659058
GPR[SPVAP]-1659878659058
GPR[EPVAP]-1659878659794
GPR[EPVS]-1659878659794
========
PropListItem x=lookupProperty(type);
debugLog_.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878659795
GPR[SPVAP]-1659878659795
GPR[EPVAP]-1659878660534
GPR[EPVS]-1659878660534
========
PropListItem x=lookupProperty(type);
sb.append(" [");
debugLog_.append(propToString(type));

========
GPR[SPVS]-1659878660535
GPR[SPVAP]-1659878660535
GPR[EPVAP]-1659878661275
GPR[EPVS]-1659878661275
========
PropListItem x=lookupProperty(type);
initCodeSourceBuilder.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878661276
GPR[SPVAP]-1659878661276
GPR[EPVAP]-1659878662000
GPR[EPVS]-1659878662000
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878662002
GPR[SPVAP]-1659878662002
GPR[EPVAP]-1659878662741
GPR[EPVS]-1659878662741
========
PropListItem x=lookupProperty(type);
message.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878662743
GPR[SPVAP]-1659878662743
GPR[EPVAP]-1659878663473
GPR[EPVS]-1659878663473
========
type=COLUMN_BITS+1;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878663475
GPR[SPVAP]-1659878663475
GPR[EPVAP]-1659878664689
GPR[SPVATF]-1659878664689
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878665779
GPR[EPVS]-1659878665779
========
COLUMN_BITS=str.indexOf('\n',type);
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878665780
GPR[SPVAP]-1659878665780
GPR[EPVAP]-1659878666507
GPR[EPVS]-1659878666507
========
type=COLUMN_BITS+1;
PropListItem x=lookupProperty(type);
builder.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878666509
GPR[SPVAP]-1659878666509
GPR[EPVAP]-1659878667243
GPR[EPVS]-1659878667243
========
type=COLUMN_BITS+1;
PropListItem x=lookupProperty(type);
sb.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878667245
GPR[SPVAP]-1659878667245
GPR[EPVAP]-1659878667985
GPR[EPVS]-1659878667985
========
type=COLUMN_BITS+1;
PropListItem x=lookupProperty(type);
builder.append(" [");
builder.append(propToString(type));

========
GPR[SPVS]-1659878667987
GPR[SPVAP]-1659878667987
GPR[EPVAP]-1659878668728
GPR[EPVS]-1659878668728
========
PropListItem x=lookupProperty(type);
sb.checkState(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878668730
GPR[SPVAP]-1659878668730
GPR[EPVAP]-1659878669457
GPR[EPVS]-1659878669457
========
sb.append(str);
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878669459
GPR[SPVAP]-1659878669459
GPR[EPVAP]-1659878670189
GPR[EPVS]-1659878670189
========
PropListItem x=lookupProperty(type);
paths.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878670191
GPR[SPVAP]-1659878670191
GPR[EPVAP]-1659878670925
GPR[EPVS]-1659878670925
========
PropListItem x=lookupProperty(type);
sb.update(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878670927
GPR[SPVAP]-1659878670927
GPR[EPVAP]-1659878671661
GPR[EPVS]-1659878671661
========
sb.append(Long.toHexString(serialVersionUID));
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878671662
GPR[SPVAP]-1659878671662
GPR[EPVAP]-1659878672858
GPR[SPVATF]-1659878672858
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878673923
GPR[EPVS]-1659878673923
========
COLUMN_BITS++;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878673925
GPR[SPVAP]-1659878673925
GPR[EPVAP]-1659878674653
GPR[EPVS]-1659878674653
========
PropListItem x=lookupProperty(type);
code.append(" [");
code.append(propToString(type));

========
GPR[SPVS]-1659878674655
GPR[SPVAP]-1659878674655
GPR[EPVAP]-1659878675385
GPR[EPVS]-1659878675385
========
PropListItem x=lookupProperty(type);
code.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878675386
GPR[SPVAP]-1659878675386
GPR[EPVAP]-1659878676127
GPR[EPVS]-1659878676127
========
PropListItem x=lookupProperty(type);
sb.append(" [");
code.append(propToString(type));

========
GPR[SPVS]-1659878676129
GPR[SPVAP]-1659878676129
GPR[EPVAP]-1659878676859
GPR[EPVS]-1659878676859
========
COLUMN_BITS+=str.length();
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878676860
GPR[SPVAP]-1659878676860
GPR[EPVAP]-1659878677608
GPR[EPVS]-1659878677608
========
PropListItem x=lookupProperty(type);
if(null==sb){
return next.cloneTree();
}
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878677610
GPR[SPVAP]-1659878677610
GPR[EPVAP]-1659878678345
GPR[EPVS]-1659878678345
========
PropListItem x=lookupProperty(type);
number-=L;
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878678347
GPR[SPVAP]-1659878678347
GPR[EPVAP]-1659878679086
GPR[EPVS]-1659878679086
========
if(number<number){
return COLUMN_BITS+1;
}
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878679087
GPR[SPVAP]-1659878679087
GPR[EPVAP]-1659878679843
GPR[EPVS]-1659878679843
========
PropListItem x=lookupProperty(type);
maybeEndStatement();
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878679845
GPR[SPVAP]-1659878679845
GPR[EPVAP]-1659878680654
GPR[EPVS]-1659878680654
========
PropListItem x=lookupProperty(type);
if(str.length()==0){
return ;
}
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878680659
GPR[SPVAP]-1659878680659
GPR[EPVAP]-1659878681837
GPR[EPVS]-1659878681837
========
PropListItem x=lookupProperty(type);
appendInferredPaths(str);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878681840
GPR[SPVAP]-1659878681840
GPR[EPVAP]-1659878682594
GPR[EPVS]-1659878682594
========
PropListItem x=lookupProperty(type);
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878682596
GPR[SPVAP]-1659878682596
GPR[EPVAP]-1659878683360
GPR[EPVS]-1659878683360
========
PropListItem x=lookupProperty(type);
appendInferredPaths(getExportedPath());
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878683361
GPR[SPVAP]-1659878683361
GPR[EPVAP]-1659878684100
GPR[EPVS]-1659878684100
========
if(lookupProperty(type)==null){
item=new PropListItem();
item.type=type;
item.next=propListHead;
propListHead=item;
}
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878684101
GPR[SPVAP]-1659878684101
GPR[EPVAP]-1659878684849
GPR[EPVS]-1659878684849
========
addExpr(first,NodeUtil.precedence(type));
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878684851
GPR[SPVAP]-1659878684851
GPR[EPVAP]-1659878685607
GPR[EPVS]-1659878685607
========
PropListItem x=lookupProperty(type);
case Token.FALSE :

sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878685609
GPR[SPVAP]-1659878685609
GPR[EPVAP]-1659878686187
GPR[EPVS]-1659878686187
========
case Token.CONTINUE :

PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878686188
GPR[SPVAP]-1659878686188
GPR[EPVAP]-1659878686768
GPR[EPVS]-1659878686768
========
PropListItem x=lookupProperty(type);
sb.multiply(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878686770
GPR[SPVAP]-1659878686770
GPR[EPVAP]-1659878687507
GPR[EPVS]-1659878687507
========
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.multiply(propToString(type));

========
GPR[SPVS]-1659878687510
GPR[SPVAP]-1659878687510
GPR[EPVAP]-1659878688241
GPR[EPVS]-1659878688241
========
PropListItem x=lookupProperty(type);
sb.append(" [");
if(i==COLUMN_BITS)break;
sb.append(propToString(type));

========
GPR[SPVS]-1659878688242
GPR[SPVAP]-1659878688242
GPR[EPVAP]-1659878689444
GPR[SPVATF]-1659878689444
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878690530
GPR[EPVS]-1659878690530
========
case '\"' :

PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878690532
GPR[SPVAP]-1659878690532
GPR[EPVAP]-1659878691119
GPR[EPVS]-1659878691119
========
case '>' :

PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878691121
GPR[SPVAP]-1659878691121
GPR[EPVAP]-1659878691708
GPR[EPVS]-1659878691708
========
if(x==null){
return intValue;
}
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878691710
GPR[SPVAP]-1659878691710
GPR[EPVAP]-1659878692443
GPR[EPVS]-1659878692443
========
if(x==null){
return null;
}
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878692445
GPR[SPVAP]-1659878692445
GPR[EPVAP]-1659878693186
GPR[EPVS]-1659878693186
========
this.sb=new StringBuilder();
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878693187
GPR[SPVAP]-1659878693187
GPR[EPVAP]-1659878693929
GPR[EPVS]-1659878693929
========
type=COLUMN_BITS;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878693931
GPR[SPVAP]-1659878693931
GPR[EPVAP]-1659878695108
GPR[SPVATF]-1659878695108
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878696188
GPR[EPVS]-1659878696188
========
parent=null;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878696190
GPR[SPVAP]-1659878696190
GPR[EPVAP]-1659878697361
GPR[SPVATF]-1659878697361
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878698449
GPR[EPVS]-1659878698449
========
first=next;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878698451
GPR[SPVAP]-1659878698451
GPR[EPVAP]-1659878699637
GPR[SPVATF]-1659878699637
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878700713
GPR[EPVS]-1659878700713
========
type=COLUMN_BITS;
parent=null;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878700714
GPR[SPVAP]-1659878700714
GPR[EPVAP]-1659878701911
GPR[SPVATF]-1659878701911
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878703019
GPR[EPVS]-1659878703019
========
type=COLUMN_BITS;
first=next;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878703021
GPR[SPVAP]-1659878703021
GPR[EPVAP]-1659878704224
GPR[SPVATF]-1659878704224
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878705307
GPR[EPVS]-1659878705307
========
parent=null;
first=next;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878705309
GPR[SPVAP]-1659878705309
GPR[EPVAP]-1659878706489
GPR[SPVATF]-1659878706489
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878707597
GPR[EPVS]-1659878707597
========
type=COLUMN_BITS;
parent=null;
first=next;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878707598
GPR[SPVAP]-1659878707598
GPR[EPVAP]-1659878708785
GPR[SPVATF]-1659878708785
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878709887
GPR[EPVS]-1659878709887
========
first=last=next;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878709890
GPR[SPVAP]-1659878709890
GPR[EPVAP]-1659878711078
GPR[SPVATF]-1659878711078
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878712168
GPR[EPVS]-1659878712168
========
type=COLUMN_BITS;
first=last=next;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878712169
GPR[SPVAP]-1659878712169
GPR[EPVAP]-1659878713341
GPR[SPVATF]-1659878713341
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878714408
GPR[EPVS]-1659878714408
========
parent=null;
first=last=next;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878714410
GPR[SPVAP]-1659878714410
GPR[EPVAP]-1659878715581
GPR[SPVATF]-1659878715581
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878716660
GPR[EPVS]-1659878716660
========
type=COLUMN_BITS;
parent=null;
first=last=next;
PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878716662
GPR[SPVAP]-1659878716662
GPR[EPVAP]-1659878717843
GPR[SPVATF]-1659878717843
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878718959
GPR[EPVS]-1659878718959
========
PropListItem x=lookupProperty(type);
compiler.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878718960
GPR[SPVAP]-1659878718960
GPR[EPVAP]-1659878719690
GPR[EPVS]-1659878719691
========
PropListItem x=lookupProperty(type);
sb.report(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878719692
GPR[SPVAP]-1659878719692
GPR[EPVAP]-1659878720449
GPR[EPVS]-1659878720449
========
PropListItem x=lookupProperty(type);
sb.valueOf(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878720452
GPR[SPVAP]-1659878720452
GPR[EPVAP]-1659878721181
GPR[EPVS]-1659878721181
========
case Token.RC :

PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878721183
GPR[SPVAP]-1659878721183
GPR[EPVAP]-1659878721759
GPR[EPVS]-1659878721759
========
PropListItem x=lookupProperty(type);
case Token.GET :

sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878721760
GPR[SPVAP]-1659878721760
GPR[EPVAP]-1659878722340
GPR[EPVS]-1659878722340
========
case FUNCTION_END :

PropListItem x=lookupProperty(type);
sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878722343
GPR[SPVAP]-1659878722343
GPR[EPVAP]-1659878722923
GPR[EPVS]-1659878722923
========
PropListItem x=lookupProperty(type);
case Token.WHILE :

sb.append(" [");
sb.append(propToString(type));

========
GPR[SPVS]-1659878722926
GPR[SPVAP]-1659878722926
GPR[EPVAP]-1659878723510
GPR[EPVS]-1659878723510
GPR[ESUN]-1659878723510
GPR[SSUN]-1659878723510
com.google.javascript.rhino.Node,932
========
sb.append(']');
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878725005
GPR[SPVAP]-1659878725005
GPR[EPVAP]-1659878728612
GPR[SPVATF]-1659878728612
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878729710
GPR[EPVS]-1659878729710
========
coalescedLog.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878729711
GPR[SPVAP]-1659878729711
GPR[EPVAP]-1659878730442
GPR[EPVS]-1659878730442
========
b.append(" [");
b.append(propToString(type));
b.append(": ");

========
GPR[SPVS]-1659878730444
GPR[SPVAP]-1659878730444
GPR[EPVAP]-1659878731175
GPR[EPVS]-1659878731175
========
sb.append(" [");
b.append(propToString(type));
b.append(": ");

========
GPR[SPVS]-1659878731177
GPR[SPVAP]-1659878731177
GPR[EPVAP]-1659878731911
GPR[EPVS]-1659878731911
========
b.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878731912
GPR[SPVAP]-1659878731912
GPR[EPVAP]-1659878732644
GPR[EPVS]-1659878732644
========
sb.append(" [");
b.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878732646
GPR[SPVAP]-1659878732646
GPR[EPVAP]-1659878733377
GPR[EPVS]-1659878733377
========
sb.append(" [");
sb.append(propToString(type));
b.append(": ");

========
GPR[SPVS]-1659878733379
GPR[SPVAP]-1659878733379
GPR[EPVAP]-1659878734114
GPR[EPVS]-1659878734114
========
sb.append('\n');
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878734115
GPR[SPVAP]-1659878734115
GPR[EPVAP]-1659878735300
GPR[SPVATF]-1659878735300
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878736382
GPR[EPVS]-1659878736382
========
builder.append(" [");
builder.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878736383
GPR[SPVAP]-1659878736383
GPR[EPVAP]-1659878737171
GPR[EPVS]-1659878737171
========
builder.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878737173
GPR[SPVAP]-1659878737173
GPR[EPVAP]-1659878737953
GPR[EPVS]-1659878737953
========
sb.append(" [");
builder.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878737955
GPR[SPVAP]-1659878737955
GPR[EPVAP]-1659878738692
GPR[EPVS]-1659878738692
========
b.append(" [");
b.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878738694
GPR[SPVAP]-1659878738694
GPR[EPVAP]-1659878739446
GPR[EPVS]-1659878739446
========
sb.append(" [");
assignmentLog.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878739447
GPR[SPVAP]-1659878739447
GPR[EPVAP]-1659878740183
GPR[EPVS]-1659878740183
========
sb.add(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878740185
GPR[SPVAP]-1659878740185
GPR[EPVAP]-1659878740928
GPR[EPVS]-1659878740928
========
debug.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878740930
GPR[SPVAP]-1659878740930
GPR[EPVAP]-1659878741671
GPR[EPVS]-1659878741671
========
append('D');
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878741673
GPR[SPVAP]-1659878741673
GPR[EPVAP]-1659878742407
GPR[EPVS]-1659878742407
========
append((char)(serialVersionUID>>48));
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878742409
GPR[SPVAP]-1659878742409
GPR[EPVAP]-1659878743151
GPR[EPVS]-1659878743151
========
append((char)(serialVersionUID>>32));
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878743153
GPR[SPVAP]-1659878743153
GPR[EPVAP]-1659878743888
GPR[EPVS]-1659878743888
========
builder.append(" [");
builder.append(propToString(type));
builder.append(": ");

========
GPR[SPVS]-1659878743890
GPR[SPVAP]-1659878743890
GPR[EPVAP]-1659878744623
GPR[EPVS]-1659878744623
========
sb.append(" [");
builder.append(propToString(type));
builder.append(": ");

========
GPR[SPVS]-1659878744624
GPR[SPVAP]-1659878744624
GPR[EPVAP]-1659878745351
GPR[EPVS]-1659878745351
========
sb.append(" [");
sb.append(propToString(type));
builder.append(": ");

========
GPR[SPVS]-1659878745353
GPR[SPVAP]-1659878745353
GPR[EPVAP]-1659878746082
GPR[EPVS]-1659878746082
========
sb.append(" {\n");
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878746083
GPR[SPVAP]-1659878746083
GPR[EPVAP]-1659878747255
GPR[SPVATF]-1659878747255
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878748340
GPR[EPVS]-1659878748340
========
sb.append(" {\n");
builder.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878748341
GPR[SPVAP]-1659878748341
GPR[EPVAP]-1659878749072
GPR[EPVS]-1659878749072
========
sb.append(" {\n");
sb.append(" [");
builder.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878749074
GPR[SPVAP]-1659878749074
GPR[EPVAP]-1659878749821
GPR[EPVS]-1659878749821
========
sb.append(" {\n");
builder.append(" [");
builder.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878749823
GPR[SPVAP]-1659878749823
GPR[EPVAP]-1659878750562
GPR[EPVS]-1659878750562
========
sb.append("| ");
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878750564
GPR[SPVAP]-1659878750564
GPR[EPVAP]-1659878751749
GPR[SPVATF]-1659878751749
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878752834
GPR[EPVS]-1659878752834
========
builder.append(" [");
sb.append(propToString(type));
builder.append(": ");

========
GPR[SPVS]-1659878752836
GPR[SPVAP]-1659878752836
GPR[EPVAP]-1659878753577
GPR[EPVS]-1659878753577
========
sb.append("| ");
builder.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878753579
GPR[SPVAP]-1659878753579
GPR[EPVAP]-1659878754319
GPR[EPVS]-1659878754319
========
sb.append("| ");
sb.append(" [");
builder.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878754321
GPR[SPVAP]-1659878754321
GPR[EPVAP]-1659878755059
GPR[EPVS]-1659878755059
========
sb.append("| ");
sb.append(" [");
sb.append(propToString(type));
builder.append(": ");

========
GPR[SPVS]-1659878755061
GPR[SPVAP]-1659878755061
GPR[EPVAP]-1659878755792
GPR[EPVS]-1659878755792
========
sb.append("| ");
builder.append(" [");
builder.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878755793
GPR[SPVAP]-1659878755793
GPR[EPVAP]-1659878756543
GPR[EPVS]-1659878756543
========
sb.append("| ");
builder.append(" [");
sb.append(propToString(type));
builder.append(": ");

========
GPR[SPVS]-1659878756545
GPR[SPVAP]-1659878756545
GPR[EPVAP]-1659878757270
GPR[EPVS]-1659878757270
========
sb.append("| ");
sb.append(" [");
builder.append(propToString(type));
builder.append(": ");

========
GPR[SPVS]-1659878757271
GPR[SPVAP]-1659878757271
GPR[EPVAP]-1659878758006
GPR[EPVS]-1659878758006
========
sb.append("| ");
builder.append(" [");
builder.append(propToString(type));
builder.append(": ");

========
GPR[SPVS]-1659878758008
GPR[SPVAP]-1659878758008
GPR[EPVAP]-1659878758770
GPR[EPVS]-1659878758770
========
out.append(" [");
out.append(propToString(type));
out.append(": ");

========
GPR[SPVS]-1659878758773
GPR[SPVAP]-1659878758773
GPR[EPVAP]-1659878759498
GPR[EPVS]-1659878759498
========
sb.append(" [");
out.append(propToString(type));
out.append(": ");

========
GPR[SPVS]-1659878759499
GPR[SPVAP]-1659878759499
GPR[EPVAP]-1659878760258
GPR[EPVS]-1659878760258
========
out.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878760259
GPR[SPVAP]-1659878760259
GPR[EPVAP]-1659878761013
GPR[EPVS]-1659878761013
========
sb.append(" [");
out.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878761015
GPR[SPVAP]-1659878761015
GPR[EPVAP]-1659878761744
GPR[EPVS]-1659878761744
========
sb.append(" [");
sb.append(propToString(type));
out.append(": ");

========
GPR[SPVS]-1659878761746
GPR[SPVAP]-1659878761746
GPR[EPVAP]-1659878762487
GPR[EPVS]-1659878762487
========
traverseNodes(next);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878762488
GPR[SPVAP]-1659878762488
GPR[EPVAP]-1659878763229
GPR[EPVS]-1659878763229
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878763230
GPR[SPVAP]-1659878763230
GPR[EPVAP]-1659878763958
GPR[EPVS]-1659878763959
========
result.append(" [");
result.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878763960
GPR[SPVAP]-1659878763960
GPR[EPVAP]-1659878764693
GPR[EPVS]-1659878764693
========
result.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878764694
GPR[SPVAP]-1659878764694
GPR[EPVAP]-1659878765426
GPR[EPVS]-1659878765426
========
sb.append(" [");
result.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878765428
GPR[SPVAP]-1659878765428
GPR[EPVAP]-1659878766155
GPR[EPVS]-1659878766155
========
initCodeSourceBuilder.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878766157
GPR[SPVAP]-1659878766157
GPR[EPVAP]-1659878766894
GPR[EPVS]-1659878766894
========
debugLog_.append(" [");
debugLog_.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878766896
GPR[SPVAP]-1659878766896
GPR[EPVAP]-1659878767627
GPR[EPVS]-1659878767627
========
debugLog_.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878767628
GPR[SPVAP]-1659878767628
GPR[EPVAP]-1659878768367
GPR[EPVS]-1659878768367
========
sb.append(" [");
debugLog_.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878768369
GPR[SPVAP]-1659878768369
GPR[EPVAP]-1659878769115
GPR[EPVS]-1659878769115
========
message.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878769117
GPR[SPVAP]-1659878769118
GPR[EPVAP]-1659878769856
GPR[EPVS]-1659878769856
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878769858
GPR[SPVAP]-1659878769858
GPR[EPVAP]-1659878770606
GPR[EPVS]-1659878770606
========
sb.append(" [");
sb.append(propToString(type));
start=COLUMN_BITS+1;
sb.append(": ");

========
GPR[SPVS]-1659878770608
GPR[SPVAP]-1659878770608
GPR[EPVAP]-1659878771344
GPR[EPVS]-1659878771344
========
paths.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878771347
GPR[SPVAP]-1659878771347
GPR[EPVAP]-1659878772090
GPR[EPVS]-1659878772090
========
COLUMN_BITS++;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878772092
GPR[SPVAP]-1659878772092
GPR[EPVAP]-1659878772817
GPR[EPVS]-1659878772817
========
sb.update(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878772819
GPR[SPVAP]-1659878772819
GPR[EPVAP]-1659878773549
GPR[EPVS]-1659878773549
========
code.append(" [");
code.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878773551
GPR[SPVAP]-1659878773551
GPR[EPVAP]-1659878774291
GPR[EPVS]-1659878774291
========
code.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878774292
GPR[SPVAP]-1659878774292
GPR[EPVAP]-1659878775038
GPR[EPVS]-1659878775038
========
sb.append(" [");
code.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878775040
GPR[SPVAP]-1659878775040
GPR[EPVAP]-1659878775794
GPR[EPVS]-1659878775794
========
if(null==sb){
return next.cloneTree();
}
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878775796
GPR[SPVAP]-1659878775796
GPR[EPVAP]-1659878776527
GPR[EPVS]-1659878776527
========
number-=L;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878776531
GPR[SPVAP]-1659878776531
GPR[EPVAP]-1659878777269
GPR[EPVS]-1659878777269
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878777271
GPR[SPVAP]-1659878777271
GPR[EPVAP]-1659878778005
GPR[EPVS]-1659878778005
========
maybeEndStatement();
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878778006
GPR[SPVAP]-1659878778006
GPR[EPVAP]-1659878778735
GPR[EPVS]-1659878778735
========
if(str.length()==0){
return ;
}
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878778737
GPR[SPVAP]-1659878778737
GPR[EPVAP]-1659878779471
GPR[EPVS]-1659878779471
========
case '\r' :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878779473
GPR[SPVAP]-1659878779473
GPR[EPVAP]-1659878780055
GPR[EPVS]-1659878780055
========
appendInferredPaths(str);
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878780057
GPR[SPVAP]-1659878780057
GPR[EPVAP]-1659878780788
GPR[EPVS]-1659878780788
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878780789
GPR[SPVAP]-1659878780789
GPR[EPVAP]-1659878781545
GPR[EPVS]-1659878781545
========
case '\"' :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878781547
GPR[SPVAP]-1659878781547
GPR[EPVAP]-1659878782140
GPR[EPVS]-1659878782140
========
case '>' :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878782142
GPR[SPVAP]-1659878782142
GPR[EPVAP]-1659878782723
GPR[EPVS]-1659878782723
========
appendInferredPaths(getExportedPath());
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878782726
GPR[SPVAP]-1659878782726
GPR[EPVAP]-1659878783459
GPR[EPVS]-1659878783459
========
sb.multiply(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878783461
GPR[SPVAP]-1659878783461
GPR[EPVAP]-1659878784186
GPR[EPVS]-1659878784186
========
sb.append(" [");
sb.multiply(propToString(type));
sb.multiply(": ");

========
GPR[SPVS]-1659878784188
GPR[SPVAP]-1659878784188
GPR[EPVAP]-1659878784931
GPR[EPVS]-1659878784931
========
sb.append(" [");
sb.multiply(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878784932
GPR[SPVAP]-1659878784932
GPR[EPVAP]-1659878785661
GPR[EPVS]-1659878785661
========
sb.append(" [");
sb.append(propToString(type));
sb.multiply(": ");

========
GPR[SPVS]-1659878785663
GPR[SPVAP]-1659878785663
GPR[EPVAP]-1659878786384
GPR[EPVS]-1659878786384
========
sb.append(" [");
if(i==COLUMN_BITS)break;
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878786385
GPR[SPVAP]-1659878786385
GPR[EPVAP]-1659878787591
GPR[SPVATF]-1659878787591
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878788679
GPR[EPVS]-1659878788679
========
sb.append(" [");
sb.append(propToString(type));
this.sb=new StringBuilder();
sb.append(": ");

========
GPR[SPVS]-1659878788681
GPR[SPVAP]-1659878788681
GPR[EPVAP]-1659878789441
GPR[EPVS]-1659878789441
========
addExpr(first,NodeUtil.precedence(type));
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878789443
GPR[SPVAP]-1659878789443
GPR[EPVAP]-1659878790186
GPR[EPVS]-1659878790186
========
case Token.FALSE :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878790187
GPR[SPVAP]-1659878790187
GPR[EPVAP]-1659878790767
GPR[EPVS]-1659878790767
========
case Token.CONTINUE :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878790769
GPR[SPVAP]-1659878790769
GPR[EPVAP]-1659878791342
GPR[EPVS]-1659878791342
========
sb.checkState(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878791344
GPR[SPVAP]-1659878791345
GPR[EPVAP]-1659878792110
GPR[EPVS]-1659878792110
========
type=COLUMN_BITS;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878792112
GPR[SPVAP]-1659878792112
GPR[EPVAP]-1659878793313
GPR[SPVATF]-1659878793313
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878794402
GPR[EPVS]-1659878794402
========
parent=null;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878794404
GPR[SPVAP]-1659878794404
GPR[EPVAP]-1659878795573
GPR[SPVATF]-1659878795573
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878796659
GPR[EPVS]-1659878796659
========
first=next;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878796661
GPR[SPVAP]-1659878796661
GPR[EPVAP]-1659878797865
GPR[SPVATF]-1659878797865
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878798949
GPR[EPVS]-1659878798949
========
type=COLUMN_BITS;
parent=null;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878798951
GPR[SPVAP]-1659878798951
GPR[EPVAP]-1659878800116
GPR[SPVATF]-1659878800116
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878801191
GPR[EPVS]-1659878801191
========
type=COLUMN_BITS;
first=next;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878801193
GPR[SPVAP]-1659878801193
GPR[EPVAP]-1659878802390
GPR[SPVATF]-1659878802390
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878803472
GPR[EPVS]-1659878803472
========
parent=null;
first=next;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878803474
GPR[SPVAP]-1659878803474
GPR[EPVAP]-1659878804659
GPR[SPVATF]-1659878804659
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878805755
GPR[EPVS]-1659878805755
========
type=COLUMN_BITS;
parent=null;
first=next;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878805757
GPR[SPVAP]-1659878805757
GPR[EPVAP]-1659878806923
GPR[SPVATF]-1659878806923
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878808029
GPR[EPVS]-1659878808029
========
first=last=next;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878808031
GPR[SPVAP]-1659878808031
GPR[EPVAP]-1659878809231
GPR[SPVATF]-1659878809231
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878810316
GPR[EPVS]-1659878810316
========
type=COLUMN_BITS;
first=last=next;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878810318
GPR[SPVAP]-1659878810318
GPR[EPVAP]-1659878811486
GPR[SPVATF]-1659878811486
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878812584
GPR[EPVS]-1659878812584
========
parent=null;
first=last=next;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878812586
GPR[SPVAP]-1659878812586
GPR[EPVAP]-1659878813782
GPR[SPVATF]-1659878813782
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878814869
GPR[EPVS]-1659878814869
========
type=COLUMN_BITS;
parent=null;
first=last=next;
sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878814871
GPR[SPVAP]-1659878814871
GPR[EPVAP]-1659878816045
GPR[SPVATF]-1659878816045
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878817117
GPR[EPVS]-1659878817117
========
compiler.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878817119
GPR[SPVAP]-1659878817119
GPR[EPVAP]-1659878817847
GPR[EPVS]-1659878817847
========
sb.report(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878817848
GPR[SPVAP]-1659878817848
GPR[EPVAP]-1659878818578
GPR[EPVS]-1659878818578
========
case Token.GET :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878818580
GPR[SPVAP]-1659878818580
GPR[EPVAP]-1659878819153
GPR[EPVS]-1659878819153
========
case Token.RC :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878819155
GPR[SPVAP]-1659878819155
GPR[EPVAP]-1659878819741
GPR[EPVS]-1659878819741
========
case FUNCTION_END :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878819743
GPR[SPVAP]-1659878819743
GPR[EPVAP]-1659878820321
GPR[EPVS]-1659878820321
========
case Token.WHILE :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878820322
GPR[SPVAP]-1659878820322
GPR[EPVAP]-1659878820907
GPR[EPVS]-1659878820907
========
default :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878820908
GPR[SPVAP]-1659878820908
GPR[EPVAP]-1659878821492
GPR[EPVS]-1659878821492
========
case Token.THIS :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878821494
GPR[SPVAP]-1659878821494
GPR[EPVAP]-1659878822079
GPR[EPVS]-1659878822079
========
case Token.RB :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878822081
GPR[SPVAP]-1659878822081
GPR[EPVAP]-1659878822657
GPR[EPVS]-1659878822657
========
case Token.NEW :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878822658
GPR[SPVAP]-1659878822658
GPR[EPVAP]-1659878823250
GPR[EPVS]-1659878823250
========
case Token.IF :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878823252
GPR[SPVAP]-1659878823252
GPR[EPVAP]-1659878823827
GPR[EPVS]-1659878823827
========
case Token.FOR :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878823829
GPR[SPVAP]-1659878823829
GPR[EPVAP]-1659878824405
GPR[EPVS]-1659878824405
========
case Token.WITH :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878824406
GPR[SPVAP]-1659878824406
GPR[EPVAP]-1659878824985
GPR[EPVS]-1659878824985
========
case Token.DO :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878824986
GPR[SPVAP]-1659878824986
GPR[EPVAP]-1659878825567
GPR[EPVS]-1659878825567
========
case Token.CATCH :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878825569
GPR[SPVAP]-1659878825569
GPR[EPVAP]-1659878826147
GPR[EPVS]-1659878826147
========
case Token.THROW :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878826148
GPR[SPVAP]-1659878826148
GPR[EPVAP]-1659878826723
GPR[EPVS]-1659878826723
========
case Token.DEFAULT :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878826724
GPR[SPVAP]-1659878826724
GPR[EPVAP]-1659878827302
GPR[EPVS]-1659878827302
========
case Token.ASSIGN_ADD :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878827304
GPR[SPVAP]-1659878827304
GPR[EPVAP]-1659878827888
GPR[EPVS]-1659878827888
========
case Token.ASSIGN_MUL :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878827890
GPR[SPVAP]-1659878827890
GPR[EPVAP]-1659878828489
GPR[EPVS]-1659878828489
========
case Token.ASSIGN_MOD :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878828490
GPR[SPVAP]-1659878828490
GPR[EPVAP]-1659878829080
GPR[EPVS]-1659878829080
========
case Token.ASSIGN_BITXOR :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878829081
GPR[SPVAP]-1659878829081
GPR[EPVAP]-1659878829667
GPR[EPVS]-1659878829667
========
case Token.ASSIGN_LSH :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878829669
GPR[SPVAP]-1659878829669
GPR[EPVAP]-1659878830248
GPR[EPVS]-1659878830248
========
case Token.ASSIGN_URSH :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878830249
GPR[SPVAP]-1659878830249
GPR[EPVAP]-1659878830820
GPR[EPVS]-1659878830820
========
case Token.OBJECTLIT :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878830821
GPR[SPVAP]-1659878830821
GPR[EPVAP]-1659878831406
GPR[EPVS]-1659878831406
========
case Token.AND :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878831408
GPR[SPVAP]-1659878831408
GPR[EPVAP]-1659878831997
GPR[EPVS]-1659878831997
========
case Token.BITXOR :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878831998
GPR[SPVAP]-1659878831998
GPR[EPVAP]-1659878832573
GPR[EPVS]-1659878832573
========
case Token.SHEQ :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878832574
GPR[SPVAP]-1659878832574
GPR[EPVAP]-1659878833156
GPR[EPVS]-1659878833157
========
case Token.EQ :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878833159
GPR[SPVAP]-1659878833159
GPR[EPVAP]-1659878833736
GPR[EPVS]-1659878833736
========
case Token.LE :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878833737
GPR[SPVAP]-1659878833737
GPR[EPVAP]-1659878834315
GPR[EPVS]-1659878834315
========
case Token.GE :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878834317
GPR[SPVAP]-1659878834317
GPR[EPVAP]-1659878834895
GPR[EPVS]-1659878834895
========
case Token.INSTANCEOF :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878834896
GPR[SPVAP]-1659878834896
GPR[EPVAP]-1659878835473
GPR[EPVS]-1659878835473
========
case Token.RSH :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878835474
GPR[SPVAP]-1659878835474
GPR[EPVAP]-1659878836054
GPR[EPVS]-1659878836054
========
case Token.TYPEOF :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878836056
GPR[SPVAP]-1659878836056
GPR[EPVAP]-1659878836632
GPR[EPVS]-1659878836632
========
case Token.CONST :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878836634
GPR[SPVAP]-1659878836634
GPR[EPVAP]-1659878837211
GPR[EPVS]-1659878837211
========
case Token.BITNOT :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878837212
GPR[SPVAP]-1659878837212
GPR[EPVAP]-1659878837785
GPR[EPVS]-1659878837785
========
case Token.NEG :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878837788
GPR[SPVAP]-1659878837788
GPR[EPVAP]-1659878838367
GPR[EPVS]-1659878838367
========
case Token.DEC :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878838368
GPR[SPVAP]-1659878838368
GPR[EPVAP]-1659878838951
GPR[EPVS]-1659878838951
========
case Token.SUB :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878838953
GPR[SPVAP]-1659878838953
GPR[EPVAP]-1659878839559
GPR[EPVS]-1659878839559
========
case Token.DIV :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878839561
GPR[SPVAP]-1659878839561
GPR[EPVAP]-1659878840144
GPR[EPVS]-1659878840144
========
case Token.COLONCOLON :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878840145
GPR[SPVAP]-1659878840145
GPR[EPVAP]-1659878840730
GPR[EPVS]-1659878840730
========
case Token.DOTQUERY :

sb.append(" [");
sb.append(propToString(type));
sb.append(": ");

========
GPR[SPVS]-1659878840732
GPR[SPVAP]-1659878840732
GPR[EPVAP]-1659878841317
GPR[EPVS]-1659878841317
GPR[ESUN]-1659878841317
GPR[SSUN]-1659878841317
com.google.javascript.rhino.Node,933
========
sb.append(": ");
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878842833
GPR[SPVAP]-1659878842833
GPR[EPVAP]-1659878847061
GPR[SPVATF]-1659878847061
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878848230
GPR[EPVS]-1659878848230
========
builder.append(propToString(type));
builder.append(": ");
String value;

========
GPR[SPVS]-1659878848233
GPR[SPVAP]-1659878848233
GPR[EPVAP]-1659878848977
GPR[EPVS]-1659878848977
========
builder.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878848978
GPR[SPVAP]-1659878848978
GPR[EPVAP]-1659878849747
GPR[EPVS]-1659878849747
========
sb.append(propToString(type));
builder.append(": ");
String value;

========
GPR[SPVS]-1659878849748
GPR[SPVAP]-1659878849748
GPR[EPVAP]-1659878850508
GPR[EPVS]-1659878850508
========
sb.append(" {\n");
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878850510
GPR[SPVAP]-1659878850510
GPR[EPVAP]-1659878851698
GPR[SPVATF]-1659878851698
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878852782
GPR[EPVS]-1659878852782
========
sb.append(INDENT);
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878852784
GPR[SPVAP]-1659878852784
GPR[EPVAP]-1659878853503
GPR[EPVS]-1659878853503
========
sb.append("node [color=lightblue2, style=filled];\n");
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878853505
GPR[SPVAP]-1659878853505
GPR[EPVAP]-1659878854666
GPR[SPVATF]-1659878854666
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878855757
GPR[EPVS]-1659878855757
========
sb.append(" {\n");
sb.append("node [color=lightblue2, style=filled];\n");
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878855759
GPR[SPVAP]-1659878855759
GPR[EPVAP]-1659878856937
GPR[SPVATF]-1659878856937
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878858041
GPR[EPVS]-1659878858041
========
sb.append(']');
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878858043
GPR[SPVAP]-1659878858043
GPR[EPVAP]-1659878859224
GPR[SPVATF]-1659878859224
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878860299
GPR[EPVS]-1659878860299
========
coalescedLog.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878860301
GPR[SPVAP]-1659878860301
GPR[EPVAP]-1659878861019
GPR[EPVS]-1659878861019
========
b.append(propToString(type));
b.append(": ");
String value;

========
GPR[SPVS]-1659878861021
GPR[SPVAP]-1659878861021
GPR[EPVAP]-1659878861778
GPR[EPVS]-1659878861778
========
b.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878861780
GPR[SPVAP]-1659878861780
GPR[EPVAP]-1659878862521
GPR[EPVS]-1659878862521
========
sb.append(propToString(type));
b.append(": ");
String value;

========
GPR[SPVS]-1659878862522
GPR[SPVAP]-1659878862522
GPR[EPVAP]-1659878863261
GPR[EPVS]-1659878863261
========
sb.append(error.description);
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878863263
GPR[SPVAP]-1659878863263
GPR[EPVAP]-1659878863999
GPR[EPVS]-1659878863999
========
sb.append('\n');
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878864001
GPR[SPVAP]-1659878864001
GPR[EPVAP]-1659878865169
GPR[SPVATF]-1659878865169
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878866255
GPR[EPVS]-1659878866255
========
sb.append(propToString(type));
assignmentLog.append(": ");
String value;

========
GPR[SPVS]-1659878866257
GPR[SPVAP]-1659878866257
GPR[EPVAP]-1659878866990
GPR[EPVS]-1659878866990
========
sb.add(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878866992
GPR[SPVAP]-1659878866992
GPR[EPVAP]-1659878867716
GPR[EPVS]-1659878867716
========
debug.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878867718
GPR[SPVAP]-1659878867718
GPR[EPVAP]-1659878868451
GPR[EPVS]-1659878868451
========
sb.append(propToString(type));
sb.info(": ");
String value;

========
GPR[SPVS]-1659878868453
GPR[SPVAP]-1659878868453
GPR[EPVAP]-1659878869183
GPR[EPVS]-1659878869183
========
append('D');
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878869184
GPR[SPVAP]-1659878869184
GPR[EPVAP]-1659878869927
GPR[EPVS]-1659878869927
========
append((char)(serialVersionUID>>48));
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878869928
GPR[SPVAP]-1659878869928
GPR[EPVAP]-1659878870669
GPR[EPVS]-1659878870669
========
append((char)(serialVersionUID>>32));
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878870671
GPR[SPVAP]-1659878870671
GPR[EPVAP]-1659878871401
GPR[EPVS]-1659878871401
========
sb.append(COLUMN_BITS);
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878871403
GPR[SPVAP]-1659878871403
GPR[EPVAP]-1659878872605
GPR[SPVATF]-1659878872605
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878873687
GPR[EPVS]-1659878873687
========
sb.append("| ");
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878873689
GPR[SPVAP]-1659878873689
GPR[EPVAP]-1659878874870
GPR[SPVATF]-1659878874870
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878875946
GPR[EPVS]-1659878875946
========
sb.append(COLUMN_BITS);
builder.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878875947
GPR[SPVAP]-1659878875947
GPR[EPVAP]-1659878876672
GPR[EPVS]-1659878876672
========
sb.append("| ");
builder.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878876674
GPR[SPVAP]-1659878876674
GPR[EPVAP]-1659878877423
GPR[EPVS]-1659878877423
========
sb.append(COLUMN_BITS);
sb.append(propToString(type));
builder.append(": ");
String value;

========
GPR[SPVS]-1659878877425
GPR[SPVAP]-1659878877425
GPR[EPVAP]-1659878878155
GPR[EPVS]-1659878878155
========
sb.append("| ");
sb.append(propToString(type));
builder.append(": ");
String value;

========
GPR[SPVS]-1659878878156
GPR[SPVAP]-1659878878156
GPR[EPVAP]-1659878878888
GPR[EPVS]-1659878878888
========
sb.append(COLUMN_BITS);
sb.append("| ");
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878878890
GPR[SPVAP]-1659878878890
GPR[EPVAP]-1659878880072
GPR[SPVATF]-1659878880072
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878881155
GPR[EPVS]-1659878881155
========
sb.append(COLUMN_BITS);
builder.append(propToString(type));
builder.append(": ");
String value;

========
GPR[SPVS]-1659878881156
GPR[SPVAP]-1659878881156
GPR[EPVAP]-1659878881882
GPR[EPVS]-1659878881882
========
sb.append("| ");
builder.append(propToString(type));
builder.append(": ");
String value;

========
GPR[SPVS]-1659878881884
GPR[SPVAP]-1659878881884
GPR[EPVAP]-1659878882611
GPR[EPVS]-1659878882611
========
sb.append(COLUMN_BITS);
sb.append("| ");
builder.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878882612
GPR[SPVAP]-1659878882613
GPR[EPVAP]-1659878883342
GPR[EPVS]-1659878883342
========
sb.append(COLUMN_BITS);
sb.append("| ");
sb.append(propToString(type));
builder.append(": ");
String value;

========
GPR[SPVS]-1659878883344
GPR[SPVAP]-1659878883344
GPR[EPVAP]-1659878884104
GPR[EPVS]-1659878884104
========
sb.append(COLUMN_BITS);
sb.append("| ");
builder.append(propToString(type));
builder.append(": ");
String value;

========
GPR[SPVS]-1659878884106
GPR[SPVAP]-1659878884106
GPR[EPVAP]-1659878884839
GPR[EPVS]-1659878884839
========
traverseNodes(next);
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878884840
GPR[SPVAP]-1659878884840
GPR[EPVAP]-1659878885576
GPR[EPVS]-1659878885576
========
result.append(propToString(type));
result.append(": ");
String value;

========
GPR[SPVS]-1659878885578
GPR[SPVAP]-1659878885578
GPR[EPVAP]-1659878886309
GPR[EPVS]-1659878886309
========
result.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878886311
GPR[SPVAP]-1659878886311
GPR[EPVAP]-1659878887046
GPR[EPVS]-1659878887046
========
sb.append(propToString(type));
result.append(": ");
String value;

========
GPR[SPVS]-1659878887048
GPR[SPVAP]-1659878887048
GPR[EPVAP]-1659878887775
GPR[EPVS]-1659878887775
========
out.append(propToString(type));
out.append(": ");
String value;

========
GPR[SPVS]-1659878887777
GPR[SPVAP]-1659878887777
GPR[EPVAP]-1659878888517
GPR[EPVS]-1659878888517
========
out.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878888518
GPR[SPVAP]-1659878888518
GPR[EPVAP]-1659878889247
GPR[EPVS]-1659878889247
========
sb.append(propToString(type));
out.append(": ");
String value;

========
GPR[SPVS]-1659878889248
GPR[SPVAP]-1659878889248
GPR[EPVAP]-1659878889973
GPR[EPVS]-1659878889973
========
sb.append("TOTAL STATIC FUNCTIONS: "+countOf(TriState.FALSE,TriState.BOTH));
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878889974
GPR[SPVAP]-1659878889974
GPR[EPVAP]-1659878890692
GPR[EPVS]-1659878890692
========
debugLog_.append(propToString(type));
debugLog_.append(": ");
String value;

========
GPR[SPVS]-1659878890694
GPR[SPVAP]-1659878890694
GPR[EPVAP]-1659878891441
GPR[EPVS]-1659878891441
========
debugLog_.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878891443
GPR[SPVAP]-1659878891443
GPR[EPVAP]-1659878892172
GPR[EPVS]-1659878892172
========
sb.append(propToString(type));
debugLog_.append(": ");
String value;

========
GPR[SPVS]-1659878892174
GPR[SPVAP]-1659878892174
GPR[EPVAP]-1659878892911
GPR[EPVS]-1659878892911
========
initCodeSourceBuilder.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878892913
GPR[SPVAP]-1659878892913
GPR[EPVAP]-1659878893647
GPR[EPVS]-1659878893647
========
appendListItem(sb,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878893648
GPR[SPVAP]-1659878893648
GPR[EPVAP]-1659878894393
GPR[EPVS]-1659878894393
========
message.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878894394
GPR[SPVAP]-1659878894394
GPR[EPVAP]-1659878895171
GPR[EPVS]-1659878895171
========
start=COLUMN_BITS+1;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878895172
GPR[SPVAP]-1659878895172
GPR[EPVAP]-1659878895900
GPR[EPVS]-1659878895900
========
COLUMN_BITS=str.indexOf('\n',start);
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878895902
GPR[SPVAP]-1659878895902
GPR[EPVAP]-1659878896645
GPR[EPVS]-1659878896645
========
appendListItem(sb,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878896647
GPR[SPVAP]-1659878896647
GPR[EPVAP]-1659878897385
GPR[EPVS]-1659878897385
========
sb.checkState(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878897387
GPR[SPVAP]-1659878897387
GPR[EPVAP]-1659878898114
GPR[EPVS]-1659878898114
========
sb.append(str);
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878898115
GPR[SPVAP]-1659878898115
GPR[EPVAP]-1659878898842
GPR[EPVS]-1659878898842
========
COLUMN_BITS++;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878898844
GPR[SPVAP]-1659878898844
GPR[EPVAP]-1659878899583
GPR[EPVS]-1659878899583
========
paths.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878899585
GPR[SPVAP]-1659878899585
GPR[EPVAP]-1659878900323
GPR[EPVS]-1659878900323
========
sb.update(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878900325
GPR[SPVAP]-1659878900325
GPR[EPVAP]-1659878901058
GPR[EPVS]-1659878901058
========
sb.append(Long.toHexString(serialVersionUID));
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878901059
GPR[SPVAP]-1659878901059
GPR[EPVAP]-1659878902282
GPR[SPVATF]-1659878902282
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878903372
GPR[EPVS]-1659878903372
========
code.append(propToString(type));
code.append(": ");
String value;

========
GPR[SPVS]-1659878903374
GPR[SPVAP]-1659878903374
GPR[EPVAP]-1659878904127
GPR[EPVS]-1659878904127
========
code.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878904128
GPR[SPVAP]-1659878904128
GPR[EPVAP]-1659878904864
GPR[EPVS]-1659878904864
========
sb.append(propToString(type));
code.append(": ");
String value;

========
GPR[SPVS]-1659878904865
GPR[SPVAP]-1659878904865
GPR[EPVAP]-1659878905599
GPR[EPVS]-1659878905599
========
COLUMN_BITS+=str.length();
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878905600
GPR[SPVAP]-1659878905600
GPR[EPVAP]-1659878906343
GPR[EPVS]-1659878906343
========
if(null==sb){
return next.cloneTree();
}
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878906347
GPR[SPVAP]-1659878906347
GPR[EPVAP]-1659878907079
GPR[EPVS]-1659878907079
========
number-=L;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878907081
GPR[SPVAP]-1659878907081
GPR[EPVAP]-1659878907819
GPR[EPVS]-1659878907819
========
if(number<number){
return COLUMN_BITS+1;
}
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878907820
GPR[SPVAP]-1659878907820
GPR[EPVAP]-1659878908562
GPR[EPVS]-1659878908563
========
maybeEndStatement();
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878908565
GPR[SPVAP]-1659878908565
GPR[EPVAP]-1659878909297
GPR[EPVS]-1659878909297
========
if(str.length()==0){
return ;
}
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878909299
GPR[SPVAP]-1659878909299
GPR[EPVAP]-1659878910032
GPR[EPVS]-1659878910032
========
appendInferredPaths(str);
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878910034
GPR[SPVAP]-1659878910034
GPR[EPVAP]-1659878910811
GPR[EPVS]-1659878910811
========
if(getFunctionValue(next)!=null){
appendFunctionValue(functionValue);
}
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878910812
GPR[SPVAP]-1659878910812
GPR[EPVAP]-1659878911567
GPR[EPVS]-1659878911567
========
appendInferredPaths(getExportedPath());
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878911569
GPR[SPVAP]-1659878911569
GPR[EPVAP]-1659878912293
GPR[EPVS]-1659878912293
========
sb.multiply(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878912295
GPR[SPVAP]-1659878912295
GPR[EPVAP]-1659878913027
GPR[EPVS]-1659878913027
========
case '\"' :

sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878913029
GPR[SPVAP]-1659878913029
GPR[EPVAP]-1659878913621
GPR[EPVS]-1659878913621
========
case '>' :

sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878913623
GPR[SPVAP]-1659878913623
GPR[EPVAP]-1659878914194
GPR[EPVS]-1659878914194
========
sb.append(propToString(type));
sb.multiply(": ");
String value;

========
GPR[SPVS]-1659878914197
GPR[SPVAP]-1659878914197
GPR[EPVAP]-1659878914927
GPR[EPVS]-1659878914927
========
sb.append(propToString(type));
if(i==COLUMN_BITS)break;
sb.append(": ");
String value;

========
GPR[SPVS]-1659878914928
GPR[SPVAP]-1659878914928
GPR[EPVAP]-1659878916103
GPR[SPVATF]-1659878916103
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878917172
GPR[EPVS]-1659878917172
========
this.sb=new StringBuilder();
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878917174
GPR[SPVAP]-1659878917174
GPR[EPVAP]-1659878917917
GPR[EPVS]-1659878917917
========
addExpr(first,NodeUtil.precedence(type));
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878917919
GPR[SPVAP]-1659878917919
GPR[EPVAP]-1659878918647
GPR[EPVS]-1659878918647
========
if(printType)onSealedMutation();
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878918648
GPR[SPVAP]-1659878918648
GPR[EPVAP]-1659878919388
GPR[EPVS]-1659878919388
========
case Token.FALSE :

sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878919390
GPR[SPVAP]-1659878919390
GPR[EPVAP]-1659878919972
GPR[EPVS]-1659878919972
========
case Token.CONTINUE :

sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878919974
GPR[SPVAP]-1659878919974
GPR[EPVAP]-1659878920549
GPR[EPVS]-1659878920549
========
sb.valueOf(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878920551
GPR[SPVAP]-1659878920551
GPR[EPVAP]-1659878921285
GPR[EPVS]-1659878921285
========
type=COLUMN_BITS;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878921288
GPR[SPVAP]-1659878921288
GPR[EPVAP]-1659878922468
GPR[SPVATF]-1659878922468
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878923560
GPR[EPVS]-1659878923560
========
parent=null;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878923561
GPR[SPVAP]-1659878923561
GPR[EPVAP]-1659878924733
GPR[SPVATF]-1659878924733
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878925813
GPR[EPVS]-1659878925813
========
first=next;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878925815
GPR[SPVAP]-1659878925815
GPR[EPVAP]-1659878926986
GPR[SPVATF]-1659878926986
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878928071
GPR[EPVS]-1659878928071
========
type=COLUMN_BITS;
parent=null;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878928073
GPR[SPVAP]-1659878928073
GPR[EPVAP]-1659878929285
GPR[SPVATF]-1659878929285
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878930395
GPR[EPVS]-1659878930395
========
type=COLUMN_BITS;
first=next;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878930396
GPR[SPVAP]-1659878930396
GPR[EPVAP]-1659878931580
GPR[SPVATF]-1659878931580
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878932655
GPR[EPVS]-1659878932655
========
parent=null;
first=next;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878932657
GPR[SPVAP]-1659878932657
GPR[EPVAP]-1659878933833
GPR[SPVATF]-1659878933833
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878934917
GPR[EPVS]-1659878934917
========
type=COLUMN_BITS;
parent=null;
first=next;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878934919
GPR[SPVAP]-1659878934919
GPR[EPVAP]-1659878936100
GPR[SPVATF]-1659878936100
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878937199
GPR[EPVS]-1659878937199
========
compiler.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878937202
GPR[SPVAP]-1659878937202
GPR[EPVAP]-1659878937932
GPR[EPVS]-1659878937932
========
sb.report(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878937933
GPR[SPVAP]-1659878937933
GPR[EPVAP]-1659878938674
GPR[EPVS]-1659878938674
========
first=last=next;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878938676
GPR[SPVAP]-1659878938676
GPR[EPVAP]-1659878939846
GPR[SPVATF]-1659878939846
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878940919
GPR[EPVS]-1659878940919
========
type=COLUMN_BITS;
first=last=next;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878940921
GPR[SPVAP]-1659878940921
GPR[EPVAP]-1659878942086
GPR[SPVATF]-1659878942086
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878943188
GPR[EPVS]-1659878943188
========
parent=null;
first=last=next;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878943190
GPR[SPVAP]-1659878943190
GPR[EPVAP]-1659878944366
GPR[SPVATF]-1659878944366
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878945452
GPR[EPVS]-1659878945452
========
type=COLUMN_BITS;
parent=null;
first=last=next;
sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878945454
GPR[SPVAP]-1659878945454
GPR[EPVAP]-1659878946632
GPR[SPVATF]-1659878946632
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878947723
GPR[EPVS]-1659878947723
========
case Token.RC :

sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878947725
GPR[SPVAP]-1659878947725
GPR[EPVAP]-1659878948300
GPR[EPVS]-1659878948300
========
case Token.GET :

sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878948302
GPR[SPVAP]-1659878948302
GPR[EPVAP]-1659878948881
GPR[EPVS]-1659878948881
========
case FUNCTION_END :

sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878948882
GPR[SPVAP]-1659878948882
GPR[EPVAP]-1659878949458
GPR[EPVS]-1659878949458
========
case Token.WHILE :

sb.append(propToString(type));
sb.append(": ");
String value;

========
GPR[SPVS]-1659878949459
GPR[SPVAP]-1659878949459
GPR[EPVAP]-1659878950041
GPR[EPVS]-1659878950041
GPR[ESUN]-1659878950041
GPR[SSUN]-1659878950041
com.google.javascript.rhino.Node,935
Find no block!
GPR[SSUN]-1659878950356
com.google.javascript.rhino.Node,971
========
case LOCAL_BLOCK_PROP :

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878951410
GPR[SPVAP]-1659878951410
GPR[EPVAP]-1659878952963
GPR[EPVS]-1659878952963
========
if(printType)throw onSeledMutation();
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878952965
GPR[SPVAP]-1659878952965
GPR[EPVAP]-1659878954536
GPR[EPVS]-1659878954536
========
if(N>=FIELDS_STORE_SIZE){
ensureCapacity(N+1);
}
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878954538
GPR[SPVAP]-1659878954538
GPR[EPVAP]-1659878956037
GPR[EPVS]-1659878956037
========
COLUMN_BITS=N+1;
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878956038
GPR[SPVAP]-1659878956039
GPR[EPVAP]-1659878957470
GPR[EPVS]-1659878957470
========
setImpl(N,value);
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878957472
GPR[SPVAP]-1659878957472
GPR[EPVAP]-1659878958928
GPR[EPVS]-1659878958928
========
if(!NodeUtil.isString(next.getNext())){
return ;
}
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878958929
GPR[SPVAP]-1659878958929
GPR[EPVAP]-1659878960457
GPR[EPVS]-1659878960457
========
if(value==null||obj.getNext()!=null){
return ;
}
default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878960458
GPR[SPVAP]-1659878960458
GPR[EPVAP]-1659878962049
GPR[EPVS]-1659878962049
========
case 1 :

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878962050
GPR[SPVAP]-1659878962050
GPR[EPVAP]-1659878965464
GPR[SPVATF]-1659878965464
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878966554
GPR[EPVS]-1659878966554
========
case 3 :

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}


========
GPR[SPVS]-1659878966555
GPR[SPVAP]-1659878966555
GPR[EPVAP]-1659878967735
GPR[SPVATF]-1659878967735
TESTING : com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
GPR[EPVATF]-1659878968829
GPR[EPVS]-1659878968829
GPR[ESUN]-1659878968830
GPR[SSUN]-1659878968830
com.google.javascript.rhino.Node,972
GPR[ESUN]-1659878969106
GPR[SSUN]-1659878969106
com.google.javascript.rhino.Node,973
GPR[ESUN]-1659878969250
GPR[SSUN]-1659878969250
com.google.javascript.rhino.Node,975
GPR[ESUN]-1659878969392
GPR[SSUN]-1659878969392
com.google.javascript.rhino.Node,979
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(info.numOccurrences);
sb.append(']');

========
GPR[SPVS]-1659878971104
GPR[SPVAP]-1659878971104
GPR[EPVAP]-1659878971977
GPR[EPVS]-1659878971977
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
b.append(value);
sb.append(']');

========
GPR[SPVS]-1659878971979
GPR[SPVAP]-1659878971979
GPR[EPVAP]-1659878972765
GPR[EPVS]-1659878972765
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(error.sourceName);
sb.append(']');

========
GPR[SPVS]-1659878972767
GPR[SPVAP]-1659878972767
GPR[EPVAP]-1659878973555
GPR[EPVS]-1659878973555
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(error.lineNumber);
sb.append(']');

========
GPR[SPVS]-1659878973556
GPR[SPVAP]-1659878973556
GPR[EPVAP]-1659878974374
GPR[EPVS]-1659878974374
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(COLUMN_BITS);
sb.append(']');

========
GPR[SPVS]-1659878974378
GPR[SPVAP]-1659878974378
GPR[EPVAP]-1659878975167
GPR[EPVS]-1659878975167
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
coalescedLog.append(value);
sb.append(']');

========
GPR[SPVS]-1659878975170
GPR[SPVAP]-1659878975170
GPR[EPVAP]-1659878975964
GPR[EPVS]-1659878975964
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
builder.append(value);
sb.append(']');

========
GPR[SPVS]-1659878975966
GPR[SPVAP]-1659878975966
GPR[EPVAP]-1659878976754
GPR[EPVS]-1659878976754
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.add(value);
sb.append(']');

========
GPR[SPVS]-1659878976756
GPR[SPVAP]-1659878976756
GPR[EPVAP]-1659878977583
GPR[EPVS]-1659878977583
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
debug.append(value);
sb.append(']');

========
GPR[SPVS]-1659878977585
GPR[SPVAP]-1659878977585
GPR[EPVAP]-1659878978391
GPR[EPVS]-1659878978391
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(call.returnType);
sb.append(']');

========
GPR[SPVS]-1659878978393
GPR[SPVAP]-1659878978393
GPR[EPVAP]-1659878979179
GPR[EPVS]-1659878979179
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(annotation!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878979182
GPR[SPVAP]-1659878979182
GPR[EPVAP]-1659878979971
GPR[EPVS]-1659878979971
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
builder.append(value);
builder.append(']');

========
GPR[SPVS]-1659878979974
GPR[SPVAP]-1659878979974
GPR[EPVAP]-1659878980777
GPR[EPVS]-1659878980777
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
builder.append(']');

========
GPR[SPVS]-1659878980778
GPR[SPVAP]-1659878980778
GPR[EPVAP]-1659878981617
GPR[EPVS]-1659878981617
========
new StringBuilder().append(" {\n");
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878981619
GPR[SPVAP]-1659878981619
GPR[EPVAP]-1659878982411
GPR[EPVS]-1659878982411
========
new StringBuilder().append(INDENT);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878982413
GPR[SPVAP]-1659878982413
GPR[EPVAP]-1659878983229
GPR[EPVS]-1659878983229
========
new StringBuilder().append("node [color=lightblue2, style=filled];\n");
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878983231
GPR[SPVAP]-1659878983231
GPR[EPVAP]-1659878984054
GPR[EPVS]-1659878984054
========
new StringBuilder().append("}\n");
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878984056
GPR[SPVAP]-1659878984056
GPR[EPVAP]-1659878984839
GPR[EPVS]-1659878984839
========
sb.append("TOTAL STATIC FUNCTIONS: "+countOf(TriState.FALSE,TriState.BOTH));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878984842
GPR[SPVAP]-1659878984842
GPR[EPVAP]-1659878985635
GPR[EPVS]-1659878985635
========
sb.append("REFERENCED NAMES: "+countOf(TriState.BOTH,TriState.TRUE));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878985637
GPR[SPVAP]-1659878985637
GPR[EPVAP]-1659878986444
GPR[EPVS]-1659878986444
========
sb.append("REFERENCED CLASSES: "+countOf(TriState.TRUE,TriState.TRUE));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878986446
GPR[SPVAP]-1659878986446
GPR[EPVAP]-1659878987248
GPR[EPVS]-1659878987248
========
sb.append("REFERENCED STATIC FUNCTIONS: "+countOf(TriState.FALSE,TriState.TRUE));
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878987250
GPR[SPVAP]-1659878987250
GPR[EPVAP]-1659878988055
GPR[EPVS]-1659878988055
========
sb.append("ALL NAMES\n");
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878988056
GPR[SPVAP]-1659878988056
GPR[EPVAP]-1659878988861
GPR[EPVS]-1659878988861
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
result.append(value);
sb.append(']');

========
GPR[SPVS]-1659878988865
GPR[SPVAP]-1659878988865
GPR[EPVAP]-1659878989648
GPR[EPVS]-1659878989648
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
message.append(value);
sb.append(']');

========
GPR[SPVS]-1659878989650
GPR[SPVAP]-1659878989650
GPR[EPVAP]-1659878990494
GPR[EPVS]-1659878990494
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
out.append(value);
out.append(']');

========
GPR[SPVS]-1659878990497
GPR[SPVAP]-1659878990497
GPR[EPVAP]-1659878991327
GPR[EPVS]-1659878991327
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
out.append(value);
sb.append(']');

========
GPR[SPVS]-1659878991329
GPR[SPVAP]-1659878991329
GPR[EPVAP]-1659878992134
GPR[EPVS]-1659878992134
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
out.append(']');

========
GPR[SPVS]-1659878992136
GPR[SPVAP]-1659878992136
GPR[EPVAP]-1659878992923
GPR[EPVS]-1659878992923
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw new IllegalArgumentException();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878992929
GPR[SPVAP]-1659878992929
GPR[EPVAP]-1659878993721
GPR[EPVS]-1659878993721
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw new IllegalArgumentException();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878993722
GPR[SPVAP]-1659878993722
GPR[EPVAP]-1659878994546
GPR[EPVS]-1659878994546
========
append((char)COLUMN_BITS);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878994548
GPR[SPVAP]-1659878994548
GPR[EPVAP]-1659878995364
GPR[EPVS]-1659878995364
========
append((char)Token.EOL);
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878995366
GPR[SPVAP]-1659878995366
GPR[EPVAP]-1659878996149
GPR[EPVS]-1659878996149
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
code.append(value);
code.append(']');

========
GPR[SPVS]-1659878996152
GPR[SPVAP]-1659878996152
GPR[EPVAP]-1659878996954
GPR[EPVS]-1659878996954
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
code.append(value);
sb.append(']');

========
GPR[SPVS]-1659878996956
GPR[SPVAP]-1659878996956
GPR[EPVAP]-1659878997748
GPR[EPVS]-1659878997748
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(INDENT);
sb.append(']');

========
GPR[SPVS]-1659878997750
GPR[SPVAP]-1659878997750
GPR[EPVAP]-1659878998538
GPR[EPVS]-1659878998538
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
code.append(']');

========
GPR[SPVS]-1659878998540
GPR[SPVAP]-1659878998540
GPR[EPVAP]-1659878999371
GPR[EPVS]-1659878999371
========
COLUMN_BITS+=value.length();
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659878999373
GPR[SPVAP]-1659878999373
GPR[EPVAP]-1659879000167
GPR[EPVS]-1659879000167
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj==null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879000171
GPR[SPVAP]-1659879000171
GPR[EPVAP]-1659879000966
GPR[EPVS]-1659879000966
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
paths.append(value);
sb.append(']');

========
GPR[SPVS]-1659879000990
GPR[SPVAP]-1659879000990
GPR[EPVAP]-1659879001810
GPR[EPVS]-1659879001810
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=node.prototypeNames;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879001812
GPR[SPVAP]-1659879001812
GPR[EPVAP]-1659879002604
GPR[EPVS]-1659879002604
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=node.refersTo;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879002608
GPR[SPVAP]-1659879002608
GPR[EPVAP]-1659879003457
GPR[EPVS]-1659879003457
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=node.referencedBy;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879003459
GPR[SPVAP]-1659879003459
GPR[EPVAP]-1659879004251
GPR[EPVS]-1659879004251
========
swtich (type){
case TARGETBLOCK_PROP :
sb.append("\\n");
value="target block property";
break;


case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879004269
GPR[SPVAP]-1659879004269
GPR[EPVAP]-1659879005057
GPR[EPVS]-1659879005057
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
sb.append("\\r");
value="last local block";
break;


case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879005059
GPR[SPVAP]-1659879005059
GPR[EPVAP]-1659879005859
GPR[EPVS]-1659879005859
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
sb.append("\\t");
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;


case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879005861
GPR[SPVAP]-1659879005861
GPR[EPVAP]-1659879006664
GPR[EPVS]-1659879006664
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
sb.append(str);
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;


default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;

}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879006665
GPR[SPVAP]-1659879006665
GPR[EPVAP]-1659879007454
GPR[EPVS]-1659879007454
========
swtich (type){
case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
sb.append(str);
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879007456
GPR[SPVAP]-1659879007456
GPR[EPVAP]-1659879008279
GPR[EPVS]-1659879008279
========
swtich (type){
case '\'' :
sb.append(str);
break;

case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879008280
GPR[SPVAP]-1659879008280
GPR[EPVAP]-1659879009346
GPR[EPVS]-1659879009346
========
swtich (type){
case '>' :
if(i>=2&&((str.charAt(i-1)=='-'&&str.charAt(i-2)=='-')||(str.charAt(i-1)==']'&&str.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(str.charAt(i));
}
break;

case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879009352
GPR[SPVAP]-1659879009352
GPR[EPVAP]-1659879010607
GPR[EPVS]-1659879010607
========
swtich (type){
case '<' :
 final String END_SCRIPT="/script";
if(str.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else {
sb.append(str.charAt(i));
}
break;

case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879010608
GPR[SPVAP]-1659879010608
GPR[EPVAP]-1659879011446
GPR[EPVS]-1659879011446
========
swtich (type){
default :
if(str.charAt(i)>0x1f&&str.charAt(i)<0x7f){
sb.append(str.charAt(i));
}else {
StringUtil.appendHexJavaScriptRepresentation(sb,str.charAt(i));
}

case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879011447
GPR[SPVAP]-1659879011447
GPR[EPVAP]-1659879012319
GPR[EPVS]-1659879012319
========
swtich (type){
case '\'' :
sb.append(str);
break;

case '>' :
if(i>=2&&((str.charAt(i-1)=='-'&&str.charAt(i-2)=='-')||(str.charAt(i-1)==']'&&str.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(str.charAt(i));
}
break;

case '<' :
 final String END_SCRIPT="/script";
if(str.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else {
sb.append(str.charAt(i));
}
break;

default :
if(str.charAt(i)>0x1f&&str.charAt(i)<0x7f){
sb.append(str.charAt(i));
}else {
StringUtil.appendHexJavaScriptRepresentation(sb,str.charAt(i));
}


case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879012321
GPR[SPVAP]-1659879012321
GPR[EPVAP]-1659879013156
GPR[EPVS]-1659879013156
========
swtich (type){
case '\'' :
sb.append(str);
break;

case '>' :
if(i>=2&&((str.charAt(i-1)=='-'&&str.charAt(i-2)=='-')||(str.charAt(i-1)==']'&&str.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(str.charAt(i));
}
break;

case '<' :
 final String END_SCRIPT="/script";
if(str.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else {
sb.append(str.charAt(i));
}
break;

default :
if(str.charAt(i)>0x1f&&str.charAt(i)<0x7f){
sb.append(str.charAt(i));
}else {
StringUtil.appendHexJavaScriptRepresentation(sb,str.charAt(i));
}


case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


}
code.append(value);
sb.append(']');

========
GPR[SPVS]-1659879013437
GPR[SPVAP]-1659879013437
GPR[EPVAP]-1659879014251
GPR[EPVS]-1659879014251
========
append((char)FUNCTION_END);
swtich (type){
case '\'' :
sb.append(str);
break;

case '>' :
if(i>=2&&((str.charAt(i-1)=='-'&&str.charAt(i-2)=='-')||(str.charAt(i-1)==']'&&str.charAt(i-2)==']'))){
sb.append("\\>");
}else {
sb.append(str.charAt(i));
}
break;

case '<' :
 final String END_SCRIPT="/script";
if(str.regionMatches(true,i+1,END_SCRIPT,0,END_SCRIPT.length())){
sb.append("<\\");
}else {
sb.append(str.charAt(i));
}
break;

default :
if(str.charAt(i)>0x1f&&str.charAt(i)<0x7f){
sb.append(str.charAt(i));
}else {
StringUtil.appendHexJavaScriptRepresentation(sb,str.charAt(i));
}


case TARGETBLOCK_PROP :
value="target block property";
break;

case LOCAL_BLOCK_PROP :
value="last local block";
break;

case ISNUMBER_PROP :
swtich (x.intValue){
case BOTH :
value="both";
break;

case RIGHT :
value="right";
break;

case LEFT :
value="left";
break;

default :
throw Kit.codeBug();

}
break;

case SPECIALCALL_PROP :
swtich (x.intValue){
case SPECIALCALL_EVAL :
value="eval";
break;

case SPECIALCALL_WITH :
value="with";
break;

default :
throw Kit.codeBug();

}
break;

default :
Object obj=x.objectValue;
if(obj!=null){
value=obj.toString();
}else {
value=String.valueOf(x.intValue);
}
break;


}
sb.append(value);
sb.append(']');

========
GPR[SPVS]-1659879014257
GPR[SPVAP]-1659879014257
GPR[EPVAP]-1659879015061
GPR[EPVS]-1659879015061
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f1792591770, pid=3558063, tid=139739555505920
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 6113 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f1792591770 [0x00007f1792590d60+0xa10]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/closure/closure_106_buggy/hs_err_pid3558063.log
Compiled method (c1) 4062846 4747       3       cofix.core.parser.node.expr.InfixExpr::simplify (207 bytes)
 total in heap  [0x00007f179212d850,0x00007f17921303e0] = 11152
 relocation     [0x00007f179212d978,0x00007f179212db80] = 520
 main code      [0x00007f179212db80,0x00007f179212f620] = 6816
 stub code      [0x00007f179212f620,0x00007f179212f798] = 376
 oops           [0x00007f179212f798,0x00007f179212f7a0] = 8
 metadata       [0x00007f179212f7a0,0x00007f179212f7f0] = 80
 scopes data    [0x00007f179212f7f0,0x00007f179212ffe8] = 2040
 scopes pcs     [0x00007f179212ffe8,0x00007f1792130368] = 896
 dependencies   [0x00007f1792130368,0x00007f1792130370] = 8
 nul chk table  [0x00007f1792130370,0x00007f17921303e0] = 112
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Closure/106 results at /experiment_home///results/SimFix/Closure/106/seed_261/
\n\nNode: host-45\n
\n\nDate: Sun 07 Aug 2022 06:30:15 AM PDT\n
Removing checked out dir script/workingdir/SimFix/closure/closure_106_buggy
GPR[SSLE]-1659879015112
GPR[ESLE]-1659879075117
