Sleep 1m start
GPR[SSLI]-1659931504052
GPR[ESLI]-1659931564055
Running Nopol Lang 46b with approach: smt
Timezone: America/Los_Angeles
Seed 263
OS: linux
Creating out dir /experiment_home///results/Nopol/Lang/46/seed_263/
The file script/workingdir/Nopol/Lang_46 does not exist!
script/workingdir/Nopol/Lang_46
script/workingdir/Nopol/Lang_46
classpath:  script/workingdir/Nopol/Lang_46/target/classes:script/workingdir/Nopol/Lang_46/target/tests:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:/experiment_home/defects4j/framework/projects/Lang/lib/cglib.jar:/experiment_home/defects4j/framework/projects/Lang/lib/asm.jar:/experiment_home/defects4j/framework/projects/Lang/lib/easymock.jar:/experiment_home/defects4j/framework/projects/Lang/lib/commons-io.jar
Src java:  /src/java
Classes Java:  /target/classes
Src Test:  /src/test
Classes Test:  /target/tests
GPR[SSLB]-1659931575378
GPR[ESLB]-1659931635383
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Lang_46//target/classes:script/workingdir/Nopol/Lang_46//target/tests:script/workingdir/Nopol/Lang_46/target/classes:script/workingdir/Nopol/Lang_46/target/tests:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:/experiment_home/defects4j/framework/projects/Lang/lib/cglib.jar:/experiment_home/defects4j/framework/projects/Lang/lib/asm.jar:/experiment_home/defects4j/framework/projects/Lang/lib/easymock.jar:/experiment_home/defects4j/framework/projects/Lang/lib/commons-io.jar
Node: host-59
Date init: Sun 07 Aug 2022 09:07:15 PM PDT
OAR_JOB_ID: 3720517
[1] INFO NoPol - Source files: [script/workingdir/Nopol/Lang_46/src/java]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Lang_46/target/classes/, file:script/workingdir/Nopol/Lang_46/target/tests/, file:script/workingdir/Nopol/Lang_46/target/classes/, file:script/workingdir/Nopol/Lang_46/target/tests/, file:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar, file:/experiment_home/defects4j/framework/projects/Lang/lib/cglib.jar, file:/experiment_home/defects4j/framework/projects/Lang/lib/asm.jar, file:/experiment_home/defects4j/framework/projects/Lang/lib/easymock.jar, file:/experiment_home/defects4j/framework/projects/Lang/lib/commons-io.jar]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.IEEE754rUtilsTest, org.apache.commons.lang.math.IEEE754rUtilsTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateUtilsFragmentTest, org.apache.commons.lang.time.DateUtilsFragmentTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.StopWatchTest, org.apache.commons.lang.time.StopWatchTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Lang_46/src/java], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsAddTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsRemoveTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.ArrayUtilsTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BitFieldTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.BooleanUtilsTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharEncodingTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharRangeTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharSetUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.CharUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.ClassUtilsTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesPerformanceTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.EntitiesTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IllegalClassExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IncompleteArgumentExceptionTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.IntHashMapTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.LocaleUtilsTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NotImplementedExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NullArgumentExceptionTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberRangeTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.NumberUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.ObjectUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.RandomStringUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.SerializationUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringEscapeUtilsTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsEqualsIndexOfTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsIsTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsStartsEndsWithTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsSubstringTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.StringUtilsTrimEmptyTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.SystemUtilsTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.UnhandledExceptionTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.ValidateTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.WordUtilsTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.CompareToBuilderTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.DefaultToStringStyleTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.EqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.HashCodeBuilderTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.MultiLineToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.ShortPrefixToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.SimpleToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.StandardToStringStyleTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringBuilderTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.builder.ToStringStyleTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.EnumUtilsTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enum.ValuedEnumTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumEqualsTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.EnumUtilsTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.enums.ValuedEnumTest, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.ExceptionUtilsTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableDelegateTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableErrorTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.exception.NestableRuntimeExceptionTestCase, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.DoubleRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FloatRangeTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.FractionTest, org.apache.commons.lang.math.IEEE754rUtilsTest, org.apache.commons.lang.math.IEEE754rUtilsTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.IntRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.LongRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberRangeTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.NumberUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RandomUtilsTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.math.RangeTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableBooleanTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableByteTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableDoubleTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableFloatTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableIntTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableLongTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableObjectTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.mutable.MutableShortTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.CompositeFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatTest, org.apache.commons.lang.text.ExtendedMessageFormatTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderAppendInsertTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrBuilderTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrLookupTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrMatcherTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrSubstitutorTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.text.StrTokenizerTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateFormatUtilsTest, org.apache.commons.lang.time.DateUtilsFragmentTest, org.apache.commons.lang.time.DateUtilsFragmentTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DateUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.DurationFormatUtilsTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.FastDateFormatTest, org.apache.commons.lang.time.StopWatchTest, org.apache.commons.lang.time.StopWatchTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Lang/46/seed_263/, json=true}
[2] INFO NoPol - Available processors (cores): 36
[5] INFO NoPol - Free memory: 1 GB
[5] INFO NoPol - Maximum memory: 7 GB
[5] INFO NoPol - Total memory available to JVM: 1 GB
[6] INFO NoPol - Java version: 1.8.0_45
[7] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[7] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659931637659
GPR[ESUP]-1659931637659
GPR[SFL]-1659931637659
GPR[EFL]-1659931649734
GPR[SFP]-1659931649734
GPR[SSUN]-1659931649757
16862144
GPR[SPVATF]-1659931649971
GPR[EPVATF]-1659931650085
GPR[SPS]-1659931650085
[14880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:246.
GPR[EPS]-1659931650612
GPR[ESUN]-1659931650612
GPR[SSUN]-1659931650612
16862144
GPR[SPVATF]-1659931650685
GPR[EPVATF]-1659931650768
GPR[SPS]-1659931650769
[15205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:245.
GPR[EPS]-1659931650937
GPR[ESUN]-1659931650937
GPR[SSUN]-1659931650937
16862144
GPR[SPVATF]-1659931651000
GPR[EPVATF]-1659931651084
GPR[SPS]-1659931651084
GPR[EPS]-1659931651352
GPR[SPVATR]-1659931651352
[15620] INFO TestPatch - Applying patch: org.apache.commons.lang.StringEscapeUtils:244: PRECONDITION escapeSingleQuote
[15733] INFO TestPatch - Running test suite to check the patch "escapeSingleQuote" is working
GPR[EPVATR]-1659931651471
[15739] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659931651471
[15751] INFO NoPol - --- a/src/java/org/apache/commons/lang/StringEscapeUtils.java
+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java
@@ -243,3 +243,5 @@
                     case '/' :
-                            out.write('\\');
+                            if (escapeSingleQuote) {
+                                out.write('\\');
+                            }
                         out.write('/');

Saving patch at /experiment_home///results/Nopol/Lang/46/seed_263/patch_13824_1ts_1659931651483.diff
GPR[ESUN]-1659931651484
GPR[SSUN]-1659931651484
16862144
GPR[ESUN]-1659931651550
GPR[SSUN]-1659931651550
16862144
GPR[ESUN]-1659931651611
GPR[SSUN]-1659931651611
16862144
GPR[SPVATF]-1659931651683
GPR[EPVATF]-1659931651763
GPR[SPS]-1659931651764
[16153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:248.
GPR[EPS]-1659931651885
GPR[ESUN]-1659931651885
GPR[SSUN]-1659931651885
16862144
GPR[SPVATF]-1659931651948
GPR[EPVATF]-1659931652035
GPR[SPS]-1659931652035
[16422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:228.
GPR[EPS]-1659931652155
GPR[ESUN]-1659931652155
GPR[SSUN]-1659931652155
16862144
GPR[SPVATF]-1659931652217
GPR[EPVATF]-1659931652297
GPR[SPS]-1659931652297
[16681] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:197.
GPR[EPS]-1659931652413
GPR[SPVATF]-1659931652414
GPR[EPVATF]-1659931652500
GPR[SPS]-1659931652500
[16887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:197.
GPR[EPS]-1659931652619
GPR[ESUN]-1659931652619
GPR[SSUN]-1659931652619
16862144
GPR[SPVATF]-1659931652684
GPR[EPVATF]-1659931652777
GPR[SPS]-1659931652777
[17156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:195.
GPR[EPS]-1659931652888
GPR[SPVATF]-1659931652888
GPR[EPVATF]-1659931652969
GPR[SPS]-1659931652969
[17348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:195.
GPR[EPS]-1659931653080
GPR[ESUN]-1659931653080
GPR[SSUN]-1659931653080
16862144
GPR[SPVATF]-1659931653139
GPR[EPVATF]-1659931653219
GPR[SPS]-1659931653220
[17588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:193.
GPR[EPS]-1659931653320
GPR[SPVATF]-1659931653320
GPR[EPVATF]-1659931653403
GPR[SPS]-1659931653403
[17770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:193.
GPR[EPS]-1659931653502
GPR[ESUN]-1659931653502
GPR[SSUN]-1659931653502
16862144
GPR[SPVATF]-1659931653562
GPR[EPVATF]-1659931653642
GPR[SPS]-1659931653642
[18018] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:191.
GPR[EPS]-1659931653750
GPR[SPVATF]-1659931653751
GPR[EPVATF]-1659931653831
GPR[SPS]-1659931653831
[18195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:191.
GPR[EPS]-1659931653927
GPR[ESUN]-1659931653927
GPR[SSUN]-1659931653927
16862144
GPR[ESUN]-1659931653984
GPR[SSUN]-1659931653984
16862144
GPR[SPVATF]-1659931654042
GPR[EPVATF]-1659931654124
GPR[SPS]-1659931654124
[18486] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:187.
GPR[EPS]-1659931654218
GPR[ESUN]-1659931654218
GPR[SSUN]-1659931654218
16862144
GPR[SPVATF]-1659931654274
GPR[EPVATF]-1659931654354
GPR[SPS]-1659931654354
[18729] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class StringEscapeUtils {
    private static final char CSV_DELIMITER = ',';

    private static final char CSV_QUOTE = '"';

    private static final java.lang.String CSV_QUOTE_STR = java.lang.String.valueOf(org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE);

    private static final char[] CSV_SEARCH_CHARS = new char[]{ org.apache.commons.lang.StringEscapeUtils.CSV_DELIMITER, org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE, org.apache.commons.lang.CharUtils.CR, org.apache.commons.lang.CharUtils.LF };

    public StringEscapeUtils() {
        super();
    }

    public static java.lang.String escapeJava(java.lang.String str) {
        return org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(str, false);
    }

    public static void escapeJava(java.io.Writer out, java.lang.String str) throws java.io.IOException {
        org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(out, str, false);
    }

    public static java.lang.String escapeJavaScript(java.lang.String str) {
        return org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(str, true);
    }

    public static void escapeJavaScript(java.io.Writer out, java.lang.String str) throws java.io.IOException {
        org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(out, str, true);
    }

    private static java.lang.String escapeJavaStyleString(java.lang.String str, boolean escapeSingleQuotes) {
        if (str == null) {
            return null;
        }
        try {
            java.io.StringWriter writer = new java.io.StringWriter(str.length() * 2);
            org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(writer, str, escapeSingleQuotes);
            return writer.toString();
        } catch (java.io.IOException ioe) {
            ioe.printStackTrace();
            return null;
        }
    }

    private static void escapeJavaStyleString(java.io.Writer out, java.lang.String str, boolean escapeSingleQuote) throws java.io.IOException {
        if (out == null) {
            throw new java.lang.IllegalArgumentException("The Writer must not be null");
        }
        if (str == null) {
            return;
        }
        int sz;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(14).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("str",str);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE",org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("escapeSingleQuote",escapeSingleQuote);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.commons.lang.StringEscapeUtils.CSV_DELIMITER",org.apache.commons.lang.StringEscapeUtils.CSV_DELIMITER);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.commons.lang.StringEscapeUtils.CSV_SEARCH_CHARS",org.apache.commons.lang.StringEscapeUtils.CSV_SEARCH_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE_STR",org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE_STR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectInput("out",out);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(14).collectionEnds();
        }
        if (runtimeAngelicValue)
            sz = str.length();

        for (int i = 0; i < sz; i++) {
            char ch = str.charAt(i);
            if (ch > 0xfff) {
                out.write("\\u" + org.apache.commons.lang.StringEscapeUtils.hex(ch));
            } else if (ch > 0xff) {
                out.write("\\u0" + org.apache.commons.lang.StringEscapeUtils.hex(ch));
            } else if (ch > 0x7f) {
                out.write("\\u00" + org.apache.commons.lang.StringEscapeUtils.hex(ch));
            } else if (ch < 32) {
                switch (ch) {
                    case '\b' :
                        out.write('\\');
                        out.write('b');
                        break;
                    case '\n' :
                        out.write('\\');
                        out.write('n');
                        break;
                    case '\t' :
                        out.write('\\');
                        out.write('t');
                        break;
                    case '\f' :
                        out.write('\\');
                        out.write('f');
                        break;
                    case '\r' :
                        out.write('\\');
                        out.write('r');
                        break;
                    default :
                        if (ch > 0xf) {
                            out.write("\\u00" + org.apache.commons.lang.StringEscapeUtils.hex(ch));
                        } else {
                            out.write("\\u000" + org.apache.commons.lang.StringEscapeUtils.hex(ch));
                        }
                        break;
                }
            } else {
                switch (ch) {
                    case '\'' :
                        if (escapeSingleQuote) {
                            out.write('\\');
                        }
                        out.write('\'');
                        break;
                    case '"' :
                        out.write('\\');
                        out.write('"');
                        break;
                    case '\\' :
                        out.write('\\');
                        out.write('\\');
                        break;
                    case '/' :
                        out.write('\\');
                        out.write('/');
                        break;
                    default :
                        out.write(ch);
                        break;
                }
            }
        }
    }

    private static java.lang.String hex(char ch) {
        return java.lang.Integer.toHexString(ch).toUpperCase();
    }

    public static java.lang.String unescapeJava(java.lang.String str) {
        if (str == null) {
            return null;
        }
        try {
            java.io.StringWriter writer = new java.io.StringWriter(str.length());
            org.apache.commons.lang.StringEscapeUtils.unescapeJava(writer, str);
            return writer.toString();
        } catch (java.io.IOException ioe) {
            ioe.printStackTrace();
            return null;
        }
    }

    public static void unescapeJava(java.io.Writer out, java.lang.String str) throws java.io.IOException {
        if (out == null) {
            throw new java.lang.IllegalArgumentException("The Writer must not be null");
        }
        if (str == null) {
            return;
        }
        int sz = str.length();
        java.lang.StringBuffer unicode = new java.lang.StringBuffer(4);
        boolean hadSlash = false;
        boolean inUnicode = false;
        for (int i = 0; i < sz; i++) {
            char ch = str.charAt(i);
            if (inUnicode) {
                unicode.append(ch);
                if (unicode.length() == 4) {
                    try {
                        int value = java.lang.Integer.parseInt(unicode.toString(), 16);
                        out.write(((char) (value)));
                        unicode.setLength(0);
                        inUnicode = false;
                        hadSlash = false;
                    } catch (java.lang.NumberFormatException nfe) {
                        throw new org.apache.commons.lang.exception.NestableRuntimeException("Unable to parse unicode value: " + unicode, nfe);
                    }
                }
                continue;
            }
            if (hadSlash) {
                hadSlash = false;
                switch (ch) {
                    case '\\' :
                        out.write('\\');
                        break;
                    case '\'' :
                        out.write('\'');
                        break;
                    case '\"' :
                        out.write('"');
                        break;
                    case 'r' :
                        out.write('\r');
                        break;
                    case 'f' :
                        out.write('\f');
                        break;
                    case 't' :
                        out.write('\t');
                        break;
                    case 'n' :
                        out.write('\n');
                        break;
                    case 'b' :
                        out.write('\b');
                        break;
                    case 'u' :
                        {
                            inUnicode = true;
                            break;
                        }
                    default :
                        out.write(ch);
                        break;
                }
                continue;
            } else if (ch == '\\') {
                hadSlash = true;
                continue;
            }
            out.write(ch);
        }
        if (hadSlash) {
            out.write('\\');
        }
    }

    public static java.lang.String unescapeJavaScript(java.lang.String str) {
        return org.apache.commons.lang.StringEscapeUtils.unescapeJava(str);
    }

    public static void unescapeJavaScript(java.io.Writer out, java.lang.String str) throws java.io.IOException {
        org.apache.commons.lang.StringEscapeUtils.unescapeJava(out, str);
    }

    public static java.lang.String escapeHtml(java.lang.String str) {
        if (str == null) {
            return null;
        }
        try {
            java.io.StringWriter writer = new java.io.StringWriter(((int) (str.length() * 1.5)));
            org.apache.commons.lang.StringEscapeUtils.escapeHtml(writer, str);
            return writer.toString();
        } catch (java.io.IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void escapeHtml(java.io.Writer writer, java.lang.String string) throws java.io.IOException {
        if (writer == null) {
            throw new java.lang.IllegalArgumentException("The Writer must not be null.");
        }
        if (string == null) {
            return;
        }
        org.apache.commons.lang.Entities.HTML40.escape(writer, string);
    }

    public static java.lang.String unescapeHtml(java.lang.String str) {
        if (str == null) {
            return null;
        }
        try {
            java.io.StringWriter writer = new java.io.StringWriter(((int) (str.length() * 1.5)));
            org.apache.commons.lang.StringEscapeUtils.unescapeHtml(writer, str);
            return writer.toString();
        } catch (java.io.IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void unescapeHtml(java.io.Writer writer, java.lang.String string) throws java.io.IOException {
        if (writer == null) {
            throw new java.lang.IllegalArgumentException("The Writer must not be null.");
        }
        if (string == null) {
            return;
        }
        org.apache.commons.lang.Entities.HTML40.unescape(writer, string);
    }

    public static void escapeXml(java.io.Writer writer, java.lang.String str) throws java.io.IOException {
        if (writer == null) {
            throw new java.lang.IllegalArgumentException("The Writer must not be null.");
        }
        if (str == null) {
            return;
        }
        org.apache.commons.lang.Entities.XML.escape(writer, str);
    }

    public static java.lang.String escapeXml(java.lang.String str) {
        if (str == null) {
            return null;
        }
        return org.apache.commons.lang.Entities.XML.escape(str);
    }

    public static void unescapeXml(java.io.Writer writer, java.lang.String str) throws java.io.IOException {
        if (writer == null) {
            throw new java.lang.IllegalArgumentException("The Writer must not be null.");
        }
        if (str == null) {
            return;
        }
        org.apache.commons.lang.Entities.XML.unescape(writer, str);
    }

    public static java.lang.String unescapeXml(java.lang.String str) {
        if (str == null) {
            return null;
        }
        return org.apache.commons.lang.Entities.XML.unescape(str);
    }

    public static java.lang.String escapeSql(java.lang.String str) {
        if (str == null) {
            return null;
        }
        return org.apache.commons.lang.StringUtils.replace(str, "'", "''");
    }

    public static java.lang.String escapeCsv(java.lang.String str) {
        if (org.apache.commons.lang.StringUtils.containsNone(str, org.apache.commons.lang.StringEscapeUtils.CSV_SEARCH_CHARS)) {
            return str;
        }
        try {
            java.io.StringWriter writer = new java.io.StringWriter();
            org.apache.commons.lang.StringEscapeUtils.escapeCsv(writer, str);
            return writer.toString();
        } catch (java.io.IOException ioe) {
            ioe.printStackTrace();
            return null;
        }
    }

    public static void escapeCsv(java.io.Writer out, java.lang.String str) throws java.io.IOException {
        if (org.apache.commons.lang.StringUtils.containsNone(str, org.apache.commons.lang.StringEscapeUtils.CSV_SEARCH_CHARS)) {
            if (str != null) {
                out.write(str);
            }
            return;
        }
        out.write(org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE);
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE) {
                out.write(org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE);
            }
            out.write(c);
        }
        out.write(org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE);
    }

    public static java.lang.String unescapeCsv(java.lang.String str) {
        if (str == null) {
            return null;
        }
        try {
            java.io.StringWriter writer = new java.io.StringWriter();
            org.apache.commons.lang.StringEscapeUtils.unescapeCsv(writer, str);
            return writer.toString();
        } catch (java.io.IOException ioe) {
            ioe.printStackTrace();
            return null;
        }
    }

    public static void unescapeCsv(java.io.Writer out, java.lang.String str) throws java.io.IOException {
        if (str == null) {
            return;
        }
        if (str.length() < 2) {
            out.write(str);
            return;
        }
        if ((str.charAt(0) != org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE) || (str.charAt(str.length() - 1) != org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE)) {
            out.write(str);
            return;
        }
        java.lang.String quoteless = str.substring(1, str.length() - 1);
        if (org.apache.commons.lang.StringUtils.containsAny(quoteless, org.apache.commons.lang.StringEscapeUtils.CSV_SEARCH_CHARS)) {
            str = org.apache.commons.lang.StringUtils.replace(quoteless, org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE_STR + org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE_STR, org.apache.commons.lang.StringEscapeUtils.CSV_QUOTE_STR);
        }
        out.write(str);
    }
}
[18730] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659931654462
GPR[SSUN]-1659931654462
16862144
GPR[SPVATF]-1659931654518
GPR[EPVATF]-1659931654599
GPR[SPS]-1659931654599
[18960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:182.
GPR[EPS]-1659931654692
GPR[SPVATF]-1659931654692
GPR[EPVATF]-1659931654781
GPR[SPS]-1659931654781
[19146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:182.
GPR[EPS]-1659931654878
GPR[ESUN]-1659931654878
GPR[SSUN]-1659931654878
16862144
GPR[SPVATF]-1659931654937
GPR[EPVATF]-1659931655027
GPR[SPS]-1659931655027
[19391] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:179.
GPR[EPS]-1659931655123
GPR[SPVATF]-1659931655124
GPR[EPVATF]-1659931655222
GPR[SPS]-1659931655222
[19583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:179.
GPR[EPS]-1659931655315
GPR[ESUN]-1659931655315
GPR[SSUN]-1659931655315
16862144
GPR[ESUN]-1659931655371
GPR[SSUN]-1659931655371
16862144
GPR[SPVATF]-1659931655426
GPR[EPVATF]-1659931655505
GPR[SPS]-1659931655505
[19860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:160.
GPR[EPS]-1659931655592
GPR[ESUN]-1659931655593
GPR[SSUN]-1659931655593
16862144
GPR[ESUN]-1659931655650
GPR[SSUN]-1659931655650
16862144
GPR[SPVATF]-1659931655702
GPR[EPVATF]-1659931655782
GPR[SPS]-1659931655782
[20139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:155.
GPR[EPS]-1659931655871
GPR[SPVATF]-1659931655871
GPR[EPVATF]-1659931655953
GPR[SPS]-1659931655953
[20312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.lang.StringEscapeUtils:155.
GPR[EPS]-1659931656044
GPR[ESUN]-1659931656044
[20316] INFO NoPol - ----INFORMATION----
[20351] INFO NoPol - Nb classes : 80
[20351] INFO NoPol - Nb methods : 1817
[20351] INFO NoPol - Nb Statements Analyzed : 22
[20351] INFO NoPol - Nb Statements with Angelic Value Found : 1
[20351] INFO NoPol - Nb inputs in SMT : 2
[20351] INFO NoPol - Nb SMT level: 1
[20351] INFO NoPol - Nb SMT components: [0] []
[20351] INFO NoPol - Nb variables in SMT : 25
[20351] INFO NoPol - NoPol Execution time : 20316ms
[20351] INFO NoPol - 
[20351] INFO NoPol - ----PATCH FOUND----
[20351] INFO NoPol - escapeSingleQuote
[20359] INFO NoPol - Nb test that executes the patch: 2
[20359] INFO NoPol - org.apache.commons.lang.StringEscapeUtils:244: PRECONDITION
[20362] INFO NoPol - --- a/src/java/org/apache/commons/lang/StringEscapeUtils.java
+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java
@@ -243,3 +243,5 @@
                     case '/' :
-                            out.write('\\');
+                            if (escapeSingleQuote) {
+                                out.write('\\');
+                            }
                         out.write('/');

GPR[EFP]-1659931656113
PATCH
\n\nNode: host-59\n
\n\nDate: Sun 07 Aug 2022 09:07:36 PM PDT\n
End running Nopol Lang/46 results at /experiment_home///results/Nopol/Lang/46/seed_263/
Removing checked out dir script/workingdir/Nopol/Lang_46
GPR[SSLE]-1659931656871
GPR[ESLE]-1659931716875
