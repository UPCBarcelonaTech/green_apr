Sleep 1m start
GPR[SSLI]-1659908719792
GPR[ESLI]-1659908779795
Running Nopol Closure 33b with approach: smt
Timezone: America/Los_Angeles
Seed 263
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/33/seed_263/
The file script/workingdir/Nopol/Closure_33 does not exist!
script/workingdir/Nopol/Closure_33
script/workingdir/Nopol/Closure_33
classpath:  script/workingdir/Nopol/Closure_33/build/classes:script/workingdir/Nopol/Closure_33/lib/args4j.jar:script/workingdir/Nopol/Closure_33/lib/guava.jar:script/workingdir/Nopol/Closure_33/lib/json.jar:script/workingdir/Nopol/Closure_33/lib/jsr305.jar:script/workingdir/Nopol/Closure_33/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_33/build/lib/rhino.jar:script/workingdir/Nopol/Closure_33/lib/ant.jar:script/workingdir/Nopol/Closure_33/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_33/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_33/lib/jarjar.jar:script/workingdir/Nopol/Closure_33/lib/junit.jar:script/workingdir/Nopol/Closure_33/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659908798950
GPR[ESLB]-1659908858953
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_33//build/classes:script/workingdir/Nopol/Closure_33//build/test:script/workingdir/Nopol/Closure_33/build/classes:script/workingdir/Nopol/Closure_33/lib/args4j.jar:script/workingdir/Nopol/Closure_33/lib/guava.jar:script/workingdir/Nopol/Closure_33/lib/json.jar:script/workingdir/Nopol/Closure_33/lib/jsr305.jar:script/workingdir/Nopol/Closure_33/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_33/build/lib/rhino.jar:script/workingdir/Nopol/Closure_33/lib/ant.jar:script/workingdir/Nopol/Closure_33/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_33/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_33/lib/jarjar.jar:script/workingdir/Nopol/Closure_33/lib/junit.jar:script/workingdir/Nopol/Closure_33/build/test
Node: host-51
Date init: Sun 07 Aug 2022 02:47:38 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_33/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_33/build/classes/, file:script/workingdir/Nopol/Closure_33/build/test/, file:script/workingdir/Nopol/Closure_33/build/classes/, file:script/workingdir/Nopol/Closure_33/lib/args4j.jar, file:script/workingdir/Nopol/Closure_33/lib/guava.jar, file:script/workingdir/Nopol/Closure_33/lib/json.jar, file:script/workingdir/Nopol/Closure_33/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_33/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_33/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_33/lib/ant.jar, file:script/workingdir/Nopol/Closure_33/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_33/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_33/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_33/lib/junit.jar, file:script/workingdir/Nopol/Closure_33/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_33/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/33/seed_263/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659908864192
GPR[ESUP]-1659908864193
GPR[SFL]-1659908864193
GPR[EFL]-1659908904058
GPR[SFP]-1659908904058
GPR[SSUN]-1659908905636
-283827935
GPR[SPVATF]-1659908906099
GPR[EPVATF]-1659908906136
[46389] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908906136
GPR[SSUN]-1659908906136
-1966087783
GPR[ESUN]-1659908906335
GPR[SSUN]-1659908906335
-1966087783
GPR[SPVATF]-1659908906531
GPR[EPVATF]-1659908906561
[46814] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908906562
GPR[SSUN]-1659908906562
-1966087783
GPR[SPVATF]-1659908906761
GPR[EPVATF]-1659908906784
[47037] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908906784
GPR[SSUN]-1659908906784
-1966087783
GPR[SPVATF]-1659908906980
GPR[EPVATF]-1659908907003
[47256] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908907003
GPR[SSUN]-1659908907003
-1659631726
GPR[ESUN]-1659908907191
GPR[SSUN]-1659908907191
130004992
GPR[ESUN]-1659908907793
GPR[SSUN]-1659908907793
130004992
GPR[SPVATF]-1659908907974
GPR[EPVATF]-1659908907998
[48252] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908907999
GPR[SSUN]-1659908907999
130004992
GPR[ESUN]-1659908908179
GPR[SSUN]-1659908908179
890942016
GPR[ESUN]-1659908908378
GPR[SSUN]-1659908908378
890942016
GPR[SPVATF]-1659908908570
GPR[EPVATF]-1659908908590
[48843] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908908591
GPR[SSUN]-1659908908591
890942016
GPR[SPVATF]-1659908908790
GPR[EPVATF]-1659908908809
[49062] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908908810
GPR[EPVATF]-1659908908828
[49081] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908908828
GPR[SSUN]-1659908908828
890942016
GPR[ESUN]-1659908909052
GPR[SSUN]-1659908909052
890942016
GPR[ESUN]-1659908909249
GPR[SSUN]-1659908909249
-1966087783
GPR[ESUN]-1659908909446
GPR[SSUN]-1659908909446
-1966087783
GPR[SPVATF]-1659908909640
GPR[EPVATF]-1659908909659
[49912] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908909659
GPR[EPVATF]-1659908909679
[49932] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908909679
GPR[SSUN]-1659908909679
-1966087783
GPR[ESUN]-1659908909866
GPR[SSUN]-1659908909866
-1966087783
GPR[SPVATF]-1659908910063
GPR[EPVATF]-1659908910082
[50336] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908910083
GPR[EPVATF]-1659908910102
[50355] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908910102
GPR[SSUN]-1659908910102
-1966087783
GPR[ESUN]-1659908910293
GPR[SSUN]-1659908910293
-1966087783
GPR[ESUN]-1659908910482
GPR[SSUN]-1659908910482
-1966087783
GPR[ESUN]-1659908910820
GPR[SSUN]-1659908910820
1613130706
GPR[ESUN]-1659908911034
GPR[SSUN]-1659908911034
1613130706
GPR[ESUN]-1659908911243
GPR[SSUN]-1659908911243
1613130706
GPR[SPVATF]-1659908911454
GPR[EPVATF]-1659908911633
[51886] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908911633
GPR[SSUN]-1659908911633
-1566590132
GPR[SPVATF]-1659908911851
GPR[EPVATF]-1659908913128
GPR[SPS]-1659908913128
GPR[EPS]-1659908922023
GPR[ESUN]-1659908922023
GPR[SSUN]-1659908922023
234947553
GPR[ESUN]-1659908922212
GPR[SSUN]-1659908922212
234947553
GPR[SPVATF]-1659908922400
GPR[EPVATF]-1659908922417
[62670] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908922417
GPR[EPVATF]-1659908922433
[62686] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908922433
GPR[SSUN]-1659908922433
234947553
GPR[ESUN]-1659908922624
GPR[SSUN]-1659908922624
234947553
GPR[SPVATF]-1659908922818
GPR[EPVATF]-1659908922834
[63087] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908922834
GPR[EPVATF]-1659908922849
[63102] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908922849
GPR[SSUN]-1659908922849
234947553
GPR[SPVATF]-1659908923039
GPR[EPVATF]-1659908923055
[63308] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908923055
GPR[SSUN]-1659908923055
234947553
GPR[ESUN]-1659908923247
GPR[SSUN]-1659908923247
234947553
GPR[ESUN]-1659908923438
GPR[SSUN]-1659908923438
234947553
GPR[SPVATF]-1659908923628
GPR[EPVATF]-1659908923644
[63898] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908923645
GPR[SSUN]-1659908923645
234947553
GPR[SPVATF]-1659908923833
GPR[EPVATF]-1659908923848
[64101] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908923848
GPR[SSUN]-1659908923848
234947553
GPR[SPVATF]-1659908924044
GPR[EPVATF]-1659908924058
[64312] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908924059
GPR[SSUN]-1659908924059
234947553
GPR[ESUN]-1659908924249
GPR[SSUN]-1659908924249
234947553
GPR[ESUN]-1659908924440
GPR[SSUN]-1659908924440
234947553
GPR[SPVATF]-1659908924632
GPR[EPVATF]-1659908924647
[64900] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908924647
GPR[SSUN]-1659908924647
234947553
GPR[SPVATF]-1659908924840
GPR[EPVATF]-1659908924856
[65109] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908924856
GPR[SSUN]-1659908924856
234947553
GPR[ESUN]-1659908925048
GPR[SSUN]-1659908925048
234947553
GPR[SPVATF]-1659908925239
GPR[EPVATF]-1659908925255
[65508] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908925255
GPR[SSUN]-1659908925255
234947553
GPR[SPVATF]-1659908925447
GPR[EPVATF]-1659908925461
[65714] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908925461
GPR[SSUN]-1659908925461
234947553
GPR[ESUN]-1659908925646
GPR[SSUN]-1659908925646
890942016
GPR[SPVATF]-1659908925836
GPR[EPVATF]-1659908925853
[66107] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908925854
GPR[EPVATF]-1659908925870
[66124] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908925871
GPR[SSUN]-1659908925871
890942016
GPR[SPVATF]-1659908926060
GPR[EPVATF]-1659908926077
[66330] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908926077
GPR[SSUN]-1659908926077
890942016
GPR[ESUN]-1659908926265
GPR[SSUN]-1659908926266
890942016
GPR[SPVATF]-1659908926448
GPR[EPVATF]-1659908926466
[66719] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908926466
GPR[SSUN]-1659908926466
890942016
GPR[SPVATF]-1659908926662
GPR[EPVATF]-1659908926681
[66934] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908926681
GPR[EPVATF]-1659908926699
[66953] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908926700
GPR[SSUN]-1659908926700
890942016
GPR[SPVATF]-1659908926891
GPR[EPVATF]-1659908926911
[67164] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908926911
GPR[SSUN]-1659908926911
890942016
GPR[SPVATF]-1659908927103
GPR[EPVATF]-1659908927120
[67373] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908927121
GPR[EPVATF]-1659908927137
[67391] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908927138
GPR[SSUN]-1659908927138
890942016
GPR[ESUN]-1659908927324
GPR[SSUN]-1659908927324
890942016
GPR[SPVATF]-1659908927512
GPR[EPVATF]-1659908927531
[67784] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908927531
GPR[SSUN]-1659908927531
890942016
GPR[SPVATF]-1659908927732
GPR[EPVATF]-1659908927750
[68003] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908927750
GPR[SSUN]-1659908927750
890942016
GPR[SPVATF]-1659908927937
GPR[EPVATF]-1659908927955
[68208] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908927955
GPR[SSUN]-1659908927955
890942016
GPR[ESUN]-1659908928141
GPR[SSUN]-1659908928141
1613130706
GPR[SPVATF]-1659908928345
GPR[EPVATF]-1659908928530
[68783] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908928531
GPR[EPVATF]-1659908928699
[68952] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908928699
GPR[SSUN]-1659908928699
1613130706
GPR[SPVATF]-1659908928903
GPR[EPVATF]-1659908929069
[69322] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908929069
GPR[SSUN]-1659908929069
1613130706
GPR[SPVATF]-1659908929286
GPR[EPVATF]-1659908929449
[69703] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908929450
GPR[EPVATF]-1659908929617
[69870] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908929618
GPR[SSUN]-1659908929618
GPR[ESUN]-1659908929618
GPR[SSUN]-1659908929618
-622774852
GPR[SPVATF]-1659908929951
GPR[EPVATF]-1659908931144
GPR[SPS]-1659908931144
GPR[EPS]-1659908932198
GPR[SPVATR]-1659908932198
[72452] INFO TestPatch - Applying patch: com.google.javascript.rhino.jstype.PrototypeObjectType:573: PRECONDITION com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint
[73367] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint" is working
GPR[EPVATR]-1659908933406
[73659] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659908933406
[73671] INFO NoPol - --- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -572,4 +572,6 @@
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            if (com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint) {
+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+              .getLeastSupertype(propType);
+            }
           }

Saving patch at /experiment_home///results/Nopol/Closure/33/seed_263/patch_69225_1ts_1659908933418.diff
GPR[ESUN]-1659908933419
GPR[SSUN]-1659908933419
1613130706
GPR[SPVATF]-1659908933635
GPR[EPVATF]-1659908933797
[74050] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908933797
GPR[EPVATF]-1659908933965
[74218] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908933965
GPR[SSUN]-1659908933965
1613130706
GPR[SPVATF]-1659908934177
GPR[EPVATF]-1659908934348
[74601] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908934349
GPR[EPVATF]-1659908934512
[74765] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908934512
GPR[SSUN]-1659908934513
1613130706
GPR[ESUN]-1659908934724
GPR[SSUN]-1659908934724
1613130706
GPR[ESUN]-1659908934937
GPR[SSUN]-1659908934938
1613130706
GPR[ESUN]-1659908935149
GPR[SSUN]-1659908935149
1613130706
GPR[ESUN]-1659908935357
GPR[SSUN]-1659908935357
1613130706
GPR[SPVATF]-1659908935568
GPR[EPVATF]-1659908935738
[75991] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908935739
GPR[EPVATF]-1659908935904
[76157] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908935904
GPR[SSUN]-1659908935904
1613130706
GPR[SPVATF]-1659908936108
GPR[EPVATF]-1659908936268
[76521] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908936268
GPR[SSUN]-1659908936268
1613130706
GPR[ESUN]-1659908936488
GPR[SSUN]-1659908936488
1613130706
GPR[SPVATF]-1659908936702
GPR[EPVATF]-1659908936885
[77138] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908936885
GPR[EPVATF]-1659908937049
[77302] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908937049
GPR[SSUN]-1659908937049
1613130706
GPR[ESUN]-1659908937254
GPR[SSUN]-1659908937254
1613130706
GPR[SPVATF]-1659908937461
GPR[EPVATF]-1659908937628
[77881] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908937628
GPR[EPVATF]-1659908937791
[78044] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908937791
GPR[SSUN]-1659908937791
-622774852
GPR[ESUN]-1659908938009
GPR[SSUN]-1659908938009
-622774852
GPR[SPVATF]-1659908938236
GPR[EPVATF]-1659908939436
GPR[SPS]-1659908939436
GPR[EPS]-1659908947275
GPR[ESUN]-1659908947275
GPR[SSUN]-1659908947275
-622774852
GPR[SPVATF]-1659908947493
GPR[EPVATF]-1659908948773
GPR[SPS]-1659908948773
GPR[EPS]-1659908950596
GPR[SPVATR]-1659908950596
[90849] INFO TestPatch - Applying patch: com.google.javascript.rhino.jstype.PrototypeObjectType:572: PRECONDITION (com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties.isEmpty()) && (!(com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType))
[91134] INFO TestPatch - Running test suite to check the patch "(com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties.isEmpty()) && (!(com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType))" is working
GPR[EPVATR]-1659908951240
[91493] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659908951240
[91496] INFO NoPol - --- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -571,5 +571,7 @@
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          if ((com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties.isEmpty()) && (!(com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType))) {
+            if (!hasProperty(prop)) {
+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+              .getLeastSupertype(propType);
+            }
           }

Saving patch at /experiment_home///results/Nopol/Closure/33/seed_263/patch_87050_2ts_1659908951243.diff
GPR[SPVATF]-1659908951244
GPR[EPVATF]-1659908952419
GPR[SPS]-1659908952419
GPR[EPS]-1659908953681
GPR[SPVATR]-1659908953681
[93934] INFO TestPatch - Applying patch: com.google.javascript.rhino.jstype.PrototypeObjectType:572: CONDITIONAL (!((com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType) || ((0) != (com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties.size())))) && (com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint)
[94220] INFO TestPatch - Running test suite to check the patch "(!((com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType) || ((0) != (com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties.size())))) && (com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint)" is working
GPR[EPVATR]-1659908954314
[94567] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659908954314
[94570] INFO NoPol - --- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -571,5 +571,5 @@
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+          if ((!((com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType) || ((0) != (com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties.size())))) && (com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            .getLeastSupertype(propType);
           }

Saving patch at /experiment_home///results/Nopol/Closure/33/seed_263/patch_90124_3ts_1659908954317.diff
GPR[ESUN]-1659908954317
GPR[SSUN]-1659908954317
-622774852
GPR[ESUN]-1659908954533
GPR[SSUN]-1659908954533
-622774852
GPR[SPVATF]-1659908954751
GPR[EPVATF]-1659908955937
GPR[SPS]-1659908955938
GPR[EPS]-1659908965542
GPR[SPVATF]-1659908965542
GPR[EPVATF]-1659908966750
GPR[SPS]-1659908966750
GPR[EPS]-1659908976455
GPR[ESUN]-1659908976455
GPR[SSUN]-1659908976455
-622774852
GPR[ESUN]-1659908976672
GPR[SSUN]-1659908976672
-622774852
GPR[SPVATF]-1659908976882
GPR[EPVATF]-1659908978090
GPR[SPS]-1659908978090
GPR[EPS]-1659908990618
GPR[ESUN]-1659908990618
GPR[SSUN]-1659908990618
-1566590132
GPR[SPVATF]-1659908990822
GPR[EPVATF]-1659908992018
GPR[SPS]-1659908992018
[132725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:110.
GPR[EPS]-1659908992472
GPR[ESUN]-1659908992472
GPR[SSUN]-1659908992472
-1566590132
GPR[SPVATF]-1659908992672
GPR[EPVATF]-1659908993890
GPR[SPS]-1659908993890
[134600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:215.
GPR[EPS]-1659908994347
GPR[ESUN]-1659908994347
GPR[SSUN]-1659908994347
-1566590132
GPR[ESUN]-1659908994553
GPR[SSUN]-1659908994553
-1566590132
GPR[SPVATF]-1659908994751
GPR[EPVATF]-1659908995958
GPR[SPS]-1659908995958
GPR[EPS]-1659909003209
GPR[SPVATF]-1659909003210
GPR[EPVATF]-1659909004634
GPR[SPS]-1659909004634
GPR[EPS]-1659909011275
GPR[ESUN]-1659909011276
GPR[SSUN]-1659909011276
-179796259
GPR[ESUN]-1659909011522
GPR[SSUN]-1659909011522
-179796259
GPR[SPVATF]-1659909011763
GPR[EPVATF]-1659909012948
GPR[SPS]-1659909012948
[154012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2111.
GPR[EPS]-1659909013759
GPR[ESUN]-1659909013759
GPR[SSUN]-1659909013759
-179796259
GPR[SPVATF]-1659909014018
GPR[EPVATF]-1659909015232
GPR[SPS]-1659909015232
[156220] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2110.
GPR[EPS]-1659909015967
GPR[ESUN]-1659909015967
GPR[SSUN]-1659909015967
-179796259
GPR[SPVATF]-1659909016236
GPR[EPVATF]-1659909017463
GPR[SPS]-1659909017463
[158442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2107.
GPR[EPS]-1659909018189
GPR[ESUN]-1659909018189
GPR[SSUN]-1659909018189
-1966087783
GPR[SPVATF]-1659909018386
GPR[EPVATF]-1659909018408
[158661] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909018408
GPR[EPVATF]-1659909018427
[158681] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909018428
GPR[SSUN]-1659909018428
-1966087783
GPR[SPVATF]-1659909018618
GPR[EPVATF]-1659909018639
[158892] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909018640
GPR[EPVATF]-1659909018659
[158912] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909018659
GPR[SSUN]-1659909018659
-1966087783
GPR[SPVATF]-1659909018848
GPR[EPVATF]-1659909018869
[159122] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909018869
GPR[EPVATF]-1659909018890
[159143] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909018890
GPR[SSUN]-1659909018890
-1966087783
GPR[ESUN]-1659909019091
GPR[SSUN]-1659909019091
-1966087783
GPR[ESUN]-1659909019302
GPR[SSUN]-1659909019302
-1966087783
GPR[SPVATF]-1659909019490
GPR[EPVATF]-1659909019511
[159764] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909019511
GPR[EPVATF]-1659909019532
[159785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909019532
GPR[SSUN]-1659909019532
-1966087783
GPR[SPVATF]-1659909019722
GPR[EPVATF]-1659909019742
[159995] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909019742
GPR[EPVATF]-1659909019761
[160014] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909019761
GPR[SSUN]-1659909019761
-1966087783
GPR[ESUN]-1659909019952
GPR[SSUN]-1659909019952
-1966087783
GPR[SPVATF]-1659909020139
GPR[EPVATF]-1659909020160
[160413] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909020160
GPR[SSUN]-1659909020160
-1966087783
GPR[SPVATF]-1659909020349
GPR[EPVATF]-1659909020370
[160623] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909020370
GPR[SSUN]-1659909020370
-1966087783
GPR[ESUN]-1659909020555
GPR[SSUN]-1659909020555
-1966087783
GPR[SPVATF]-1659909020739
GPR[EPVATF]-1659909020759
[161012] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909020759
GPR[SSUN]-1659909020759
-1966087783
GPR[ESUN]-1659909020949
GPR[SSUN]-1659909020949
-1966087783
GPR[ESUN]-1659909021137
GPR[SSUN]-1659909021137
-1966087783
GPR[SPVATF]-1659909021323
GPR[EPVATF]-1659909021343
[161596] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909021343
GPR[SSUN]-1659909021343
-1966087783
GPR[SPVATF]-1659909021529
GPR[EPVATF]-1659909021549
[161802] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909021549
GPR[SSUN]-1659909021550
-1566590132
GPR[SPVATF]-1659909021754
GPR[EPVATF]-1659909022968
GPR[SPS]-1659909022968
[163679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:109.
GPR[EPS]-1659909023426
GPR[SPVATF]-1659909023426
GPR[EPVATF]-1659909024657
GPR[SPS]-1659909024657
[165373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:109.
GPR[EPS]-1659909025120
GPR[ESUN]-1659909025120
GPR[SSUN]-1659909025120
-1566590132
GPR[ESUN]-1659909025320
GPR[SSUN]-1659909025320
-1566590132
GPR[ESUN]-1659909025517
GPR[SSUN]-1659909025517
-1566590132
GPR[SPVATF]-1659909025716
GPR[EPVATF]-1659909026910
GPR[SPS]-1659909026910
[167704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:256.
GPR[EPS]-1659909027451
GPR[SPVATF]-1659909027451
GPR[EPVATF]-1659909028649
GPR[SPS]-1659909028650
[169399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:256.
GPR[EPS]-1659909029146
GPR[ESUN]-1659909029146
GPR[SSUN]-1659909029146
-622774852
GPR[SPVATF]-1659909029362
GPR[EPVATF]-1659909031308
GPR[SPS]-1659909031308
[172067] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:375.
GPR[EPS]-1659909031814
GPR[ESUN]-1659909031814
GPR[SSUN]-1659909031814
-1797850673
GPR[SPVATF]-1659909032063
GPR[EPVATF]-1659909033235
GPR[SPS]-1659909033236
GPR[EPS]-1659909054860
GPR[ESUN]-1659909054861
GPR[SSUN]-1659909054861
-1797850673
GPR[SPVATF]-1659909055251
GPR[EPVATF]-1659909056446
GPR[SPS]-1659909056446
[197314] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:406.
GPR[EPS]-1659909057061
GPR[ESUN]-1659909057061
GPR[SSUN]-1659909057061
-1797850673
GPR[SPVATF]-1659909057303
GPR[EPVATF]-1659909058501
GPR[SPS]-1659909058501
[199360] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:405.
GPR[EPS]-1659909059107
GPR[SPVATF]-1659909059107
GPR[EPVATF]-1659909060285
GPR[SPS]-1659909060285
GPR[EPS]-1659909071914
GPR[ESUN]-1659909071914
GPR[SSUN]-1659909071914
-1566590132
GPR[SPVATF]-1659909072120
GPR[EPVATF]-1659909073378
GPR[SPS]-1659909073378
[214075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:209.
GPR[EPS]-1659909073822
GPR[ESUN]-1659909073822
GPR[SSUN]-1659909073822
466431456
GPR[SPVATF]-1659909074084
GPR[EPVATF]-1659909075267
GPR[SPS]-1659909075267
[216162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:723.
GPR[EPS]-1659909075909
GPR[ESUN]-1659909075909
GPR[SSUN]-1659909075909
-1251822497
GPR[SPVATF]-1659909076091
GPR[EPVATF]-1659909077267
GPR[SPS]-1659909077267
[217774] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(annotation);
            position.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
            marker.setAnnotation(position);
            populated = true;
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.StringPosition position = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            position.setItem(text);
            position.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
            currentMarker.setDescription(position);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TypePosition position = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            position.setItem(typeNode);
            position.setHasBrackets(hasLC);
            position.setPositionInformation(lineno, startCharno, endLineno, endCharno);
            currentMarker.setType(position);
        }
    }

    @java.lang.Deprecated
    public void markName(java.lang.String name, int lineno, int charno) {
        markName(name, null, lineno, charno);
    }

    public void markName(java.lang.String name, com.google.javascript.rhino.jstype.StaticSourceFile file, int lineno, int charno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(name);
            position.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setName(position);
            com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodePos = new com.google.javascript.rhino.JSDocInfo.NamePosition();
            com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name, lineno, charno);
            node.setLength(name.length());
            node.setStaticSourceFile(file);
            nodePos.setItem(node);
            nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setNameNode(nodePos);
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeName(java.lang.String name) {
        if (currentInfo.declareTemplateTypeName(name)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(26).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setInterface(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExpose() {
        if (!currentInfo.isExpose()) {
            currentInfo.setExpose(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[217774] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659909077521
GPR[SSUN]-1659909077521
-1251822497
GPR[SPVATF]-1659909077712
GPR[EPVATF]-1659909078985
GPR[SPS]-1659909078985
[219693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:686.
GPR[EPS]-1659909079440
GPR[ESUN]-1659909079440
GPR[SSUN]-1659909079440
-1251822497
GPR[SPVATF]-1659909079634
GPR[EPVATF]-1659909080844
GPR[SPS]-1659909080844
[221537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:685.
GPR[EPS]-1659909081284
GPR[ESUN]-1659909081284
GPR[SSUN]-1659909081284
-1251822497
GPR[SPVATF]-1659909081478
GPR[EPVATF]-1659909082789
GPR[SPS]-1659909082789
[223484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:684.
GPR[EPS]-1659909083231
GPR[ESUN]-1659909083231
GPR[SSUN]-1659909083231
-179796259
GPR[SPVATF]-1659909083469
GPR[EPVATF]-1659909084777
GPR[SPS]-1659909084777
[225803] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:539.
GPR[EPS]-1659909085550
GPR[ESUN]-1659909085550
GPR[SSUN]-1659909085550
-179796259
GPR[SPVATF]-1659909086459
GPR[EPVATF]-1659909087797
GPR[SPS]-1659909087797
[228756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:538.
GPR[EPS]-1659909088504
GPR[ESUN]-1659909088504
GPR[SSUN]-1659909088504
-179796259
GPR[SPVATF]-1659909088738
GPR[EPVATF]-1659909089954
GPR[SPS]-1659909089954
[230899] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:534.
GPR[EPS]-1659909090646
GPR[SPVATF]-1659909090646
GPR[EPVATF]-1659909091918
GPR[SPS]-1659909091918
[232887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:534.
GPR[EPS]-1659909092635
GPR[ESUN]-1659909092635
GPR[SSUN]-1659909092635
-1093533311
GPR[SPVATF]-1659909092869
GPR[EPVATF]-1659909094067
GPR[SPS]-1659909094067
[234869] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1647.
GPR[EPS]-1659909094616
GPR[ESUN]-1659909094616
GPR[SSUN]-1659909094616
-1093533311
GPR[SPVATF]-1659909094849
GPR[EPVATF]-1659909096075
GPR[SPS]-1659909096075
GPR[EPS]-1659909112016
GPR[ESUN]-1659909112016
GPR[SSUN]-1659909112016
-1093533311
GPR[SPVATF]-1659909112248
GPR[EPVATF]-1659909113455
GPR[SPS]-1659909113455
[254227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1629.
GPR[EPS]-1659909113974
GPR[ESUN]-1659909113974
GPR[SSUN]-1659909113974
-1566590132
GPR[SPVATF]-1659909114174
GPR[EPVATF]-1659909115365
GPR[SPS]-1659909115365
[256182] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:222.
GPR[EPS]-1659909115929
GPR[ESUN]-1659909115929
GPR[SSUN]-1659909115929
-1566590132
GPR[ESUN]-1659909116133
GPR[SSUN]-1659909116133
-1566590132
GPR[ESUN]-1659909116331
GPR[SSUN]-1659909116331
-1566590132
GPR[SPVATF]-1659909116531
GPR[EPVATF]-1659909117773
GPR[SPS]-1659909117773
[258483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:275.
GPR[EPS]-1659909118230
GPR[SPVATF]-1659909118230
GPR[EPVATF]-1659909119439
GPR[SPS]-1659909119439
[260149] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:275.
GPR[EPS]-1659909119896
GPR[ESUN]-1659909119896
GPR[SSUN]-1659909119896
-1566590132
GPR[ESUN]-1659909120092
GPR[SSUN]-1659909120092
-1566590132
GPR[ESUN]-1659909120293
GPR[SSUN]-1659909120293
-1566590132
GPR[SPVATF]-1659909120486
GPR[EPVATF]-1659909121701
GPR[SPS]-1659909121701
[262409] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:272.
GPR[EPS]-1659909122156
GPR[ESUN]-1659909122156
GPR[SSUN]-1659909122156
-1093533311
GPR[ESUN]-1659909122390
GPR[SSUN]-1659909122390
-1093533311
GPR[SPVATF]-1659909122625
GPR[EPVATF]-1659909123969
GPR[SPS]-1659909123969
GPR[EPS]-1659909147935
GPR[SPVATF]-1659909147936
GPR[EPVATF]-1659909149252
GPR[SPS]-1659909149252
[290088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1655.
GPR[EPS]-1659909149835
GPR[ESUN]-1659909149835
GPR[SSUN]-1659909149835
-1093533311
GPR[SPVATF]-1659909150072
GPR[EPVATF]-1659909151470
GPR[SPS]-1659909151470
[292973] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1645.
GPR[EPS]-1659909152720
GPR[SPVATF]-1659909152721
GPR[EPVATF]-1659909154264
GPR[SPS]-1659909154264
GPR[EPS]-1659909220488
GPR[ESUN]-1659909220489
GPR[SSUN]-1659909220489
-1093533311
GPR[ESUN]-1659909220864
GPR[SSUN]-1659909220864
-1093533311
GPR[SPVATF]-1659909221095
GPR[EPVATF]-1659909222333
GPR[SPS]-1659909222333
[362920] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class JSTypeRegistry implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;

    private transient final com.google.javascript.rhino.ErrorReporter reporter;

    private final com.google.javascript.rhino.jstype.JSType[] nativeTypes;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.JSType> namesToTypes;

    private final java.util.Set<java.lang.String> namespaces = new java.util.HashSet<java.lang.String>();

    private final java.util.Set<java.lang.String> nonNullableTypeNames = new java.util.HashSet<java.lang.String>();

    private final java.util.Set<java.lang.String> forwardDeclaredTypes = new java.util.HashSet<java.lang.String>();

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.UnionTypeBuilder> typesIndexedByProperty = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>> eachRefTypeIndexedByProperty = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.JSType> greatestSubtypeByProperty = com.google.common.collect.Maps.newHashMap();

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.rhino.jstype.FunctionType> interfaceToImplementors = com.google.common.collect.LinkedHashMultimap.create();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.NamedType> unresolvedNamedTypes = com.google.common.collect.ArrayListMultimap.create();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.NamedType> resolvedNamedTypes = com.google.common.collect.ArrayListMultimap.create();

    private boolean lastGeneration = true;

    private java.lang.String templateTypeName;

    private com.google.javascript.rhino.jstype.TemplateType templateType;

    private final boolean tolerateUndefinedValues;

    public static enum ResolveMode {

        LAZY_EXPRESSIONS,
        LAZY_NAMES,
        IMMEDIATE;}

    private com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES;

    public JSTypeRegistry(com.google.javascript.rhino.ErrorReporter reporter) {
        this(reporter, false);
    }

    public JSTypeRegistry(com.google.javascript.rhino.ErrorReporter reporter, boolean tolerateUndefinedValues) {
        this.reporter = reporter;
        nativeTypes = new com.google.javascript.rhino.jstype.JSType[com.google.javascript.rhino.jstype.JSTypeNative.values().length];
        namesToTypes = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.JSType>();
        resetForTypeCheck();
        this.tolerateUndefinedValues = tolerateUndefinedValues;
    }

    public void setResolveMode(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode mode) {
        this.resolveMode = mode;
    }

    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode getResolveMode() {
        return resolveMode;
    }

    public com.google.javascript.rhino.ErrorReporter getErrorReporter() {
        return reporter;
    }

    public boolean shouldTolerateUndefinedValues() {
        return tolerateUndefinedValues;
    }

    public void resetForTypeCheck() {
        typesIndexedByProperty.clear();
        eachRefTypeIndexedByProperty.clear();
        initializeBuiltInTypes();
        namesToTypes.clear();
        namespaces.clear();
        initializeRegistry();
    }

    private void initializeBuiltInTypes() {
        com.google.javascript.rhino.jstype.BooleanType BOOLEAN_TYPE = new com.google.javascript.rhino.jstype.BooleanType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);
        com.google.javascript.rhino.jstype.NullType NULL_TYPE = new com.google.javascript.rhino.jstype.NullType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, NULL_TYPE);
        com.google.javascript.rhino.jstype.NumberType NUMBER_TYPE = new com.google.javascript.rhino.jstype.NumberType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);
        com.google.javascript.rhino.jstype.StringType STRING_TYPE = new com.google.javascript.rhino.jstype.StringType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE, STRING_TYPE);
        com.google.javascript.rhino.jstype.UnknownType UNKNOWN_TYPE = new com.google.javascript.rhino.jstype.UnknownType(this, false);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE, new com.google.javascript.rhino.jstype.UnknownType(this, true));
        com.google.javascript.rhino.jstype.VoidType VOID_TYPE = new com.google.javascript.rhino.jstype.VoidType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE, VOID_TYPE);
        com.google.javascript.rhino.jstype.AllType ALL_TYPE = new com.google.javascript.rhino.jstype.AllType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE, ALL_TYPE);
        com.google.javascript.rhino.jstype.PrototypeObjectType TOP_LEVEL_PROTOTYPE = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null, true);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Object", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);
        OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);
        com.google.javascript.rhino.jstype.ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType FUNCTION_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Function", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);
        FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);
        com.google.javascript.rhino.jstype.NoType NO_TYPE = new com.google.javascript.rhino.jstype.NoType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE, NO_TYPE);
        com.google.javascript.rhino.jstype.NoObjectType NO_OBJECT_TYPE = new com.google.javascript.rhino.jstype.NoObjectType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.NoObjectType NO_RESOLVED_TYPE = new com.google.javascript.rhino.jstype.NoResolvedType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);
        com.google.javascript.rhino.jstype.FunctionType ARRAY_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Array", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);
        ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType = ARRAY_FUNCTION_TYPE.getInstanceType();
        com.google.javascript.rhino.jstype.ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);
        com.google.javascript.rhino.jstype.FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Boolean", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType BOOLEAN_OBJECT_TYPE = BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType DATE_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Date", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_TYPE, DATE_TYPE);
        com.google.javascript.rhino.jstype.FunctionType ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "Error");
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE, ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType EVAL_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "EvalError");
        EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType RANGE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "RangeError");
        RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType REFERENCE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "ReferenceError");
        REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType REFERENCE_ERROR_TYPE = REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType SYNTAX_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "SyntaxError");
        SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType TYPE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "TypeError");
        TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType URI_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "URIError");
        URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType NUMBER_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Number", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType NUMBER_OBJECT_TYPE = NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType REGEXP_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "RegExp", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);
        REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType = REGEXP_FUNCTION_TYPE.getInstanceType();
        com.google.javascript.rhino.jstype.ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);
        com.google.javascript.rhino.jstype.FunctionType STRING_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "String", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType STRING_OBJECT_TYPE = STRING_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.JSType OBJECT_NUMBER_STRING = createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);
        com.google.javascript.rhino.jstype.JSType OBJECT_NUMBER_STRING_BOOLEAN = createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);
        com.google.javascript.rhino.jstype.JSType NUMBER_STRING_BOOLEAN = createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);
        com.google.javascript.rhino.jstype.JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING, NUMBER_STRING);
        com.google.javascript.rhino.jstype.JSType STRING_VALUE_OR_OBJECT_TYPE = createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.JSType NUMBER_VALUE_OR_OBJECT_TYPE = createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType U2U_FUNCTION_TYPE = createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.FunctionType U2U_CONSTRUCTOR_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Function", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {
            private static final long serialVersionUID = 1L;

            @java.lang.Override
            public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
                return registry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE);
            }
        };
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);
        FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);
        U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType LEAST_FUNCTION_TYPE = createFunctionType(NO_TYPE, true, ALL_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.FunctionType GLOBAL_THIS_CTOR = new com.google.javascript.rhino.jstype.FunctionType(this, "global this", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);
        com.google.javascript.rhino.jstype.FunctionType GREATEST_FUNCTION_TYPE = createFunctionType(ALL_TYPE, true, NO_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);
        registerPropertyOnType("prototype", OBJECT_FUNCTION_TYPE);
    }

    private void initializeRegistry() {
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE), "Null");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), "Undefined");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), "void");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE), "Function");
    }

    private void register(com.google.javascript.rhino.jstype.JSType type) {
        register(type, type.toString());
    }

    private void register(com.google.javascript.rhino.jstype.JSType type, java.lang.String name) {
        namesToTypes.put(name, type);
        while (name.indexOf('.') > 0) {
            name = name.substring(0, name.lastIndexOf('.'));
            namespaces.add(name);
        } 
    }

    private void registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId, com.google.javascript.rhino.jstype.JSType type) {
        nativeTypes[typeId.ordinal()] = type;
    }

    public void registerPropertyOnType(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);
        if (typeSet == null) {
            typeSet = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this, com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE);
            typesIndexedByProperty.put(propertyName, typeSet);
        }
        typeSet.addAlternate(type);
        addReferenceTypeIndexedByProperty(propertyName, type);
        greatestSubtypeByProperty.remove(propertyName);
    }

    private void addReferenceTypeIndexedByProperty(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        if ((type instanceof com.google.javascript.rhino.jstype.ObjectType) && ((com.google.javascript.rhino.jstype.ObjectType) (type)).hasReferenceName()) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> typeSet = eachRefTypeIndexedByProperty.get(propertyName);
            if (typeSet == null) {
                typeSet = com.google.common.collect.Maps.newHashMap();
                eachRefTypeIndexedByProperty.put(propertyName, typeSet);
            }
            com.google.javascript.rhino.jstype.ObjectType objType = ((com.google.javascript.rhino.jstype.ObjectType) (type));
            typeSet.put(objType.getReferenceName(), objType);
        } else if (type instanceof com.google.javascript.rhino.jstype.NamedType) {
            addReferenceTypeIndexedByProperty(propertyName, ((com.google.javascript.rhino.jstype.NamedType) (type)).getReferencedType());
        } else if (type.isUnionType()) {
            for (com.google.javascript.rhino.jstype.JSType alternate : type.toMaybeUnionType().getAlternates()) {
                addReferenceTypeIndexedByProperty(propertyName, alternate);
            }
        }
    }

    public void unregisterPropertyOnType(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> typeSet = eachRefTypeIndexedByProperty.get(propertyName);
        if (typeSet != null) {
            typeSet.remove(type.toObjectType().getReferenceName());
        }
    }

    public com.google.javascript.rhino.jstype.JSType getGreatestSubtypeWithProperty(com.google.javascript.rhino.jstype.JSType type, java.lang.String propertyName) {
        if (greatestSubtypeByProperty.containsKey(propertyName)) {
            return greatestSubtypeByProperty.get(propertyName).getGreatestSubtype(type);
        }
        if (typesIndexedByProperty.containsKey(propertyName)) {
            com.google.javascript.rhino.jstype.JSType built = typesIndexedByProperty.get(propertyName).build();
            greatestSubtypeByProperty.put(propertyName, built);
            return built.getGreatestSubtype(type);
        }
        return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
    }

    public boolean canPropertyBeDefined(com.google.javascript.rhino.jstype.JSType type, java.lang.String propertyName) {
        if (typesIndexedByProperty.containsKey(propertyName)) {
            for (com.google.javascript.rhino.jstype.JSType alt : typesIndexedByProperty.get(propertyName).getAlternates()) {
                if (!alt.getGreatestSubtype(type).isEmptyType()) {
                    return true;
                }
            }
        }
        return false;
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getTypesWithProperty(java.lang.String propertyName) {
        if (typesIndexedByProperty.containsKey(propertyName)) {
            return typesIndexedByProperty.get(propertyName).getAlternates();
        } else {
            return com.google.common.collect.ImmutableList.of();
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getEachReferenceTypeWithProperty(java.lang.String propertyName) {
        if (eachRefTypeIndexedByProperty.containsKey(propertyName)) {
            return eachRefTypeIndexedByProperty.get(propertyName).values();
        } else {
            return com.google.common.collect.ImmutableList.of();
        }
    }

    com.google.javascript.rhino.jstype.ObjectType findCommonSuperObject(com.google.javascript.rhino.jstype.ObjectType a, com.google.javascript.rhino.jstype.ObjectType b) {
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stackA = com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(a);
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stackB = com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(b);
        com.google.javascript.rhino.jstype.ObjectType result = getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE);
        while ((!stackA.isEmpty()) && (!stackB.isEmpty())) {
            com.google.javascript.rhino.jstype.ObjectType currentA = stackA.remove(stackA.size() - 1);
            com.google.javascript.rhino.jstype.ObjectType currentB = stackB.remove(stackB.size() - 1);
            if (currentA.isEquivalentTo(currentB)) {
                result = currentA;
            } else {
                return result;
            }
        } 
        return result;
    }

    private static java.util.List<com.google.javascript.rhino.jstype.ObjectType> getSuperStack(com.google.javascript.rhino.jstype.ObjectType a) {
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stack = com.google.common.collect.Lists.newArrayListWithExpectedSize(5);
        for (com.google.javascript.rhino.jstype.ObjectType current = a; current != null; current = current.getImplicitPrototype()) {
            stack.add(current);
        }
        return stack;
    }

    public void incrementGeneration() {
        for (com.google.javascript.rhino.jstype.NamedType type : resolvedNamedTypes.values()) {
            type.clearResolved();
        }
        unresolvedNamedTypes.putAll(resolvedNamedTypes);
        resolvedNamedTypes.clear();
    }

    boolean isLastGeneration() {
        return lastGeneration;
    }

    public void setLastGeneration(boolean lastGeneration) {
        this.lastGeneration = lastGeneration;
    }

    void registerTypeImplementingInterface(com.google.javascript.rhino.jstype.FunctionType type, com.google.javascript.rhino.jstype.ObjectType interfaceInstance) {
        interfaceToImplementors.put(interfaceInstance.getReferenceName(), type);
    }

    public java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> getDirectImplementors(com.google.javascript.rhino.jstype.ObjectType interfaceInstance) {
        return interfaceToImplementors.get(interfaceInstance.getReferenceName());
    }

    public boolean declareType(java.lang.String name, com.google.javascript.rhino.jstype.JSType t) {
        if (namesToTypes.containsKey(name)) {
            return false;
        }
        register(t, name);
        return true;
    }

    public void overwriteDeclaredType(java.lang.String name, com.google.javascript.rhino.jstype.JSType t) {
        com.google.common.base.Preconditions.checkState(namesToTypes.containsKey(name));
        register(t, name);
    }

    public void forwardDeclareType(java.lang.String name) {
        forwardDeclaredTypes.add(name);
    }

    public boolean isForwardDeclaredType(java.lang.String name) {
        return forwardDeclaredTypes.contains(name);
    }

    public boolean hasNamespace(java.lang.String name) {
        return namespaces.contains(name);
    }

    public com.google.javascript.rhino.jstype.JSType getType(java.lang.String jsTypeName) {
        if (jsTypeName.equals(templateTypeName)) {
            return templateType;
        }
        return namesToTypes.get(jsTypeName);
    }

    public com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return nativeTypes[typeId.ordinal()];
    }

    public com.google.javascript.rhino.jstype.ObjectType getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return ((com.google.javascript.rhino.jstype.ObjectType) (getNativeType(typeId)));
    }

    public com.google.javascript.rhino.jstype.FunctionType getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return ((com.google.javascript.rhino.jstype.FunctionType) (getNativeType(typeId)));
    }

    public com.google.javascript.rhino.jstype.JSType getType(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope, java.lang.String jsTypeName, java.lang.String sourceName, int lineno, int charno) {
        com.google.javascript.rhino.jstype.JSType type = getType(jsTypeName);
        if (type == null) {
            com.google.javascript.rhino.jstype.NamedType namedType = new com.google.javascript.rhino.jstype.NamedType(this, jsTypeName, sourceName, lineno, charno);
            unresolvedNamedTypes.put(scope, namedType);
            type = namedType;
        }
        return type;
    }

    public void clearNamedTypes() {
        resolvedNamedTypes.clear();
        unresolvedNamedTypes.clear();
    }

    public void resolveTypesInScope(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        for (com.google.javascript.rhino.jstype.NamedType type : unresolvedNamedTypes.get(scope)) {
            type.resolve(reporter, scope);
        }
        resolvedNamedTypes.putAll(scope, unresolvedNamedTypes.removeAll(scope));
        if ((scope != null) && (scope.getParentScope() == null)) {
            com.google.javascript.rhino.jstype.PrototypeObjectType globalThis = ((com.google.javascript.rhino.jstype.PrototypeObjectType) (getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS)));
            com.google.javascript.rhino.jstype.JSType windowType = getType("Window");
            if (globalThis.isUnknownType()) {
                com.google.javascript.rhino.jstype.ObjectType windowObjType = com.google.javascript.rhino.jstype.ObjectType.cast(windowType);
                if (windowObjType != null) {
                    globalThis.setImplicitPrototype(windowObjType);
                } else {
                    globalThis.setImplicitPrototype(getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
                }
            }
        }
    }

    public com.google.javascript.rhino.jstype.JSType createOptionalType(com.google.javascript.rhino.jstype.JSType type) {
        if ((type instanceof com.google.javascript.rhino.jstype.UnknownType) || type.isAllType()) {
            return type;
        } else {
            return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        }
    }

    public com.google.javascript.rhino.jstype.JSType createDefaultObjectUnion(com.google.javascript.rhino.jstype.JSType type) {
        return shouldTolerateUndefinedValues() ? createOptionalNullableType(type) : createNullableType(type);
    }

    public com.google.javascript.rhino.jstype.JSType createNullableType(com.google.javascript.rhino.jstype.JSType type) {
        return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType createOptionalNullableType(com.google.javascript.rhino.jstype.JSType type) {
        return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType createUnionType(com.google.javascript.rhino.jstype.JSType... variants) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
        for (com.google.javascript.rhino.jstype.JSType type : variants) {
            builder.addAlternate(type);
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.JSType createUnionType(com.google.javascript.rhino.jstype.JSTypeNative... variants) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
        for (com.google.javascript.rhino.jstype.JSTypeNative typeId : variants) {
            builder.addAlternate(getNativeType(typeId));
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.EnumType createEnumType(java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.jstype.JSType elementsType) {
        return new com.google.javascript.rhino.jstype.EnumType(this, name, source, elementsType);
    }

    com.google.javascript.rhino.jstype.ArrowType createArrowType(com.google.javascript.rhino.Node parametersNode, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.ArrowType(this, parametersNode, returnType);
    }

    com.google.javascript.rhino.jstype.ArrowType createArrowType(com.google.javascript.rhino.Node parametersNode) {
        return new com.google.javascript.rhino.jstype.ArrowType(this, parametersNode, null);
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createFunctionType(returnType, createParameters(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createFunctionType(returnType, createParametersWithVarArgs(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createFunctionType(returnType, createParameters(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createFunctionType(returnType, createParametersWithVarArgs(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createConstructorType(null, null, createParameters(parameterTypes), returnType);
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createConstructorType(null, null, createParametersWithVarArgs(parameterTypes), returnType);
    }

    public com.google.javascript.rhino.jstype.JSType createFunctionType(com.google.javascript.rhino.jstype.ObjectType instanceType, com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(createParameters(parameterTypes)).withReturnType(returnType).withTypeOfThis(instanceType).build();
    }

    public com.google.javascript.rhino.jstype.JSType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.ObjectType instanceType, com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(createParametersWithVarArgs(parameterTypes)).withReturnType(returnType).withTypeOfThis(instanceType).build();
    }

    public com.google.javascript.rhino.Node createParameters(java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createParameters(parameterTypes.toArray(new com.google.javascript.rhino.jstype.JSType[parameterTypes.size()]));
    }

    public com.google.javascript.rhino.Node createParametersWithVarArgs(java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createParametersWithVarArgs(parameterTypes.toArray(new com.google.javascript.rhino.jstype.JSType[parameterTypes.size()]));
    }

    public com.google.javascript.rhino.Node createParameters(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createParameters(false, parameterTypes);
    }

    public com.google.javascript.rhino.Node createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createParameters(true, parameterTypes);
    }

    public com.google.javascript.rhino.Node createOptionalParameters(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
        builder.addOptionalParams(parameterTypes);
        return builder.build();
    }

    private com.google.javascript.rhino.Node createParameters(boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
        int max = parameterTypes.length - 1;
        for (int i = 0; i <= max; i++) {
            if (lastVarArgs && (i == max)) {
                builder.addVarArgs(parameterTypes[i]);
            } else {
                builder.addRequiredParams(parameterTypes[i]);
            }
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        if (lastVarArgs) {
            return createFunctionTypeWithVarArgs(returnType, parameterTypes);
        } else {
            return createFunctionType(returnType, parameterTypes);
        }
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithNewReturnType(com.google.javascript.rhino.jstype.FunctionType existingFunctionType, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).copyFromOtherFunction(existingFunctionType).withReturnType(returnType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithNewThisType(com.google.javascript.rhino.jstype.FunctionType existingFunctionType, com.google.javascript.rhino.jstype.ObjectType thisType) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).copyFromOtherFunction(existingFunctionType).withTypeOfThis(thisType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.Node parameters) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(parameters).withReturnType(returnType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(com.google.javascript.rhino.jstype.JSType returnType, boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        if (lastVarArgs) {
            return createConstructorTypeWithVarArgs(returnType, parameterTypes);
        } else {
            return createConstructorType(returnType, parameterTypes);
        }
    }

    public com.google.javascript.rhino.jstype.ObjectType createObjectType(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        return createObjectType(null, null, implicitPrototype);
    }

    public com.google.javascript.rhino.jstype.RecordType createRecordType(java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty> properties) {
        return new com.google.javascript.rhino.jstype.RecordType(this, properties);
    }

    public com.google.javascript.rhino.jstype.ObjectType createObjectType(java.lang.String name, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        return new com.google.javascript.rhino.jstype.PrototypeObjectType(this, name, implicitPrototype);
    }

    public com.google.javascript.rhino.jstype.ObjectType createAnonymousObjectType() {
        com.google.javascript.rhino.jstype.PrototypeObjectType type = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null);
        type.setPrettyPrint(true);
        return type;
    }

    public boolean resetImplicitPrototype(com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.jstype.ObjectType newImplicitProto) {
        if (type instanceof com.google.javascript.rhino.jstype.PrototypeObjectType) {
            com.google.javascript.rhino.jstype.PrototypeObjectType poType = ((com.google.javascript.rhino.jstype.PrototypeObjectType) (type));
            poType.clearCachedValues();
            poType.setImplicitPrototype(newImplicitProto);
            return true;
        }
        return false;
    }

    com.google.javascript.rhino.jstype.ObjectType createNativeAnonymousObjectType() {
        com.google.javascript.rhino.jstype.PrototypeObjectType type = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null, true);
        type.setPrettyPrint(true);
        return type;
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node parameters, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.FunctionType(this, name, source, createArrowType(parameters, returnType), null, null, true, false);
    }

    public com.google.javascript.rhino.jstype.FunctionType createInterfaceType(java.lang.String name, com.google.javascript.rhino.Node source) {
        return com.google.javascript.rhino.jstype.FunctionType.forInterface(this, name, source);
    }

    public com.google.javascript.rhino.jstype.ParameterizedType createParameterizedType(com.google.javascript.rhino.jstype.ObjectType objectType, com.google.javascript.rhino.jstype.JSType parameterType) {
        return new com.google.javascript.rhino.jstype.ParameterizedType(this, objectType, parameterType);
    }

    @com.google.common.annotations.VisibleForTesting
    public com.google.javascript.rhino.jstype.JSType createNamedType(java.lang.String reference, java.lang.String sourceName, int lineno, int charno) {
        return new com.google.javascript.rhino.jstype.NamedType(this, reference, sourceName, lineno, charno);
    }

    public void identifyNonNullableName(java.lang.String name) {
        com.google.common.base.Preconditions.checkNotNull(name);
        nonNullableTypeNames.add(name);
    }

    public com.google.javascript.rhino.jstype.JSType createFromTypeNodes(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        if (resolveMode == com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS) {
            boolean hasNames = hasTypeName(n);
            if (hasNames) {
                return new com.google.javascript.rhino.jstype.UnresolvedTypeExpression(this, n, sourceName);
            }
        }
        return createFromTypeNodesInternal(n, sourceName, scope);
    }

    private boolean hasTypeName(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.STRING) {
            return true;
        }
        for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
            if (hasTypeName(child)) {
                return true;
            }
        }
        return false;
    }

    private com.google.javascript.rhino.jstype.JSType createFromTypeNodesInternal(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.LC :
                return createRecordTypeFromNodes(n.getFirstChild(), sourceName, scope);
            case com.google.javascript.rhino.Token.BANG :
                return createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope).restrictByNotNullOrUndefined();
            case com.google.javascript.rhino.Token.QMARK :
                com.google.javascript.rhino.Node firstChild = n.getFirstChild();
                if (firstChild == null) {
                    return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                }
                return createDefaultObjectUnion(createFromTypeNodesInternal(firstChild, sourceName, scope));
            case com.google.javascript.rhino.Token.EQUALS :
                return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope));
            case com.google.javascript.rhino.Token.ELLIPSIS :
                return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope));
            case com.google.javascript.rhino.Token.STAR :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
            case com.google.javascript.rhino.Token.LB :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
            case com.google.javascript.rhino.Token.PIPE :
                com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    builder.addAlternate(createFromTypeNodesInternal(child, sourceName, scope));
                }
                return builder.build();
            case com.google.javascript.rhino.Token.EMPTY :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            case com.google.javascript.rhino.Token.VOID :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            case com.google.javascript.rhino.Token.STRING :
                com.google.javascript.rhino.jstype.JSType namedType = getType(scope, n.getString(), sourceName, n.getLineno(), n.getCharno());
                if (resolveMode != com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES) {
                    namedType = namedType.resolveInternal(reporter, scope);
                }
                if ((namedType instanceof com.google.javascript.rhino.jstype.ObjectType) && (!nonNullableTypeNames.contains(n.getString()))) {
                    com.google.javascript.rhino.Node typeList = n.getFirstChild();
                    if ((typeList != null) && ("Array".equals(n.getString()) || "Object".equals(n.getString()))) {
                        com.google.javascript.rhino.jstype.JSType parameterType = createFromTypeNodesInternal(typeList.getLastChild(), sourceName, scope);
                        namedType = new com.google.javascript.rhino.jstype.ParameterizedType(this, ((com.google.javascript.rhino.jstype.ObjectType) (namedType)), parameterType);
                        if (typeList.hasMoreThanOneChild()) {
                            com.google.javascript.rhino.jstype.JSType indexType = createFromTypeNodesInternal(typeList.getFirstChild(), sourceName, scope);
                            namedType = new com.google.javascript.rhino.jstype.IndexedType(this, ((com.google.javascript.rhino.jstype.ObjectType) (namedType)), indexType);
                        }
                    }
                    return createDefaultObjectUnion(namedType);
                } else {
                    return namedType;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.javascript.rhino.jstype.ObjectType thisType = null;
                boolean isConstructor = false;
                com.google.javascript.rhino.Node current = n.getFirstChild();
                if ((current.getType() == com.google.javascript.rhino.Token.THIS) || (current.getType() == com.google.javascript.rhino.Token.NEW)) {
                    com.google.javascript.rhino.Node contextNode = current.getFirstChild();
                    thisType = com.google.javascript.rhino.jstype.ObjectType.cast(createFromTypeNodesInternal(contextNode, sourceName, scope).restrictByNotNullOrUndefined());
                    if (thisType == null) {
                        reporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0(current.getType() == com.google.javascript.rhino.Token.THIS ? "msg.jsdoc.function.thisnotobject" : "msg.jsdoc.function.newnotobject"), sourceName, contextNode.getLineno(), contextNode.getCharno());
                    }
                    isConstructor = current.getType() == com.google.javascript.rhino.Token.NEW;
                    current = current.getNext();
                }
                com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
                if (current.getType() == com.google.javascript.rhino.Token.PARAM_LIST) {
                    com.google.javascript.rhino.Node args = current.getFirstChild();
                    for (com.google.javascript.rhino.Node arg = current.getFirstChild(); arg != null; arg = arg.getNext()) {
                        if (arg.getType() == com.google.javascript.rhino.Token.ELLIPSIS) {
                            if (arg.getChildCount() == 0) {
                                paramBuilder.addVarArgs(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
                            } else {
                                paramBuilder.addVarArgs(createFromTypeNodesInternal(arg.getFirstChild(), sourceName, scope));
                            }
                        } else {
                            com.google.javascript.rhino.jstype.JSType type = createFromTypeNodesInternal(arg, sourceName, scope);
                            if (arg.getType() == com.google.javascript.rhino.Token.EQUALS) {
                                boolean addSuccess = paramBuilder.addOptionalParams(type);
                                if (!addSuccess) {
                                    reporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0("msg.jsdoc.function.varargs"), sourceName, arg.getLineno(), arg.getCharno());
                                }
                            } else {
                                paramBuilder.addRequiredParams(type);
                            }
                        }
                    }
                    current = current.getNext();
                }
                com.google.javascript.rhino.jstype.JSType returnType = createFromTypeNodesInternal(current, sourceName, scope);
                return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParams(paramBuilder).withReturnType(returnType).withTypeOfThis(thisType).setIsConstructor(isConstructor).build();
        }
        throw new java.lang.IllegalStateException("Unexpected node in type expression: " + n.toString());
    }

    private com.google.javascript.rhino.jstype.JSType createRecordTypeFromNodes(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        com.google.javascript.rhino.jstype.RecordTypeBuilder builder = new com.google.javascript.rhino.jstype.RecordTypeBuilder(this);
        for (com.google.javascript.rhino.Node fieldTypeNode = n.getFirstChild(); fieldTypeNode != null; fieldTypeNode = fieldTypeNode.getNext()) {
            com.google.javascript.rhino.Node fieldNameNode = fieldTypeNode;
            boolean hasType = false;
            if (fieldTypeNode.getType() == com.google.javascript.rhino.Token.COLON) {
                fieldNameNode = fieldTypeNode.getFirstChild();
                hasType = true;
            }
            java.lang.String fieldName = fieldNameNode.getString();
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(45).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("fieldName",fieldName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateType",com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.lastGeneration",com.google.javascript.rhino.jstype.JSTypeRegistry.this.lastGeneration);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.nativeTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.nativeTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("fieldNameNode",fieldNameNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.interfaceToImplementors",com.google.javascript.rhino.jstype.JSTypeRegistry.this.interfaceToImplementors);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.forwardDeclaredTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.forwardDeclaredTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolvedNamedTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolvedNamedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.tolerateUndefinedValues",com.google.javascript.rhino.jstype.JSTypeRegistry.this.tolerateUndefinedValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("scope",scope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("builder",builder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.typesIndexedByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.typesIndexedByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.namesToTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.namesToTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.namespaces",com.google.javascript.rhino.jstype.JSTypeRegistry.this.namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateTypeName",com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateTypeName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.reporter",com.google.javascript.rhino.jstype.JSTypeRegistry.this.reporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.eachRefTypeIndexedByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.eachRefTypeIndexedByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("\"\\"\"","\"");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.greatestSubtypeByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.greatestSubtypeByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.nonNullableTypeNames",com.google.javascript.rhino.jstype.JSTypeRegistry.this.nonNullableTypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.unresolvedNamedTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.unresolvedNamedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("sourceName",sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolveMode",com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolveMode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("\"'\"","'");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectInput("hasType",hasType);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(45).collectionEnds();
            }
            if (runtimeAngelicValue) if (fieldName.startsWith("'") || fieldName.startsWith("\"")) {
                fieldName = fieldName.substring(1, fieldName.length() - 1);
            }
            com.google.javascript.rhino.jstype.JSType fieldType = null;
            if (hasType) {
                fieldType = createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);
            } else {
                fieldType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            if (builder.addProperty(fieldName, fieldType, fieldNameNode) == null) {
                reporter.warning("Duplicate record field " + fieldName, sourceName, n.getLineno(), fieldNameNode.getCharno());
            }
        }
        return builder.build();
    }

    public void setTemplateTypeName(java.lang.String name) {
        templateTypeName = name;
        templateType = new com.google.javascript.rhino.jstype.TemplateType(this, name);
    }

    public void clearTemplateTypeName() {
        templateTypeName = null;
        templateType = null;
    }
}
[362920] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659909222667
GPR[EPVATF]-1659909223893
GPR[SPS]-1659909223893
[364450] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class JSTypeRegistry implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;

    private transient final com.google.javascript.rhino.ErrorReporter reporter;

    private final com.google.javascript.rhino.jstype.JSType[] nativeTypes;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.JSType> namesToTypes;

    private final java.util.Set<java.lang.String> namespaces = new java.util.HashSet<java.lang.String>();

    private final java.util.Set<java.lang.String> nonNullableTypeNames = new java.util.HashSet<java.lang.String>();

    private final java.util.Set<java.lang.String> forwardDeclaredTypes = new java.util.HashSet<java.lang.String>();

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.UnionTypeBuilder> typesIndexedByProperty = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>> eachRefTypeIndexedByProperty = com.google.common.collect.Maps.newHashMap();

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.JSType> greatestSubtypeByProperty = com.google.common.collect.Maps.newHashMap();

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.rhino.jstype.FunctionType> interfaceToImplementors = com.google.common.collect.LinkedHashMultimap.create();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.NamedType> unresolvedNamedTypes = com.google.common.collect.ArrayListMultimap.create();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.NamedType> resolvedNamedTypes = com.google.common.collect.ArrayListMultimap.create();

    private boolean lastGeneration = true;

    private java.lang.String templateTypeName;

    private com.google.javascript.rhino.jstype.TemplateType templateType;

    private final boolean tolerateUndefinedValues;

    public static enum ResolveMode {

        LAZY_EXPRESSIONS,
        LAZY_NAMES,
        IMMEDIATE;}

    private com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES;

    public JSTypeRegistry(com.google.javascript.rhino.ErrorReporter reporter) {
        this(reporter, false);
    }

    public JSTypeRegistry(com.google.javascript.rhino.ErrorReporter reporter, boolean tolerateUndefinedValues) {
        this.reporter = reporter;
        nativeTypes = new com.google.javascript.rhino.jstype.JSType[com.google.javascript.rhino.jstype.JSTypeNative.values().length];
        namesToTypes = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.JSType>();
        resetForTypeCheck();
        this.tolerateUndefinedValues = tolerateUndefinedValues;
    }

    public void setResolveMode(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode mode) {
        this.resolveMode = mode;
    }

    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode getResolveMode() {
        return resolveMode;
    }

    public com.google.javascript.rhino.ErrorReporter getErrorReporter() {
        return reporter;
    }

    public boolean shouldTolerateUndefinedValues() {
        return tolerateUndefinedValues;
    }

    public void resetForTypeCheck() {
        typesIndexedByProperty.clear();
        eachRefTypeIndexedByProperty.clear();
        initializeBuiltInTypes();
        namesToTypes.clear();
        namespaces.clear();
        initializeRegistry();
    }

    private void initializeBuiltInTypes() {
        com.google.javascript.rhino.jstype.BooleanType BOOLEAN_TYPE = new com.google.javascript.rhino.jstype.BooleanType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);
        com.google.javascript.rhino.jstype.NullType NULL_TYPE = new com.google.javascript.rhino.jstype.NullType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, NULL_TYPE);
        com.google.javascript.rhino.jstype.NumberType NUMBER_TYPE = new com.google.javascript.rhino.jstype.NumberType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);
        com.google.javascript.rhino.jstype.StringType STRING_TYPE = new com.google.javascript.rhino.jstype.StringType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE, STRING_TYPE);
        com.google.javascript.rhino.jstype.UnknownType UNKNOWN_TYPE = new com.google.javascript.rhino.jstype.UnknownType(this, false);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE, new com.google.javascript.rhino.jstype.UnknownType(this, true));
        com.google.javascript.rhino.jstype.VoidType VOID_TYPE = new com.google.javascript.rhino.jstype.VoidType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE, VOID_TYPE);
        com.google.javascript.rhino.jstype.AllType ALL_TYPE = new com.google.javascript.rhino.jstype.AllType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE, ALL_TYPE);
        com.google.javascript.rhino.jstype.PrototypeObjectType TOP_LEVEL_PROTOTYPE = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null, true);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Object", null, createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);
        OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);
        com.google.javascript.rhino.jstype.ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType FUNCTION_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Function", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE), null, null, true, true);
        FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);
        com.google.javascript.rhino.jstype.NoType NO_TYPE = new com.google.javascript.rhino.jstype.NoType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE, NO_TYPE);
        com.google.javascript.rhino.jstype.NoObjectType NO_OBJECT_TYPE = new com.google.javascript.rhino.jstype.NoObjectType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.NoObjectType NO_RESOLVED_TYPE = new com.google.javascript.rhino.jstype.NoResolvedType(this);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);
        com.google.javascript.rhino.jstype.FunctionType ARRAY_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Array", null, createArrowType(createParametersWithVarArgs(ALL_TYPE), null), null, null, true, true);
        ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType = ARRAY_FUNCTION_TYPE.getInstanceType();
        com.google.javascript.rhino.jstype.ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);
        com.google.javascript.rhino.jstype.FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Boolean", null, createArrowType(createParameters(false, ALL_TYPE), BOOLEAN_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType BOOLEAN_OBJECT_TYPE = BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType DATE_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Date", null, createArrowType(createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_TYPE, DATE_TYPE);
        com.google.javascript.rhino.jstype.FunctionType ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "Error");
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE, ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType EVAL_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "EvalError");
        EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType RANGE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "RangeError");
        RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType REFERENCE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "ReferenceError");
        REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType REFERENCE_ERROR_TYPE = REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType SYNTAX_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "SyntaxError");
        SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType TYPE_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "TypeError");
        TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType URI_ERROR_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.ErrorFunctionType(this, "URIError");
        URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);
        com.google.javascript.rhino.jstype.FunctionType NUMBER_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Number", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType NUMBER_OBJECT_TYPE = NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType REGEXP_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "RegExp", null, createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)), null, null, true, true);
        REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType = REGEXP_FUNCTION_TYPE.getInstanceType();
        com.google.javascript.rhino.jstype.ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);
        com.google.javascript.rhino.jstype.FunctionType STRING_OBJECT_FUNCTION_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "String", null, createArrowType(createParameters(false, ALL_TYPE), STRING_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.ObjectType STRING_OBJECT_TYPE = STRING_OBJECT_FUNCTION_TYPE.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.JSType OBJECT_NUMBER_STRING = createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);
        com.google.javascript.rhino.jstype.JSType OBJECT_NUMBER_STRING_BOOLEAN = createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);
        com.google.javascript.rhino.jstype.JSType NUMBER_STRING_BOOLEAN = createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);
        com.google.javascript.rhino.jstype.JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING, NUMBER_STRING);
        com.google.javascript.rhino.jstype.JSType STRING_VALUE_OR_OBJECT_TYPE = createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.JSType NUMBER_VALUE_OR_OBJECT_TYPE = createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);
        com.google.javascript.rhino.jstype.FunctionType U2U_FUNCTION_TYPE = createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.FunctionType U2U_CONSTRUCTOR_TYPE = new com.google.javascript.rhino.jstype.FunctionType(this, "Function", null, createArrowType(createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE), NO_OBJECT_TYPE, null, true, true) {
            private static final long serialVersionUID = 1L;

            @java.lang.Override
            public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
                return registry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE);
            }
        };
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);
        FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);
        U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);
        com.google.javascript.rhino.jstype.FunctionType LEAST_FUNCTION_TYPE = createFunctionType(NO_TYPE, true, ALL_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);
        com.google.javascript.rhino.jstype.FunctionType GLOBAL_THIS_CTOR = new com.google.javascript.rhino.jstype.FunctionType(this, "global this", null, createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE), null, null, true, true);
        com.google.javascript.rhino.jstype.ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);
        com.google.javascript.rhino.jstype.FunctionType GREATEST_FUNCTION_TYPE = createFunctionType(ALL_TYPE, true, NO_TYPE);
        registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);
        registerPropertyOnType("prototype", OBJECT_FUNCTION_TYPE);
    }

    private void initializeRegistry() {
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.DATE_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE), "Null");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.EVAL_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.RANGE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REFERENCE_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_OBJECT_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), "Undefined");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), "void");
        register(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_INSTANCE_TYPE), "Function");
    }

    private void register(com.google.javascript.rhino.jstype.JSType type) {
        register(type, type.toString());
    }

    private void register(com.google.javascript.rhino.jstype.JSType type, java.lang.String name) {
        namesToTypes.put(name, type);
        while (name.indexOf('.') > 0) {
            name = name.substring(0, name.lastIndexOf('.'));
            namespaces.add(name);
        } 
    }

    private void registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId, com.google.javascript.rhino.jstype.JSType type) {
        nativeTypes[typeId.ordinal()] = type;
    }

    public void registerPropertyOnType(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);
        if (typeSet == null) {
            typeSet = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this, com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE);
            typesIndexedByProperty.put(propertyName, typeSet);
        }
        typeSet.addAlternate(type);
        addReferenceTypeIndexedByProperty(propertyName, type);
        greatestSubtypeByProperty.remove(propertyName);
    }

    private void addReferenceTypeIndexedByProperty(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        if ((type instanceof com.google.javascript.rhino.jstype.ObjectType) && ((com.google.javascript.rhino.jstype.ObjectType) (type)).hasReferenceName()) {
            java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> typeSet = eachRefTypeIndexedByProperty.get(propertyName);
            if (typeSet == null) {
                typeSet = com.google.common.collect.Maps.newHashMap();
                eachRefTypeIndexedByProperty.put(propertyName, typeSet);
            }
            com.google.javascript.rhino.jstype.ObjectType objType = ((com.google.javascript.rhino.jstype.ObjectType) (type));
            typeSet.put(objType.getReferenceName(), objType);
        } else if (type instanceof com.google.javascript.rhino.jstype.NamedType) {
            addReferenceTypeIndexedByProperty(propertyName, ((com.google.javascript.rhino.jstype.NamedType) (type)).getReferencedType());
        } else if (type.isUnionType()) {
            for (com.google.javascript.rhino.jstype.JSType alternate : type.toMaybeUnionType().getAlternates()) {
                addReferenceTypeIndexedByProperty(propertyName, alternate);
            }
        }
    }

    public void unregisterPropertyOnType(java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType type) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> typeSet = eachRefTypeIndexedByProperty.get(propertyName);
        if (typeSet != null) {
            typeSet.remove(type.toObjectType().getReferenceName());
        }
    }

    public com.google.javascript.rhino.jstype.JSType getGreatestSubtypeWithProperty(com.google.javascript.rhino.jstype.JSType type, java.lang.String propertyName) {
        if (greatestSubtypeByProperty.containsKey(propertyName)) {
            return greatestSubtypeByProperty.get(propertyName).getGreatestSubtype(type);
        }
        if (typesIndexedByProperty.containsKey(propertyName)) {
            com.google.javascript.rhino.jstype.JSType built = typesIndexedByProperty.get(propertyName).build();
            greatestSubtypeByProperty.put(propertyName, built);
            return built.getGreatestSubtype(type);
        }
        return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
    }

    public boolean canPropertyBeDefined(com.google.javascript.rhino.jstype.JSType type, java.lang.String propertyName) {
        if (typesIndexedByProperty.containsKey(propertyName)) {
            for (com.google.javascript.rhino.jstype.JSType alt : typesIndexedByProperty.get(propertyName).getAlternates()) {
                if (!alt.getGreatestSubtype(type).isEmptyType()) {
                    return true;
                }
            }
        }
        return false;
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getTypesWithProperty(java.lang.String propertyName) {
        if (typesIndexedByProperty.containsKey(propertyName)) {
            return typesIndexedByProperty.get(propertyName).getAlternates();
        } else {
            return com.google.common.collect.ImmutableList.of();
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getEachReferenceTypeWithProperty(java.lang.String propertyName) {
        if (eachRefTypeIndexedByProperty.containsKey(propertyName)) {
            return eachRefTypeIndexedByProperty.get(propertyName).values();
        } else {
            return com.google.common.collect.ImmutableList.of();
        }
    }

    com.google.javascript.rhino.jstype.ObjectType findCommonSuperObject(com.google.javascript.rhino.jstype.ObjectType a, com.google.javascript.rhino.jstype.ObjectType b) {
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stackA = com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(a);
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stackB = com.google.javascript.rhino.jstype.JSTypeRegistry.getSuperStack(b);
        com.google.javascript.rhino.jstype.ObjectType result = getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE);
        while ((!stackA.isEmpty()) && (!stackB.isEmpty())) {
            com.google.javascript.rhino.jstype.ObjectType currentA = stackA.remove(stackA.size() - 1);
            com.google.javascript.rhino.jstype.ObjectType currentB = stackB.remove(stackB.size() - 1);
            if (currentA.isEquivalentTo(currentB)) {
                result = currentA;
            } else {
                return result;
            }
        } 
        return result;
    }

    private static java.util.List<com.google.javascript.rhino.jstype.ObjectType> getSuperStack(com.google.javascript.rhino.jstype.ObjectType a) {
        java.util.List<com.google.javascript.rhino.jstype.ObjectType> stack = com.google.common.collect.Lists.newArrayListWithExpectedSize(5);
        for (com.google.javascript.rhino.jstype.ObjectType current = a; current != null; current = current.getImplicitPrototype()) {
            stack.add(current);
        }
        return stack;
    }

    public void incrementGeneration() {
        for (com.google.javascript.rhino.jstype.NamedType type : resolvedNamedTypes.values()) {
            type.clearResolved();
        }
        unresolvedNamedTypes.putAll(resolvedNamedTypes);
        resolvedNamedTypes.clear();
    }

    boolean isLastGeneration() {
        return lastGeneration;
    }

    public void setLastGeneration(boolean lastGeneration) {
        this.lastGeneration = lastGeneration;
    }

    void registerTypeImplementingInterface(com.google.javascript.rhino.jstype.FunctionType type, com.google.javascript.rhino.jstype.ObjectType interfaceInstance) {
        interfaceToImplementors.put(interfaceInstance.getReferenceName(), type);
    }

    public java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> getDirectImplementors(com.google.javascript.rhino.jstype.ObjectType interfaceInstance) {
        return interfaceToImplementors.get(interfaceInstance.getReferenceName());
    }

    public boolean declareType(java.lang.String name, com.google.javascript.rhino.jstype.JSType t) {
        if (namesToTypes.containsKey(name)) {
            return false;
        }
        register(t, name);
        return true;
    }

    public void overwriteDeclaredType(java.lang.String name, com.google.javascript.rhino.jstype.JSType t) {
        com.google.common.base.Preconditions.checkState(namesToTypes.containsKey(name));
        register(t, name);
    }

    public void forwardDeclareType(java.lang.String name) {
        forwardDeclaredTypes.add(name);
    }

    public boolean isForwardDeclaredType(java.lang.String name) {
        return forwardDeclaredTypes.contains(name);
    }

    public boolean hasNamespace(java.lang.String name) {
        return namespaces.contains(name);
    }

    public com.google.javascript.rhino.jstype.JSType getType(java.lang.String jsTypeName) {
        if (jsTypeName.equals(templateTypeName)) {
            return templateType;
        }
        return namesToTypes.get(jsTypeName);
    }

    public com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return nativeTypes[typeId.ordinal()];
    }

    public com.google.javascript.rhino.jstype.ObjectType getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return ((com.google.javascript.rhino.jstype.ObjectType) (getNativeType(typeId)));
    }

    public com.google.javascript.rhino.jstype.FunctionType getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return ((com.google.javascript.rhino.jstype.FunctionType) (getNativeType(typeId)));
    }

    public com.google.javascript.rhino.jstype.JSType getType(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope, java.lang.String jsTypeName, java.lang.String sourceName, int lineno, int charno) {
        com.google.javascript.rhino.jstype.JSType type = getType(jsTypeName);
        if (type == null) {
            com.google.javascript.rhino.jstype.NamedType namedType = new com.google.javascript.rhino.jstype.NamedType(this, jsTypeName, sourceName, lineno, charno);
            unresolvedNamedTypes.put(scope, namedType);
            type = namedType;
        }
        return type;
    }

    public void clearNamedTypes() {
        resolvedNamedTypes.clear();
        unresolvedNamedTypes.clear();
    }

    public void resolveTypesInScope(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        for (com.google.javascript.rhino.jstype.NamedType type : unresolvedNamedTypes.get(scope)) {
            type.resolve(reporter, scope);
        }
        resolvedNamedTypes.putAll(scope, unresolvedNamedTypes.removeAll(scope));
        if ((scope != null) && (scope.getParentScope() == null)) {
            com.google.javascript.rhino.jstype.PrototypeObjectType globalThis = ((com.google.javascript.rhino.jstype.PrototypeObjectType) (getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS)));
            com.google.javascript.rhino.jstype.JSType windowType = getType("Window");
            if (globalThis.isUnknownType()) {
                com.google.javascript.rhino.jstype.ObjectType windowObjType = com.google.javascript.rhino.jstype.ObjectType.cast(windowType);
                if (windowObjType != null) {
                    globalThis.setImplicitPrototype(windowObjType);
                } else {
                    globalThis.setImplicitPrototype(getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
                }
            }
        }
    }

    public com.google.javascript.rhino.jstype.JSType createOptionalType(com.google.javascript.rhino.jstype.JSType type) {
        if ((type instanceof com.google.javascript.rhino.jstype.UnknownType) || type.isAllType()) {
            return type;
        } else {
            return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE));
        }
    }

    public com.google.javascript.rhino.jstype.JSType createDefaultObjectUnion(com.google.javascript.rhino.jstype.JSType type) {
        return shouldTolerateUndefinedValues() ? createOptionalNullableType(type) : createNullableType(type);
    }

    public com.google.javascript.rhino.jstype.JSType createNullableType(com.google.javascript.rhino.jstype.JSType type) {
        return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType createOptionalNullableType(com.google.javascript.rhino.jstype.JSType type) {
        return createUnionType(type, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE), getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType createUnionType(com.google.javascript.rhino.jstype.JSType... variants) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
        for (com.google.javascript.rhino.jstype.JSType type : variants) {
            builder.addAlternate(type);
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.JSType createUnionType(com.google.javascript.rhino.jstype.JSTypeNative... variants) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
        for (com.google.javascript.rhino.jstype.JSTypeNative typeId : variants) {
            builder.addAlternate(getNativeType(typeId));
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.EnumType createEnumType(java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.jstype.JSType elementsType) {
        return new com.google.javascript.rhino.jstype.EnumType(this, name, source, elementsType);
    }

    com.google.javascript.rhino.jstype.ArrowType createArrowType(com.google.javascript.rhino.Node parametersNode, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.ArrowType(this, parametersNode, returnType);
    }

    com.google.javascript.rhino.jstype.ArrowType createArrowType(com.google.javascript.rhino.Node parametersNode) {
        return new com.google.javascript.rhino.jstype.ArrowType(this, parametersNode, null);
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createFunctionType(returnType, createParameters(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createFunctionType(returnType, createParametersWithVarArgs(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createFunctionType(returnType, createParameters(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createFunctionType(returnType, createParametersWithVarArgs(parameterTypes));
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createConstructorType(null, null, createParameters(parameterTypes), returnType);
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createConstructorType(null, null, createParametersWithVarArgs(parameterTypes), returnType);
    }

    public com.google.javascript.rhino.jstype.JSType createFunctionType(com.google.javascript.rhino.jstype.ObjectType instanceType, com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(createParameters(parameterTypes)).withReturnType(returnType).withTypeOfThis(instanceType).build();
    }

    public com.google.javascript.rhino.jstype.JSType createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.ObjectType instanceType, com.google.javascript.rhino.jstype.JSType returnType, java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(createParametersWithVarArgs(parameterTypes)).withReturnType(returnType).withTypeOfThis(instanceType).build();
    }

    public com.google.javascript.rhino.Node createParameters(java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createParameters(parameterTypes.toArray(new com.google.javascript.rhino.jstype.JSType[parameterTypes.size()]));
    }

    public com.google.javascript.rhino.Node createParametersWithVarArgs(java.util.List<com.google.javascript.rhino.jstype.JSType> parameterTypes) {
        return createParametersWithVarArgs(parameterTypes.toArray(new com.google.javascript.rhino.jstype.JSType[parameterTypes.size()]));
    }

    public com.google.javascript.rhino.Node createParameters(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createParameters(false, parameterTypes);
    }

    public com.google.javascript.rhino.Node createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        return createParameters(true, parameterTypes);
    }

    public com.google.javascript.rhino.Node createOptionalParameters(com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
        builder.addOptionalParams(parameterTypes);
        return builder.build();
    }

    private com.google.javascript.rhino.Node createParameters(boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
        int max = parameterTypes.length - 1;
        for (int i = 0; i <= max; i++) {
            if (lastVarArgs && (i == max)) {
                builder.addVarArgs(parameterTypes[i]);
            } else {
                builder.addRequiredParams(parameterTypes[i]);
            }
        }
        return builder.build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        if (lastVarArgs) {
            return createFunctionTypeWithVarArgs(returnType, parameterTypes);
        } else {
            return createFunctionType(returnType, parameterTypes);
        }
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithNewReturnType(com.google.javascript.rhino.jstype.FunctionType existingFunctionType, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).copyFromOtherFunction(existingFunctionType).withReturnType(returnType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionTypeWithNewThisType(com.google.javascript.rhino.jstype.FunctionType existingFunctionType, com.google.javascript.rhino.jstype.ObjectType thisType) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).copyFromOtherFunction(existingFunctionType).withTypeOfThis(thisType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createFunctionType(com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.Node parameters) {
        return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParamsNode(parameters).withReturnType(returnType).build();
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(com.google.javascript.rhino.jstype.JSType returnType, boolean lastVarArgs, com.google.javascript.rhino.jstype.JSType... parameterTypes) {
        if (lastVarArgs) {
            return createConstructorTypeWithVarArgs(returnType, parameterTypes);
        } else {
            return createConstructorType(returnType, parameterTypes);
        }
    }

    public com.google.javascript.rhino.jstype.ObjectType createObjectType(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        return createObjectType(null, null, implicitPrototype);
    }

    public com.google.javascript.rhino.jstype.RecordType createRecordType(java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty> properties) {
        return new com.google.javascript.rhino.jstype.RecordType(this, properties);
    }

    public com.google.javascript.rhino.jstype.ObjectType createObjectType(java.lang.String name, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        return new com.google.javascript.rhino.jstype.PrototypeObjectType(this, name, implicitPrototype);
    }

    public com.google.javascript.rhino.jstype.ObjectType createAnonymousObjectType() {
        com.google.javascript.rhino.jstype.PrototypeObjectType type = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null);
        type.setPrettyPrint(true);
        return type;
    }

    public boolean resetImplicitPrototype(com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.jstype.ObjectType newImplicitProto) {
        if (type instanceof com.google.javascript.rhino.jstype.PrototypeObjectType) {
            com.google.javascript.rhino.jstype.PrototypeObjectType poType = ((com.google.javascript.rhino.jstype.PrototypeObjectType) (type));
            poType.clearCachedValues();
            poType.setImplicitPrototype(newImplicitProto);
            return true;
        }
        return false;
    }

    com.google.javascript.rhino.jstype.ObjectType createNativeAnonymousObjectType() {
        com.google.javascript.rhino.jstype.PrototypeObjectType type = new com.google.javascript.rhino.jstype.PrototypeObjectType(this, null, null, true);
        type.setPrettyPrint(true);
        return type;
    }

    public com.google.javascript.rhino.jstype.FunctionType createConstructorType(java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node parameters, com.google.javascript.rhino.jstype.JSType returnType) {
        return new com.google.javascript.rhino.jstype.FunctionType(this, name, source, createArrowType(parameters, returnType), null, null, true, false);
    }

    public com.google.javascript.rhino.jstype.FunctionType createInterfaceType(java.lang.String name, com.google.javascript.rhino.Node source) {
        return com.google.javascript.rhino.jstype.FunctionType.forInterface(this, name, source);
    }

    public com.google.javascript.rhino.jstype.ParameterizedType createParameterizedType(com.google.javascript.rhino.jstype.ObjectType objectType, com.google.javascript.rhino.jstype.JSType parameterType) {
        return new com.google.javascript.rhino.jstype.ParameterizedType(this, objectType, parameterType);
    }

    @com.google.common.annotations.VisibleForTesting
    public com.google.javascript.rhino.jstype.JSType createNamedType(java.lang.String reference, java.lang.String sourceName, int lineno, int charno) {
        return new com.google.javascript.rhino.jstype.NamedType(this, reference, sourceName, lineno, charno);
    }

    public void identifyNonNullableName(java.lang.String name) {
        com.google.common.base.Preconditions.checkNotNull(name);
        nonNullableTypeNames.add(name);
    }

    public com.google.javascript.rhino.jstype.JSType createFromTypeNodes(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        if (resolveMode == com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS) {
            boolean hasNames = hasTypeName(n);
            if (hasNames) {
                return new com.google.javascript.rhino.jstype.UnresolvedTypeExpression(this, n, sourceName);
            }
        }
        return createFromTypeNodesInternal(n, sourceName, scope);
    }

    private boolean hasTypeName(com.google.javascript.rhino.Node n) {
        if (n.getType() == com.google.javascript.rhino.Token.STRING) {
            return true;
        }
        for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
            if (hasTypeName(child)) {
                return true;
            }
        }
        return false;
    }

    private com.google.javascript.rhino.jstype.JSType createFromTypeNodesInternal(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.LC :
                return createRecordTypeFromNodes(n.getFirstChild(), sourceName, scope);
            case com.google.javascript.rhino.Token.BANG :
                return createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope).restrictByNotNullOrUndefined();
            case com.google.javascript.rhino.Token.QMARK :
                com.google.javascript.rhino.Node firstChild = n.getFirstChild();
                if (firstChild == null) {
                    return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                }
                return createDefaultObjectUnion(createFromTypeNodesInternal(firstChild, sourceName, scope));
            case com.google.javascript.rhino.Token.EQUALS :
                return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope));
            case com.google.javascript.rhino.Token.ELLIPSIS :
                return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(), sourceName, scope));
            case com.google.javascript.rhino.Token.STAR :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
            case com.google.javascript.rhino.Token.LB :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
            case com.google.javascript.rhino.Token.PIPE :
                com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(this);
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    builder.addAlternate(createFromTypeNodesInternal(child, sourceName, scope));
                }
                return builder.build();
            case com.google.javascript.rhino.Token.EMPTY :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            case com.google.javascript.rhino.Token.VOID :
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            case com.google.javascript.rhino.Token.STRING :
                com.google.javascript.rhino.jstype.JSType namedType = getType(scope, n.getString(), sourceName, n.getLineno(), n.getCharno());
                if (resolveMode != com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES) {
                    namedType = namedType.resolveInternal(reporter, scope);
                }
                if ((namedType instanceof com.google.javascript.rhino.jstype.ObjectType) && (!nonNullableTypeNames.contains(n.getString()))) {
                    com.google.javascript.rhino.Node typeList = n.getFirstChild();
                    if ((typeList != null) && ("Array".equals(n.getString()) || "Object".equals(n.getString()))) {
                        com.google.javascript.rhino.jstype.JSType parameterType = createFromTypeNodesInternal(typeList.getLastChild(), sourceName, scope);
                        namedType = new com.google.javascript.rhino.jstype.ParameterizedType(this, ((com.google.javascript.rhino.jstype.ObjectType) (namedType)), parameterType);
                        if (typeList.hasMoreThanOneChild()) {
                            com.google.javascript.rhino.jstype.JSType indexType = createFromTypeNodesInternal(typeList.getFirstChild(), sourceName, scope);
                            namedType = new com.google.javascript.rhino.jstype.IndexedType(this, ((com.google.javascript.rhino.jstype.ObjectType) (namedType)), indexType);
                        }
                    }
                    return createDefaultObjectUnion(namedType);
                } else {
                    return namedType;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.javascript.rhino.jstype.ObjectType thisType = null;
                boolean isConstructor = false;
                com.google.javascript.rhino.Node current = n.getFirstChild();
                if ((current.getType() == com.google.javascript.rhino.Token.THIS) || (current.getType() == com.google.javascript.rhino.Token.NEW)) {
                    com.google.javascript.rhino.Node contextNode = current.getFirstChild();
                    thisType = com.google.javascript.rhino.jstype.ObjectType.cast(createFromTypeNodesInternal(contextNode, sourceName, scope).restrictByNotNullOrUndefined());
                    if (thisType == null) {
                        reporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0(current.getType() == com.google.javascript.rhino.Token.THIS ? "msg.jsdoc.function.thisnotobject" : "msg.jsdoc.function.newnotobject"), sourceName, contextNode.getLineno(), contextNode.getCharno());
                    }
                    isConstructor = current.getType() == com.google.javascript.rhino.Token.NEW;
                    current = current.getNext();
                }
                com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(this);
                if (current.getType() == com.google.javascript.rhino.Token.PARAM_LIST) {
                    com.google.javascript.rhino.Node args = current.getFirstChild();
                    for (com.google.javascript.rhino.Node arg = current.getFirstChild(); arg != null; arg = arg.getNext()) {
                        if (arg.getType() == com.google.javascript.rhino.Token.ELLIPSIS) {
                            if (arg.getChildCount() == 0) {
                                paramBuilder.addVarArgs(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
                            } else {
                                paramBuilder.addVarArgs(createFromTypeNodesInternal(arg.getFirstChild(), sourceName, scope));
                            }
                        } else {
                            com.google.javascript.rhino.jstype.JSType type = createFromTypeNodesInternal(arg, sourceName, scope);
                            if (arg.getType() == com.google.javascript.rhino.Token.EQUALS) {
                                boolean addSuccess = paramBuilder.addOptionalParams(type);
                                if (!addSuccess) {
                                    reporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0("msg.jsdoc.function.varargs"), sourceName, arg.getLineno(), arg.getCharno());
                                }
                            } else {
                                paramBuilder.addRequiredParams(type);
                            }
                        }
                    }
                    current = current.getNext();
                }
                com.google.javascript.rhino.jstype.JSType returnType = createFromTypeNodesInternal(current, sourceName, scope);
                return new com.google.javascript.rhino.jstype.FunctionBuilder(this).withParams(paramBuilder).withReturnType(returnType).withTypeOfThis(thisType).setIsConstructor(isConstructor).build();
        }
        throw new java.lang.IllegalStateException("Unexpected node in type expression: " + n.toString());
    }

    private com.google.javascript.rhino.jstype.JSType createRecordTypeFromNodes(com.google.javascript.rhino.Node n, java.lang.String sourceName, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        com.google.javascript.rhino.jstype.RecordTypeBuilder builder = new com.google.javascript.rhino.jstype.RecordTypeBuilder(this);
        for (com.google.javascript.rhino.Node fieldTypeNode = n.getFirstChild(); fieldTypeNode != null; fieldTypeNode = fieldTypeNode.getNext()) {
            com.google.javascript.rhino.Node fieldNameNode = fieldTypeNode;
            boolean hasType = false;
            if (fieldTypeNode.getType() == com.google.javascript.rhino.Token.COLON) {
                fieldNameNode = fieldTypeNode.getFirstChild();
                hasType = true;
            }
            java.lang.String fieldName = fieldNameNode.getString();
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = fieldName.startsWith("'") || fieldName.startsWith("\"");
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(46).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("fieldName",fieldName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateType",com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.lastGeneration",com.google.javascript.rhino.jstype.JSTypeRegistry.this.lastGeneration);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.nativeTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.nativeTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("fieldNameNode",fieldNameNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.interfaceToImplementors",com.google.javascript.rhino.jstype.JSTypeRegistry.this.interfaceToImplementors);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.forwardDeclaredTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.forwardDeclaredTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolvedNamedTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolvedNamedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.tolerateUndefinedValues",com.google.javascript.rhino.jstype.JSTypeRegistry.this.tolerateUndefinedValues);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("scope",scope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("builder",builder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.typesIndexedByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.typesIndexedByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.namesToTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.namesToTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.namespaces",com.google.javascript.rhino.jstype.JSTypeRegistry.this.namespaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateTypeName",com.google.javascript.rhino.jstype.JSTypeRegistry.this.templateTypeName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.reporter",com.google.javascript.rhino.jstype.JSTypeRegistry.this.reporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.eachRefTypeIndexedByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.eachRefTypeIndexedByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("\"\\"\"","\"");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.greatestSubtypeByProperty",com.google.javascript.rhino.jstype.JSTypeRegistry.this.greatestSubtypeByProperty);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.nonNullableTypeNames",com.google.javascript.rhino.jstype.JSTypeRegistry.this.nonNullableTypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.unresolvedNamedTypes",com.google.javascript.rhino.jstype.JSTypeRegistry.this.unresolvedNamedTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("sourceName",sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolveMode",com.google.javascript.rhino.jstype.JSTypeRegistry.this.resolveMode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("\"'\"","'");} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectInput("hasType",hasType);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(46).collectionEnds();
            }
            if (runtimeAngelicValue) {
                fieldName = fieldName.substring(1, fieldName.length() - 1);
            }
            com.google.javascript.rhino.jstype.JSType fieldType = null;
            if (hasType) {
                fieldType = createFromTypeNodesInternal(fieldTypeNode.getLastChild(), sourceName, scope);
            } else {
                fieldType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            if (builder.addProperty(fieldName, fieldType, fieldNameNode) == null) {
                reporter.warning("Duplicate record field " + fieldName, sourceName, n.getLineno(), fieldNameNode.getCharno());
            }
        }
        return builder.build();
    }

    public void setTemplateTypeName(java.lang.String name) {
        templateTypeName = name;
        templateType = new com.google.javascript.rhino.jstype.TemplateType(this, name);
    }

    public void clearTemplateTypeName() {
        templateTypeName = null;
        templateType = null;
    }
}
[364450] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659909224197
GPR[SSUN]-1659909224197
-1093533311
GPR[ESUN]-1659909224430
GPR[SSUN]-1659909224430
-1093533311
GPR[SPVATF]-1659909224661
GPR[EPVATF]-1659909225877
GPR[SPS]-1659909225877
[366649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1628.
GPR[EPS]-1659909226396
GPR[SPVATF]-1659909226396
GPR[EPVATF]-1659909227598
GPR[SPS]-1659909227598
[368362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1628.
GPR[EPS]-1659909228109
GPR[ESUN]-1659909228109
GPR[SSUN]-1659909228109
-1093533311
GPR[ESUN]-1659909228349
GPR[SSUN]-1659909228349
-1093533311
GPR[ESUN]-1659909228580
GPR[SSUN]-1659909228580
-1093533311
GPR[ESUN]-1659909228850
GPR[SSUN]-1659909228850
-1093533311
GPR[SPVATF]-1659909229081
GPR[EPVATF]-1659909230286
GPR[SPS]-1659909230286
GPR[EPS]-1659909251831
GPR[ESUN]-1659909251831
GPR[SSUN]-1659909251831
-1093533311
GPR[ESUN]-1659909252067
GPR[SSUN]-1659909252067
-1093533311
GPR[ESUN]-1659909252299
GPR[SSUN]-1659909252299
1508981886
GPR[ESUN]-1659909252514
GPR[SSUN]-1659909252514
1508981886
GPR[SPVATF]-1659909252727
GPR[EPVATF]-1659909254001
GPR[SPS]-1659909254001
[394734] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:361.
GPR[EPS]-1659909254481
GPR[ESUN]-1659909254481
GPR[SSUN]-1659909254481
1187751237
GPR[SPVATF]-1659909254760
GPR[EPVATF]-1659909255974
GPR[SPS]-1659909255974
[396954] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3080.
GPR[EPS]-1659909256701
GPR[ESUN]-1659909256701
GPR[SSUN]-1659909256701
-1566590132
GPR[ESUN]-1659909256903
GPR[SSUN]-1659909256903
-1566590132
GPR[ESUN]-1659909257101
GPR[SSUN]-1659909257101
-1566590132
GPR[SPVATF]-1659909257299
GPR[EPVATF]-1659909258545
GPR[SPS]-1659909258545
[399252] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:249.
GPR[EPS]-1659909258999
GPR[ESUN]-1659909258999
GPR[SSUN]-1659909258999
-1966087783
GPR[ESUN]-1659909259188
GPR[SSUN]-1659909259188
-1966087783
GPR[SPVATF]-1659909259372
GPR[EPVATF]-1659909259390
[399643] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909259391
GPR[EPVATF]-1659909259407
[399660] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909259407
GPR[SSUN]-1659909259407
-1966087783
GPR[SPVATF]-1659909259593
GPR[EPVATF]-1659909259611
[399864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909259611
GPR[SSUN]-1659909259611
-1566590132
GPR[SPVATF]-1659909259811
GPR[EPVATF]-1659909261088
GPR[SPS]-1659909261088
[401798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:103.
GPR[EPS]-1659909261545
GPR[SPVATF]-1659909261545
GPR[EPVATF]-1659909262798
GPR[SPS]-1659909262798
[403657] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:103.
GPR[EPS]-1659909263404
GPR[ESUN]-1659909263404
GPR[SSUN]-1659909263404
-1566590132
GPR[ESUN]-1659909263947
GPR[SSUN]-1659909263947
-1566590132
GPR[SPVATF]-1659909264146
GPR[EPVATF]-1659909265435
GPR[SPS]-1659909265435
[406140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:98.
GPR[EPS]-1659909265887
GPR[ESUN]-1659909265887
GPR[SSUN]-1659909265887
-1566590132
GPR[SPVATF]-1659909266087
GPR[EPVATF]-1659909267355
GPR[SPS]-1659909267355
GPR[EPS]-1659909288157
GPR[SPVATF]-1659909288158
GPR[EPVATF]-1659909289429
GPR[SPS]-1659909289429
[430282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:255.
GPR[EPS]-1659909290030
GPR[ESUN]-1659909290030
GPR[SSUN]-1659909290030
-1566590132
GPR[SPVATF]-1659909290234
GPR[EPVATF]-1659909292532
GPR[SPS]-1659909292532
[433312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:221.
GPR[EPS]-1659909293059
GPR[SPVATF]-1659909293060
GPR[EPVATF]-1659909294307
GPR[SPS]-1659909294307
[435014] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:221.
GPR[EPS]-1659909294761
GPR[ESUN]-1659909294761
GPR[SSUN]-1659909294761
-1566590132
GPR[SPVATF]-1659909294961
GPR[EPVATF]-1659909296181
GPR[SPS]-1659909296181
GPR[EPS]-1659909302598
GPR[SPVATF]-1659909302599
GPR[EPVATF]-1659909303808
GPR[SPS]-1659909303808
GPR[EPS]-1659909312229
GPR[ESUN]-1659909312230
GPR[SSUN]-1659909312230
-1566590132
GPR[ESUN]-1659909312433
GPR[SSUN]-1659909312433
-1566590132
GPR[ESUN]-1659909312629
GPR[SSUN]-1659909312629
-1566590132
GPR[SPVATF]-1659909312835
GPR[EPVATF]-1659909314027
GPR[SPS]-1659909314027
[454767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:213.
GPR[EPS]-1659909314514
GPR[SPVATF]-1659909314514
GPR[EPVATF]-1659909315872
GPR[SPS]-1659909315872
[456580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:213.
GPR[EPS]-1659909316327
GPR[ESUN]-1659909316327
GPR[SSUN]-1659909316327
1401453194
GPR[SPVATF]-1659909316519
GPR[EPVATF]-1659909317726
GPR[SPS]-1659909317726
[458436] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:169.
GPR[EPS]-1659909318183
GPR[ESUN]-1659909318183
GPR[SSUN]-1659909318183
-179796259
GPR[ESUN]-1659909318424
GPR[SSUN]-1659909318424
-179796259
GPR[SPVATF]-1659909318658
GPR[EPVATF]-1659909319888
GPR[SPS]-1659909319888
[460827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2146.
GPR[EPS]-1659909320574
GPR[ESUN]-1659909320574
GPR[SSUN]-1659909320574
-179796259
GPR[SPVATF]-1659909320810
GPR[EPVATF]-1659909322093
GPR[SPS]-1659909322093
[463027] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2145.
GPR[EPS]-1659909322774
GPR[ESUN]-1659909322774
GPR[SSUN]-1659909322774
-179796259
GPR[ESUN]-1659909323008
GPR[SSUN]-1659909323008
-179796259
GPR[SPVATF]-1659909323242
GPR[EPVATF]-1659909324468
GPR[SPS]-1659909324468
[465406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2140.
GPR[EPS]-1659909325153
GPR[SPVATF]-1659909325153
GPR[EPVATF]-1659909326406
GPR[SPS]-1659909326406
[467377] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2140.
GPR[EPS]-1659909327124
GPR[ESUN]-1659909327124
GPR[SSUN]-1659909327124
-179796259
GPR[ESUN]-1659909327354
GPR[SSUN]-1659909327354
-179796259
GPR[SPVATF]-1659909327591
GPR[EPVATF]-1659909328953
GPR[SPS]-1659909328953
[469903] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2137.
GPR[EPS]-1659909329650
GPR[ESUN]-1659909329650
GPR[SSUN]-1659909329650
-179796259
GPR[SPVATF]-1659909329881
GPR[EPVATF]-1659909331215
GPR[SPS]-1659909331215
[472173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2133.
GPR[EPS]-1659909331920
GPR[ESUN]-1659909331920
GPR[SSUN]-1659909331920
-1566590132
GPR[SPVATF]-1659909332117
GPR[EPVATF]-1659909333443
GPR[SPS]-1659909333443
[474162] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:208.
GPR[EPS]-1659909333909
GPR[SPVATF]-1659909333909
GPR[EPVATF]-1659909335367
GPR[SPS]-1659909335367
[476087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:208.
GPR[EPS]-1659909335834
GPR[ESUN]-1659909335834
GPR[SSUN]-1659909335834
-622774852
GPR[SPVATF]-1659909336052
GPR[EPVATF]-1659909337518
GPR[SPS]-1659909337518
[479108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:245.
GPR[EPS]-1659909338855
GPR[ESUN]-1659909338855
GPR[SSUN]-1659909338855
-1566590132
GPR[SPVATF]-1659909339063
GPR[EPVATF]-1659909340689
GPR[SPS]-1659909340689
[481423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:248.
GPR[EPS]-1659909341170
GPR[SPVATF]-1659909341170
GPR[EPVATF]-1659909342421
GPR[SPS]-1659909342421
[483133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:248.
GPR[EPS]-1659909342881
GPR[ESUN]-1659909342881
GPR[SSUN]-1659909342881
-1566590132
GPR[SPVATF]-1659909343082
GPR[EPVATF]-1659909344366
GPR[SPS]-1659909344366
GPR[EPS]-1659909352255
GPR[ESUN]-1659909352255
GPR[SSUN]-1659909352255
-622774852
GPR[SPVATF]-1659909352603
GPR[EPVATF]-1659909353855
GPR[SPS]-1659909353855
[494611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:458.
GPR[EPS]-1659909354358
GPR[ESUN]-1659909354358
GPR[SSUN]-1659909354358
-622774852
GPR[ESUN]-1659909354574
GPR[SSUN]-1659909354574
-622774852
GPR[SPVATF]-1659909354788
GPR[EPVATF]-1659909356068
GPR[SPS]-1659909356068
[496794] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:383.
GPR[EPS]-1659909356541
GPR[SPVATF]-1659909356541
GPR[EPVATF]-1659909357812
GPR[SPS]-1659909357812
[498541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:383.
GPR[EPS]-1659909358288
GPR[ESUN]-1659909358288
GPR[SSUN]-1659909358288
-622774852
GPR[SPVATF]-1659909358502
GPR[EPVATF]-1659909359734
GPR[SPS]-1659909359734
[500471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:382.
GPR[EPS]-1659909360218
GPR[ESUN]-1659909360218
GPR[SSUN]-1659909360218
-622774852
GPR[SPVATF]-1659909360436
GPR[EPVATF]-1659909361703
GPR[SPS]-1659909361703
[502435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:380.
GPR[EPS]-1659909362182
GPR[ESUN]-1659909362182
GPR[SSUN]-1659909362182
-622774852
GPR[SPVATF]-1659909362396
GPR[EPVATF]-1659909363718
GPR[SPS]-1659909363718
[504456] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:379.
GPR[EPS]-1659909364203
GPR[ESUN]-1659909364203
GPR[SSUN]-1659909364203
-622774852
GPR[SPVATF]-1659909364419
GPR[EPVATF]-1659909365688
GPR[SPS]-1659909365688
[506436] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:378.
GPR[EPS]-1659909366183
GPR[ESUN]-1659909366183
GPR[SSUN]-1659909366183
-622774852
GPR[SPVATF]-1659909366397
GPR[EPVATF]-1659909367680
GPR[SPS]-1659909367680
[508418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:374.
GPR[EPS]-1659909368165
GPR[SPVATF]-1659909368165
GPR[EPVATF]-1659909369478
GPR[SPS]-1659909369478
[510284] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:374.
GPR[EPS]-1659909370031
GPR[ESUN]-1659909370031
GPR[SSUN]-1659909370031
-1566590132
GPR[SPVATF]-1659909370230
GPR[EPVATF]-1659909371567
GPR[SPS]-1659909371567
[512281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:97.
GPR[EPS]-1659909372028
GPR[SPVATF]-1659909372028
GPR[EPVATF]-1659909373404
GPR[SPS]-1659909373404
[514112] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:97.
GPR[EPS]-1659909373859
GPR[ESUN]-1659909373859
GPR[SSUN]-1659909373859
-179796259
GPR[ESUN]-1659909374096
GPR[SSUN]-1659909374096
-179796259
GPR[ESUN]-1659909374329
GPR[SSUN]-1659909374329
-179796259
GPR[SPVATF]-1659909374561
GPR[EPVATF]-1659909375978
GPR[SPS]-1659909375978
[516945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2128.
GPR[EPS]-1659909376692
GPR[SPVATF]-1659909376692
GPR[EPVATF]-1659909378205
GPR[SPS]-1659909378205
[519138] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2128.
GPR[EPS]-1659909378885
GPR[ESUN]-1659909378885
GPR[SSUN]-1659909378885
-179796259
GPR[SPVATF]-1659909379119
GPR[EPVATF]-1659909380645
GPR[SPS]-1659909380645
[521586] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2127.
GPR[EPS]-1659909381333
GPR[ESUN]-1659909381333
GPR[SSUN]-1659909381333
-179796259
GPR[ESUN]-1659909381569
GPR[SSUN]-1659909381569
-179796259
GPR[SPVATF]-1659909381803
GPR[EPVATF]-1659909384296
GPR[SPS]-1659909384296
[525263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2103.
GPR[EPS]-1659909385010
GPR[ESUN]-1659909385010
GPR[SSUN]-1659909385010
-179796259
GPR[SPVATF]-1659909385245
GPR[EPVATF]-1659909386508
GPR[SPS]-1659909386508
[527454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2102.
GPR[EPS]-1659909387201
GPR[SPVATF]-1659909387201
GPR[EPVATF]-1659909388458
GPR[SPS]-1659909388458
[529383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2102.
GPR[EPS]-1659909389130
GPR[ESUN]-1659909389130
GPR[SSUN]-1659909389130
-179796259
GPR[SPVATF]-1659909389362
GPR[EPVATF]-1659909390628
GPR[SPS]-1659909390628
[531572] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2101.
GPR[EPS]-1659909391319
GPR[ESUN]-1659909391319
GPR[SSUN]-1659909391319
-179796259
GPR[SPVATF]-1659909391560
GPR[EPVATF]-1659909392801
GPR[SPS]-1659909392801
GPR[EPS]-1659909397950
GPR[ESUN]-1659909397950
GPR[SSUN]-1659909397950
-179796259
GPR[ESUN]-1659909398193
GPR[SSUN]-1659909398193
-179796259
GPR[SPVATF]-1659909398425
GPR[EPVATF]-1659909399683
GPR[SPS]-1659909399683
[540612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2082.
GPR[EPS]-1659909400359
GPR[ESUN]-1659909400359
GPR[SSUN]-1659909400359
-179796259
GPR[SPVATF]-1659909400600
GPR[EPVATF]-1659909401833
GPR[SPS]-1659909401833
[542770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2080.
GPR[EPS]-1659909402517
GPR[ESUN]-1659909402517
GPR[SSUN]-1659909402517
-179796259
GPR[SPVATF]-1659909402794
GPR[EPVATF]-1659909404062
GPR[SPS]-1659909404062
[545046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2076.
GPR[EPS]-1659909404793
GPR[SPVATF]-1659909404793
GPR[EPVATF]-1659909406054
GPR[SPS]-1659909406054
[546976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2076.
GPR[EPS]-1659909406723
GPR[ESUN]-1659909406723
GPR[SSUN]-1659909406723
-179796259
GPR[SPVATF]-1659909406953
GPR[EPVATF]-1659909408230
GPR[SPS]-1659909408230
[549146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2075.
GPR[EPS]-1659909408893
GPR[ESUN]-1659909408893
GPR[SSUN]-1659909408893
-179796259
GPR[ESUN]-1659909409189
GPR[SSUN]-1659909409189
-179796259
GPR[SPVATF]-1659909409420
GPR[EPVATF]-1659909410711
GPR[SPS]-1659909410711
[551660] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2123.
GPR[EPS]-1659909411407
GPR[SPVATF]-1659909411407
GPR[EPVATF]-1659909412693
GPR[SPS]-1659909412693
[553733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2123.
GPR[EPS]-1659909413480
GPR[ESUN]-1659909413481
GPR[SSUN]-1659909413481
-179796259
GPR[ESUN]-1659909413719
GPR[SSUN]-1659909413719
-179796259
GPR[SPVATF]-1659909413950
GPR[EPVATF]-1659909415286
GPR[SPS]-1659909415286
[556290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2095.
GPR[EPS]-1659909416037
GPR[SPVATF]-1659909416038
GPR[EPVATF]-1659909417386
GPR[SPS]-1659909417386
[558325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2095.
GPR[EPS]-1659909418072
GPR[ESUN]-1659909418072
GPR[SSUN]-1659909418072
-179796259
GPR[ESUN]-1659909418313
GPR[SSUN]-1659909418313
-179796259
GPR[ESUN]-1659909418547
GPR[SSUN]-1659909418547
-179796259
GPR[SPVATF]-1659909418780
GPR[EPVATF]-1659909420157
GPR[SPS]-1659909420157
[561081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2071.
GPR[EPS]-1659909420828
GPR[SPVATF]-1659909420829
GPR[EPVATF]-1659909422247
GPR[SPS]-1659909422247
[563243] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2071.
GPR[EPS]-1659909422990
GPR[ESUN]-1659909422990
GPR[SSUN]-1659909422990
-179796259
GPR[ESUN]-1659909423227
GPR[SSUN]-1659909423227
-179796259
GPR[ESUN]-1659909423453
GPR[SSUN]-1659909423453
-179796259
GPR[SPVATF]-1659909423707
GPR[EPVATF]-1659909425245
GPR[SPS]-1659909425245
[566183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1722.
GPR[EPS]-1659909425930
GPR[ESUN]-1659909425930
GPR[SSUN]-1659909425930
-179796259
GPR[SPVATF]-1659909426171
GPR[EPVATF]-1659909428717
GPR[SPS]-1659909428717
[569703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1721.
GPR[EPS]-1659909429450
GPR[ESUN]-1659909429450
GPR[SSUN]-1659909429450
-1566590132
GPR[ESUN]-1659909429663
GPR[SSUN]-1659909429663
-1907437809
GPR[ESUN]-1659909429836
GPR[SSUN]-1659909429836
-1566590132
GPR[ESUN]-1659909430035
GPR[SSUN]-1659909430035
-600752576
GPR[ESUN]-1659909430219
GPR[SSUN]-1659909430219
-622774852
GPR[SPVATF]-1659909430432
GPR[EPVATF]-1659909431702
GPR[SPS]-1659909431702
[572241] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PrototypeObjectType extends com.google.javascript.rhino.jstype.ObjectType {
    private static final long serialVersionUID = 1L;

    private final java.lang.String className;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType.Property> properties;

    private final boolean nativeType;

    private com.google.javascript.rhino.jstype.ObjectType implicitPrototypeFallback;

    private com.google.javascript.rhino.jstype.FunctionType ownerFunction = null;

    private boolean prettyPrint = false;

    private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        this(registry, className, implicitPrototype, false);
    }

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype, boolean nativeType) {
        super(registry);
        this.properties = com.google.common.collect.Maps.newTreeMap();
        this.className = className;
        this.nativeType = nativeType;
        if (nativeType || (implicitPrototype != null)) {
            setImplicitPrototype(implicitPrototype);
        } else {
            setImplicitPrototype(registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        }
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType.Property getSlot(java.lang.String name) {
        if (properties.containsKey(name)) {
            return properties.get(name);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = implicitPrototype.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        for (com.google.javascript.rhino.jstype.ObjectType interfaceType : getCtorExtendedInterfaces()) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = interfaceType.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        return null;
    }

    @java.lang.Override
    public int getPropertiesCount() {
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype == null) {
            return this.properties.size();
        }
        int localCount = 0;
        for (java.lang.String property : properties.keySet()) {
            if (!implicitPrototype.hasProperty(property)) {
                localCount++;
            }
        }
        return implicitPrototype.getPropertiesCount() + localCount;
    }

    @java.lang.Override
    public boolean hasProperty(java.lang.String propertyName) {
        return isUnknownType() || (getSlot(propertyName) != null);
    }

    @java.lang.Override
    public boolean hasOwnProperty(java.lang.String propertyName) {
        return properties.get(propertyName) != null;
    }

    @java.lang.Override
    public java.util.Set<java.lang.String> getOwnPropertyNames() {
        return properties.keySet();
    }

    @java.lang.Override
    public boolean isPropertyTypeDeclared(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return !slot.isTypeInferred();
    }

    @java.lang.Override
    void collectPropertyNames(java.util.Set<java.lang.String> props) {
        for (java.lang.String prop : properties.keySet()) {
            props.add(prop);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototype.collectPropertyNames(props);
        }
    }

    @java.lang.Override
    public boolean isPropertyTypeInferred(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return slot.isTypeInferred();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getPropertyType(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        return slot.getType();
    }

    @java.lang.Override
    public boolean isPropertyInExterns(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.isFromExterns();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.isPropertyInExterns(propertyName);
        }
        return false;
    }

    @java.lang.Override
    boolean defineProperty(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, boolean inferred, com.google.javascript.rhino.Node propertyNode) {
        if (hasOwnDeclaredProperty(name)) {
            return false;
        }
        com.google.javascript.rhino.jstype.ObjectType.Property newProp = new com.google.javascript.rhino.jstype.ObjectType.Property(name, type, inferred, propertyNode);
        com.google.javascript.rhino.jstype.ObjectType.Property oldProp = properties.get(name);
        if (oldProp != null) {
            newProp.setJSDocInfo(oldProp.getJSDocInfo());
        }
        properties.put(name, newProp);
        return true;
    }

    @java.lang.Override
    public boolean removeProperty(java.lang.String name) {
        return properties.remove(name) != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getPropertyNode(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getNode();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.getPropertyNode(propertyName);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.JSDocInfo getOwnPropertyJSDocInfo(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getJSDocInfo();
        }
        return null;
    }

    @java.lang.Override
    public void setPropertyJSDocInfo(java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            if (!properties.containsKey(propertyName)) {
                defineInferredProperty(propertyName, getPropertyType(propertyName), null);
            }
            com.google.javascript.rhino.jstype.ObjectType.Property property = properties.get(propertyName);
            if (property != null) {
                property.setJSDocInfo(info);
            }
        }
    }

    @java.lang.Override
    public boolean matchesNumberContext() {
        return (((isNumberObjectType() || isDateType()) || isBooleanObjectType()) || isStringObjectType()) || hasOverridenNativeProperty("valueOf");
    }

    @java.lang.Override
    public boolean matchesStringContext() {
        return ((((((isTheObjectType() || isStringObjectType()) || isDateType()) || isRegexpType()) || isArrayType()) || isNumberObjectType()) || isBooleanObjectType()) || hasOverridenNativeProperty("toString");
    }

    private boolean hasOverridenNativeProperty(java.lang.String propertyName) {
        if (isNativeObjectType()) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType propertyType = getPropertyType(propertyName);
        com.google.javascript.rhino.jstype.ObjectType nativeType = (this.isFunctionType()) ? registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE) : registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.JSType nativePropertyType = nativeType.getPropertyType(propertyName);
        return propertyType != nativePropertyType;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType unboxesTo() {
        if (isStringObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
        } else if (isBooleanObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
        } else if (isNumberObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
        } else {
            return super.unboxesTo();
        }
    }

    @java.lang.Override
    public boolean matchesObjectContext() {
        return true;
    }

    @java.lang.Override
    public boolean canBeCalled() {
        return isRegexpType();
    }

    @java.lang.Override
    java.lang.String toStringHelper(boolean forAnnotations) {
        if (hasReferenceName()) {
            return getReferenceName();
        } else if (prettyPrint) {
            prettyPrint = false;
            java.util.Set<java.lang.String> propertyNames = com.google.common.collect.Sets.newTreeSet();
            for (com.google.javascript.rhino.jstype.ObjectType current = this; ((current != null) && (!current.isNativeObjectType())) && (propertyNames.size() <= com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES); current = current.getImplicitPrototype()) {
                propertyNames.addAll(current.getOwnPropertyNames());
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            sb.append("{");
            int i = 0;
            for (java.lang.String property : propertyNames) {
                if (i > 0) {
                    sb.append(", ");
                }
                sb.append(property);
                sb.append(": ");
                sb.append(getPropertyType(property).toStringHelper(forAnnotations));
                ++i;
                if ((!forAnnotations) && (i == com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES)) {
                    sb.append(", ...");
                    break;
                }
            }
            sb.append("}");
            prettyPrint = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(109).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType",com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties",com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction",com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("propertyNames",propertyNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("forAnnotations",forAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint",com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.className",com.google.javascript.rhino.jstype.PrototypeObjectType.this.className);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback",com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectionEnds();
            }
            if (runtimeAngelicValue)
                return sb.toString();

        } else {
            return forAnnotations ? "?" : "{...}";
        }
    }

    void setPrettyPrint(boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
    }

    boolean isPrettyPrint() {
        return prettyPrint;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getImplicitPrototype() {
        return implicitPrototypeFallback;
    }

    final void setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        com.google.common.base.Preconditions.checkState(!hasCachedValues());
        this.implicitPrototypeFallback = implicitPrototype;
    }

    @java.lang.Override
    public java.lang.String getReferenceName() {
        if (className != null) {
            return className;
        } else if (ownerFunction != null) {
            return ownerFunction.getReferenceName() + ".prototype";
        } else {
            return null;
        }
    }

    @java.lang.Override
    public boolean hasReferenceName() {
        return (className != null) || (ownerFunction != null);
    }

    @java.lang.Override
    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        if (com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that)) {
            return true;
        }
        if (that.isUnionType()) {
            return false;
        }
        if (that.isRecordType()) {
            return com.google.javascript.rhino.jstype.RecordType.isSubtype(this, that.toMaybeRecordType());
        }
        com.google.javascript.rhino.jstype.ObjectType thatObj = that.toObjectType();
        com.google.javascript.rhino.jstype.ObjectType thatCtor = (thatObj == null) ? null : thatObj.getConstructor();
        if ((thatCtor != null) && thatCtor.isInterface()) {
            java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> thisInterfaces = getCtorImplementedInterfaces();
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : thisInterfaces) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if ((getConstructor() != null) && getConstructor().isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : getCtorExtendedInterfaces()) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {
            return true;
        }
        return this.isImplicitPrototype(thatObj);
    }

    private boolean implicitPrototypeChainIsUnknown() {
        com.google.javascript.rhino.jstype.ObjectType p = getImplicitPrototype();
        while (p != null) {
            if (p.isUnknownType()) {
                return true;
            }
            p = p.getImplicitPrototype();
        } 
        return false;
    }

    @java.lang.Override
    public boolean hasCachedValues() {
        return super.hasCachedValues();
    }

    @java.lang.Override
    public boolean isNativeObjectType() {
        return nativeType;
    }

    void setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType type) {
        com.google.common.base.Preconditions.checkState((ownerFunction == null) || (type == null));
        ownerFunction = type;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getOwnerFunction() {
        return ownerFunction;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorImplementedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorExtendedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        setResolvedTypeInternal(this);
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototypeFallback = ((com.google.javascript.rhino.jstype.ObjectType) (implicitPrototype.resolve(t, scope)));
        }
        for (com.google.javascript.rhino.jstype.ObjectType.Property prop : properties.values()) {
            prop.setType(com.google.javascript.rhino.jstype.JSType.safeResolve(prop.getType(), t, scope));
        }
        return this;
    }

    @java.lang.Override
    public void matchConstraint(com.google.javascript.rhino.jstype.ObjectType constraintObj) {
        if (constraintObj.isRecordType()) {
            for (java.lang.String prop : constraintObj.getOwnPropertyNames()) {
                com.google.javascript.rhino.jstype.JSType propType = constraintObj.getPropertyType(prop);
                if (!isPropertyTypeDeclared(prop)) {
                    com.google.javascript.rhino.jstype.JSType typeToInfer = propType;
                    if (!hasProperty(prop)) {
                        typeToInfer = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                    }
                    defineInferredProperty(prop, typeToInfer, null);
                }
            }
        }
    }
}
[572241] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659909431988
GPR[SSUN]-1659909431988
-622774852
GPR[SPVATF]-1659909432197
GPR[EPVATF]-1659909433461
GPR[SPS]-1659909433461
[574190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:391.
GPR[EPS]-1659909433938
GPR[ESUN]-1659909433938
GPR[SSUN]-1659909433938
-622774852
GPR[SPVATF]-1659909434154
GPR[EPVATF]-1659909435414
GPR[SPS]-1659909435414
[576157] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:389.
GPR[EPS]-1659909435904
GPR[ESUN]-1659909435904
GPR[SSUN]-1659909435904
-622774852
GPR[SPVATF]-1659909436121
GPR[EPVATF]-1659909437358
GPR[SPS]-1659909437358
[578102] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:373.
GPR[EPS]-1659909437850
GPR[ESUN]-1659909437850
GPR[SSUN]-1659909437850
-622774852
GPR[ESUN]-1659909438063
GPR[SSUN]-1659909438063
-622774852
GPR[SPVATF]-1659909438274
GPR[EPVATF]-1659909439507
GPR[SPS]-1659909439507
[580234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:370.
GPR[EPS]-1659909439982
GPR[ESUN]-1659909439982
GPR[SSUN]-1659909439982
-622774852
GPR[ESUN]-1659909440190
GPR[SSUN]-1659909440190
-622774852
GPR[SPVATF]-1659909440401
GPR[EPVATF]-1659909441716
GPR[SPS]-1659909441716
[582453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:366.
GPR[EPS]-1659909442200
GPR[ESUN]-1659909442200
GPR[SSUN]-1659909442200
-622774852
GPR[ESUN]-1659909442414
GPR[SSUN]-1659909442414
-622774852
GPR[SPVATF]-1659909442626
GPR[EPVATF]-1659909443869
GPR[SPS]-1659909443869
[584595] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:362.
GPR[EPS]-1659909444343
GPR[ESUN]-1659909444343
GPR[SSUN]-1659909444343
-622774852
GPR[ESUN]-1659909444555
GPR[SSUN]-1659909444555
-622774852
GPR[SPVATF]-1659909444768
GPR[EPVATF]-1659909446009
GPR[SPS]-1659909446009
[586744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:358.
GPR[EPS]-1659909446491
GPR[ESUN]-1659909446491
GPR[SSUN]-1659909446491
-622774852
GPR[SPVATF]-1659909446702
GPR[EPVATF]-1659909447961
GPR[SPS]-1659909447961
[588559] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PrototypeObjectType extends com.google.javascript.rhino.jstype.ObjectType {
    private static final long serialVersionUID = 1L;

    private final java.lang.String className;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType.Property> properties;

    private final boolean nativeType;

    private com.google.javascript.rhino.jstype.ObjectType implicitPrototypeFallback;

    private com.google.javascript.rhino.jstype.FunctionType ownerFunction = null;

    private boolean prettyPrint = false;

    private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        this(registry, className, implicitPrototype, false);
    }

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype, boolean nativeType) {
        super(registry);
        this.properties = com.google.common.collect.Maps.newTreeMap();
        this.className = className;
        this.nativeType = nativeType;
        if (nativeType || (implicitPrototype != null)) {
            setImplicitPrototype(implicitPrototype);
        } else {
            setImplicitPrototype(registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        }
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType.Property getSlot(java.lang.String name) {
        if (properties.containsKey(name)) {
            return properties.get(name);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = implicitPrototype.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        for (com.google.javascript.rhino.jstype.ObjectType interfaceType : getCtorExtendedInterfaces()) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = interfaceType.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        return null;
    }

    @java.lang.Override
    public int getPropertiesCount() {
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype == null) {
            return this.properties.size();
        }
        int localCount = 0;
        for (java.lang.String property : properties.keySet()) {
            if (!implicitPrototype.hasProperty(property)) {
                localCount++;
            }
        }
        return implicitPrototype.getPropertiesCount() + localCount;
    }

    @java.lang.Override
    public boolean hasProperty(java.lang.String propertyName) {
        return isUnknownType() || (getSlot(propertyName) != null);
    }

    @java.lang.Override
    public boolean hasOwnProperty(java.lang.String propertyName) {
        return properties.get(propertyName) != null;
    }

    @java.lang.Override
    public java.util.Set<java.lang.String> getOwnPropertyNames() {
        return properties.keySet();
    }

    @java.lang.Override
    public boolean isPropertyTypeDeclared(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return !slot.isTypeInferred();
    }

    @java.lang.Override
    void collectPropertyNames(java.util.Set<java.lang.String> props) {
        for (java.lang.String prop : properties.keySet()) {
            props.add(prop);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototype.collectPropertyNames(props);
        }
    }

    @java.lang.Override
    public boolean isPropertyTypeInferred(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return slot.isTypeInferred();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getPropertyType(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        return slot.getType();
    }

    @java.lang.Override
    public boolean isPropertyInExterns(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.isFromExterns();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.isPropertyInExterns(propertyName);
        }
        return false;
    }

    @java.lang.Override
    boolean defineProperty(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, boolean inferred, com.google.javascript.rhino.Node propertyNode) {
        if (hasOwnDeclaredProperty(name)) {
            return false;
        }
        com.google.javascript.rhino.jstype.ObjectType.Property newProp = new com.google.javascript.rhino.jstype.ObjectType.Property(name, type, inferred, propertyNode);
        com.google.javascript.rhino.jstype.ObjectType.Property oldProp = properties.get(name);
        if (oldProp != null) {
            newProp.setJSDocInfo(oldProp.getJSDocInfo());
        }
        properties.put(name, newProp);
        return true;
    }

    @java.lang.Override
    public boolean removeProperty(java.lang.String name) {
        return properties.remove(name) != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getPropertyNode(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getNode();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.getPropertyNode(propertyName);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.JSDocInfo getOwnPropertyJSDocInfo(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getJSDocInfo();
        }
        return null;
    }

    @java.lang.Override
    public void setPropertyJSDocInfo(java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            if (!properties.containsKey(propertyName)) {
                defineInferredProperty(propertyName, getPropertyType(propertyName), null);
            }
            com.google.javascript.rhino.jstype.ObjectType.Property property = properties.get(propertyName);
            if (property != null) {
                property.setJSDocInfo(info);
            }
        }
    }

    @java.lang.Override
    public boolean matchesNumberContext() {
        return (((isNumberObjectType() || isDateType()) || isBooleanObjectType()) || isStringObjectType()) || hasOverridenNativeProperty("valueOf");
    }

    @java.lang.Override
    public boolean matchesStringContext() {
        return ((((((isTheObjectType() || isStringObjectType()) || isDateType()) || isRegexpType()) || isArrayType()) || isNumberObjectType()) || isBooleanObjectType()) || hasOverridenNativeProperty("toString");
    }

    private boolean hasOverridenNativeProperty(java.lang.String propertyName) {
        if (isNativeObjectType()) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType propertyType = getPropertyType(propertyName);
        com.google.javascript.rhino.jstype.ObjectType nativeType = (this.isFunctionType()) ? registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE) : registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.JSType nativePropertyType = nativeType.getPropertyType(propertyName);
        return propertyType != nativePropertyType;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType unboxesTo() {
        if (isStringObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
        } else if (isBooleanObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
        } else if (isNumberObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
        } else {
            return super.unboxesTo();
        }
    }

    @java.lang.Override
    public boolean matchesObjectContext() {
        return true;
    }

    @java.lang.Override
    public boolean canBeCalled() {
        return isRegexpType();
    }

    @java.lang.Override
    java.lang.String toStringHelper(boolean forAnnotations) {
        if (hasReferenceName()) {
            return getReferenceName();
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(117).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType",com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties",com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction",com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("forAnnotations",forAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint",com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.className",com.google.javascript.rhino.jstype.PrototypeObjectType.this.className);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback",com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectionEnds();
            }
            if (runtimeAngelicValue) if (prettyPrint) {
                prettyPrint = false;
                java.util.Set<java.lang.String> propertyNames = com.google.common.collect.Sets.newTreeSet();
                for (com.google.javascript.rhino.jstype.ObjectType current = this; ((current != null) && (!current.isNativeObjectType())) && (propertyNames.size() <= com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES); current = current.getImplicitPrototype()) {
                    propertyNames.addAll(current.getOwnPropertyNames());
                }
                java.lang.StringBuilder sb = new java.lang.StringBuilder();
                sb.append("{");
                int i = 0;
                for (java.lang.String property : propertyNames) {
                    if (i > 0) {
                        sb.append(", ");
                    }
                    sb.append(property);
                    sb.append(": ");
                    sb.append(getPropertyType(property).toStringHelper(forAnnotations));
                    ++i;
                    if ((!forAnnotations) && (i == com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES)) {
                        sb.append(", ...");
                        break;
                    }
                }
                sb.append("}");
                prettyPrint = true;
                return sb.toString();
            } else {
                return forAnnotations ? "?" : "{...}";
            }
        }
    }

    void setPrettyPrint(boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
    }

    boolean isPrettyPrint() {
        return prettyPrint;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getImplicitPrototype() {
        return implicitPrototypeFallback;
    }

    final void setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        com.google.common.base.Preconditions.checkState(!hasCachedValues());
        this.implicitPrototypeFallback = implicitPrototype;
    }

    @java.lang.Override
    public java.lang.String getReferenceName() {
        if (className != null) {
            return className;
        } else if (ownerFunction != null) {
            return ownerFunction.getReferenceName() + ".prototype";
        } else {
            return null;
        }
    }

    @java.lang.Override
    public boolean hasReferenceName() {
        return (className != null) || (ownerFunction != null);
    }

    @java.lang.Override
    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        if (com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that)) {
            return true;
        }
        if (that.isUnionType()) {
            return false;
        }
        if (that.isRecordType()) {
            return com.google.javascript.rhino.jstype.RecordType.isSubtype(this, that.toMaybeRecordType());
        }
        com.google.javascript.rhino.jstype.ObjectType thatObj = that.toObjectType();
        com.google.javascript.rhino.jstype.ObjectType thatCtor = (thatObj == null) ? null : thatObj.getConstructor();
        if ((thatCtor != null) && thatCtor.isInterface()) {
            java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> thisInterfaces = getCtorImplementedInterfaces();
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : thisInterfaces) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if ((getConstructor() != null) && getConstructor().isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : getCtorExtendedInterfaces()) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {
            return true;
        }
        return this.isImplicitPrototype(thatObj);
    }

    private boolean implicitPrototypeChainIsUnknown() {
        com.google.javascript.rhino.jstype.ObjectType p = getImplicitPrototype();
        while (p != null) {
            if (p.isUnknownType()) {
                return true;
            }
            p = p.getImplicitPrototype();
        } 
        return false;
    }

    @java.lang.Override
    public boolean hasCachedValues() {
        return super.hasCachedValues();
    }

    @java.lang.Override
    public boolean isNativeObjectType() {
        return nativeType;
    }

    void setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType type) {
        com.google.common.base.Preconditions.checkState((ownerFunction == null) || (type == null));
        ownerFunction = type;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getOwnerFunction() {
        return ownerFunction;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorImplementedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorExtendedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        setResolvedTypeInternal(this);
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototypeFallback = ((com.google.javascript.rhino.jstype.ObjectType) (implicitPrototype.resolve(t, scope)));
        }
        for (com.google.javascript.rhino.jstype.ObjectType.Property prop : properties.values()) {
            prop.setType(com.google.javascript.rhino.jstype.JSType.safeResolve(prop.getType(), t, scope));
        }
        return this;
    }

    @java.lang.Override
    public void matchConstraint(com.google.javascript.rhino.jstype.ObjectType constraintObj) {
        if (constraintObj.isRecordType()) {
            for (java.lang.String prop : constraintObj.getOwnPropertyNames()) {
                com.google.javascript.rhino.jstype.JSType propType = constraintObj.getPropertyType(prop);
                if (!isPropertyTypeDeclared(prop)) {
                    com.google.javascript.rhino.jstype.JSType typeToInfer = propType;
                    if (!hasProperty(prop)) {
                        typeToInfer = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                    }
                    defineInferredProperty(prop, typeToInfer, null);
                }
            }
        }
    }
}
[588559] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659909448307
GPR[EPVATF]-1659909449598
GPR[SPS]-1659909449598
[590322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:356.
GPR[EPS]-1659909450069
GPR[ESUN]-1659909450069
GPR[SSUN]-1659909450069
-1797850673
GPR[SPVATF]-1659909450316
GPR[EPVATF]-1659909451606
GPR[SPS]-1659909451606
[592456] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1754.
GPR[EPS]-1659909452203
GPR[ESUN]-1659909452203
GPR[SSUN]-1659909452203
466431456
GPR[SPVATF]-1659909452454
GPR[EPVATF]-1659909453768
GPR[SPS]-1659909453768
[594706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:721.
GPR[EPS]-1659909454453
GPR[SPVATF]-1659909454453
GPR[EPVATF]-1659909455909
GPR[SPS]-1659909455909
[596806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:721.
GPR[EPS]-1659909456553
GPR[ESUN]-1659909456553
GPR[SSUN]-1659909456553
466431456
GPR[SPVATF]-1659909456801
GPR[EPVATF]-1659909458181
GPR[SPS]-1659909458181
[599073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:719.
GPR[EPS]-1659909458820
GPR[SPVATF]-1659909458820
GPR[EPVATF]-1659909460293
GPR[SPS]-1659909460293
[601170] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:719.
GPR[EPS]-1659909460917
GPR[ESUN]-1659909460917
GPR[SSUN]-1659909460917
466431456
GPR[ESUN]-1659909461167
GPR[SSUN]-1659909461167
466431456
GPR[ESUN]-1659909461415
GPR[SSUN]-1659909461415
2433571
GPR[ESUN]-1659909461649
GPR[SSUN]-1659909461649
466431456
GPR[ESUN]-1659909461965
GPR[SSUN]-1659909461965
466431456
GPR[SPVATF]-1659909462213
GPR[EPVATF]-1659909463705
GPR[SPS]-1659909463705
[604616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:734.
GPR[EPS]-1659909464363
GPR[SPVATF]-1659909464363
GPR[EPVATF]-1659909465941
GPR[SPS]-1659909465941
[606826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:734.
GPR[EPS]-1659909466573
GPR[ESUN]-1659909466573
GPR[SSUN]-1659909466573
466431456
GPR[SPVATF]-1659909466825
GPR[EPVATF]-1659909468507
GPR[SPS]-1659909468507
[609389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:732.
GPR[EPS]-1659909469136
GPR[ESUN]-1659909469136
GPR[SSUN]-1659909469136
466431456
GPR[SPVATF]-1659909469491
GPR[EPVATF]-1659909472074
GPR[SPS]-1659909472074
[613025] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:716.
GPR[EPS]-1659909472772
GPR[SPVATF]-1659909472773
GPR[EPVATF]-1659909474063
GPR[SPS]-1659909474063
[615061] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:716.
GPR[EPS]-1659909474808
GPR[ESUN]-1659909474808
GPR[SSUN]-1659909474808
466431456
GPR[ESUN]-1659909475056
GPR[SSUN]-1659909475056
466431456
GPR[ESUN]-1659909475301
GPR[SSUN]-1659909475301
466431456
GPR[ESUN]-1659909475547
GPR[SSUN]-1659909475547
466431456
GPR[SPVATF]-1659909475794
GPR[EPVATF]-1659909477052
GPR[SPS]-1659909477052
[617971] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:710.
GPR[EPS]-1659909477718
GPR[ESUN]-1659909477718
GPR[SSUN]-1659909477718
466431456
GPR[ESUN]-1659909477970
GPR[SSUN]-1659909477970
466431456
GPR[ESUN]-1659909478219
GPR[SSUN]-1659909478219
466431456
GPR[SPVATF]-1659909478466
GPR[EPVATF]-1659909479715
GPR[SPS]-1659909479715
[620596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:292.
GPR[EPS]-1659909480343
GPR[ESUN]-1659909480343
GPR[SSUN]-1659909480343
466431456
GPR[SPVATF]-1659909480596
GPR[EPVATF]-1659909481845
GPR[SPS]-1659909481845
[622738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:291.
GPR[EPS]-1659909482485
GPR[ESUN]-1659909482485
GPR[SSUN]-1659909482485
1401453194
GPR[ESUN]-1659909482678
GPR[SSUN]-1659909482678
1401453194
GPR[ESUN]-1659909482868
GPR[SSUN]-1659909482868
1401453194
GPR[SPVATF]-1659909483053
GPR[EPVATF]-1659909484388
GPR[SPS]-1659909484388
GPR[EPS]-1659909486699
GPR[SPVATR]-1659909486699
[626952] INFO TestPatch - Applying patch: com.google.javascript.rhino.jstype.UnionType:593: PRECONDITION com.google.javascript.rhino.jstype.UnionType.this.hashcode < -1
[627223] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.jstype.UnionType.this.hashcode < -1" is working
GPR[EPVATR]-1659909488049
[628302] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659909488049
[628306] INFO NoPol - --- a/src/com/google/javascript/rhino/jstype/UnionType.java
+++ b/src/com/google/javascript/rhino/jstype/UnionType.java
@@ -592,3 +592,5 @@
     for (JSType alternate : alternates) {
-      alternate.matchConstraint(constraintObj);
+      if (com.google.javascript.rhino.jstype.UnionType.this.hashcode < -1) {
+        alternate.matchConstraint(constraintObj);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/33/seed_263/patch_623860_4ts_1659909488053.diff
GPR[ESUN]-1659909488054
GPR[SSUN]-1659909488054
1401453194
GPR[SPVATF]-1659909488248
GPR[EPVATF]-1659909489578
GPR[SPS]-1659909489578
GPR[EPS]-1659909491983
GPR[SPVATR]-1659909491983
[632236] INFO TestPatch - Applying patch: com.google.javascript.rhino.jstype.UnionType:592: PRECONDITION com.google.javascript.rhino.jstype.UnionType.this.hashcode < -1
[632469] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.jstype.UnionType.this.hashcode < -1" is working
[633600] INFO TestPatch - Failing tests [testIssue669(com.google.javascript.jscomp.TypeCheckTest): unexpected warnings(s):
JSC_TYPE_MISMATCH. inconsistent return type
found   : ({prop1: {a: number}}|{prop2: number})
required: {prop1: (Object|null|undefined)} at [testcode] line 1 : 174, testIssue700(com.google.javascript.jscomp.TypeCheckTest): unexpected warnings(s):
JSC_TYPE_MISMATCH. actual parameter 1 of temp3 does not match formal parameter
found   : {b: boolean, n: number, text: (string|undefined)}
required: (undefined|{b: boolean, n: number, text: string}) at [testcode] line 30 : 21]
GPR[EPVATR]-1659909493348
GPR[ESUN]-1659909493348
GPR[SSUN]-1659909493348
-2097135580
GPR[ESUN]-1659909493553
GPR[SSUN]-1659909493553
GPR[ESUN]-1659909493553
GPR[SSUN]-1659909493553
GPR[ESUN]-1659909493553
GPR[SSUN]-1659909493553
1401453194
GPR[ESUN]-1659909493733
GPR[SSUN]-1659909493734
1401453194
GPR[SPVATF]-1659909493918
GPR[EPVATF]-1659909495160
GPR[SPS]-1659909495160
GPR[EPS]-1659909504195
GPR[ESUN]-1659909504196
GPR[SSUN]-1659909504196
1401453194
GPR[SPVATF]-1659909504385
GPR[EPVATF]-1659909505672
GPR[SPS]-1659909505672
GPR[EPS]-1659909516741
GPR[SPVATF]-1659909516742
GPR[EPVATF]-1659909518077
GPR[SPS]-1659909518077
[658849] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:177.
GPR[EPS]-1659909518596
GPR[ESUN]-1659909518596
GPR[SSUN]-1659909518596
-1797850673
GPR[ESUN]-1659909518849
GPR[SSUN]-1659909518850
-1797850673
GPR[SPVATF]-1659909519162
GPR[EPVATF]-1659909520518
GPR[SPS]-1659909520518
[661361] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1759.
GPR[EPS]-1659909521108
GPR[ESUN]-1659909521108
GPR[SSUN]-1659909521108
-1797850673
GPR[SPVATF]-1659909521364
GPR[EPVATF]-1659909522785
GPR[SPS]-1659909522785
[663619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1711.
GPR[EPS]-1659909523366
GPR[ESUN]-1659909523366
GPR[SSUN]-1659909523366
-1797850673
GPR[ESUN]-1659909523613
GPR[SSUN]-1659909523613
-1797850673
GPR[ESUN]-1659909523857
GPR[SSUN]-1659909523857
-1797850673
GPR[ESUN]-1659909524102
GPR[SSUN]-1659909524102
-1797850673
GPR[ESUN]-1659909524341
GPR[SSUN]-1659909524341
-1797850673
GPR[SPVATF]-1659909524582
GPR[EPVATF]-1659909526018
GPR[SPS]-1659909526018
[666931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:715.
GPR[EPS]-1659909526678
GPR[ESUN]-1659909526678
GPR[SSUN]-1659909526678
-1797850673
GPR[SPVATF]-1659909526922
GPR[EPVATF]-1659909528369
GPR[SPS]-1659909528369
[669205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:714.
GPR[EPS]-1659909528952
GPR[ESUN]-1659909528952
GPR[SSUN]-1659909528952
646738083
GPR[ESUN]-1659909529233
GPR[SSUN]-1659909529233
646738083
GPR[SPVATF]-1659909529509
GPR[EPVATF]-1659909531070
GPR[SPS]-1659909531070
[672007] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer:1964.
GPR[EPS]-1659909531754
GPR[SPVATF]-1659909531754
GPR[EPVATF]-1659909533450
GPR[SPS]-1659909533450
[674461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer:1964.
GPR[EPS]-1659909534208
GPR[ESUN]-1659909534208
GPR[SSUN]-1659909534208
GPR[ESUN]-1659909534208
GPR[SSUN]-1659909534208
-1007410555
GPR[ESUN]-1659909534505
GPR[SSUN]-1659909534505
-1797850673
GPR[SPVATF]-1659909534748
GPR[EPVATF]-1659909536612
GPR[SPS]-1659909536612
[677443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1605.
GPR[EPS]-1659909537190
GPR[ESUN]-1659909537190
GPR[SSUN]-1659909537190
1401453194
GPR[ESUN]-1659909537380
GPR[SSUN]-1659909537380
-179796259
GPR[SPVATF]-1659909537611
GPR[EPVATF]-1659909540308
GPR[SPS]-1659909540308
[681277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2018.
GPR[EPS]-1659909541024
GPR[ESUN]-1659909541024
GPR[SSUN]-1659909541024
-179796259
GPR[SPVATF]-1659909541274
GPR[EPVATF]-1659909542577
GPR[SPS]-1659909542577
[683544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2015.
GPR[EPS]-1659909543291
GPR[SPVATF]-1659909543291
GPR[EPVATF]-1659909544547
GPR[SPS]-1659909544547
[685474] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2015.
GPR[EPS]-1659909545221
GPR[ESUN]-1659909545221
GPR[SSUN]-1659909545221
-179796259
GPR[SPVATF]-1659909545455
GPR[EPVATF]-1659909546785
GPR[SPS]-1659909546785
[687719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2014.
GPR[EPS]-1659909547466
GPR[ESUN]-1659909547466
GPR[SSUN]-1659909547466
-179796259
GPR[ESUN]-1659909547701
GPR[SSUN]-1659909547701
-179796259
GPR[SPVATF]-1659909547931
GPR[EPVATF]-1659909549180
GPR[SPS]-1659909549180
[690114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1725.
GPR[EPS]-1659909549861
GPR[ESUN]-1659909549861
GPR[SSUN]-1659909549861
-179796259
GPR[SPVATF]-1659909550101
GPR[EPVATF]-1659909551373
GPR[SPS]-1659909551373
[692312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1724.
GPR[EPS]-1659909552059
GPR[ESUN]-1659909552059
GPR[SSUN]-1659909552059
-1797850673
GPR[SPVATF]-1659909552305
GPR[EPVATF]-1659909553594
GPR[SPS]-1659909553594
[694515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:490.
GPR[EPS]-1659909554262
GPR[ESUN]-1659909554262
GPR[SSUN]-1659909554263
-1797850673
GPR[SPVATF]-1659909554525
GPR[EPVATF]-1659909555802
GPR[SPS]-1659909555802
[696648] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:489.
GPR[EPS]-1659909556395
GPR[ESUN]-1659909556395
GPR[SSUN]-1659909556395
1187751237
GPR[ESUN]-1659909556666
GPR[SSUN]-1659909556666
1187751237
GPR[ESUN]-1659909556935
GPR[SSUN]-1659909556935
1187751237
GPR[SPVATF]-1659909557204
GPR[EPVATF]-1659909558478
GPR[SPS]-1659909558478
[699483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2022.
GPR[EPS]-1659909559230
GPR[ESUN]-1659909559230
GPR[SSUN]-1659909559230
GPR[ESUN]-1659909559230
GPR[SSUN]-1659909559230
-1605808871
GPR[SPVATF]-1659909559472
GPR[EPVATF]-1659909560751
GPR[SPS]-1659909560751
[701577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:659.
GPR[EPS]-1659909561324
GPR[ESUN]-1659909561324
GPR[SSUN]-1659909561324
-179796259
GPR[SPVATF]-1659909561563
GPR[EPVATF]-1659909562892
GPR[SPS]-1659909562892
[703842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2002.
GPR[EPS]-1659909563589
GPR[ESUN]-1659909563590
GPR[SSUN]-1659909563590
-179796259
GPR[SPVATF]-1659909563827
GPR[EPVATF]-1659909565137
GPR[SPS]-1659909565137
[706069] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2001.
GPR[EPS]-1659909565816
GPR[ESUN]-1659909565816
GPR[SSUN]-1659909565817
-179796259
GPR[SPVATF]-1659909566115
GPR[EPVATF]-1659909567457
GPR[SPS]-1659909567457
[708432] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1997.
GPR[EPS]-1659909568179
GPR[SPVATF]-1659909568179
GPR[EPVATF]-1659909569530
GPR[SPS]-1659909569530
[710465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1997.
GPR[EPS]-1659909570212
GPR[ESUN]-1659909570212
GPR[SSUN]-1659909570212
-179796259
GPR[ESUN]-1659909570446
GPR[SSUN]-1659909570446
-179796259
GPR[SPVATF]-1659909570679
GPR[EPVATF]-1659909572087
GPR[SPS]-1659909572087
[713044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1993.
GPR[EPS]-1659909572791
GPR[ESUN]-1659909572791
GPR[SSUN]-1659909572791
-179796259
GPR[SPVATF]-1659909573097
GPR[EPVATF]-1659909574531
GPR[SPS]-1659909574531
[715470] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1992.
GPR[EPS]-1659909575217
GPR[ESUN]-1659909575217
GPR[SSUN]-1659909575217
-179796259
GPR[SPVATF]-1659909575453
GPR[EPVATF]-1659909576927
GPR[SPS]-1659909576927
[717866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1991.
GPR[EPS]-1659909577613
GPR[ESUN]-1659909577613
GPR[SSUN]-1659909577613
646738083
GPR[SPVATF]-1659909577896
GPR[EPVATF]-1659909579479
GPR[SPS]-1659909579479
[720410] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:581.
GPR[EPS]-1659909580157
GPR[ESUN]-1659909580157
GPR[SSUN]-1659909580157
646738083
GPR[SPVATF]-1659909580519
GPR[EPVATF]-1659909582178
GPR[SPS]-1659909582178
[724070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:580.
GPR[EPS]-1659909583817
GPR[ESUN]-1659909583817
GPR[SSUN]-1659909583817
GPR[ESUN]-1659909583817
GPR[SSUN]-1659909583817
GPR[ESUN]-1659909583817
GPR[SSUN]-1659909583817
GPR[ESUN]-1659909583817
GPR[SSUN]-1659909583817
-132053243
GPR[ESUN]-1659909584020
GPR[SSUN]-1659909584020
-132053243
GPR[SPVATF]-1659909584208
GPR[EPVATF]-1659909584224
[724477] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909584225
GPR[EPVATF]-1659909584240
[724493] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909584240
GPR[SSUN]-1659909584240
-132053243
GPR[ESUN]-1659909584432
GPR[SSUN]-1659909584432
-1605808871
GPR[SPVATF]-1659909584674
GPR[EPVATF]-1659909586689
GPR[SPS]-1659909586689
GPR[EPS]-1659909599623
GPR[ESUN]-1659909599623
GPR[SSUN]-1659909599623
466431456
GPR[ESUN]-1659909599998
GPR[SSUN]-1659909599998
466431456
GPR[SPVATF]-1659909600264
GPR[EPVATF]-1659909601537
GPR[SPS]-1659909601537
[742429] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:687.
GPR[EPS]-1659909602176
GPR[SPVATF]-1659909602177
GPR[EPVATF]-1659909603460
GPR[SPS]-1659909603460
[744340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:687.
GPR[EPS]-1659909604087
GPR[ESUN]-1659909604087
GPR[SSUN]-1659909604087
466431456
GPR[SPVATF]-1659909604338
GPR[EPVATF]-1659909605606
GPR[SPS]-1659909605606
[746498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:684.
GPR[EPS]-1659909606245
GPR[ESUN]-1659909606245
GPR[SSUN]-1659909606245
466431456
GPR[SPVATF]-1659909606492
GPR[EPVATF]-1659909607823
GPR[SPS]-1659909607823
[748718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:681.
GPR[EPS]-1659909608465
GPR[SPVATF]-1659909608466
GPR[EPVATF]-1659909609751
GPR[SPS]-1659909609751
GPR[EPS]-1659909618112
GPR[ESUN]-1659909618112
GPR[SSUN]-1659909618112
466431456
GPR[ESUN]-1659909618392
GPR[SSUN]-1659909618392
466431456
GPR[ESUN]-1659909618677
GPR[SSUN]-1659909618677
466431456
GPR[SPVATF]-1659909618943
GPR[EPVATF]-1659909620218
GPR[SPS]-1659909620218
[761167] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:677.
GPR[EPS]-1659909620914
GPR[SPVATF]-1659909620915
GPR[EPVATF]-1659909622193
GPR[SPS]-1659909622193
GPR[EPS]-1659909630615
GPR[ESUN]-1659909630615
GPR[SSUN]-1659909630615
466431456
GPR[ESUN]-1659909630875
GPR[SSUN]-1659909630875
466431456
GPR[ESUN]-1659909631131
GPR[SSUN]-1659909631132
-132053243
GPR[SPVATF]-1659909631328
GPR[EPVATF]-1659909631346
[771599] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909631346
GPR[SSUN]-1659909631346
-132053243
GPR[SPVATF]-1659909631541
GPR[EPVATF]-1659909631561
[771814] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909631561
GPR[SSUN]-1659909631561
-132053243
GPR[SPVATF]-1659909631754
GPR[EPVATF]-1659909631774
[772027] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909631774
GPR[SSUN]-1659909631774
-132053243
GPR[SPVATF]-1659909631967
GPR[EPVATF]-1659909631985
[772238] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909631985
GPR[SSUN]-1659909631985
-132053243
GPR[ESUN]-1659909632173
GPR[SSUN]-1659909632173
1401453194
GPR[ESUN]-1659909632365
GPR[SSUN]-1659909632365
1401453194
GPR[SPVATF]-1659909632557
GPR[EPVATF]-1659909633888
GPR[SPS]-1659909633888
[774655] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:173.
GPR[EPS]-1659909634402
GPR[SPVATF]-1659909634402
GPR[EPVATF]-1659909635782
GPR[SPS]-1659909635782
GPR[EPS]-1659909723829
GPR[ESUN]-1659909723829
GPR[SSUN]-1659909723829
1401453194
GPR[ESUN]-1659909724190
GPR[SSUN]-1659909724190
1401453194
GPR[SPVATF]-1659909724386
GPR[EPVATF]-1659909725738
GPR[SPS]-1659909725738
[866472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:168.
GPR[EPS]-1659909726219
GPR[SPVATF]-1659909726220
GPR[EPVATF]-1659909727621
GPR[SPS]-1659909727621
GPR[EPS]-1659909744377
GPR[ESUN]-1659909744377
GPR[SSUN]-1659909744377
1401453194
GPR[SPVATF]-1659909744571
GPR[EPVATF]-1659909746059
GPR[SPS]-1659909746059
GPR[EPS]-1659909764110
GPR[ESUN]-1659909764110
GPR[SSUN]-1659909764110
1401453194
GPR[ESUN]-1659909764302
GPR[SSUN]-1659909764302
GPR[ESUN]-1659909764302
GPR[SSUN]-1659909764302
GPR[ESUN]-1659909764302
GPR[SSUN]-1659909764302
GPR[ESUN]-1659909764302
GPR[SSUN]-1659909764302
GPR[ESUN]-1659909764302
GPR[SSUN]-1659909764302
GPR[ESUN]-1659909764302
GPR[SSUN]-1659909764302
1480364497
GPR[ESUN]-1659909764507
GPR[SSUN]-1659909764507
1480364497
GPR[SPVATF]-1659909764709
GPR[EPVATF]-1659909766359
GPR[SPS]-1659909766359
[907070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordTypeBuilder:85.
GPR[EPS]-1659909766817
GPR[SPVATF]-1659909766817
GPR[EPVATF]-1659909768612
GPR[SPS]-1659909768612
GPR[EPS]-1659909783788
GPR[ESUN]-1659909783788
GPR[SSUN]-1659909783788
1480364497
GPR[ESUN]-1659909784116
GPR[SSUN]-1659909784116
1480364497
GPR[SPVATF]-1659909784325
GPR[EPVATF]-1659909786303
GPR[SPS]-1659909786303
GPR[EPS]-1659909803722
GPR[ESUN]-1659909803722
GPR[SSUN]-1659909803722
1480364497
GPR[SPVATF]-1659909803934
GPR[EPVATF]-1659909806688
GPR[SPS]-1659909806688
[947471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordTypeBuilder:72.
GPR[EPS]-1659909807218
GPR[SPVATF]-1659909807219
GPR[EPVATF]-1659909808553
GPR[SPS]-1659909808553
[949286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordTypeBuilder:72.
GPR[EPS]-1659909809033
GPR[ESUN]-1659909809034
GPR[SSUN]-1659909809034
1480364497
GPR[SPVATF]-1659909809242
GPR[EPVATF]-1659909810601
GPR[SPS]-1659909810601
GPR[EPS]-1659909834616
GPR[ESUN]-1659909834616
GPR[SSUN]-1659909834616
-1566590132
GPR[ESUN]-1659909834824
GPR[SSUN]-1659909834824
-1566590132
GPR[SPVATF]-1659909835020
GPR[EPVATF]-1659909836292
GPR[SPS]-1659909836292
GPR[EPS]-1659909851668
GPR[ESUN]-1659909851668
GPR[SSUN]-1659909851668
-1566590132
GPR[SPVATF]-1659909851985
GPR[EPVATF]-1659909853271
GPR[SPS]-1659909853271
GPR[EPS]-1659909859628
GPR[SPVATF]-1659909859628
GPR[EPVATF]-1659909860914
GPR[SPS]-1659909860914
GPR[EPS]-1659909867274
GPR[ESUN]-1659909867274
GPR[SSUN]-1659909867274
-1566590132
GPR[SPVATF]-1659909867482
GPR[EPVATF]-1659909868868
GPR[SPS]-1659909868868
[1009602] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.RecordType:128.
GPR[EPS]-1659909869349
GPR[SPVATF]-1659909869350
GPR[EPVATF]-1659909870629
GPR[SPS]-1659909870629
GPR[EPS]-1659909879489
GPR[ESUN]-1659909879489
GPR[SSUN]-1659909879489
1480364497
GPR[ESUN]-1659909879698
GPR[SSUN]-1659909879698
1480364497
GPR[ESUN]-1659909879902
GPR[SSUN]-1659909879902
-1093533311
GPR[ESUN]-1659909880147
GPR[SSUN]-1659909880148
-622774852
GPR[SPVATF]-1659909880369
GPR[EPVATF]-1659909881687
GPR[SPS]-1659909881688
[1022502] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:354.
GPR[EPS]-1659909882249
GPR[ESUN]-1659909882249
GPR[SSUN]-1659909882249
-1966087783
GPR[ESUN]-1659909882475
GPR[SSUN]-1659909882475
-1966087783
GPR[SPVATF]-1659909882671
GPR[EPVATF]-1659909882690
[1022943] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909882690
GPR[EPVATF]-1659909882709
[1022962] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909882709
GPR[SSUN]-1659909882709
1401453194
GPR[SPVATF]-1659909882900
GPR[EPVATF]-1659909884289
GPR[SPS]-1659909884289
[1025030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:274.
GPR[EPS]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
GPR[ESUN]-1659909884777
GPR[SSUN]-1659909884777
-1345859678
GPR[SPVATF]-1659909885027
GPR[EPVATF]-1659909886345
GPR[SPS]-1659909886345
[1027258] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:820.
GPR[EPS]-1659909887005
GPR[SPVATF]-1659909887005
GPR[EPVATF]-1659909888413
GPR[SPS]-1659909888413
[1029299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:820.
GPR[EPS]-1659909889046
GPR[ESUN]-1659909889046
GPR[SSUN]-1659909889046
GPR[ESUN]-1659909889046
GPR[SSUN]-1659909889046
704176156
GPR[ESUN]-1659909889245
GPR[SSUN]-1659909889245
704176156
GPR[SPVATF]-1659909889443
GPR[EPVATF]-1659909890835
GPR[SPS]-1659909890835
[1031676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:214.
GPR[EPS]-1659909891423
GPR[SPVATF]-1659909891423
GPR[EPVATF]-1659909892851
GPR[SPS]-1659909892851
[1033616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:214.
GPR[EPS]-1659909893363
GPR[ESUN]-1659909893363
GPR[SSUN]-1659909893363
704176156
GPR[SPVATF]-1659909893566
GPR[EPVATF]-1659909895045
GPR[SPS]-1659909895045
[1035809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:213.
GPR[EPS]-1659909895556
GPR[ESUN]-1659909895556
GPR[SSUN]-1659909895556
704176156
GPR[SPVATF]-1659909895762
GPR[EPVATF]-1659909897298
GPR[SPS]-1659909897298
[1038071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:156.
GPR[EPS]-1659909897818
GPR[ESUN]-1659909897819
GPR[SSUN]-1659909897819
704176156
GPR[ESUN]-1659909898021
GPR[SSUN]-1659909898021
-179796259
GPR[SPVATF]-1659909898265
GPR[EPVATF]-1659909899933
GPR[SPS]-1659909899933
[1040888] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1732.
GPR[EPS]-1659909900635
GPR[ESUN]-1659909900635
GPR[SSUN]-1659909900635
-6115253
GPR[ESUN]-1659909900859
GPR[SSUN]-1659909900859
-1345859678
GPR[ESUN]-1659909901108
GPR[SSUN]-1659909901108
-1345859678
GPR[SPVATF]-1659909901356
GPR[EPVATF]-1659909903046
GPR[SPS]-1659909903046
[1043905] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:828.
GPR[EPS]-1659909903652
GPR[ESUN]-1659909903652
GPR[SSUN]-1659909903652
-1345859678
GPR[SPVATF]-1659909903909
GPR[EPVATF]-1659909906498
GPR[SPS]-1659909906498
[1047411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:827.
GPR[EPS]-1659909907158
GPR[ESUN]-1659909907158
GPR[SSUN]-1659909907158
-1345859678
GPR[SPVATF]-1659909907405
GPR[EPVATF]-1659909908757
GPR[SPS]-1659909908757
[1049647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:814.
GPR[EPS]-1659909909394
GPR[SPVATF]-1659909909394
GPR[EPVATF]-1659909910774
GPR[SPS]-1659909910774
[1051644] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:814.
GPR[EPS]-1659909911391
GPR[ESUN]-1659909911391
GPR[SSUN]-1659909911391
-1345859678
GPR[ESUN]-1659909911641
GPR[SSUN]-1659909911642
-1345859678
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
GPR[ESUN]-1659909911996
GPR[SSUN]-1659909911996
-1345859678
GPR[SPVATF]-1659909912271
GPR[EPVATF]-1659909913619
GPR[SPS]-1659909913619
[1054547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:802.
GPR[EPS]-1659909914294
GPR[SPVATF]-1659909914294
GPR[EPVATF]-1659909915696
GPR[SPS]-1659909915696
[1056574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:802.
GPR[EPS]-1659909916321
GPR[ESUN]-1659909916321
GPR[SSUN]-1659909916321
GPR[ESUN]-1659909916321
GPR[SSUN]-1659909916321
466431456
GPR[SPVATF]-1659909916578
GPR[EPVATF]-1659909917909
GPR[SPS]-1659909917909
[1058807] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1135.
GPR[EPS]-1659909918554
GPR[ESUN]-1659909918554
GPR[SSUN]-1659909918554
466431456
GPR[SPVATF]-1659909918803
GPR[EPVATF]-1659909920160
GPR[SPS]-1659909920160
[1061078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:849.
GPR[EPS]-1659909920825
GPR[ESUN]-1659909920825
GPR[SSUN]-1659909920825
466431456
GPR[ESUN]-1659909921075
GPR[SSUN]-1659909921075
466431456
GPR[SPVATF]-1659909921323
GPR[EPVATF]-1659909922612
GPR[SPS]-1659909922613
[1063527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:845.
GPR[EPS]-1659909923274
GPR[SPVATF]-1659909923274
GPR[EPVATF]-1659909924653
GPR[SPS]-1659909924653
[1065562] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:845.
GPR[EPS]-1659909925309
GPR[ESUN]-1659909925309
GPR[SSUN]-1659909925309
466431456
GPR[SPVATF]-1659909925561
GPR[EPVATF]-1659909926941
GPR[SPS]-1659909926941
[1067841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:844.
GPR[EPS]-1659909927588
GPR[ESUN]-1659909927588
GPR[SSUN]-1659909927588
-1605808871
GPR[SPVATF]-1659909927824
GPR[EPVATF]-1659909929200
GPR[SPS]-1659909929200
[1069858] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TypeValidator {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private final com.google.javascript.rhino.jstype.JSType allValueTypes;

    private boolean shouldReport = true;

    private final com.google.javascript.rhino.jstype.JSType nullOrUndefined;

    private final java.util.List<com.google.javascript.jscomp.TypeValidator.TypeMismatch> mismatches = com.google.common.collect.Lists.newArrayList();

    private static final java.lang.String FOUND_REQUIRED = "{0}\n" + ("found   : {1}\n" + "required: {2}");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_CAST", "invalid cast - must be a subtype or supertype\n" + ("from: {0}\n" + "to  : {1}"));

    static final com.google.javascript.jscomp.DiagnosticType TYPE_MISMATCH_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TYPE_MISMATCH", "{0}");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_EXTENDS_TAG_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MISSING_EXTENDS_TAG", "Missing @extends tag on type {0}");

    static final com.google.javascript.jscomp.DiagnosticType DUP_VAR_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DUP_VAR_DECLARATION", "variable {0} redefined with type {1}, " + "original definition at {2}:{3} with type {4}");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", "property {0} on interface {1} is not implemented by type {2}");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from interface {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeValidator.INVALID_CAST, com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING, com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING, com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION, com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED, com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH);

    TypeValidator(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
        this.typeRegistry = compiler.getTypeRegistry();
        this.allValueTypes = typeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
        this.nullOrUndefined = typeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
    }

    java.lang.Iterable<com.google.javascript.jscomp.TypeValidator.TypeMismatch> getMismatches() {
        return mismatches;
    }

    void setShouldReport(boolean report) {
        this.shouldReport = report;
    }

    boolean expectObject(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if (!type.matchesObjectContext()) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE);
            return false;
        }
        return true;
    }

    void expectActualObject(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if (!type.isObject()) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE);
        }
    }

    void expectAnyObject(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        com.google.javascript.rhino.jstype.JSType anyObjectType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE);
        if ((!anyObjectType.isSubtype(type)) && (!type.isEmptyType())) {
            mismatch(t, n, msg, type, anyObjectType);
        }
    }

    void expectString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if (!type.matchesStringContext()) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
        }
    }

    void expectNumber(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if (!type.matchesNumberContext()) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
        }
    }

    void expectBitwiseable(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if ((!type.matchesNumberContext()) && (!type.isSubtype(allValueTypes))) {
            mismatch(t, n, msg, type, allValueTypes);
        }
    }

    void expectStringOrNumber(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if ((!type.matchesNumberContext()) && (!type.matchesStringContext())) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING);
        }
    }

    boolean expectNotNullOrUndefined(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg, com.google.javascript.rhino.jstype.JSType expectedType) {
        if ((((!type.isNoType()) && (!type.isUnknownType())) && type.isSubtype(nullOrUndefined)) && (!containsForwardDeclaredUnresolvedName(type))) {
            if ((n.isGetProp() && (!t.inGlobalScope())) && type.isNullType()) {
                return true;
            }
            mismatch(t, n, msg, type, expectedType);
            return false;
        }
        return true;
    }

    private boolean containsForwardDeclaredUnresolvedName(com.google.javascript.rhino.jstype.JSType type) {
        if (type.isUnionType()) {
            for (com.google.javascript.rhino.jstype.JSType alt : type.toMaybeUnionType().getAlternates()) {
                if (containsForwardDeclaredUnresolvedName(alt)) {
                    return true;
                }
            }
        }
        return type.isNoResolvedType();
    }

    void expectSwitchMatchesCase(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType switchType, com.google.javascript.rhino.jstype.JSType caseType) {
        if ((!switchType.canTestForShallowEqualityWith(caseType)) && ((caseType.autoboxesTo() == null) || (!caseType.autoboxesTo().isSubtype(switchType)))) {
            mismatch(t, n.getFirstChild(), "case expression doesn't match switch", caseType, switchType);
        }
    }

    void expectIndexMatch(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType objType, com.google.javascript.rhino.jstype.JSType indexType) {
        com.google.common.base.Preconditions.checkState(n.isGetElem());
        com.google.javascript.rhino.Node indexNode = n.getLastChild();
        if (objType.isUnknownType()) {
            expectStringOrNumber(t, indexNode, indexType, "property access");
        } else {
            com.google.javascript.rhino.jstype.ObjectType dereferenced = objType.dereference();
            if ((dereferenced != null) && (dereferenced.getIndexType() != null)) {
                expectCanAssignTo(t, indexNode, indexType, dereferenced.getIndexType(), "restricted index type");
            } else if ((dereferenced != null) && dereferenced.isArrayType()) {
                expectNumber(t, indexNode, indexType, "array access");
            } else if (objType.matchesObjectContext()) {
                expectString(t, indexNode, indexType, "property access");
            } else {
                mismatch(t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
            }
        }
    }

    boolean expectCanAssignToPropertyOf(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType rightType, com.google.javascript.rhino.jstype.JSType leftType, com.google.javascript.rhino.Node owner, java.lang.String propName) {
        if ((!leftType.isNoType()) && (!rightType.canAssignTo(leftType))) {
            if (bothIntrinsics(rightType, leftType)) {
                registerMismatch(rightType, leftType, null);
            } else {
                com.google.javascript.rhino.jstype.JSType ownerType = getJSType(owner);
                if (ownerType.isFunctionPrototypeType()) {
                    com.google.javascript.rhino.jstype.FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();
                    if ((ownerFn.isInterface() && rightType.isFunctionType()) && leftType.isFunctionType()) {
                        return true;
                    }
                }
                mismatch(t, n, (("assignment to property " + propName) + " of ") + getReadableJSTypeName(owner, true), rightType, leftType);
            }
            return false;
        }
        return true;
    }

    boolean expectCanAssignTo(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType rightType, com.google.javascript.rhino.jstype.JSType leftType, java.lang.String msg) {
        if (!rightType.canAssignTo(leftType)) {
            if (bothIntrinsics(rightType, leftType)) {
                registerMismatch(rightType, leftType, null);
            } else {
                mismatch(t, n, msg, rightType, leftType);
            }
            return false;
        }
        return true;
    }

    private boolean bothIntrinsics(com.google.javascript.rhino.jstype.JSType rightType, com.google.javascript.rhino.jstype.JSType leftType) {
        return (leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType());
    }

    void expectArgumentMatchesParameter(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType argType, com.google.javascript.rhino.jstype.JSType paramType, com.google.javascript.rhino.Node callNode, int ordinal) {
        if (!argType.canAssignTo(paramType)) {
            mismatch(t, n, java.lang.String.format("actual parameter %d of %s does not match " + "formal parameter", ordinal, getReadableJSTypeName(callNode.getFirstChild(), false)), argType, paramType);
        }
    }

    void expectCanOverride(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType overridingType, com.google.javascript.rhino.jstype.JSType hiddenType, java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType ownerType) {
        if (!overridingType.canAssignTo(hiddenType)) {
            registerMismatch(overridingType, hiddenType, report(t.makeError(n, com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH, propertyName, ownerType.toString(), hiddenType.toString(), overridingType.toString())));
        }
    }

    void expectSuperType(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.ObjectType superObject, com.google.javascript.rhino.jstype.ObjectType subObject) {
        com.google.javascript.rhino.jstype.FunctionType subCtor = subObject.getConstructor();
        com.google.javascript.rhino.jstype.ObjectType declaredSuper = subObject.getImplicitPrototype().getImplicitPrototype();
        if (!declaredSuper.equals(superObject)) {
            if (declaredSuper.equals(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
                registerMismatch(superObject, declaredSuper, report(t.makeError(n, com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING, subObject.toString())));
            } else {
                mismatch(t.getSourceName(), n, "mismatch in declaration of superclass type", superObject, declaredSuper);
            }
            if (!subCtor.hasCachedValues()) {
                subCtor.setPrototypeBasedOn(superObject);
            }
        }
    }

    void expectCanCast(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.jstype.JSType castType) {
        castType = castType.restrictByNotNullOrUndefined();
        type = type.restrictByNotNullOrUndefined();
        if ((!type.canAssignTo(castType)) && (!castType.canAssignTo(type))) {
            registerMismatch(type, castType, report(t.makeError(n, com.google.javascript.jscomp.TypeValidator.INVALID_CAST, castType.toString(), type.toString())));
        }
    }

    com.google.javascript.jscomp.Scope.Var expectUndeclaredVariable(java.lang.String sourceName, com.google.javascript.jscomp.CompilerInput input, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope.Var var, java.lang.String variableName, com.google.javascript.rhino.jstype.JSType newType) {
        com.google.javascript.jscomp.Scope.Var newVar = var;
        boolean allowDupe = false;
        if (n.isGetProp() || com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, parent)) {
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if (info == null) {
                info = parent.getJSDocInfo();
            }
            allowDupe = (info != null) && info.getSuppressions().contains("duplicate");
        }
        com.google.javascript.rhino.jstype.JSType varType = var.getType();
        if ((((varType != null) && (varType != typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) && (newType != null)) && (newType != typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            if (var.input == null) {
                com.google.javascript.jscomp.Scope s = var.getScope();
                s.undeclare(var);
                newVar = s.declare(variableName, n, varType, input, false);
                n.setJSType(varType);
                if (parent.isVar()) {
                    if (n.getFirstChild() != null) {
                        n.getFirstChild().setJSType(varType);
                    }
                } else {
                    com.google.common.base.Preconditions.checkState(parent.isFunction());
                    parent.setJSType(varType);
                }
            } else if ((!(allowDupe || var.getParentNode().isExprResult())) || (!newType.equals(varType))) {
                report(com.google.javascript.jscomp.JSError.make(sourceName, n, com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), java.lang.String.valueOf(var.nameNode.getLineno()), varType.toString()));
            }
        }
        return newVar;
    }

    void expectAllInterfaceProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType type) {
        com.google.javascript.rhino.jstype.ObjectType instance = type.getInstanceType();
        for (com.google.javascript.rhino.jstype.ObjectType implemented : type.getAllImplementedInterfaces()) {
            if (implemented.getImplicitPrototype() != null) {
                for (java.lang.String prop : implemented.getImplicitPrototype().getOwnPropertyNames()) {
                    expectInterfaceProperty(t, n, instance, implemented, prop);
                }
            }
        }
    }

    private void expectInterfaceProperty(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.ObjectType instance, com.google.javascript.rhino.jstype.ObjectType implementedInterface, java.lang.String prop) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> propSlot = instance.getSlot(prop);
        if (propSlot == null) {
            java.lang.String sourceName = n.getSourceFileName();
            sourceName = (sourceName == null) ? "" : sourceName;
            registerMismatch(instance, implementedInterface, report(com.google.javascript.jscomp.JSError.make(sourceName, n, com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString())));
        } else {
            com.google.javascript.rhino.Node propNode = (propSlot.getDeclaration() == null) ? null : propSlot.getDeclaration().getNode();
            propNode = (propNode == null) ? n : propNode;
            com.google.javascript.rhino.jstype.JSType found = propSlot.getType();
            com.google.javascript.rhino.jstype.JSType required = implementedInterface.getImplicitPrototype().getPropertyType(prop);
            found = found.restrictByNotNullOrUndefined();
            required = required.restrictByNotNullOrUndefined();
            if (!found.canAssignTo(required)) {
                com.google.javascript.rhino.jstype.FunctionType constructor = implementedInterface.toObjectType().getConstructor();
                registerMismatch(found, required, report(t.makeError(propNode, com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop, constructor.getTopMostDefiningType(prop).toString(), required.toString(), found.toString())));
            }
        }
    }

    private void mismatch(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String msg, com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required) {
        mismatch(t.getSourceName(), n, msg, found, required);
    }

    private void mismatch(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String msg, com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSTypeNative required) {
        mismatch(t, n, msg, found, getNativeType(required));
    }

    private void mismatch(java.lang.String sourceName, com.google.javascript.rhino.Node n, java.lang.String msg, com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required) {
        registerMismatch(found, required, report(com.google.javascript.jscomp.JSError.make(sourceName, n, com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING, formatFoundRequired(msg, found, required))));
    }

    private void registerMismatch(com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required, com.google.javascript.jscomp.JSError error) {
        found = found.restrictByNotNullOrUndefined();
        required = required.restrictByNotNullOrUndefined();
        if (found.canAssignTo(required) || required.canAssignTo(found)) {
            return;
        }
        mismatches.add(new com.google.javascript.jscomp.TypeValidator.TypeMismatch(found, required, error));
        if (found.isFunctionType() && required.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType fnTypeA = found.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.FunctionType fnTypeB = required.toMaybeFunctionType();
            java.util.Iterator<com.google.javascript.rhino.Node> paramItA = fnTypeA.getParameters().iterator();
            java.util.Iterator<com.google.javascript.rhino.Node> paramItB = fnTypeB.getParameters().iterator();
            while (paramItA.hasNext() && paramItB.hasNext()) {
                registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);
            } 
            registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);
        }
    }

    private void registerIfMismatch(com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required, com.google.javascript.jscomp.JSError error) {
        if (((found != null) && (required != null)) && (!found.canAssignTo(required))) {
            registerMismatch(found, required, error);
        }
    }

    private java.lang.String formatFoundRequired(java.lang.String description, com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required) {
        return java.text.MessageFormat.format(com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED, description, found, required);
    }

    java.lang.String getReadableJSTypeName(com.google.javascript.rhino.Node n, boolean dereference) {
        if (n.isGetProp()) {
            com.google.javascript.rhino.jstype.ObjectType objectType = getJSType(n.getFirstChild()).dereference();
            if (objectType != null) {
                java.lang.String propName = n.getLastChild().getString();
                if ((objectType.getConstructor() != null) && objectType.getConstructor().isInterface()) {
                    objectType = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType, propName);
                } else {
                    while ((objectType != null) && (!objectType.hasOwnProperty(propName))) {
                        objectType = objectType.getImplicitPrototype();
                    } 
                }
                if ((objectType != null) && ((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType())) {
                    return (objectType.toString() + ".") + propName;
                }
            }
        }
        com.google.javascript.rhino.jstype.JSType type = getJSType(n);
        if (dereference) {
            com.google.javascript.rhino.jstype.ObjectType dereferenced = type.dereference();
            if (dereferenced != null) {
                type = dereferenced;
            }
        }
        java.lang.String qualifiedName = n.getQualifiedName();
        if (type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) {
            return type.toString();
        } else if (qualifiedName != null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(207).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("dereference",dereference);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("qualifiedName",qualifiedName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.this.typeRegistry",com.google.javascript.jscomp.TypeValidator.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.INVALID_CAST",com.google.javascript.jscomp.TypeValidator.INVALID_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING",com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED",com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeValidator.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.this.mismatches",com.google.javascript.jscomp.TypeValidator.this.mismatches);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED",com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.this.allValueTypes",com.google.javascript.jscomp.TypeValidator.this.allValueTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION",com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.this.nullOrUndefined",com.google.javascript.jscomp.TypeValidator.this.nullOrUndefined);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.this.compiler",com.google.javascript.jscomp.TypeValidator.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING",com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectInput("com.google.javascript.jscomp.TypeValidator.this.shouldReport",com.google.javascript.jscomp.TypeValidator.this.shouldReport);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(207).collectionEnds();
            }
            if (runtimeAngelicValue)
                return qualifiedName;

        } else if (type.isFunctionType()) {
            return "function";
        } else {
            return type.toString();
        }
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }

    private com.google.javascript.jscomp.JSError report(com.google.javascript.jscomp.JSError error) {
        if (shouldReport) {
            compiler.report(error);
        }
        return error;
    }

    static class TypeMismatch {
        final com.google.javascript.rhino.jstype.JSType typeA;

        final com.google.javascript.rhino.jstype.JSType typeB;

        final com.google.javascript.jscomp.JSError src;

        TypeMismatch(com.google.javascript.rhino.jstype.JSType a, com.google.javascript.rhino.jstype.JSType b, com.google.javascript.jscomp.JSError src) {
            this.typeA = a;
            this.typeB = b;
            this.src = src;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.jscomp.TypeValidator.TypeMismatch) {
                com.google.javascript.jscomp.TypeValidator.TypeMismatch that = ((com.google.javascript.jscomp.TypeValidator.TypeMismatch) (object));
                return (that.typeA.equals(this.typeA) && that.typeB.equals(this.typeB)) || (that.typeB.equals(this.typeA) && that.typeA.equals(this.typeB));
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(typeA, typeB);
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("(" + typeA) + ", ") + typeB) + ")";
        }
    }
}
[1069859] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659909929606
GPR[SSUN]-1659909929606
1401453194
GPR[ESUN]-1659909929792
GPR[SSUN]-1659909929792
1401453194
GPR[SPVATF]-1659909929977
GPR[EPVATF]-1659909931300
GPR[SPS]-1659909931300
[1072035] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:418.
GPR[EPS]-1659909931782
GPR[ESUN]-1659909931782
GPR[SSUN]-1659909931782
1401453194
GPR[ESUN]-1659909931976
GPR[SSUN]-1659909931976
1401453194
GPR[SPVATF]-1659909932165
GPR[EPVATF]-1659909933662
GPR[SPS]-1659909933662
[1074392] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:416.
GPR[EPS]-1659909934139
GPR[ESUN]-1659909934139
GPR[SSUN]-1659909934139
1401453194
GPR[SPVATF]-1659909934336
GPR[EPVATF]-1659909935713
GPR[SPS]-1659909935713
[1076433] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:415.
GPR[EPS]-1659909936180
GPR[ESUN]-1659909936180
GPR[SSUN]-1659909936180
1401453194
GPR[SPVATF]-1659909936379
GPR[EPVATF]-1659909937769
GPR[SPS]-1659909937769
[1078490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:413.
GPR[EPS]-1659909938237
GPR[ESUN]-1659909938237
GPR[SSUN]-1659909938237
1401453194
GPR[SPVATF]-1659909938431
GPR[EPVATF]-1659909939937
GPR[SPS]-1659909939937
[1080663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:412.
GPR[EPS]-1659909940410
GPR[SPVATF]-1659909940410
GPR[EPVATF]-1659909941855
GPR[SPS]-1659909941855
[1082680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:412.
GPR[EPS]-1659909942428
GPR[ESUN]-1659909942428
GPR[SSUN]-1659909942428
1401453194
GPR[SPVATF]-1659909942620
GPR[EPVATF]-1659909944139
GPR[SPS]-1659909944139
[1084856] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:411.
GPR[EPS]-1659909944603
GPR[ESUN]-1659909944603
GPR[SSUN]-1659909944603
1401453194
GPR[SPVATF]-1659909944795
GPR[EPVATF]-1659909946440
GPR[SPS]-1659909946440
[1087168] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:410.
GPR[EPS]-1659909946915
GPR[ESUN]-1659909946915
GPR[SSUN]-1659909946916
1401453194
GPR[ESUN]-1659909947109
GPR[SSUN]-1659909947109
1401453194
GPR[SPVATF]-1659909947302
GPR[EPVATF]-1659909949058
GPR[SPS]-1659909949058
[1089765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:408.
GPR[EPS]-1659909949512
GPR[ESUN]-1659909949512
GPR[SSUN]-1659909949512
1401453194
GPR[ESUN]-1659909949709
GPR[SSUN]-1659909949709
1401453194
GPR[ESUN]-1659909949898
GPR[SSUN]-1659909949898
-1797850673
GPR[SPVATF]-1659909950146
GPR[EPVATF]-1659909952234
GPR[SPS]-1659909952234
[1093070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1002.
GPR[EPS]-1659909952817
GPR[ESUN]-1659909952817
GPR[SSUN]-1659909952817
1401453194
GPR[SPVATF]-1659909953011
GPR[EPVATF]-1659909955723
GPR[SPS]-1659909955723
[1096480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:273.
GPR[EPS]-1659909956227
GPR[SPVATF]-1659909956227
GPR[EPVATF]-1659909957565
GPR[SPS]-1659909957565
[1098286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:273.
GPR[EPS]-1659909958033
GPR[ESUN]-1659909958034
GPR[SSUN]-1659909958034
1401453194
GPR[SPVATF]-1659909958228
GPR[EPVATF]-1659909959582
GPR[SPS]-1659909959582
[1100322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:272.
GPR[EPS]-1659909960069
GPR[ESUN]-1659909960069
GPR[SSUN]-1659909960069
-1797850673
GPR[SPVATF]-1659909960319
GPR[EPVATF]-1659909961702
GPR[SPS]-1659909961702
[1102591] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1025.
GPR[EPS]-1659909962338
GPR[ESUN]-1659909962338
GPR[SSUN]-1659909962339
-1797850673
GPR[SPVATF]-1659909962582
GPR[EPVATF]-1659909963885
GPR[SPS]-1659909963885
[1104738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1018.
GPR[EPS]-1659909964485
GPR[SPVATF]-1659909964486
GPR[EPVATF]-1659909965876
GPR[SPS]-1659909965876
[1106761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1018.
GPR[EPS]-1659909966508
GPR[ESUN]-1659909966508
GPR[SSUN]-1659909966508
-1797850673
GPR[ESUN]-1659909966757
GPR[SSUN]-1659909966757
1187751237
GPR[ESUN]-1659909967030
GPR[SSUN]-1659909967030
1401453194
GPR[SPVATF]-1659909967223
GPR[EPVATF]-1659909968555
GPR[SPS]-1659909968555
[1109307] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:434.
GPR[EPS]-1659909969054
GPR[ESUN]-1659909969054
GPR[SSUN]-1659909969054
-1797850673
GPR[SPVATF]-1659909969302
GPR[EPVATF]-1659909970615
GPR[SPS]-1659909970615
[1111452] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1016.
GPR[EPS]-1659909971199
GPR[SPVATF]-1659909971199
GPR[EPVATF]-1659909972541
GPR[SPS]-1659909972541
[1113495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1016.
GPR[EPS]-1659909973242
GPR[ESUN]-1659909973242
GPR[SSUN]-1659909973242
-1797850673
GPR[ESUN]-1659909973493
GPR[SSUN]-1659909973493
-1797850673
GPR[ESUN]-1659909973741
GPR[SSUN]-1659909973741
-1797850673
GPR[SPVATF]-1659909973984
GPR[EPVATF]-1659909975282
GPR[SPS]-1659909975282
[1116229] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1001.
GPR[EPS]-1659909975976
GPR[SPVATF]-1659909975976
GPR[EPVATF]-1659909977299
GPR[SPS]-1659909977299
[1118216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1001.
GPR[EPS]-1659909977963
GPR[ESUN]-1659909977963
GPR[SSUN]-1659909977963
-1797850673
GPR[ESUN]-1659909978207
GPR[SSUN]-1659909978207
-1797850673
GPR[SPVATF]-1659909978451
GPR[EPVATF]-1659909979802
GPR[SPS]-1659909979802
[1120643] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:993.
GPR[EPS]-1659909980390
GPR[SPVATF]-1659909980390
GPR[EPVATF]-1659909981726
GPR[SPS]-1659909981726
[1122569] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:993.
GPR[EPS]-1659909982316
GPR[ESUN]-1659909982316
GPR[SSUN]-1659909982316
-1797850673
GPR[ESUN]-1659909982560
GPR[SSUN]-1659909982560
-1797850673
GPR[ESUN]-1659909982865
GPR[SSUN]-1659909982865
-1797850673
GPR[ESUN]-1659909983106
GPR[SSUN]-1659909983106
-1797850673
GPR[SPVATF]-1659909983353
GPR[EPVATF]-1659909984736
GPR[SPS]-1659909984736
[1125593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:982.
GPR[EPS]-1659909985340
GPR[SPVATF]-1659909985341
GPR[EPVATF]-1659909986737
GPR[SPS]-1659909986737
[1127924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:982.
GPR[EPS]-1659909987671
GPR[ESUN]-1659909987671
GPR[SSUN]-1659909987671
-1797850673
GPR[ESUN]-1659909987917
GPR[SSUN]-1659909987917
-1797850673
GPR[ESUN]-1659909988160
GPR[SSUN]-1659909988160
-1605808871
GPR[SPVATF]-1659909988398
GPR[EPVATF]-1659909989815
GPR[SPS]-1659909989815
[1130546] ERROR ConstraintModelBuilder - Unable to compile the change: 
class TypeValidator {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private final com.google.javascript.rhino.jstype.JSType allValueTypes;

    private boolean shouldReport = true;

    private final com.google.javascript.rhino.jstype.JSType nullOrUndefined;

    private final java.util.List<com.google.javascript.jscomp.TypeValidator.TypeMismatch> mismatches = com.google.common.collect.Lists.newArrayList();

    private static final java.lang.String FOUND_REQUIRED = "{0}\n" + ("found   : {1}\n" + "required: {2}");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_CAST", "invalid cast - must be a subtype or supertype\n" + ("from: {0}\n" + "to  : {1}"));

    static final com.google.javascript.jscomp.DiagnosticType TYPE_MISMATCH_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TYPE_MISMATCH", "{0}");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_EXTENDS_TAG_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MISSING_EXTENDS_TAG", "Missing @extends tag on type {0}");

    static final com.google.javascript.jscomp.DiagnosticType DUP_VAR_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DUP_VAR_DECLARATION", "variable {0} redefined with type {1}, " + "original definition at {2}:{3} with type {4}");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_NOT_IMPLEMENTED", "property {0} on interface {1} is not implemented by type {2}");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from interface {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeValidator.INVALID_CAST, com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING, com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING, com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION, com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED, com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH);

    TypeValidator(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
        this.typeRegistry = compiler.getTypeRegistry();
        this.allValueTypes = typeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
        this.nullOrUndefined = typeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
    }

    java.lang.Iterable<com.google.javascript.jscomp.TypeValidator.TypeMismatch> getMismatches() {
        return mismatches;
    }

    void setShouldReport(boolean report) {
        this.shouldReport = report;
    }

    boolean expectObject(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if (!type.matchesObjectContext()) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE);
            return false;
        }
        return true;
    }

    void expectActualObject(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if (!type.isObject()) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE);
        }
    }

    void expectAnyObject(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        com.google.javascript.rhino.jstype.JSType anyObjectType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE);
        if ((!anyObjectType.isSubtype(type)) && (!type.isEmptyType())) {
            mismatch(t, n, msg, type, anyObjectType);
        }
    }

    void expectString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if (!type.matchesStringContext()) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
        }
    }

    void expectNumber(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if (!type.matchesNumberContext()) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
        }
    }

    void expectBitwiseable(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if ((!type.matchesNumberContext()) && (!type.isSubtype(allValueTypes))) {
            mismatch(t, n, msg, type, allValueTypes);
        }
    }

    void expectStringOrNumber(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg) {
        if ((!type.matchesNumberContext()) && (!type.matchesStringContext())) {
            mismatch(t, n, msg, type, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_STRING);
        }
    }

    boolean expectNotNullOrUndefined(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, java.lang.String msg, com.google.javascript.rhino.jstype.JSType expectedType) {
        if ((((!type.isNoType()) && (!type.isUnknownType())) && type.isSubtype(nullOrUndefined)) && (!containsForwardDeclaredUnresolvedName(type))) {
            if ((n.isGetProp() && (!t.inGlobalScope())) && type.isNullType()) {
                return true;
            }
            mismatch(t, n, msg, type, expectedType);
            return false;
        }
        return true;
    }

    private boolean containsForwardDeclaredUnresolvedName(com.google.javascript.rhino.jstype.JSType type) {
        if (type.isUnionType()) {
            for (com.google.javascript.rhino.jstype.JSType alt : type.toMaybeUnionType().getAlternates()) {
                if (containsForwardDeclaredUnresolvedName(alt)) {
                    return true;
                }
            }
        }
        return type.isNoResolvedType();
    }

    void expectSwitchMatchesCase(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType switchType, com.google.javascript.rhino.jstype.JSType caseType) {
        if ((!switchType.canTestForShallowEqualityWith(caseType)) && ((caseType.autoboxesTo() == null) || (!caseType.autoboxesTo().isSubtype(switchType)))) {
            mismatch(t, n.getFirstChild(), "case expression doesn't match switch", caseType, switchType);
        }
    }

    void expectIndexMatch(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType objType, com.google.javascript.rhino.jstype.JSType indexType) {
        com.google.common.base.Preconditions.checkState(n.isGetElem());
        com.google.javascript.rhino.Node indexNode = n.getLastChild();
        if (objType.isUnknownType()) {
            expectStringOrNumber(t, indexNode, indexType, "property access");
        } else {
            com.google.javascript.rhino.jstype.ObjectType dereferenced = objType.dereference();
            if ((dereferenced != null) && (dereferenced.getIndexType() != null)) {
                expectCanAssignTo(t, indexNode, indexType, dereferenced.getIndexType(), "restricted index type");
            } else if ((dereferenced != null) && dereferenced.isArrayType()) {
                expectNumber(t, indexNode, indexType, "array access");
            } else if (objType.matchesObjectContext()) {
                expectString(t, indexNode, indexType, "property access");
            } else {
                mismatch(t, n, "only arrays or objects can be accessed", objType, typeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE, com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
            }
        }
    }

    boolean expectCanAssignToPropertyOf(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType rightType, com.google.javascript.rhino.jstype.JSType leftType, com.google.javascript.rhino.Node owner, java.lang.String propName) {
        if ((!leftType.isNoType()) && (!rightType.canAssignTo(leftType))) {
            if (bothIntrinsics(rightType, leftType)) {
                registerMismatch(rightType, leftType, null);
            } else {
                com.google.javascript.rhino.jstype.JSType ownerType = getJSType(owner);
                if (ownerType.isFunctionPrototypeType()) {
                    com.google.javascript.rhino.jstype.FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();
                    if ((ownerFn.isInterface() && rightType.isFunctionType()) && leftType.isFunctionType()) {
                        return true;
                    }
                }
                mismatch(t, n, (("assignment to property " + propName) + " of ") + getReadableJSTypeName(owner, true), rightType, leftType);
            }
            return false;
        }
        return true;
    }

    boolean expectCanAssignTo(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType rightType, com.google.javascript.rhino.jstype.JSType leftType, java.lang.String msg) {
        if (!rightType.canAssignTo(leftType)) {
            if (bothIntrinsics(rightType, leftType)) {
                registerMismatch(rightType, leftType, null);
            } else {
                mismatch(t, n, msg, rightType, leftType);
            }
            return false;
        }
        return true;
    }

    private boolean bothIntrinsics(com.google.javascript.rhino.jstype.JSType rightType, com.google.javascript.rhino.jstype.JSType leftType) {
        return (leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType());
    }

    void expectArgumentMatchesParameter(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType argType, com.google.javascript.rhino.jstype.JSType paramType, com.google.javascript.rhino.Node callNode, int ordinal) {
        if (!argType.canAssignTo(paramType)) {
            mismatch(t, n, java.lang.String.format("actual parameter %d of %s does not match " + "formal parameter", ordinal, getReadableJSTypeName(callNode.getFirstChild(), false)), argType, paramType);
        }
    }

    void expectCanOverride(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType overridingType, com.google.javascript.rhino.jstype.JSType hiddenType, java.lang.String propertyName, com.google.javascript.rhino.jstype.JSType ownerType) {
        if (!overridingType.canAssignTo(hiddenType)) {
            registerMismatch(overridingType, hiddenType, report(t.makeError(n, com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH, propertyName, ownerType.toString(), hiddenType.toString(), overridingType.toString())));
        }
    }

    void expectSuperType(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.ObjectType superObject, com.google.javascript.rhino.jstype.ObjectType subObject) {
        com.google.javascript.rhino.jstype.FunctionType subCtor = subObject.getConstructor();
        com.google.javascript.rhino.jstype.ObjectType declaredSuper = subObject.getImplicitPrototype().getImplicitPrototype();
        if (!declaredSuper.equals(superObject)) {
            if (declaredSuper.equals(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
                registerMismatch(superObject, declaredSuper, report(t.makeError(n, com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING, subObject.toString())));
            } else {
                mismatch(t.getSourceName(), n, "mismatch in declaration of superclass type", superObject, declaredSuper);
            }
            if (!subCtor.hasCachedValues()) {
                subCtor.setPrototypeBasedOn(superObject);
            }
        }
    }

    void expectCanCast(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.jstype.JSType castType) {
        castType = castType.restrictByNotNullOrUndefined();
        type = type.restrictByNotNullOrUndefined();
        if ((!type.canAssignTo(castType)) && (!castType.canAssignTo(type))) {
            registerMismatch(type, castType, report(t.makeError(n, com.google.javascript.jscomp.TypeValidator.INVALID_CAST, castType.toString(), type.toString())));
        }
    }

    com.google.javascript.jscomp.Scope.Var expectUndeclaredVariable(java.lang.String sourceName, com.google.javascript.jscomp.CompilerInput input, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope.Var var, java.lang.String variableName, com.google.javascript.rhino.jstype.JSType newType) {
        com.google.javascript.jscomp.Scope.Var newVar = var;
        boolean allowDupe = false;
        if (n.isGetProp() || com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, parent)) {
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if (info == null) {
                info = parent.getJSDocInfo();
            }
            allowDupe = (info != null) && info.getSuppressions().contains("duplicate");
        }
        com.google.javascript.rhino.jstype.JSType varType = var.getType();
        if ((((varType != null) && (varType != typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) && (newType != null)) && (newType != typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            if (var.input == null) {
                com.google.javascript.jscomp.Scope s = var.getScope();
                s.undeclare(var);
                newVar = s.declare(variableName, n, varType, input, false);
                n.setJSType(varType);
                if (parent.isVar()) {
                    if (n.getFirstChild() != null) {
                        n.getFirstChild().setJSType(varType);
                    }
                } else {
                    com.google.common.base.Preconditions.checkState(parent.isFunction());
                    parent.setJSType(varType);
                }
            } else if ((!(allowDupe || var.getParentNode().isExprResult())) || (!newType.equals(varType))) {
                report(com.google.javascript.jscomp.JSError.make(sourceName, n, com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION, variableName, newType.toString(), var.getInputName(), java.lang.String.valueOf(var.nameNode.getLineno()), varType.toString()));
            }
        }
        return newVar;
    }

    void expectAllInterfaceProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType type) {
        com.google.javascript.rhino.jstype.ObjectType instance = type.getInstanceType();
        for (com.google.javascript.rhino.jstype.ObjectType implemented : type.getAllImplementedInterfaces()) {
            if (implemented.getImplicitPrototype() != null) {
                for (java.lang.String prop : implemented.getImplicitPrototype().getOwnPropertyNames()) {
                    expectInterfaceProperty(t, n, instance, implemented, prop);
                }
            }
        }
    }

    private void expectInterfaceProperty(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.ObjectType instance, com.google.javascript.rhino.jstype.ObjectType implementedInterface, java.lang.String prop) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> propSlot = instance.getSlot(prop);
        if (propSlot == null) {
            java.lang.String sourceName = n.getSourceFileName();
            sourceName = (sourceName == null) ? "" : sourceName;
            registerMismatch(instance, implementedInterface, report(com.google.javascript.jscomp.JSError.make(sourceName, n, com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED, prop, implementedInterface.toString(), instance.toString())));
        } else {
            com.google.javascript.rhino.Node propNode = (propSlot.getDeclaration() == null) ? null : propSlot.getDeclaration().getNode();
            propNode = (propNode == null) ? n : propNode;
            com.google.javascript.rhino.jstype.JSType found = propSlot.getType();
            com.google.javascript.rhino.jstype.JSType required = implementedInterface.getImplicitPrototype().getPropertyType(prop);
            found = found.restrictByNotNullOrUndefined();
            required = required.restrictByNotNullOrUndefined();
            if (!found.canAssignTo(required)) {
                com.google.javascript.rhino.jstype.FunctionType constructor = implementedInterface.toObjectType().getConstructor();
                registerMismatch(found, required, report(t.makeError(propNode, com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop, constructor.getTopMostDefiningType(prop).toString(), required.toString(), found.toString())));
            }
        }
    }

    private void mismatch(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String msg, com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required) {
        mismatch(t.getSourceName(), n, msg, found, required);
    }

    private void mismatch(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String msg, com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSTypeNative required) {
        mismatch(t, n, msg, found, getNativeType(required));
    }

    private void mismatch(java.lang.String sourceName, com.google.javascript.rhino.Node n, java.lang.String msg, com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required) {
        registerMismatch(found, required, report(com.google.javascript.jscomp.JSError.make(sourceName, n, com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING, formatFoundRequired(msg, found, required))));
    }

    private void registerMismatch(com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required, com.google.javascript.jscomp.JSError error) {
        found = found.restrictByNotNullOrUndefined();
        required = required.restrictByNotNullOrUndefined();
        if (found.canAssignTo(required) || required.canAssignTo(found)) {
            return;
        }
        mismatches.add(new com.google.javascript.jscomp.TypeValidator.TypeMismatch(found, required, error));
        if (found.isFunctionType() && required.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType fnTypeA = found.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.FunctionType fnTypeB = required.toMaybeFunctionType();
            java.util.Iterator<com.google.javascript.rhino.Node> paramItA = fnTypeA.getParameters().iterator();
            java.util.Iterator<com.google.javascript.rhino.Node> paramItB = fnTypeB.getParameters().iterator();
            while (paramItA.hasNext() && paramItB.hasNext()) {
                registerIfMismatch(paramItA.next().getJSType(), paramItB.next().getJSType(), error);
            } 
            registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);
        }
    }

    private void registerIfMismatch(com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required, com.google.javascript.jscomp.JSError error) {
        if (((found != null) && (required != null)) && (!found.canAssignTo(required))) {
            registerMismatch(found, required, error);
        }
    }

    private java.lang.String formatFoundRequired(java.lang.String description, com.google.javascript.rhino.jstype.JSType found, com.google.javascript.rhino.jstype.JSType required) {
        return java.text.MessageFormat.format(com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED, description, found, required);
    }

    java.lang.String getReadableJSTypeName(com.google.javascript.rhino.Node n, boolean dereference) {
        if (n.isGetProp()) {
            com.google.javascript.rhino.jstype.ObjectType objectType = getJSType(n.getFirstChild()).dereference();
            if (objectType != null) {
                java.lang.String propName = n.getLastChild().getString();
                if ((objectType.getConstructor() != null) && objectType.getConstructor().isInterface()) {
                    objectType = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType, propName);
                } else {
                    while ((objectType != null) && (!objectType.hasOwnProperty(propName))) {
                        objectType = objectType.getImplicitPrototype();
                    } 
                }
                if ((objectType != null) && ((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType())) {
                    return (objectType.toString() + ".") + propName;
                }
            }
        }
        com.google.javascript.rhino.jstype.JSType type = getJSType(n);
        if (dereference) {
            com.google.javascript.rhino.jstype.ObjectType dereferenced = type.dereference();
            if (dereferenced != null) {
                type = dereferenced;
            }
        }
        java.lang.String qualifiedName = n.getQualifiedName();
        if (type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) {
            return type.toString();
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(233).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("dereference",dereference);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("qualifiedName",qualifiedName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.this.typeRegistry",com.google.javascript.jscomp.TypeValidator.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.INVALID_CAST",com.google.javascript.jscomp.TypeValidator.INVALID_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING",com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED",com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeValidator.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("qualifiedName != null",qualifiedName != null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.this.mismatches",com.google.javascript.jscomp.TypeValidator.this.mismatches);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED",com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.this.allValueTypes",com.google.javascript.jscomp.TypeValidator.this.allValueTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION",com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.this.nullOrUndefined",com.google.javascript.jscomp.TypeValidator.this.nullOrUndefined);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.this.compiler",com.google.javascript.jscomp.TypeValidator.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING",com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectInput("com.google.javascript.jscomp.TypeValidator.this.shouldReport",com.google.javascript.jscomp.TypeValidator.this.shouldReport);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(233).collectionEnds();
            }
            if (runtimeAngelicValue) if (qualifiedName != null) {
                return qualifiedName;
            } else if (type.isFunctionType()) {
                return "function";
            } else {
                return type.toString();
            }
        }
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }

    private com.google.javascript.jscomp.JSError report(com.google.javascript.jscomp.JSError error) {
        if (shouldReport) {
            compiler.report(error);
        }
        return error;
    }

    static class TypeMismatch {
        final com.google.javascript.rhino.jstype.JSType typeA;

        final com.google.javascript.rhino.jstype.JSType typeB;

        final com.google.javascript.jscomp.JSError src;

        TypeMismatch(com.google.javascript.rhino.jstype.JSType a, com.google.javascript.rhino.jstype.JSType b, com.google.javascript.jscomp.JSError src) {
            this.typeA = a;
            this.typeB = b;
            this.src = src;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.jscomp.TypeValidator.TypeMismatch) {
                com.google.javascript.jscomp.TypeValidator.TypeMismatch that = ((com.google.javascript.jscomp.TypeValidator.TypeMismatch) (object));
                return (that.typeA.equals(this.typeA) && that.typeB.equals(this.typeB)) || (that.typeB.equals(this.typeA) && that.typeA.equals(this.typeB));
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(typeA, typeB);
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("(" + typeA) + ", ") + typeB) + ")";
        }
    }
}
[1130546] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659909990293
GPR[EPVATF]-1659909991764
GPR[SPS]-1659909991764
[1132600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:748.
GPR[EPS]-1659909992347
GPR[ESUN]-1659909992347
GPR[SSUN]-1659909992347
-1797850673
GPR[SPVATF]-1659909992626
GPR[EPVATF]-1659909994125
GPR[SPS]-1659909994125
[1134790] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (!com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n, n.getParent())) {
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        if (n.isNE()) {
                            result = result.not();
                        }
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        return;
                    }
                }
            }
            if (object.isGetProp()) {
                com.google.javascript.rhino.Node object2 = object.getFirstChild();
                java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
                if ("prototype".equals(property2)) {
                    com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                    if (jsType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                        if (functionType.isConstructor() || functionType.isInterface()) {
                            checkDeclaredPropertyInheritance(t, assign, functionType, property, info, getJSType(rvalue));
                        }
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(property);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, property);
                        return;
                    }
                }
            }
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superInterfacesHasProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfacesHasProperty = superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfacesHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType topInstanceType = (superClassHasProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        if (((reportMissingOverride.isOn() && ctorType.isConstructor()) && (!declaredOverride)) && superClassHasProperty) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (!declaredOverride) {
            return;
        }
        if (superClassHasProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfacesHasProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (!foundInterfaceProperty) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(235).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(235).collectionEnds();
            }
            if (runtimeAngelicValue)
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);

        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[1134791] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659909994538
GPR[SSUN]-1659909994538
1401453194
GPR[ESUN]-1659909994734
GPR[SSUN]-1659909994734
1401453194
GPR[ESUN]-1659909994924
GPR[SSUN]-1659909994924
1401453194
GPR[SPVATF]-1659909995111
GPR[EPVATF]-1659909996703
GPR[SPS]-1659909996703
[1137408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:194.
GPR[EPS]-1659909997156
GPR[ESUN]-1659909997156
GPR[SSUN]-1659909997156
-1007410555
GPR[ESUN]-1659909997344
GPR[SSUN]-1659909997344
-2097135580
GPR[ESUN]-1659909997620
GPR[SSUN]-1659909997620
1401453194
GPR[SPVATF]-1659909997808
GPR[EPVATF]-1659909999490
GPR[SPS]-1659909999490
[1140227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:191.
GPR[EPS]-1659909999974
GPR[SPVATF]-1659909999974
GPR[EPVATF]-1659910001790
GPR[SPS]-1659910001790
[1142508] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:191.
GPR[EPS]-1659910002255
GPR[ESUN]-1659910002255
GPR[SSUN]-1659910002255
1401453194
GPR[SPVATF]-1659910002443
GPR[EPVATF]-1659910004464
GPR[SPS]-1659910004464
[1145159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:190.
GPR[EPS]-1659910004906
GPR[ESUN]-1659910004906
GPR[SSUN]-1659910004906
1401453194
GPR[ESUN]-1659910005096
GPR[SSUN]-1659910005096
1401453194
GPR[SPVATF]-1659910005286
GPR[EPVATF]-1659910007961
GPR[SPS]-1659910007961
[1148785] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:433.
GPR[EPS]-1659910008532
GPR[SPVATF]-1659910008532
GPR[EPVATF]-1659910009905
GPR[SPS]-1659910009905
[1150620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:433.
GPR[EPS]-1659910010368
GPR[ESUN]-1659910010368
GPR[SSUN]-1659910010368
1401453194
GPR[SPVATF]-1659910010564
GPR[EPVATF]-1659910011923
GPR[SPS]-1659910011923
[1152653] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:432.
GPR[EPS]-1659910012400
GPR[ESUN]-1659910012400
GPR[SSUN]-1659910012400
-1797850673
GPR[SPVATF]-1659910012649
GPR[EPVATF]-1659910014001
GPR[SPS]-1659910014001
[1154848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:512.
GPR[EPS]-1659910014595
GPR[ESUN]-1659910014595
GPR[SSUN]-1659910014595
-1797850673
GPR[SPVATF]-1659910014872
GPR[EPVATF]-1659910016195
GPR[SPS]-1659910016195
[1157051] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:510.
GPR[EPS]-1659910016798
GPR[ESUN]-1659910016798
GPR[SSUN]-1659910016798
1401453194
GPR[SPVATF]-1659910016986
GPR[EPVATF]-1659910018317
GPR[SPS]-1659910018317
[1159032] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:429.
GPR[EPS]-1659910018779
GPR[SPVATF]-1659910018779
GPR[EPVATF]-1659910020154
GPR[SPS]-1659910020155
[1160859] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:429.
GPR[EPS]-1659910020606
GPR[ESUN]-1659910020607
GPR[SSUN]-1659910020607
-6115253
GPR[ESUN]-1659910020827
GPR[SSUN]-1659910020827
-6115253
GPR[SPVATF]-1659910021041
GPR[EPVATF]-1659910022419
GPR[SPS]-1659910022419
[1163199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocTokenStream:135.
GPR[EPS]-1659910022946
GPR[ESUN]-1659910022946
GPR[SSUN]-1659910022946
1401453194
GPR[SPVATF]-1659910023162
GPR[EPVATF]-1659910024500
GPR[SPS]-1659910024500
[1165218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:271.
GPR[EPS]-1659910024965
GPR[SPVATF]-1659910024966
GPR[EPVATF]-1659910026339
GPR[SPS]-1659910026339
[1167052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:271.
GPR[EPS]-1659910026799
GPR[ESUN]-1659910026799
GPR[SSUN]-1659910026799
-2097135580
GPR[ESUN]-1659910027004
GPR[SSUN]-1659910027004
1401453194
GPR[SPVATF]-1659910027189
GPR[EPVATF]-1659910028546
GPR[SPS]-1659910028546
[1169057] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class UnionType extends com.google.javascript.rhino.jstype.JSType {
    private static final long serialVersionUID = 1L;

    java.util.Collection<com.google.javascript.rhino.jstype.JSType> alternates;

    private final int hashcode;

    UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.util.Collection<com.google.javascript.rhino.jstype.JSType> alternates) {
        super(registry);
        this.alternates = alternates;
        this.hashcode = this.alternates.hashCode();
    }

    public java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> getAlternates() {
        return alternates;
    }

    @java.lang.Override
    public boolean matchesNumberContext() {
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            if (t.matchesNumberContext()) {
                return true;
            }
        }
        return false;
    }

    @java.lang.Override
    public boolean matchesStringContext() {
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            if (t.matchesStringContext()) {
                return true;
            }
        }
        return false;
    }

    @java.lang.Override
    public boolean matchesObjectContext() {
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            if (t.matchesObjectContext()) {
                return true;
            }
        }
        return false;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType findPropertyType(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.JSType propertyType = null;
        for (com.google.javascript.rhino.jstype.JSType alternate : getAlternates()) {
            if (alternate.isNullType() || alternate.isVoidType()) {
                continue;
            }
            com.google.javascript.rhino.jstype.JSType altPropertyType = alternate.findPropertyType(propertyName);
            if (altPropertyType == null) {
                continue;
            }
            if (propertyType == null) {
                propertyType = altPropertyType;
            } else {
                propertyType = propertyType.getLeastSupertype(altPropertyType);
            }
        }
        return propertyType;
    }

    @java.lang.Override
    public boolean canAssignTo(com.google.javascript.rhino.jstype.JSType that) {
        boolean canAssign = true;
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            if (t.isUnknownType()) {
                return true;
            }
            canAssign &= t.canAssignTo(that);
        }
        return canAssign;
    }

    @java.lang.Override
    public boolean canBeCalled() {
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            if (!t.canBeCalled()) {
                return false;
            }
        }
        return true;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType autobox() {
        com.google.javascript.rhino.jstype.UnionTypeBuilder restricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            restricted.addAlternate(t.autobox());
        }
        return restricted.build();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType restrictByNotNullOrUndefined() {
        com.google.javascript.rhino.jstype.UnionTypeBuilder restricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            restricted.addAlternate(t.restrictByNotNullOrUndefined());
        }
        return restricted.build();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.TernaryValue testForEquality(com.google.javascript.rhino.jstype.JSType that) {
        com.google.javascript.rhino.jstype.TernaryValue result = null;
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            com.google.javascript.rhino.jstype.TernaryValue test = t.testForEquality(that);
            if (result == null) {
                result = test;
            } else if (!result.equals(test)) {
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            }
        }
        return result;
    }

    @java.lang.Override
    public boolean isNullable() {
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            if (t.isNullable()) {
                return true;
            }
        }
        return false;
    }

    @java.lang.Override
    public boolean isUnknownType() {
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            if (t.isUnknownType()) {
                return true;
            }
        }
        return false;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getLeastSupertype(com.google.javascript.rhino.jstype.JSType that) {
        if ((!that.isUnknownType()) && (!that.isUnionType())) {
            for (com.google.javascript.rhino.jstype.JSType alternate : alternates) {
                if ((!alternate.isUnknownType()) && that.isSubtype(alternate)) {
                    return this;
                }
            }
        }
        return com.google.javascript.rhino.jstype.JSType.getLeastSupertype(this, that);
    }

    com.google.javascript.rhino.jstype.JSType meet(com.google.javascript.rhino.jstype.JSType that) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        for (com.google.javascript.rhino.jstype.JSType alternate : alternates) {
            if (alternate.isSubtype(that)) {
                builder.addAlternate(alternate);
            }
        }
        if (that.isUnionType()) {
            for (com.google.javascript.rhino.jstype.JSType otherAlternate : that.toMaybeUnionType().alternates) {
                if (otherAlternate.isSubtype(this)) {
                    builder.addAlternate(otherAlternate);
                }
            }
        } else if (that.isSubtype(this)) {
            builder.addAlternate(that);
        }
        com.google.javascript.rhino.jstype.JSType result = builder.build();
        if (!result.isNoType()) {
            return result;
        } else if (this.isObject() && that.isObject()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE);
        } else {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
        }
    }

    @java.lang.Override
    public boolean isEquivalentTo(com.google.javascript.rhino.jstype.JSType object) {
        if (object == null) {
            return false;
        }
        if (object.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType that = object.toMaybeUnionType();
            if (alternates.size() != that.alternates.size()) {
                return false;
            }
            for (com.google.javascript.rhino.jstype.JSType alternate : that.alternates) {
                if (!hasAlternate(alternate)) {
                    return false;
                }
            }
            return true;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(250).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(250).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(250).collectInput("com.google.javascript.rhino.jstype.UnionType.this.hashcode",com.google.javascript.rhino.jstype.UnionType.this.hashcode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(250).collectInput("com.google.javascript.rhino.jstype.UnionType.this.alternates",com.google.javascript.rhino.jstype.UnionType.this.alternates);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(250).collectInput("object",object);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(250).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(250).collectionEnds();
            }
            if (runtimeAngelicValue)
                return false;

        }
    }

    private boolean hasAlternate(com.google.javascript.rhino.jstype.JSType type) {
        for (com.google.javascript.rhino.jstype.JSType alternate : alternates) {
            if (alternate.isEquivalentTo(type)) {
                return true;
            }
        }
        return false;
    }

    @java.lang.Override
    public int hashCode() {
        return this.hashcode;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.UnionType toMaybeUnionType() {
        return this;
    }

    @java.lang.Override
    public boolean isObject() {
        for (com.google.javascript.rhino.jstype.JSType alternate : alternates) {
            if (!alternate.isObject()) {
                return false;
            }
        }
        return true;
    }

    public boolean contains(com.google.javascript.rhino.jstype.JSType type) {
        for (com.google.javascript.rhino.jstype.JSType alt : alternates) {
            if (alt.isEquivalentTo(type)) {
                return true;
            }
        }
        return false;
    }

    public com.google.javascript.rhino.jstype.JSType getRestrictedUnion(com.google.javascript.rhino.jstype.JSType type) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder restricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        for (com.google.javascript.rhino.jstype.JSType t : alternates) {
            if (t.isUnknownType() || (!t.isSubtype(type))) {
                restricted.addAlternate(t);
            }
        }
        return restricted.build();
    }

    @java.lang.Override
    java.lang.String toStringHelper(boolean forAnnotations) {
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        boolean firstAlternate = true;
        result.append("(");
        java.util.SortedSet<com.google.javascript.rhino.jstype.JSType> sorted = new java.util.TreeSet<com.google.javascript.rhino.jstype.JSType>(com.google.javascript.rhino.jstype.JSType.ALPHA);
        sorted.addAll(alternates);
        for (com.google.javascript.rhino.jstype.JSType t : sorted) {
            if (!firstAlternate) {
                result.append("|");
            }
            result.append(t.toStringHelper(forAnnotations));
            firstAlternate = false;
        }
        result.append(")");
        return result.toString();
    }

    @java.lang.Override
    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnknownType()) {
            return true;
        }
        if (that.isAllType()) {
            return true;
        }
        for (com.google.javascript.rhino.jstype.JSType element : alternates) {
            if (!element.isSubtype(that)) {
                return false;
            }
        }
        return true;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder restricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        for (com.google.javascript.rhino.jstype.JSType element : alternates) {
            restricted.addAlternate(element.getRestrictedTypeGivenToBooleanOutcome(outcome));
        }
        return restricted.build();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.BooleanLiteralSet getPossibleToBooleanOutcomes() {
        com.google.javascript.rhino.jstype.BooleanLiteralSet literals = com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY;
        for (com.google.javascript.rhino.jstype.JSType element : alternates) {
            literals = literals.union(element.getPossibleToBooleanOutcomes());
            if (literals == com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH) {
                break;
            }
        }
        return literals;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderEquality(com.google.javascript.rhino.jstype.JSType that) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder thisRestricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        com.google.javascript.rhino.jstype.UnionTypeBuilder thatRestricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        for (com.google.javascript.rhino.jstype.JSType element : alternates) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = element.getTypesUnderEquality(that);
            if (p.typeA != null) {
                thisRestricted.addAlternate(p.typeA);
            }
            if (p.typeB != null) {
                thatRestricted.addAlternate(p.typeB);
            }
        }
        return new com.google.javascript.rhino.jstype.JSType.TypePair(thisRestricted.build(), thatRestricted.build());
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderInequality(com.google.javascript.rhino.jstype.JSType that) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder thisRestricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        com.google.javascript.rhino.jstype.UnionTypeBuilder thatRestricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        for (com.google.javascript.rhino.jstype.JSType element : alternates) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = element.getTypesUnderInequality(that);
            if (p.typeA != null) {
                thisRestricted.addAlternate(p.typeA);
            }
            if (p.typeB != null) {
                thatRestricted.addAlternate(p.typeB);
            }
        }
        return new com.google.javascript.rhino.jstype.JSType.TypePair(thisRestricted.build(), thatRestricted.build());
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderShallowInequality(com.google.javascript.rhino.jstype.JSType that) {
        com.google.javascript.rhino.jstype.UnionTypeBuilder thisRestricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        com.google.javascript.rhino.jstype.UnionTypeBuilder thatRestricted = new com.google.javascript.rhino.jstype.UnionTypeBuilder(registry);
        for (com.google.javascript.rhino.jstype.JSType element : alternates) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = element.getTypesUnderShallowInequality(that);
            if (p.typeA != null) {
                thisRestricted.addAlternate(p.typeA);
            }
            if (p.typeB != null) {
                thatRestricted.addAlternate(p.typeB);
            }
        }
        return new com.google.javascript.rhino.jstype.JSType.TypePair(thisRestricted.build(), thatRestricted.build());
    }

    @java.lang.Override
    public <T> T visit(com.google.javascript.rhino.jstype.Visitor<T> visitor) {
        return visitor.caseUnionType(this);
    }

    @java.lang.Override
    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        setResolvedTypeInternal(this);
        boolean changed = false;
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.JSType> resolvedTypes = com.google.common.collect.ImmutableList.builder();
        for (com.google.javascript.rhino.jstype.JSType alternate : alternates) {
            com.google.javascript.rhino.jstype.JSType newAlternate = alternate.resolve(t, scope);
            changed |= alternate != newAlternate;
            resolvedTypes.add(alternate);
        }
        if (changed) {
            java.util.Collection<com.google.javascript.rhino.jstype.JSType> newAlternates = resolvedTypes.build();
            com.google.common.base.Preconditions.checkState(newAlternates.hashCode() == this.hashcode);
            alternates = newAlternates;
        }
        return this;
    }

    @java.lang.Override
    public java.lang.String toDebugHashCodeString() {
        java.util.List<java.lang.String> hashCodes = com.google.common.collect.Lists.newArrayList();
        for (com.google.javascript.rhino.jstype.JSType a : alternates) {
            hashCodes.add(a.toDebugHashCodeString());
        }
        return ("{(" + com.google.common.base.Joiner.on(",").join(hashCodes)) + ")}";
    }

    @java.lang.Override
    public boolean setValidator(com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> validator) {
        for (com.google.javascript.rhino.jstype.JSType a : alternates) {
            a.setValidator(validator);
        }
        return true;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType collapseUnion() {
        com.google.javascript.rhino.jstype.JSType currentValue = null;
        com.google.javascript.rhino.jstype.ObjectType currentCommonSuper = null;
        for (com.google.javascript.rhino.jstype.JSType a : alternates) {
            if (a.isUnknownType()) {
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            com.google.javascript.rhino.jstype.ObjectType obj = a.toObjectType();
            if (obj == null) {
                if ((currentValue == null) && (currentCommonSuper == null)) {
                    currentValue = a;
                } else {
                    return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
                }
            } else if (currentValue != null) {
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE);
            } else if (currentCommonSuper == null) {
                currentCommonSuper = obj;
            } else {
                currentCommonSuper = registry.findCommonSuperObject(currentCommonSuper, obj);
            }
        }
        return currentCommonSuper;
    }

    @java.lang.Override
    public void matchConstraint(com.google.javascript.rhino.jstype.ObjectType constraintObj) {
        for (com.google.javascript.rhino.jstype.JSType alternate : alternates) {
            alternate.matchConstraint(constraintObj);
        }
    }
}
[1169057] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659910028804
GPR[SSUN]-1659910028804
1401453194
GPR[SPVATF]-1659910028994
GPR[EPVATF]-1659910030411
GPR[SPS]-1659910030411
[1171132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:425.
GPR[EPS]-1659910030880
GPR[SPVATF]-1659910030880
GPR[EPVATF]-1659910032280
GPR[SPS]-1659910032280
[1173005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:425.
GPR[EPS]-1659910032752
GPR[ESUN]-1659910032752
GPR[SSUN]-1659910032752
-1797850673
GPR[SPVATF]-1659910033127
GPR[EPVATF]-1659910034509
GPR[SPS]-1659910034509
[1175356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:969.
GPR[EPS]-1659910035103
GPR[SPVATF]-1659910035103
GPR[EPVATF]-1659910036559
GPR[SPS]-1659910036559
[1177440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:969.
GPR[EPS]-1659910037187
GPR[ESUN]-1659910037187
GPR[SSUN]-1659910037187
-1797850673
GPR[ESUN]-1659910037435
GPR[SSUN]-1659910037435
-1797850673
GPR[SPVATF]-1659910037678
GPR[EPVATF]-1659910039277
GPR[SPS]-1659910039277
[1180136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:785.
GPR[EPS]-1659910039883
GPR[ESUN]-1659910039883
GPR[SSUN]-1659910039883
GPR[ESUN]-1659910039883
GPR[SSUN]-1659910039883
711965926
GPR[ESUN]-1659910040061
GPR[SSUN]-1659910040061
711965926
GPR[SPVATF]-1659910040235
GPR[EPVATF]-1659910041788
GPR[SPS]-1659910041788
[1182526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659910042273
GPR[ESUN]-1659910042273
GPR[SSUN]-1659910042274
-622774852
GPR[ESUN]-1659910042493
GPR[SSUN]-1659910042493
-622774852
GPR[SPVATF]-1659910042725
GPR[EPVATF]-1659910044300
GPR[SPS]-1659910044300
GPR[EPS]-1659910061169
GPR[SPVATF]-1659910061170
GPR[EPVATF]-1659910063053
GPR[SPS]-1659910063053
GPR[EPS]-1659910079952
GPR[ESUN]-1659910079952
GPR[SSUN]-1659910079952
GPR[ESUN]-1659910079952
GPR[SSUN]-1659910079952
GPR[ESUN]-1659910079952
GPR[SSUN]-1659910079952
-1093533311
GPR[ESUN]-1659910080189
GPR[SSUN]-1659910080189
-1093533311
GPR[SPVATF]-1659910080440
GPR[EPVATF]-1659910082411
GPR[SPS]-1659910082411
GPR[EPS]-1659910154864
GPR[ESUN]-1659910154864
GPR[SSUN]-1659910154864
-1093533311
GPR[SPVATF]-1659910155250
GPR[EPVATF]-1659910157273
GPR[SPS]-1659910157273
GPR[EPS]-1659910231324
GPR[ESUN]-1659910231324
GPR[SSUN]-1659910231324
-1093533311
GPR[ESUN]-1659910231704
GPR[SSUN]-1659910231704
1187751237
GPR[SPVATF]-1659910231973
GPR[EPVATF]-1659910233331
GPR[SPS]-1659910233331
[1374325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2074.
GPR[EPS]-1659910234072
GPR[ESUN]-1659910234072
GPR[SSUN]-1659910234072
-622774852
GPR[ESUN]-1659910234286
GPR[SSUN]-1659910234286
1187751237
GPR[ESUN]-1659910234553
GPR[SSUN]-1659910234553
1187751237
GPR[SPVATF]-1659910234832
GPR[EPVATF]-1659910236169
GPR[SPS]-1659910236169
[1377179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2073.
GPR[EPS]-1659910236926
GPR[SPVATF]-1659910236926
GPR[EPVATF]-1659910238389
GPR[SPS]-1659910238389
[1379357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2073.
GPR[EPS]-1659910239104
GPR[ESUN]-1659910239104
GPR[SSUN]-1659910239104
-6115253
GPR[ESUN]-1659910239329
GPR[SSUN]-1659910239329
-6115253
GPR[ESUN]-1659910239550
GPR[SSUN]-1659910239550
GPR[ESUN]-1659910239550
GPR[SSUN]-1659910239550
GPR[ESUN]-1659910239550
GPR[SSUN]-1659910239550
646738083
GPR[SPVATF]-1659910239827
GPR[EPVATF]-1659910241166
GPR[SPS]-1659910241166
[1382149] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:684.
GPR[EPS]-1659910241896
GPR[SPVATF]-1659910241896
GPR[EPVATF]-1659910243245
GPR[SPS]-1659910243245
[1384193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:684.
GPR[EPS]-1659910243940
GPR[ESUN]-1659910243940
GPR[SSUN]-1659910243940
646738083
GPR[SPVATF]-1659910244219
GPR[EPVATF]-1659910245594
GPR[SPS]-1659910245594
[1386557] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:677.
GPR[EPS]-1659910246304
GPR[SPVATF]-1659910246305
GPR[EPVATF]-1659910247625
GPR[SPS]-1659910247625
[1388593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:677.
GPR[EPS]-1659910248340
GPR[ESUN]-1659910248340
GPR[SSUN]-1659910248340
646738083
GPR[ESUN]-1659910248614
GPR[SSUN]-1659910248614
646738083
GPR[ESUN]-1659910248885
GPR[SSUN]-1659910248885
646738083
GPR[ESUN]-1659910249160
GPR[SSUN]-1659910249160
646738083
GPR[ESUN]-1659910249434
GPR[SSUN]-1659910249434
646738083
GPR[ESUN]-1659910249705
GPR[SSUN]-1659910249705
646738083
GPR[ESUN]-1659910249977
GPR[SSUN]-1659910249977
466431456
GPR[SPVATF]-1659910250223
GPR[EPVATF]-1659910251545
GPR[SPS]-1659910251545
[1392432] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:651.
GPR[EPS]-1659910252179
GPR[ESUN]-1659910252179
GPR[SSUN]-1659910252179
1187751237
GPR[SPVATF]-1659910252452
GPR[EPVATF]-1659910253828
GPR[SPS]-1659910253828
[1394769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3043.
GPR[EPS]-1659910254516
GPR[SPVATF]-1659910254516
GPR[EPVATF]-1659910255889
GPR[SPS]-1659910255889
[1396830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3043.
GPR[EPS]-1659910256577
GPR[ESUN]-1659910256577
GPR[SSUN]-1659910256577
GPR[ESUN]-1659910256577
GPR[SSUN]-1659910256577
GPR[ESUN]-1659910256577
GPR[SSUN]-1659910256577
-1605808871
GPR[SPVATF]-1659910256810
GPR[EPVATF]-1659910258166
GPR[SPS]-1659910258166
[1398988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:744.
GPR[EPS]-1659910258735
GPR[ESUN]-1659910258735
GPR[SSUN]-1659910258735
-1605808871
GPR[ESUN]-1659910258964
GPR[SSUN]-1659910258964
-1605808871
GPR[SPVATF]-1659910259194
GPR[EPVATF]-1659910260638
GPR[SPS]-1659910260638
[1401471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:736.
GPR[EPS]-1659910261218
GPR[SPVATF]-1659910261219
GPR[EPVATF]-1659910262605
GPR[SPS]-1659910262605
[1403431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:736.
GPR[EPS]-1659910263178
GPR[ESUN]-1659910263178
GPR[SSUN]-1659910263178
-1605808871
GPR[ESUN]-1659910263405
GPR[SSUN]-1659910263405
2433571
GPR[SPVATF]-1659910263633
GPR[EPVATF]-1659910265096
GPR[SPS]-1659910265096
[1406030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:604.
GPR[EPS]-1659910265777
GPR[ESUN]-1659910265777
GPR[SSUN]-1659910265777
1187751237
GPR[SPVATF]-1659910266042
GPR[EPVATF]-1659910267599
GPR[SPS]-1659910267599
[1408550] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3074.
GPR[EPS]-1659910268297
GPR[SPVATF]-1659910268297
GPR[EPVATF]-1659910269804
GPR[SPS]-1659910269804
[1410750] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3074.
GPR[EPS]-1659910270497
GPR[ESUN]-1659910270497
GPR[SSUN]-1659910270497
1187751237
GPR[ESUN]-1659910270767
GPR[SSUN]-1659910270767
1187751237
GPR[ESUN]-1659910271031
GPR[SSUN]-1659910271031
1187751237
GPR[SPVATF]-1659910271295
GPR[EPVATF]-1659910272850
GPR[SPS]-1659910272850
[1413783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2059.
GPR[EPS]-1659910273530
GPR[ESUN]-1659910273530
GPR[SSUN]-1659910273530
-179796259
GPR[ESUN]-1659910273839
GPR[SSUN]-1659910273839
-179796259
GPR[SPVATF]-1659910274068
GPR[EPVATF]-1659910275786
GPR[SPS]-1659910275786
[1416709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2013.
GPR[EPS]-1659910276456
GPR[SPVATF]-1659910276457
GPR[EPVATF]-1659910278275
GPR[SPS]-1659910278275
[1419211] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2013.
GPR[EPS]-1659910278958
GPR[ESUN]-1659910278958
GPR[SSUN]-1659910278958
-179796259
GPR[ESUN]-1659910279190
GPR[SSUN]-1659910279190
-179796259
GPR[SPVATF]-1659910279419
GPR[EPVATF]-1659910281419
GPR[SPS]-1659910281419
[1422409] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2259.
GPR[EPS]-1659910282156
GPR[ESUN]-1659910282156
GPR[SSUN]-1659910282156
-179796259
GPR[ESUN]-1659910282392
GPR[SSUN]-1659910282392
-179796259
GPR[SPVATF]-1659910282625
GPR[EPVATF]-1659910284639
GPR[SPS]-1659910284639
GPR[EPS]-1659910301867
GPR[ESUN]-1659910301867
GPR[SSUN]-1659910301867
-179796259
GPR[SPVATF]-1659910302104
GPR[EPVATF]-1659910303454
GPR[SPS]-1659910303454
[1444416] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2005.
GPR[EPS]-1659910304163
GPR[SPVATF]-1659910304163
GPR[EPVATF]-1659910305520
GPR[SPS]-1659910305520
[1446472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2005.
GPR[EPS]-1659910306219
GPR[ESUN]-1659910306219
GPR[SSUN]-1659910306219
-179796259
GPR[SPVATF]-1659910306460
GPR[EPVATF]-1659910307790
GPR[SPS]-1659910307790
[1448759] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:2004.
GPR[EPS]-1659910308506
GPR[ESUN]-1659910308506
GPR[SSUN]-1659910308506
-179796259
GPR[SPVATF]-1659910308768
GPR[EPVATF]-1659910310126
GPR[SPS]-1659910310126
[1734540] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[SPVATF]-1659910634946
[2096699] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659910956447
GPR[SSUN]-1659910960895
\n\nNode: host-51\n
\n\nDate: Sun 07 Aug 2022 03:34:44 PM PDT\n
End running Nopol Closure/33 results at /experiment_home///results/Nopol/Closure/33/seed_263/
Removing checked out dir script/workingdir/Nopol/Closure_33
GPR[SSLE]-1659911684803
GPR[ESLE]-1659911744809
