Sleep 1m start
GPR[SSLI]-1659908869960
GPR[ESLI]-1659908929966
Running Nopol Closure 3b with approach: smt
Timezone: America/Los_Angeles
Seed 264
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/3/seed_264/
The file script/workingdir/Nopol/Closure_3 does not exist!
script/workingdir/Nopol/Closure_3
script/workingdir/Nopol/Closure_3
classpath:  script/workingdir/Nopol/Closure_3/build/classes:script/workingdir/Nopol/Closure_3/lib/args4j.jar:script/workingdir/Nopol/Closure_3/lib/guava.jar:script/workingdir/Nopol/Closure_3/lib/json.jar:script/workingdir/Nopol/Closure_3/lib/jsr305.jar:script/workingdir/Nopol/Closure_3/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_3/build/lib/rhino.jar:script/workingdir/Nopol/Closure_3/lib/ant.jar:script/workingdir/Nopol/Closure_3/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_3/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_3/lib/jarjar.jar:script/workingdir/Nopol/Closure_3/lib/junit.jar:script/workingdir/Nopol/Closure_3/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659908949707
GPR[ESLB]-1659909009711
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_3//build/classes:script/workingdir/Nopol/Closure_3//build/test:script/workingdir/Nopol/Closure_3/build/classes:script/workingdir/Nopol/Closure_3/lib/args4j.jar:script/workingdir/Nopol/Closure_3/lib/guava.jar:script/workingdir/Nopol/Closure_3/lib/json.jar:script/workingdir/Nopol/Closure_3/lib/jsr305.jar:script/workingdir/Nopol/Closure_3/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_3/build/lib/rhino.jar:script/workingdir/Nopol/Closure_3/lib/ant.jar:script/workingdir/Nopol/Closure_3/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_3/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_3/lib/jarjar.jar:script/workingdir/Nopol/Closure_3/lib/junit.jar:script/workingdir/Nopol/Closure_3/build/test
Node: host-50
Date init: Sun 07 Aug 2022 02:50:09 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_3/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_3/build/classes/, file:script/workingdir/Nopol/Closure_3/build/test/, file:script/workingdir/Nopol/Closure_3/build/classes/, file:script/workingdir/Nopol/Closure_3/lib/args4j.jar, file:script/workingdir/Nopol/Closure_3/lib/guava.jar, file:script/workingdir/Nopol/Closure_3/lib/json.jar, file:script/workingdir/Nopol/Closure_3/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_3/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_3/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_3/lib/ant.jar, file:script/workingdir/Nopol/Closure_3/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_3/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_3/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_3/lib/junit.jar, file:script/workingdir/Nopol/Closure_3/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_3/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/3/seed_264/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659909015122
GPR[ESUP]-1659909015122
GPR[SFL]-1659909015122
GPR[EFL]-1659909057131
GPR[SFP]-1659909057131
GPR[SSUN]-1659909059038
-283827935
GPR[SPVATF]-1659909059528
GPR[EPVATF]-1659909059581
[49046] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909059581
GPR[SSUN]-1659909059581
80988634
GPR[ESUN]-1659909060154
GPR[SSUN]-1659909060154
-1765952779
GPR[SPVATF]-1659909060395
GPR[EPVATF]-1659909061116
GPR[SPS]-1659909061116
[51613] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:163.
GPR[EPS]-1659909062148
GPR[ESUN]-1659909062148
GPR[SSUN]-1659909062148
2433571
GPR[ESUN]-1659909062422
GPR[SSUN]-1659909062422
-283827935
GPR[ESUN]-1659909062620
GPR[SSUN]-1659909062620
-283827935
GPR[ESUN]-1659909062819
GPR[SSUN]-1659909062819
-283827935
GPR[ESUN]-1659909065430
GPR[SSUN]-1659909065430
-283827935
GPR[SPVATF]-1659909065632
GPR[EPVATF]-1659909065652
[55118] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909065653
GPR[SSUN]-1659909065653
-283827935
GPR[ESUN]-1659909065848
GPR[SSUN]-1659909065848
-283827935
GPR[SPVATF]-1659909066048
GPR[EPVATF]-1659909066069
[55534] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909066069
GPR[SSUN]-1659909066069
-283827935
GPR[SPVATF]-1659909066275
GPR[EPVATF]-1659909066294
[55759] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909066294
GPR[SSUN]-1659909066294
-283827935
GPR[SPVATF]-1659909066487
GPR[EPVATF]-1659909066506
[55971] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909066506
GPR[SSUN]-1659909066506
-283827935
GPR[SPVATF]-1659909066701
GPR[EPVATF]-1659909066721
[56186] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909066721
GPR[SSUN]-1659909066721
-283827935
GPR[SPVATF]-1659909066916
GPR[EPVATF]-1659909066936
[56401] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909066936
GPR[SSUN]-1659909066936
-283827935
GPR[ESUN]-1659909067129
GPR[SSUN]-1659909067129
-283827935
GPR[ESUN]-1659909067317
GPR[SSUN]-1659909067317
-128675625
GPR[SPVATF]-1659909067562
GPR[EPVATF]-1659909068231
GPR[SPS]-1659909068231
[58400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:405.
GPR[EPS]-1659909068935
GPR[SPVATF]-1659909068936
GPR[EPVATF]-1659909069617
GPR[SPS]-1659909069617
GPR[EPS]-1659909078317
GPR[ESUN]-1659909078317
GPR[SSUN]-1659909078317
-128675625
GPR[ESUN]-1659909078560
GPR[SSUN]-1659909078560
80988634
GPR[ESUN]-1659909078738
GPR[SSUN]-1659909078738
2433571
GPR[SPVATF]-1659909079016
GPR[EPVATF]-1659909079691
GPR[SPS]-1659909079691
[70806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1440.
GPR[EPS]-1659909081342
GPR[ESUN]-1659909081342
GPR[SSUN]-1659909081342
2433571
GPR[SPVATF]-1659909081608
GPR[EPVATF]-1659909082277
GPR[SPS]-1659909082277
GPR[EPS]-1659909083605
GPR[SPVATR]-1659909083605
[73070] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1411: PRECONDITION node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME
[73501] INFO TestPatch - Running test suite to check the patch "node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME" is working
GPR[EPVATR]-1659909084303
[73768] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659909084303
[73793] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1410,7 +1410,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type < com.google.javascript.rhino.Node.VAR_ARGS_NAME) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_69206_1ts_1659909084328.diff
GPR[ESUN]-1659909084329
GPR[SSUN]-1659909084329
80988634
GPR[ESUN]-1659909084508
GPR[SSUN]-1659909084508
80988634
GPR[ESUN]-1659909084681
GPR[SSUN]-1659909084681
1207178244
GPR[ESUN]-1659909084890
GPR[SSUN]-1659909084890
-1516948592
GPR[ESUN]-1659909085073
GPR[SSUN]-1659909085073
-1516948592
GPR[SPVATF]-1659909085254
GPR[EPVATF]-1659909085909
GPR[SPS]-1659909085909
[75916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:206.
GPR[EPS]-1659909086451
GPR[ESUN]-1659909086451
GPR[SSUN]-1659909086451
-1966087783
GPR[ESUN]-1659909086647
GPR[SSUN]-1659909086647
-1966087783
GPR[SPVATF]-1659909086838
GPR[EPVATF]-1659909086910
[76376] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909086911
GPR[SSUN]-1659909086911
-1516948592
GPR[ESUN]-1659909087095
GPR[SSUN]-1659909087095
80988634
GPR[ESUN]-1659909087292
GPR[SSUN]-1659909087292
-1516948592
GPR[SPVATF]-1659909087478
GPR[EPVATF]-1659909088140
GPR[SPS]-1659909088140
[78138] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:224.
GPR[EPS]-1659909088673
GPR[SPVATF]-1659909088674
GPR[EPVATF]-1659909089357
GPR[SPS]-1659909089357
GPR[EPS]-1659909112085
GPR[ESUN]-1659909112086
GPR[SSUN]-1659909112086
-1516948592
GPR[ESUN]-1659909112308
GPR[SSUN]-1659909112308
-1516948592
GPR[SPVATF]-1659909112494
GPR[EPVATF]-1659909113188
GPR[SPS]-1659909113188
[103199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:219.
GPR[EPS]-1659909113734
GPR[SPVATF]-1659909113734
GPR[EPVATF]-1659909115067
GPR[SPS]-1659909115067
[105078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:219.
GPR[EPS]-1659909115613
GPR[ESUN]-1659909115613
GPR[SSUN]-1659909115613
-1516948592
GPR[SPVATF]-1659909115802
GPR[EPVATF]-1659909116489
GPR[SPS]-1659909116489
[106488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:216.
GPR[EPS]-1659909117023
GPR[SPVATF]-1659909117023
GPR[EPVATF]-1659909117691
GPR[SPS]-1659909117691
[107708] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:216.
GPR[EPS]-1659909118243
GPR[ESUN]-1659909118243
GPR[SSUN]-1659909118243
-1516948592
GPR[SPVATF]-1659909118434
GPR[EPVATF]-1659909119104
GPR[SPS]-1659909119104
[109127] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:214.
GPR[EPS]-1659909119662
GPR[ESUN]-1659909119662
GPR[SSUN]-1659909119662
-1516948592
GPR[SPVATF]-1659909119851
GPR[EPVATF]-1659909120560
GPR[SPS]-1659909120560
[110565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:211.
GPR[EPS]-1659909121100
GPR[SPVATF]-1659909121101
GPR[EPVATF]-1659909121814
GPR[SPS]-1659909121814
[111818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:211.
GPR[EPS]-1659909122353
GPR[ESUN]-1659909122353
GPR[SSUN]-1659909122353
-1516948592
GPR[SPVATF]-1659909122542
GPR[EPVATF]-1659909123261
GPR[SPS]-1659909123261
[113274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:208.
GPR[EPS]-1659909123809
GPR[ESUN]-1659909123809
GPR[SSUN]-1659909123809
-1516948592
GPR[SPVATF]-1659909123997
GPR[EPVATF]-1659909124712
GPR[SPS]-1659909124712
[114745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:205.
GPR[EPS]-1659909125280
GPR[SPVATF]-1659909125281
GPR[EPVATF]-1659909125988
GPR[SPS]-1659909125988
[115992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:205.
GPR[EPS]-1659909126527
GPR[ESUN]-1659909126527
GPR[SSUN]-1659909126527
-1516948592
GPR[SPVATF]-1659909126715
GPR[EPVATF]-1659909127436
GPR[SPS]-1659909127436
[117451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:201.
GPR[EPS]-1659909127986
GPR[SPVATF]-1659909127986
GPR[EPVATF]-1659909128717
GPR[SPS]-1659909128717
GPR[EPS]-1659909145022
GPR[ESUN]-1659909145022
GPR[SSUN]-1659909145022
-1516948592
GPR[ESUN]-1659909145331
GPR[SSUN]-1659909145331
-1516948592
GPR[SPVATF]-1659909145519
GPR[EPVATF]-1659909146254
GPR[SPS]-1659909146254
[136982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:124.
GPR[EPS]-1659909147517
GPR[ESUN]-1659909147517
GPR[SSUN]-1659909147517
-1516948592
GPR[ESUN]-1659909147711
GPR[SSUN]-1659909147711
-1516948592
GPR[SPVATF]-1659909147895
GPR[EPVATF]-1659909148752
GPR[SPS]-1659909148752
[138752] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:122.
GPR[EPS]-1659909149287
GPR[ESUN]-1659909149287
GPR[SSUN]-1659909149287
2433571
GPR[SPVATF]-1659909149542
GPR[EPVATF]-1659909150292
GPR[SPS]-1659909150292
[140516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1427.
GPR[EPS]-1659909151051
GPR[ESUN]-1659909151051
GPR[SSUN]-1659909151051
-128675625
GPR[SPVATF]-1659909151287
GPR[EPVATF]-1659909151992
GPR[SPS]-1659909151992
[142071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:166.
GPR[EPS]-1659909152606
GPR[ESUN]-1659909152607
GPR[SSUN]-1659909152607
948429589
GPR[SPVATF]-1659909152835
GPR[EPVATF]-1659909153558
GPR[SPS]-1659909153558
[143705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:575.
GPR[EPS]-1659909154240
GPR[ESUN]-1659909154240
GPR[SSUN]-1659909154240
-1659631726
GPR[ESUN]-1659909154435
GPR[SSUN]-1659909154435
130004992
GPR[ESUN]-1659909154622
GPR[SSUN]-1659909154622
130004992
GPR[SPVATF]-1659909154807
GPR[EPVATF]-1659909154877
[144342] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909154877
GPR[SSUN]-1659909154877
130004992
GPR[ESUN]-1659909155065
GPR[SSUN]-1659909155065
-128675625
GPR[SPVATF]-1659909155324
GPR[EPVATF]-1659909156062
GPR[SPS]-1659909156062
[146153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:429.
GPR[EPS]-1659909156688
GPR[SPVATF]-1659909156689
GPR[EPVATF]-1659909157427
GPR[SPS]-1659909157427
[147552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:429.
GPR[EPS]-1659909158087
GPR[ESUN]-1659909158087
GPR[SSUN]-1659909158087
-128675625
GPR[SPVATF]-1659909158329
GPR[EPVATF]-1659909159092
GPR[SPS]-1659909159092
[149172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:428.
GPR[EPS]-1659909159707
GPR[ESUN]-1659909159707
GPR[SSUN]-1659909159707
-128675625
GPR[SPVATF]-1659909159940
GPR[EPVATF]-1659909160725
GPR[SPS]-1659909160725
[150837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:427.
GPR[EPS]-1659909161372
GPR[ESUN]-1659909161372
GPR[SSUN]-1659909161373
-128675625
GPR[SPVATF]-1659909161639
GPR[EPVATF]-1659909162440
GPR[SPS]-1659909162440
[152524] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:424.
GPR[EPS]-1659909163059
GPR[ESUN]-1659909163059
GPR[SSUN]-1659909163059
-128675625
GPR[SPVATF]-1659909163294
GPR[EPVATF]-1659909164128
GPR[SPS]-1659909164128
[154208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:423.
GPR[EPS]-1659909164743
GPR[ESUN]-1659909164743
GPR[SSUN]-1659909164743
-128675625
GPR[SPVATF]-1659909164980
GPR[EPVATF]-1659909165861
GPR[SPS]-1659909165861
[155934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:421.
GPR[EPS]-1659909166469
GPR[ESUN]-1659909166469
GPR[SSUN]-1659909166469
-128675625
GPR[ESUN]-1659909166702
GPR[SSUN]-1659909166702
-128675625
GPR[ESUN]-1659909166937
GPR[SSUN]-1659909166937
-128675625
GPR[SPVATF]-1659909167175
GPR[EPVATF]-1659909168052
GPR[SPS]-1659909168052
[158142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:290.
GPR[EPS]-1659909168677
GPR[SPVATF]-1659909168677
GPR[EPVATF]-1659909169631
GPR[SPS]-1659909169631
GPR[EPS]-1659909182478
GPR[ESUN]-1659909182479
GPR[SSUN]-1659909182479
-128675625
GPR[ESUN]-1659909182732
GPR[SSUN]-1659909182732
2433571
GPR[SPVATF]-1659909182971
GPR[EPVATF]-1659909183910
GPR[SPS]-1659909183911
[174136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:946.
GPR[EPS]-1659909184671
GPR[ESUN]-1659909184671
GPR[SSUN]-1659909184671
80988634
GPR[ESUN]-1659909184853
GPR[SSUN]-1659909184853
2433571
GPR[SPVATF]-1659909185093
GPR[EPVATF]-1659909186094
GPR[SPS]-1659909186094
[176276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659909186811
GPR[SPVATF]-1659909186812
GPR[EPVATF]-1659909188903
GPR[SPS]-1659909188903
[179111] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659909189646
GPR[ESUN]-1659909189646
GPR[SSUN]-1659909189646
2433571
GPR[SPVATF]-1659909189890
GPR[EPVATF]-1659909190679
GPR[SPS]-1659909190679
[180867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:939.
GPR[EPS]-1659909191402
GPR[ESUN]-1659909191402
GPR[SSUN]-1659909191402
2433571
GPR[ESUN]-1659909191649
GPR[SSUN]-1659909191649
2433571
GPR[ESUN]-1659909191881
GPR[SSUN]-1659909191881
-675467674
GPR[ESUN]-1659909192062
GPR[SSUN]-1659909192062
-1119592721
GPR[ESUN]-1659909192300
GPR[SSUN]-1659909192300
80988634
GPR[ESUN]-1659909192477
GPR[SSUN]-1659909192477
-1966087783
GPR[SPVATF]-1659909192671
GPR[EPVATF]-1659909192742
[182207] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909192742
GPR[SSUN]-1659909192742
-1966087783
GPR[SPVATF]-1659909192937
GPR[EPVATF]-1659909193005
[182470] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909193005
GPR[SSUN]-1659909193005
-128675625
GPR[SPVATF]-1659909193241
GPR[EPVATF]-1659909193977
GPR[SPS]-1659909193977
GPR[EPS]-1659909203523
GPR[ESUN]-1659909203523
GPR[SSUN]-1659909203523
890942016
GPR[ESUN]-1659909203721
GPR[SSUN]-1659909203721
890942016
GPR[SPVATF]-1659909203917
GPR[EPVATF]-1659909203985
[193450] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909203985
GPR[SSUN]-1659909203985
890942016
GPR[SPVATF]-1659909204179
GPR[EPVATF]-1659909204247
[193712] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909204247
GPR[EPVATF]-1659909204313
[193778] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909204313
GPR[SSUN]-1659909204313
890942016
GPR[ESUN]-1659909204506
GPR[SSUN]-1659909204506
890942016
GPR[ESUN]-1659909204700
GPR[SSUN]-1659909204700
-1966087783
GPR[ESUN]-1659909204894
GPR[SSUN]-1659909204894
-1966087783
GPR[SPVATF]-1659909205092
GPR[EPVATF]-1659909205160
[194625] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909205160
GPR[EPVATF]-1659909205226
[194691] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909205226
GPR[SSUN]-1659909205226
-1966087783
GPR[ESUN]-1659909205523
GPR[SSUN]-1659909205523
-1966087783
GPR[SPVATF]-1659909205714
GPR[EPVATF]-1659909205782
[195247] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909205782
GPR[EPVATF]-1659909205849
[195314] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909205849
GPR[SSUN]-1659909205849
-1966087783
GPR[ESUN]-1659909206042
GPR[SSUN]-1659909206042
-1966087783
GPR[ESUN]-1659909206235
GPR[SSUN]-1659909206236
-1966087783
GPR[ESUN]-1659909206432
GPR[SSUN]-1659909206432
1965452846
GPR[ESUN]-1659909206648
GPR[SSUN]-1659909206648
1965452846
GPR[SPVATF]-1659909206881
GPR[EPVATF]-1659909207597
GPR[SPS]-1659909207597
[197708] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph$AnnotatedLinkedDirectedGraphEdge:578.
GPR[EPS]-1659909208243
GPR[ESUN]-1659909208243
GPR[SSUN]-1659909208244
1965452846
GPR[ESUN]-1659909208462
GPR[SSUN]-1659909208462
-1516948592
GPR[ESUN]-1659909208646
GPR[SSUN]-1659909208646
-1516948592
GPR[ESUN]-1659909208829
GPR[SSUN]-1659909208829
-1516948592
GPR[SPVATF]-1659909209014
GPR[EPVATF]-1659909209759
GPR[SPS]-1659909209759
[199765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:147.
GPR[EPS]-1659909210300
GPR[ESUN]-1659909210300
GPR[SSUN]-1659909210300
-1516948592
GPR[SPVATF]-1659909210486
GPR[EPVATF]-1659909211284
GPR[SPS]-1659909211284
[201292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659909211827
GPR[SPVATF]-1659909211827
GPR[EPVATF]-1659909212617
GPR[SPS]-1659909212617
[202625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659909213160
GPR[ESUN]-1659909213160
GPR[SSUN]-1659909213160
-1516948592
GPR[ESUN]-1659909213348
GPR[SSUN]-1659909213348
-1516948592
GPR[SPVATF]-1659909213531
GPR[EPVATF]-1659909214328
GPR[SPS]-1659909214328
[204340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659909214875
GPR[SPVATF]-1659909214876
GPR[EPVATF]-1659909215700
GPR[SPS]-1659909215700
[205745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659909216281
GPR[ESUN]-1659909216281
GPR[SSUN]-1659909216281
1965452846
GPR[ESUN]-1659909216501
GPR[SSUN]-1659909216501
1965452846
GPR[SPVATF]-1659909216710
GPR[EPVATF]-1659909217573
GPR[SPS]-1659909217573
[207670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:316.
GPR[EPS]-1659909218205
GPR[ESUN]-1659909218205
GPR[SSUN]-1659909218205
-1119592721
GPR[SPVATF]-1659909218441
GPR[EPVATF]-1659909219298
GPR[SPS]-1659909219298
[209389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:435.
GPR[EPS]-1659909219924
GPR[SPVATF]-1659909219924
GPR[EPVATF]-1659909220859
GPR[SPS]-1659909220859
GPR[EPS]-1659909222411
GPR[SPVATR]-1659909222411
[211876] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:435: CONDITIONAL ((0) != (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size())) || (s.scope != jsScope)
[212218] INFO TestPatch - Running test suite to check the patch "((0) != (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size())) || (s.scope != jsScope)" is working
GPR[EPVATR]-1659909223374
[212839] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659909223374
[212843] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -434,3 +434,3 @@
     for (Var s : def.depends) {
-      if (s.scope != jsScope) {
+      if (((0) != (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size())) || (s.scope != jsScope)) {
         return true;

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_208256_2ts_1659909223378.diff
GPR[ESUN]-1659909223379
GPR[SSUN]-1659909223379
-128675625
GPR[ESUN]-1659909223622
GPR[SSUN]-1659909223622
-128675625
GPR[SPVATF]-1659909223897
GPR[EPVATF]-1659909224885
GPR[SPS]-1659909224885
GPR[EPS]-1659909234513
GPR[SPVATF]-1659909234513
GPR[EPVATF]-1659909235577
GPR[SPS]-1659909235577
GPR[EPS]-1659909245416
GPR[ESUN]-1659909245416
GPR[SSUN]-1659909245417
-128675625
GPR[ESUN]-1659909245670
GPR[SSUN]-1659909245670
-1516948592
GPR[ESUN]-1659909245851
GPR[SSUN]-1659909245851
-1516948592
GPR[SPVATF]-1659909246030
GPR[EPVATF]-1659909247096
GPR[SPS]-1659909247096
[237110] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:152.
GPR[EPS]-1659909247645
GPR[ESUN]-1659909247645
GPR[SSUN]-1659909247645
-1516948592
GPR[SPVATF]-1659909247832
GPR[EPVATF]-1659909248951
GPR[SPS]-1659909248951
[239008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:141.
GPR[EPS]-1659909249543
GPR[ESUN]-1659909249543
GPR[SSUN]-1659909249543
-1516948592
GPR[SPVATF]-1659909249732
GPR[EPVATF]-1659909250872
GPR[SPS]-1659909250872
[240881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:140.
GPR[EPS]-1659909251416
GPR[ESUN]-1659909251416
GPR[SSUN]-1659909251416
-1516948592
GPR[ESUN]-1659909251601
GPR[SSUN]-1659909251602
-1516948592
GPR[SPVATF]-1659909251788
GPR[EPVATF]-1659909252930
GPR[SPS]-1659909252930
[242937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:136.
GPR[EPS]-1659909253472
GPR[ESUN]-1659909253472
GPR[SSUN]-1659909253472
-1516948592
GPR[SPVATF]-1659909253658
GPR[EPVATF]-1659909254792
GPR[SPS]-1659909254792
[244858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:135.
GPR[EPS]-1659909255393
GPR[ESUN]-1659909255393
GPR[SSUN]-1659909255393
-1516948592
GPR[ESUN]-1659909255582
GPR[SSUN]-1659909255582
-1516948592
GPR[SPVATF]-1659909255768
GPR[EPVATF]-1659909256908
GPR[SPS]-1659909256908
[246916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:131.
GPR[EPS]-1659909257451
GPR[ESUN]-1659909257451
GPR[SSUN]-1659909257451
-1516948592
GPR[SPVATF]-1659909257638
GPR[EPVATF]-1659909258775
GPR[SPS]-1659909258775
[248774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:130.
GPR[EPS]-1659909259309
GPR[ESUN]-1659909259309
GPR[SSUN]-1659909259309
-1516948592
GPR[SPVATF]-1659909259496
GPR[EPVATF]-1659909260634
GPR[SPS]-1659909260634
[250634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:129.
GPR[EPS]-1659909261169
GPR[ESUN]-1659909261169
GPR[SSUN]-1659909261169
1965452846
GPR[ESUN]-1659909261389
GPR[SSUN]-1659909261389
1965452846
GPR[ESUN]-1659909261662
GPR[SSUN]-1659909261662
1965452846
GPR[SPVATF]-1659909261899
GPR[EPVATF]-1659909263037
GPR[SPS]-1659909263037
[253528] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:315.
GPR[EPS]-1659909264063
GPR[ESUN]-1659909264063
GPR[SSUN]-1659909264063
1965452846
GPR[SPVATF]-1659909264281
GPR[EPVATF]-1659909265423
GPR[SPS]-1659909265423
[255663] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:314.
GPR[EPS]-1659909266198
GPR[ESUN]-1659909266198
GPR[SSUN]-1659909266198
1965452846
GPR[ESUN]-1659909266416
GPR[SSUN]-1659909266416
69062959
GPR[ESUN]-1659909266603
GPR[SSUN]-1659909266603
69062959
GPR[ESUN]-1659909266789
GPR[SSUN]-1659909266789
69062959
GPR[ESUN]-1659909266977
GPR[SSUN]-1659909266977
69062959
GPR[SPVATF]-1659909267230
GPR[EPVATF]-1659909268375
GPR[SPS]-1659909268375
[258421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:350.
GPR[EPS]-1659909268956
GPR[ESUN]-1659909268956
GPR[SSUN]-1659909268956
69062959
GPR[SPVATF]-1659909269146
GPR[EPVATF]-1659909270309
GPR[SPS]-1659909270309
[261213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:349.
GPR[EPS]-1659909271748
GPR[ESUN]-1659909271748
GPR[SSUN]-1659909271748
69062959
GPR[ESUN]-1659909271946
GPR[SSUN]-1659909271946
69062959
GPR[ESUN]-1659909272131
GPR[SSUN]-1659909272131
69062959
GPR[SPVATF]-1659909272320
GPR[EPVATF]-1659909273469
GPR[SPS]-1659909273469
[263638] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:341.
GPR[EPS]-1659909274173
GPR[ESUN]-1659909274174
GPR[SSUN]-1659909274174
69062959
GPR[SPVATF]-1659909274365
GPR[EPVATF]-1659909275622
GPR[SPS]-1659909275622
[265672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:340.
GPR[EPS]-1659909276207
GPR[ESUN]-1659909276207
GPR[SSUN]-1659909276207
69062959
GPR[SPVATF]-1659909276399
GPR[EPVATF]-1659909277218
GPR[SPS]-1659909277218
[267269] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:339.
GPR[EPS]-1659909277804
GPR[ESUN]-1659909277804
GPR[SSUN]-1659909277804
69062959
GPR[SPVATF]-1659909277994
GPR[EPVATF]-1659909278816
GPR[SPS]-1659909278816
[268831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:338.
GPR[EPS]-1659909279366
GPR[ESUN]-1659909279366
GPR[SSUN]-1659909279366
69062959
GPR[ESUN]-1659909279556
GPR[SSUN]-1659909279556
69062959
GPR[SPVATF]-1659909279746
GPR[EPVATF]-1659909280593
GPR[SPS]-1659909280593
[270625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:280.
GPR[EPS]-1659909281160
GPR[ESUN]-1659909281160
GPR[SSUN]-1659909281160
69062959
GPR[SPVATF]-1659909281358
GPR[EPVATF]-1659909282220
GPR[SPS]-1659909282220
[272277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:278.
GPR[EPS]-1659909282812
GPR[ESUN]-1659909282812
GPR[SSUN]-1659909282813
69062959
GPR[ESUN]-1659909283001
GPR[SSUN]-1659909283001
69062959
GPR[SPVATF]-1659909283190
GPR[EPVATF]-1659909284096
GPR[SPS]-1659909284096
[274119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:270.
GPR[EPS]-1659909284654
GPR[ESUN]-1659909284654
GPR[SSUN]-1659909284654
69062959
GPR[SPVATF]-1659909284844
GPR[EPVATF]-1659909285710
GPR[SPS]-1659909285710
[275721] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:268.
GPR[EPS]-1659909286256
GPR[ESUN]-1659909286256
GPR[SSUN]-1659909286256
69062959
GPR[SPVATF]-1659909286448
GPR[EPVATF]-1659909287372
GPR[SPS]-1659909287372
[277381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659909287916
GPR[SPVATF]-1659909287916
GPR[EPVATF]-1659909288943
GPR[SPS]-1659909288943
[278958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659909289493
GPR[ESUN]-1659909289493
GPR[SSUN]-1659909289493
69062959
GPR[ESUN]-1659909289689
GPR[SSUN]-1659909289689
69062959
GPR[SPVATF]-1659909289877
GPR[EPVATF]-1659909290863
GPR[SPS]-1659909290863
[280892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:259.
GPR[EPS]-1659909291427
GPR[ESUN]-1659909291427
GPR[SSUN]-1659909291428
69062959
GPR[SPVATF]-1659909291620
GPR[EPVATF]-1659909292666
GPR[SPS]-1659909292666
[282692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:257.
GPR[EPS]-1659909293227
GPR[ESUN]-1659909293227
GPR[SSUN]-1659909293227
69062959
GPR[ESUN]-1659909293418
GPR[SSUN]-1659909293418
69062959
GPR[SPVATF]-1659909293605
GPR[EPVATF]-1659909294741
GPR[SPS]-1659909294741
[284753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:249.
GPR[EPS]-1659909295289
GPR[ESUN]-1659909295289
GPR[SSUN]-1659909295289
69062959
GPR[SPVATF]-1659909295475
GPR[EPVATF]-1659909296531
GPR[SPS]-1659909296531
[286554] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:247.
GPR[EPS]-1659909297089
GPR[ESUN]-1659909297089
GPR[SSUN]-1659909297089
69062959
GPR[SPVATF]-1659909297274
GPR[EPVATF]-1659909298382
GPR[SPS]-1659909298382
[288389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659909298924
GPR[SPVATF]-1659909298925
GPR[EPVATF]-1659909300060
GPR[SPS]-1659909300060
[290081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659909300616
GPR[ESUN]-1659909300616
GPR[SSUN]-1659909300616
-128675625
GPR[ESUN]-1659909300855
GPR[SSUN]-1659909300855
-128675625
GPR[ESUN]-1659909301130
GPR[SSUN]-1659909301130
-128675625
GPR[SPVATF]-1659909301368
GPR[EPVATF]-1659909302509
GPR[SPS]-1659909302509
[292590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:436.
GPR[EPS]-1659909303125
GPR[ESUN]-1659909303125
GPR[SSUN]-1659909303125
-128675625
GPR[SPVATF]-1659909303360
GPR[EPVATF]-1659909304487
GPR[SPS]-1659909304487
[294577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:419.
GPR[EPS]-1659909305112
GPR[SPVATF]-1659909305112
GPR[EPVATF]-1659909306236
GPR[SPS]-1659909306236
[296326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:419.
GPR[EPS]-1659909306861
GPR[ESUN]-1659909306861
GPR[SSUN]-1659909306861
-128675625
GPR[ESUN]-1659909307140
GPR[SSUN]-1659909307140
-128675625
GPR[ESUN]-1659909307378
GPR[SSUN]-1659909307378
-128675625
GPR[ESUN]-1659909307616
GPR[SSUN]-1659909307616
-128675625
GPR[SPVATF]-1659909307853
GPR[EPVATF]-1659909308993
GPR[SPS]-1659909308993
[299083] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:391.
GPR[EPS]-1659909309618
GPR[SPVATF]-1659909309619
GPR[EPVATF]-1659909310756
GPR[SPS]-1659909310756
[300843] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:391.
GPR[EPS]-1659909311378
GPR[ESUN]-1659909311378
GPR[SSUN]-1659909311378
-128675625
GPR[SPVATF]-1659909311614
GPR[EPVATF]-1659909312739
GPR[SPS]-1659909312739
[302868] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:165.
GPR[EPS]-1659909313403
GPR[SPVATF]-1659909313403
GPR[EPVATF]-1659909314544
GPR[SPS]-1659909314544
[304640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:165.
GPR[EPS]-1659909315175
GPR[ESUN]-1659909315175
GPR[SSUN]-1659909315175
-128675625
GPR[SPVATF]-1659909315416
GPR[EPVATF]-1659909316566
GPR[SPS]-1659909316566
GPR[EPS]-1659909322400
GPR[ESUN]-1659909322400
GPR[SSUN]-1659909322400
-1684326478
GPR[SPVATF]-1659909322639
GPR[EPVATF]-1659909323793
GPR[SPS]-1659909323793
[313918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:189.
GPR[EPS]-1659909324453
GPR[ESUN]-1659909324453
GPR[SSUN]-1659909324453
-1684326478
GPR[SPVATF]-1659909324688
GPR[EPVATF]-1659909325834
GPR[SPS]-1659909325834
[316058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:150.
GPR[EPS]-1659909326593
GPR[ESUN]-1659909326594
GPR[SSUN]-1659909326594
-1684326478
GPR[SPVATF]-1659909326824
GPR[EPVATF]-1659909328025
GPR[SPS]-1659909328025
[318154] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:148.
GPR[EPS]-1659909328689
GPR[ESUN]-1659909328689
GPR[SSUN]-1659909328689
-1684326478
GPR[ESUN]-1659909328945
GPR[SSUN]-1659909328945
-1684326478
GPR[ESUN]-1659909329191
GPR[SSUN]-1659909329191
160819208
GPR[SPVATF]-1659909329425
GPR[EPVATF]-1659909330582
GPR[SPS]-1659909330582
[320710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:849.
GPR[EPS]-1659909331245
GPR[ESUN]-1659909331245
GPR[SSUN]-1659909331245
160819208
GPR[SPVATF]-1659909331494
GPR[EPVATF]-1659909332683
GPR[SPS]-1659909332684
[322864] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:848.
GPR[EPS]-1659909333399
GPR[ESUN]-1659909333399
GPR[SSUN]-1659909333399
160819208
GPR[SPVATF]-1659909333637
GPR[EPVATF]-1659909334796
GPR[SPS]-1659909334796
[324911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:847.
GPR[EPS]-1659909335446
GPR[SPVATF]-1659909335446
GPR[EPVATF]-1659909336592
GPR[SPS]-1659909336592
[326705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:847.
GPR[EPS]-1659909337240
GPR[ESUN]-1659909337240
GPR[SSUN]-1659909337240
160819208
GPR[SPVATF]-1659909337481
GPR[EPVATF]-1659909338630
GPR[SPS]-1659909338630
[328742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:761.
GPR[EPS]-1659909339277
GPR[ESUN]-1659909339277
GPR[SSUN]-1659909339277
80988634
GPR[ESUN]-1659909339458
GPR[SSUN]-1659909339458
-128675625
GPR[SPVATF]-1659909339705
GPR[EPVATF]-1659909340900
GPR[SPS]-1659909340900
[331003] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:363.
GPR[EPS]-1659909341538
GPR[SPVATF]-1659909341538
GPR[EPVATF]-1659909342694
GPR[SPS]-1659909342694
GPR[EPS]-1659909354727
GPR[ESUN]-1659909354727
GPR[SSUN]-1659909354727
1613130706
GPR[ESUN]-1659909354943
GPR[SSUN]-1659909354943
1613130706
GPR[ESUN]-1659909355154
GPR[SSUN]-1659909355154
1613130706
GPR[SPVATF]-1659909355362
GPR[EPVATF]-1659909355642
[345107] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909355642
GPR[SSUN]-1659909355642
2433571
GPR[ESUN]-1659909355883
GPR[SSUN]-1659909355883
160819208
GPR[ESUN]-1659909356119
GPR[SSUN]-1659909356119
160819208
GPR[SPVATF]-1659909356355
GPR[EPVATF]-1659909357519
GPR[SPS]-1659909357519
[347636] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:540.
GPR[EPS]-1659909358171
GPR[ESUN]-1659909358171
GPR[SSUN]-1659909358171
160819208
GPR[ESUN]-1659909358408
GPR[SSUN]-1659909358408
160819208
GPR[SPVATF]-1659909358643
GPR[EPVATF]-1659909359812
GPR[SPS]-1659909359812
[349934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:329.
GPR[EPS]-1659909360469
GPR[ESUN]-1659909360469
GPR[SSUN]-1659909360469
-128675625
GPR[SPVATF]-1659909360740
GPR[EPVATF]-1659909361958
GPR[SPS]-1659909361958
[352068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:347.
GPR[EPS]-1659909362603
GPR[SPVATF]-1659909362603
GPR[EPVATF]-1659909363774
GPR[SPS]-1659909363774
CodeCache: size=245760Kb used=243357Kb max_used=243409Kb free=2402Kb
 bounds [0x00007fbac4bb9000, 0x00007fbad3bb9000, 0x00007fbad3bb9000]
 total_blobs=71985 nmethods=71480 adapters=407
 compilation: disabled (not enough contiguous free space left)
GPR[EPS]-1659909384885
GPR[ESUN]-1659909384885
GPR[SSUN]-1659909384885
-128675625
GPR[ESUN]-1659909385605
GPR[SSUN]-1659909385605
-128675625
GPR[SPVATF]-1659909386028
GPR[EPVATF]-1659909386835
GPR[SPS]-1659909386835
[377335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:524.
GPR[EPS]-1659909387870
GPR[ESUN]-1659909387870
GPR[SSUN]-1659909387871
-128675625
GPR[SPVATF]-1659909388158
GPR[EPVATF]-1659909388892
GPR[SPS]-1659909388892
[379121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:340.
GPR[EPS]-1659909389656
GPR[SPVATF]-1659909389656
GPR[EPVATF]-1659909390362
GPR[SPS]-1659909390362
GPR[EPS]-1659909408360
GPR[ESUN]-1659909408360
GPR[SSUN]-1659909408360
160819208
GPR[SPVATF]-1659909408629
GPR[EPVATF]-1659909409315
GPR[SPS]-1659909409315
[399522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:758.
GPR[EPS]-1659909410057
GPR[SPVATF]-1659909410057
GPR[EPVATF]-1659909410808
GPR[SPS]-1659909410808
[400981] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:758.
GPR[EPS]-1659909411516
GPR[ESUN]-1659909411516
GPR[SSUN]-1659909411516
-128675625
GPR[SPVATF]-1659909411773
GPR[EPVATF]-1659909412477
GPR[SPS]-1659909412477
[402590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:335.
GPR[EPS]-1659909413125
GPR[SPVATF]-1659909413125
GPR[EPVATF]-1659909413849
GPR[SPS]-1659909413849
GPR[EPS]-1659909427064
GPR[ESUN]-1659909427064
GPR[SSUN]-1659909427064
-128675625
GPR[SPVATF]-1659909427329
GPR[EPVATF]-1659909428085
GPR[SPS]-1659909428085
[418216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:283.
GPR[EPS]-1659909428751
GPR[ESUN]-1659909428751
GPR[SSUN]-1659909428751
-128675625
GPR[SPVATF]-1659909429004
GPR[EPVATF]-1659909429722
GPR[SPS]-1659909429722
[419877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:326.
GPR[EPS]-1659909430412
GPR[SPVATF]-1659909430412
GPR[EPVATF]-1659909431141
GPR[SPS]-1659909431141
GPR[EPS]-1659909448394
GPR[ESUN]-1659909448394
GPR[SSUN]-1659909448394
-128675625
GPR[SPVATF]-1659909448739
GPR[EPVATF]-1659909449468
GPR[SPS]-1659909449468
[439571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:319.
GPR[EPS]-1659909450106
GPR[SPVATF]-1659909450106
GPR[EPVATF]-1659909450873
GPR[SPS]-1659909450873
GPR[EPS]-1659909458766
GPR[ESUN]-1659909458766
GPR[SSUN]-1659909458766
-128675625
GPR[SPVATF]-1659909459015
GPR[EPVATF]-1659909459762
GPR[SPS]-1659909459762
[449867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:312.
GPR[EPS]-1659909460402
GPR[SPVATF]-1659909460402
GPR[EPVATF]-1659909461154
GPR[SPS]-1659909461154
GPR[EPS]-1659909469158
GPR[ESUN]-1659909469158
GPR[SSUN]-1659909469158
-128675625
GPR[ESUN]-1659909469405
GPR[SSUN]-1659909469405
-128675625
GPR[SPVATF]-1659909469658
GPR[EPVATF]-1659909470461
GPR[SPS]-1659909470461
[460549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:523.
GPR[EPS]-1659909471084
GPR[ESUN]-1659909471084
GPR[SSUN]-1659909471084
-128675625
GPR[ESUN]-1659909471324
GPR[SSUN]-1659909471324
-128675625
GPR[SPVATF]-1659909471565
GPR[EPVATF]-1659909472377
GPR[SPS]-1659909472377
[462480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:504.
GPR[EPS]-1659909473015
GPR[ESUN]-1659909473015
GPR[SSUN]-1659909473015
-128675625
GPR[SPVATF]-1659909473257
GPR[EPVATF]-1659909474089
GPR[SPS]-1659909474089
[464184] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:503.
GPR[EPS]-1659909474719
GPR[ESUN]-1659909474719
GPR[SSUN]-1659909474719
160819208
GPR[ESUN]-1659909475045
GPR[SSUN]-1659909475045
160819208
GPR[SPVATF]-1659909475290
GPR[EPVATF]-1659909476137
GPR[SPS]-1659909476137
[466250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:548.
GPR[EPS]-1659909476785
GPR[ESUN]-1659909476785
GPR[SSUN]-1659909476785
160819208
GPR[ESUN]-1659909477024
GPR[SSUN]-1659909477024
160819208
GPR[SPVATF]-1659909477265
GPR[EPVATF]-1659909478136
GPR[SPS]-1659909478136
[468257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:335.
GPR[EPS]-1659909478792
GPR[ESUN]-1659909478792
GPR[SSUN]-1659909478792
80988634
GPR[ESUN]-1659909478974
GPR[SSUN]-1659909478974
-1119592721
GPR[SPVATF]-1659909479212
GPR[EPVATF]-1659909480123
GPR[SPS]-1659909480123
[470220] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:402.
GPR[EPS]-1659909480755
GPR[ESUN]-1659909480755
GPR[SSUN]-1659909480756
234947553
GPR[ESUN]-1659909480953
GPR[SSUN]-1659909480953
234947553
GPR[SPVATF]-1659909481144
GPR[EPVATF]-1659909481212
[470678] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909481213
GPR[EPVATF]-1659909481280
[470745] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909481280
GPR[SSUN]-1659909481280
234947553
GPR[ESUN]-1659909481474
GPR[SSUN]-1659909481474
234947553
GPR[SPVATF]-1659909481667
GPR[EPVATF]-1659909481735
[471200] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909481736
GPR[EPVATF]-1659909481800
[471265] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909481800
GPR[SSUN]-1659909481800
234947553
GPR[SPVATF]-1659909482086
GPR[EPVATF]-1659909482154
[471619] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909482155
GPR[SSUN]-1659909482155
234947553
GPR[ESUN]-1659909482346
GPR[SSUN]-1659909482346
234947553
GPR[ESUN]-1659909482538
GPR[SSUN]-1659909482538
234947553
GPR[SPVATF]-1659909482731
GPR[EPVATF]-1659909482798
[472263] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909482798
GPR[SSUN]-1659909482798
234947553
GPR[SPVATF]-1659909482991
GPR[EPVATF]-1659909483054
[472519] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909483055
GPR[SSUN]-1659909483055
234947553
GPR[SPVATF]-1659909483248
GPR[EPVATF]-1659909483313
[472778] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909483313
GPR[SSUN]-1659909483313
234947553
GPR[ESUN]-1659909483508
GPR[SSUN]-1659909483508
234947553
GPR[ESUN]-1659909483704
GPR[SSUN]-1659909483704
234947553
GPR[SPVATF]-1659909483898
GPR[EPVATF]-1659909483967
[473432] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909483967
GPR[SSUN]-1659909483967
234947553
GPR[SPVATF]-1659909484159
GPR[EPVATF]-1659909484224
[473689] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909484224
GPR[SSUN]-1659909484224
234947553
GPR[ESUN]-1659909484420
GPR[SSUN]-1659909484420
234947553
GPR[SPVATF]-1659909484610
GPR[EPVATF]-1659909484675
[474140] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909484675
GPR[SSUN]-1659909484675
234947553
GPR[SPVATF]-1659909484866
GPR[EPVATF]-1659909484931
[474396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909484931
GPR[SSUN]-1659909484931
234947553
GPR[ESUN]-1659909485123
GPR[SSUN]-1659909485123
890942016
GPR[SPVATF]-1659909485317
GPR[EPVATF]-1659909485391
[474856] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909485391
GPR[EPVATF]-1659909485461
[474926] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909485461
GPR[SSUN]-1659909485461
890942016
GPR[SPVATF]-1659909485655
GPR[EPVATF]-1659909485725
[475190] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909485725
GPR[SSUN]-1659909485725
890942016
GPR[ESUN]-1659909485913
GPR[SSUN]-1659909485913
890942016
GPR[SPVATF]-1659909486108
GPR[EPVATF]-1659909486182
[475647] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909486182
GPR[SSUN]-1659909486182
890942016
GPR[SPVATF]-1659909486382
GPR[EPVATF]-1659909486455
[475920] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909486455
GPR[EPVATF]-1659909486526
[475991] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909486526
GPR[SSUN]-1659909486526
890942016
GPR[SPVATF]-1659909486725
GPR[EPVATF]-1659909486794
[476259] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909486794
GPR[SSUN]-1659909486794
890942016
GPR[SPVATF]-1659909486992
GPR[EPVATF]-1659909487065
[476530] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909487065
GPR[EPVATF]-1659909487133
[476598] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909487133
GPR[SSUN]-1659909487133
890942016
GPR[ESUN]-1659909487344
GPR[SSUN]-1659909487344
890942016
GPR[SPVATF]-1659909487536
GPR[EPVATF]-1659909487606
[477071] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909487606
GPR[SSUN]-1659909487606
890942016
GPR[SPVATF]-1659909487802
GPR[EPVATF]-1659909487872
[477337] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909487872
GPR[SSUN]-1659909487872
890942016
GPR[SPVATF]-1659909488065
GPR[EPVATF]-1659909488136
[477601] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909488136
GPR[SSUN]-1659909488136
890942016
GPR[ESUN]-1659909488333
GPR[SSUN]-1659909488333
1613130706
GPR[SPVATF]-1659909488551
GPR[EPVATF]-1659909488880
[478345] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909488881
GPR[EPVATF]-1659909489143
[478608] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909489143
GPR[SSUN]-1659909489143
160819208
GPR[SPVATF]-1659909489383
GPR[EPVATF]-1659909490325
GPR[SPS]-1659909490325
[480448] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:840.
GPR[EPS]-1659909490983
GPR[SPVATF]-1659909490983
GPR[EPVATF]-1659909491970
GPR[SPS]-1659909491970
[482088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:840.
GPR[EPS]-1659909492623
GPR[ESUN]-1659909492623
GPR[SSUN]-1659909492624
160819208
GPR[ESUN]-1659909492876
GPR[SSUN]-1659909492876
160819208
GPR[SPVATF]-1659909493115
GPR[EPVATF]-1659909494121
GPR[SPS]-1659909494121
[484238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:837.
GPR[EPS]-1659909494773
GPR[ESUN]-1659909494773
GPR[SSUN]-1659909494773
-128675625
GPR[ESUN]-1659909495021
GPR[SSUN]-1659909495021
-128675625
GPR[SPVATF]-1659909495262
GPR[EPVATF]-1659909496330
GPR[SPS]-1659909496330
GPR[EPS]-1659909506323
GPR[ESUN]-1659909506323
GPR[SSUN]-1659909506323
-128675625
GPR[SPVATF]-1659909506566
GPR[EPVATF]-1659909507679
GPR[SPS]-1659909507679
GPR[EPS]-1659909531965
GPR[SPVATF]-1659909531965
GPR[EPVATF]-1659909533084
GPR[SPS]-1659909533084
GPR[EPS]-1659909557343
GPR[ESUN]-1659909557343
GPR[SSUN]-1659909557343
-128675625
GPR[ESUN]-1659909557607
GPR[SSUN]-1659909557607
-128675625
GPR[ESUN]-1659909557927
GPR[SSUN]-1659909557927
-128675625
GPR[SPVATF]-1659909558169
GPR[EPVATF]-1659909559313
GPR[SPS]-1659909559313
[549416] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:452.
GPR[EPS]-1659909559951
GPR[SPVATF]-1659909559952
GPR[EPVATF]-1659909561093
GPR[SPS]-1659909561093
[551194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:452.
GPR[EPS]-1659909561729
GPR[ESUN]-1659909561730
GPR[SSUN]-1659909561730
-128675625
GPR[SPVATF]-1659909561973
GPR[EPVATF]-1659909563122
GPR[SPS]-1659909563122
GPR[EPS]-1659909587390
GPR[ESUN]-1659909587390
GPR[SSUN]-1659909587390
-128675625
GPR[ESUN]-1659909587762
GPR[SSUN]-1659909587762
-128675625
GPR[SPVATF]-1659909588072
GPR[EPVATF]-1659909589199
GPR[SPS]-1659909589199
GPR[EPS]-1659909608646
GPR[ESUN]-1659909608646
GPR[SSUN]-1659909608646
-128675625
GPR[ESUN]-1659909608902
GPR[SSUN]-1659909608902
-128675625
GPR[ESUN]-1659909609146
GPR[SSUN]-1659909609146
-128675625
GPR[SPVATF]-1659909609394
GPR[EPVATF]-1659909610550
GPR[SPS]-1659909610550
GPR[EPS]-1659909620070
GPR[ESUN]-1659909620070
GPR[SSUN]-1659909620070
-128675625
GPR[ESUN]-1659909620340
GPR[SSUN]-1659909620340
-128675625
GPR[SPVATF]-1659909620587
GPR[EPVATF]-1659909621765
GPR[SPS]-1659909621765
[611875] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:305.
GPR[EPS]-1659909622410
GPR[SPVATF]-1659909622411
GPR[EPVATF]-1659909623564
GPR[SPS]-1659909623564
GPR[EPS]-1659909634735
GPR[ESUN]-1659909634735
GPR[SSUN]-1659909634735
-128675625
GPR[SPVATF]-1659909634980
GPR[EPVATF]-1659909636223
GPR[SPS]-1659909636223
[626339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:299.
GPR[EPS]-1659909636874
GPR[SPVATF]-1659909636875
GPR[EPVATF]-1659909638067
GPR[SPS]-1659909638067
GPR[EPS]-1659909647838
GPR[ESUN]-1659909647838
GPR[SSUN]-1659909647838
-128675625
GPR[SPVATF]-1659909648192
GPR[EPVATF]-1659909649358
GPR[SPS]-1659909649358
GPR[EPS]-1659909660813
GPR[ESUN]-1659909660813
GPR[SSUN]-1659909660813
-128675625
GPR[SPVATF]-1659909661060
GPR[EPVATF]-1659909662225
GPR[SPS]-1659909662225
GPR[EPS]-1659909671820
GPR[ESUN]-1659909671820
GPR[SSUN]-1659909671820
-128675625
GPR[SPVATF]-1659909672075
GPR[EPVATF]-1659909673223
GPR[SPS]-1659909673223
[663341] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:289.
GPR[EPS]-1659909673876
GPR[ESUN]-1659909673876
GPR[SSUN]-1659909673876
2433571
GPR[SPVATF]-1659909674128
GPR[EPVATF]-1659909675292
GPR[SPS]-1659909675292
[665640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:975.
GPR[EPS]-1659909676175
GPR[ESUN]-1659909676175
GPR[SSUN]-1659909676175
2433571
GPR[SPVATF]-1659909676427
GPR[EPVATF]-1659909677612
GPR[SPS]-1659909677612
[667828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659909678363
GPR[ESUN]-1659909678363
GPR[SSUN]-1659909678363
2433571
GPR[SPVATF]-1659909678611
GPR[EPVATF]-1659909679781
GPR[SPS]-1659909679781
[669862] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(140).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(140).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[669862] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659909680397
GPR[SSUN]-1659909680397
2433571
GPR[SPVATF]-1659909680662
GPR[EPVATF]-1659909681836
GPR[SPS]-1659909681836
[671897] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(141).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(141).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[671898] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659909682433
GPR[SSUN]-1659909682433
2433571
GPR[SPVATF]-1659909682679
GPR[EPVATF]-1659909683990
GPR[SPS]-1659909683991
[678530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659909689065
GPR[ESUN]-1659909689065
GPR[SSUN]-1659909689065
2433571
GPR[SPVATF]-1659909690198
GPR[EPVATF]-1659909692060
GPR[SPS]-1659909692060
[683627] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:966.
GPR[EPS]-1659909694162
GPR[ESUN]-1659909694162
GPR[SSUN]-1659909694162
2433571
GPR[SPVATF]-1659909694601
GPR[EPVATF]-1659909695401
GPR[SPS]-1659909695401
[685871] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659909696406
GPR[ESUN]-1659909696406
GPR[SSUN]-1659909696406
2433571
GPR[ESUN]-1659909696732
GPR[SSUN]-1659909696732
2433571
GPR[ESUN]-1659909697034
GPR[SSUN]-1659909697034
2433571
GPR[SPVATF]-1659909697342
GPR[EPVATF]-1659909698110
GPR[SPS]-1659909698110
[688507] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659909699042
GPR[ESUN]-1659909699042
GPR[SSUN]-1659909699042
2433571
GPR[SPVATF]-1659909699375
GPR[EPVATF]-1659909700128
GPR[SPS]-1659909700128
[690487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659909701022
GPR[ESUN]-1659909701022
GPR[SSUN]-1659909701022
2433571
GPR[SPVATF]-1659909701294
GPR[EPVATF]-1659909702083
GPR[SPS]-1659909702083
[692379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:868.
GPR[EPS]-1659909702914
GPR[ESUN]-1659909702914
GPR[SSUN]-1659909702914
2433571
GPR[SPVATF]-1659909703183
GPR[EPVATF]-1659909703915
GPR[SPS]-1659909703915
[694248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:867.
GPR[EPS]-1659909704783
GPR[ESUN]-1659909704783
GPR[SSUN]-1659909704784
2433571
GPR[SPVATF]-1659909705044
GPR[EPVATF]-1659909705770
GPR[SPS]-1659909705770
[696087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:862.
GPR[EPS]-1659909706622
GPR[ESUN]-1659909706622
GPR[SSUN]-1659909706622
2433571
GPR[ESUN]-1659909706884
GPR[SSUN]-1659909706884
2433571
GPR[ESUN]-1659909707140
GPR[SSUN]-1659909707140
2433571
GPR[ESUN]-1659909707395
GPR[SSUN]-1659909707395
881600600
GPR[ESUN]-1659909707600
GPR[SSUN]-1659909707600
-1765952779
GPR[ESUN]-1659909707856
GPR[SSUN]-1659909707856
-1765952779
GPR[ESUN]-1659909708199
GPR[SSUN]-1659909708199
-1765952779
GPR[SPVATF]-1659909708433
GPR[EPVATF]-1659909710181
GPR[SPS]-1659909710181
[700296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:298.
GPR[EPS]-1659909710831
GPR[ESUN]-1659909710832
GPR[SSUN]-1659909710832
-1765952779
GPR[ESUN]-1659909711062
GPR[SSUN]-1659909711062
-718432441
GPR[SPVATF]-1659909711285
GPR[EPVATF]-1659909712004
GPR[SPS]-1659909712004
[702265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:186.
GPR[EPS]-1659909712800
GPR[ESUN]-1659909712800
GPR[SSUN]-1659909712800
-718432441
GPR[SPVATF]-1659909713032
GPR[EPVATF]-1659909713759
GPR[SPS]-1659909713759
[704000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:185.
GPR[EPS]-1659909714535
GPR[ESUN]-1659909714535
GPR[SSUN]-1659909714535
-718432441
GPR[SPVATF]-1659909714763
GPR[EPVATF]-1659909715473
GPR[SPS]-1659909715473
[705719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:181.
GPR[EPS]-1659909716254
GPR[ESUN]-1659909716254
GPR[SSUN]-1659909716254
-718432441
GPR[SPVATF]-1659909716515
GPR[EPVATF]-1659909717240
GPR[SPS]-1659909717240
[707488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:180.
GPR[EPS]-1659909718023
GPR[ESUN]-1659909718023
GPR[SSUN]-1659909718023
-718432441
GPR[SPVATF]-1659909718247
GPR[EPVATF]-1659909719022
GPR[SPS]-1659909719022
[709261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:179.
GPR[EPS]-1659909719796
GPR[ESUN]-1659909719796
GPR[SSUN]-1659909719796
80988634
GPR[ESUN]-1659909719978
GPR[SSUN]-1659909719978
-1117079791
GPR[ESUN]-1659909720181
GPR[SSUN]-1659909720181
-1117079791
GPR[SPVATF]-1659909720381
GPR[EPVATF]-1659909721134
GPR[SPS]-1659909721134
[711205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:490.
GPR[EPS]-1659909721741
GPR[ESUN]-1659909721741
GPR[SSUN]-1659909721741
-1117079791
GPR[SPVATF]-1659909721948
GPR[EPVATF]-1659909722690
GPR[SPS]-1659909722690
[712760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:489.
GPR[EPS]-1659909723295
GPR[ESUN]-1659909723295
GPR[SSUN]-1659909723296
-1117079791
GPR[SPVATF]-1659909723506
GPR[EPVATF]-1659909724309
GPR[SPS]-1659909724309
[714364] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:488.
GPR[EPS]-1659909724900
GPR[ESUN]-1659909724900
GPR[SSUN]-1659909724900
-1117079791
GPR[ESUN]-1659909725107
GPR[SSUN]-1659909725107
-1117079791
GPR[SPVATF]-1659909725309
GPR[EPVATF]-1659909726092
GPR[SPS]-1659909726092
[716131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:131.
GPR[EPS]-1659909726666
GPR[ESUN]-1659909726666
GPR[SSUN]-1659909726666
1613130706
GPR[SPVATF]-1659909726889
GPR[EPVATF]-1659909727143
[716608] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909727143
GPR[EPVATF]-1659909727390
[716855] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909727390
GPR[SSUN]-1659909727390
1613130706
GPR[SPVATF]-1659909727610
GPR[EPVATF]-1659909727862
[717327] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909727862
GPR[SSUN]-1659909727862
2433571
GPR[SPVATF]-1659909728111
GPR[EPVATF]-1659909728906
GPR[SPS]-1659909728906
[719057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1019.
GPR[EPS]-1659909729592
GPR[ESUN]-1659909729593
GPR[SSUN]-1659909729593
2433571
GPR[SPVATF]-1659909729840
GPR[EPVATF]-1659909730666
GPR[SPS]-1659909730666
[720842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1012.
GPR[EPS]-1659909731377
GPR[ESUN]-1659909731377
GPR[SSUN]-1659909731377
-1119592721
GPR[SPVATF]-1659909731617
GPR[EPVATF]-1659909732559
GPR[SPS]-1659909732559
[722665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:399.
GPR[EPS]-1659909733200
GPR[SPVATF]-1659909733200
GPR[EPVATF]-1659909734072
GPR[SPS]-1659909734072
GPR[EPS]-1659909741256
GPR[ESUN]-1659909741256
GPR[SSUN]-1659909741256
-1119592721
GPR[ESUN]-1659909741510
GPR[SSUN]-1659909741510
-1119592721
GPR[ESUN]-1659909741743
GPR[SSUN]-1659909741743
2433571
GPR[ESUN]-1659909742039
GPR[SSUN]-1659909742039
2433571
GPR[ESUN]-1659909742285
GPR[SSUN]-1659909742285
2433571
GPR[SPVATF]-1659909742530
GPR[EPVATF]-1659909743468
GPR[SPS]-1659909743468
[733611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1016.
GPR[EPS]-1659909744146
GPR[ESUN]-1659909744146
GPR[SSUN]-1659909744146
2433571
GPR[SPVATF]-1659909744393
GPR[EPVATF]-1659909745386
GPR[SPS]-1659909745387
[735527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1015.
GPR[EPS]-1659909746062
GPR[ESUN]-1659909746062
GPR[SSUN]-1659909746062
2433571
GPR[SPVATF]-1659909746305
GPR[EPVATF]-1659909747346
GPR[SPS]-1659909747346
[737487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1014.
GPR[EPS]-1659909748022
GPR[ESUN]-1659909748022
GPR[SSUN]-1659909748022
2433571
GPR[SPVATF]-1659909748265
GPR[EPVATF]-1659909749297
GPR[SPS]-1659909749297
[739439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1011.
GPR[EPS]-1659909749974
GPR[ESUN]-1659909749974
GPR[SSUN]-1659909749974
2433571
GPR[ESUN]-1659909750222
GPR[SSUN]-1659909750222
2433571
GPR[SPVATF]-1659909750527
GPR[EPVATF]-1659909751629
GPR[SPS]-1659909751629
[741798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1006.
GPR[EPS]-1659909752333
GPR[ESUN]-1659909752333
GPR[SSUN]-1659909752333
2433571
GPR[ESUN]-1659909752579
GPR[SSUN]-1659909752579
2433571
GPR[SPVATF]-1659909752824
GPR[EPVATF]-1659909753948
GPR[SPS]-1659909753948
[744095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659909754630
GPR[ESUN]-1659909754630
GPR[SSUN]-1659909754630
2433571
GPR[ESUN]-1659909754875
GPR[SSUN]-1659909754875
2433571
GPR[ESUN]-1659909755123
GPR[SSUN]-1659909755123
-546582215
GPR[ESUN]-1659909755333
GPR[SSUN]-1659909755333
-546582215
GPR[SPVATF]-1659909755541
GPR[EPVATF]-1659909756681
GPR[SPS]-1659909756681
[746739] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:159.
GPR[EPS]-1659909757274
GPR[ESUN]-1659909757274
GPR[SSUN]-1659909757274
-546582215
GPR[SPVATF]-1659909757485
GPR[EPVATF]-1659909758642
GPR[SPS]-1659909758642
GPR[EPS]-1659909763865
GPR[ESUN]-1659909763865
GPR[SSUN]-1659909763865
-546582215
GPR[ESUN]-1659909764076
GPR[SSUN]-1659909764076
-546582215
GPR[ESUN]-1659909764285
GPR[SSUN]-1659909764285
-546582215
GPR[SPVATF]-1659909764497
GPR[EPVATF]-1659909765640
GPR[SPS]-1659909765640
[755760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:151.
GPR[EPS]-1659909766295
GPR[ESUN]-1659909766295
GPR[SSUN]-1659909766295
-546582215
GPR[SPVATF]-1659909766507
GPR[EPVATF]-1659909767655
GPR[SPS]-1659909767655
[757814] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:150.
GPR[EPS]-1659909768349
GPR[ESUN]-1659909768350
GPR[SSUN]-1659909768350
80988634
GPR[ESUN]-1659909768543
GPR[SSUN]-1659909768543
-1765952779
GPR[SPVATF]-1659909768765
GPR[EPVATF]-1659909769902
GPR[SPS]-1659909769902
[759993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:234.
GPR[EPS]-1659909770528
GPR[ESUN]-1659909770528
GPR[SSUN]-1659909770528
-1765952779
GPR[ESUN]-1659909770750
GPR[SSUN]-1659909770750
-1765952779
GPR[SPVATF]-1659909770971
GPR[EPVATF]-1659909772106
GPR[SPS]-1659909772107
[762199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:242.
GPR[EPS]-1659909772734
GPR[ESUN]-1659909772734
GPR[SSUN]-1659909772734
-1765952779
GPR[SPVATF]-1659909772961
GPR[EPVATF]-1659909774086
GPR[SPS]-1659909774086
[764187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:238.
GPR[EPS]-1659909774722
GPR[SPVATF]-1659909774722
GPR[EPVATF]-1659909775873
GPR[SPS]-1659909775873
[765962] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:238.
GPR[EPS]-1659909776497
GPR[ESUN]-1659909776497
GPR[SSUN]-1659909776497
-1765952779
GPR[SPVATF]-1659909776795
GPR[EPVATF]-1659909777957
GPR[SPS]-1659909777958
[768061] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:233.
GPR[EPS]-1659909778596
GPR[SPVATF]-1659909778597
GPR[EPVATF]-1659909779763
GPR[SPS]-1659909779763
[769859] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:233.
GPR[EPS]-1659909780394
GPR[ESUN]-1659909780394
GPR[SSUN]-1659909780394
-1765952779
GPR[ESUN]-1659909780621
GPR[SSUN]-1659909780621
2433571
GPR[SPVATF]-1659909780869
GPR[EPVATF]-1659909782039
GPR[SPS]-1659909782039
[772224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:937.
GPR[EPS]-1659909782759
GPR[ESUN]-1659909782759
GPR[SSUN]-1659909782760
2433571
GPR[SPVATF]-1659909783005
GPR[EPVATF]-1659909784169
GPR[SPS]-1659909784169
[774349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:936.
GPR[EPS]-1659909784884
GPR[ESUN]-1659909784884
GPR[SSUN]-1659909784884
160819208
GPR[SPVATF]-1659909785127
GPR[EPVATF]-1659909786297
GPR[SPS]-1659909786297
[776506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757.
GPR[EPS]-1659909787041
GPR[SPVATF]-1659909787041
GPR[EPVATF]-1659909788215
GPR[SPS]-1659909788215
[778343] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757.
GPR[EPS]-1659909788878
GPR[ESUN]-1659909788878
GPR[SSUN]-1659909788878
160819208
GPR[ESUN]-1659909789134
GPR[SSUN]-1659909789134
160819208
GPR[SPVATF]-1659909789386
GPR[EPVATF]-1659909790558
GPR[SPS]-1659909790558
[780704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:544.
GPR[EPS]-1659909791239
GPR[ESUN]-1659909791239
GPR[SSUN]-1659909791239
160819208
GPR[ESUN]-1659909791488
GPR[SSUN]-1659909791488
160819208
GPR[SPVATF]-1659909791740
GPR[EPVATF]-1659909792875
GPR[SPS]-1659909792875
[783028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:332.
GPR[EPS]-1659909793563
GPR[ESUN]-1659909793563
GPR[SSUN]-1659909793563
160819208
GPR[SPVATF]-1659909793820
GPR[EPVATF]-1659909794962
GPR[SPS]-1659909794962
[785105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:287.
GPR[EPS]-1659909795640
GPR[ESUN]-1659909795640
GPR[SSUN]-1659909795640
160819208
GPR[SPVATF]-1659909795973
GPR[EPVATF]-1659909797165
GPR[SPS]-1659909797165
[787294] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:286.
GPR[EPS]-1659909797829
GPR[ESUN]-1659909797829
GPR[SSUN]-1659909797829
160819208
GPR[SPVATF]-1659909798069
GPR[EPVATF]-1659909799233
GPR[SPS]-1659909799233
[789359] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285.
GPR[EPS]-1659909799894
GPR[SPVATF]-1659909799894
GPR[EPVATF]-1659909801044
GPR[SPS]-1659909801044
[791174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285.
GPR[EPS]-1659909801709
GPR[ESUN]-1659909801709
GPR[SSUN]-1659909801709
160819208
GPR[ESUN]-1659909801961
GPR[SSUN]-1659909801961
160819208
GPR[SPVATF]-1659909802202
GPR[EPVATF]-1659909803362
GPR[SPS]-1659909803362
[793481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:230.
GPR[EPS]-1659909804016
GPR[ESUN]-1659909804017
GPR[SSUN]-1659909804017
2433571
GPR[SPVATF]-1659909804261
GPR[EPVATF]-1659909805423
GPR[SPS]-1659909805423
[795698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:980.
GPR[EPS]-1659909806233
GPR[SPVATF]-1659909806233
GPR[EPVATF]-1659909807391
GPR[SPS]-1659909807391
[797586] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:980.
GPR[EPS]-1659909808121
GPR[ESUN]-1659909808121
GPR[SSUN]-1659909808121
2433571
GPR[SPVATF]-1659909808385
GPR[EPVATF]-1659909809559
GPR[SPS]-1659909809559
[799752] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659909810287
GPR[ESUN]-1659909810287
GPR[SSUN]-1659909810287
2433571
GPR[ESUN]-1659909810532
GPR[SSUN]-1659909810532
2433571
GPR[SPVATF]-1659909810776
GPR[EPVATF]-1659909812024
GPR[SPS]-1659909812025
[804899] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659909815434
GPR[SPVATF]-1659909815434
GPR[EPVATF]-1659909823221
GPR[SPS]-1659909823221
[814865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659909825400
GPR[ESUN]-1659909825401
GPR[SSUN]-1659909825401
2433571
GPR[ESUN]-1659909825836
GPR[SSUN]-1659909825836
2433571
GPR[ESUN]-1659909826173
GPR[SSUN]-1659909826173
2433571
GPR[ESUN]-1659909826497
GPR[SSUN]-1659909826497
2433571
GPR[SPVATF]-1659909826802
GPR[EPVATF]-1659909827557
GPR[SPS]-1659909827557
[817942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:871.
GPR[EPS]-1659909828478
GPR[ESUN]-1659909828478
GPR[SSUN]-1659909828478
2433571
GPR[SPVATF]-1659909828853
GPR[EPVATF]-1659909829584
GPR[SPS]-1659909829584
[819880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:866.
GPR[EPS]-1659909830415
GPR[ESUN]-1659909830415
GPR[SSUN]-1659909830415
2433571
GPR[ESUN]-1659909830684
GPR[SSUN]-1659909830684
2433571
GPR[SPVATF]-1659909830951
GPR[EPVATF]-1659909831709
GPR[SPS]-1659909831709
[822034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:861.
GPR[EPS]-1659909832569
GPR[ESUN]-1659909832569
GPR[SSUN]-1659909832569
2433571
GPR[ESUN]-1659909832828
GPR[SSUN]-1659909832828
-718432441
GPR[SPVATF]-1659909833059
GPR[EPVATF]-1659909833775
GPR[SPS]-1659909833775
[824055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:176.
GPR[EPS]-1659909834590
GPR[ESUN]-1659909834590
GPR[SSUN]-1659909834590
-718432441
GPR[SPVATF]-1659909834829
GPR[EPVATF]-1659909835566
GPR[SPS]-1659909835566
[825837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:175.
GPR[EPS]-1659909836372
GPR[ESUN]-1659909836372
GPR[SSUN]-1659909836372
-718432441
GPR[SPVATF]-1659909836604
GPR[EPVATF]-1659909837342
GPR[SPS]-1659909837342
[827640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:174.
GPR[EPS]-1659909838175
GPR[ESUN]-1659909838175
GPR[SSUN]-1659909838175
-718432441
GPR[SPVATF]-1659909838407
GPR[EPVATF]-1659909839148
GPR[SPS]-1659909839148
[829397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:173.
GPR[EPS]-1659909839932
GPR[ESUN]-1659909839932
GPR[SSUN]-1659909839932
-718432441
GPR[SPVATF]-1659909840163
GPR[EPVATF]-1659909840955
GPR[SPS]-1659909840955
[831203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:172.
GPR[EPS]-1659909841738
GPR[ESUN]-1659909841738
GPR[SSUN]-1659909841738
-718432441
GPR[SPVATF]-1659909841968
GPR[EPVATF]-1659909842709
GPR[SPS]-1659909842709
[832963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:171.
GPR[EPS]-1659909843498
GPR[ESUN]-1659909843498
GPR[SSUN]-1659909843498
-718432441
GPR[SPVATF]-1659909843730
GPR[EPVATF]-1659909844481
GPR[SPS]-1659909844481
[834766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:160.
GPR[EPS]-1659909845301
GPR[ESUN]-1659909845301
GPR[SSUN]-1659909845301
160819208
GPR[SPVATF]-1659909845570
GPR[EPVATF]-1659909846314
GPR[SPS]-1659909846314
[836467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750.
GPR[EPS]-1659909847002
GPR[SPVATF]-1659909847003
GPR[EPVATF]-1659909847760
GPR[SPS]-1659909847760
[837917] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750.
GPR[EPS]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
GPR[ESUN]-1659909848452
GPR[SSUN]-1659909848452
1537627151
GPR[ESUN]-1659909848674
GPR[SSUN]-1659909848675
-1345859678
GPR[ESUN]-1659909848978
GPR[SSUN]-1659909848978
-1345859678
GPR[ESUN]-1659909849251
GPR[SSUN]-1659909849251
GPR[ESUN]-1659909849251
GPR[SSUN]-1659909849251
GPR[ESUN]-1659909849251
GPR[SSUN]-1659909849251
GPR[ESUN]-1659909849251
GPR[SSUN]-1659909849251
GPR[ESUN]-1659909849251
GPR[SSUN]-1659909849251
GPR[ESUN]-1659909849251
GPR[SSUN]-1659909849251
1187751237
GPR[ESUN]-1659909849569
GPR[SSUN]-1659909849569
1187751237
GPR[SPVATF]-1659909849875
GPR[EPVATF]-1659909850638
GPR[SPS]-1659909850638
[841019] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2780.
GPR[EPS]-1659909851554
GPR[ESUN]-1659909851554
GPR[SSUN]-1659909851554
1187751237
GPR[ESUN]-1659909851895
GPR[SSUN]-1659909851895
1187751237
GPR[SPVATF]-1659909852201
GPR[EPVATF]-1659909853017
GPR[SPS]-1659909853017
[843316] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2771.
GPR[EPS]-1659909853851
GPR[ESUN]-1659909853851
GPR[SSUN]-1659909853851
80988634
GPR[ESUN]-1659909854032
GPR[SSUN]-1659909854032
2433571
GPR[SPVATF]-1659909854282
GPR[EPVATF]-1659909855058
GPR[SPS]-1659909855058
[845299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:948.
GPR[EPS]-1659909855835
GPR[SPVATF]-1659909855835
GPR[EPVATF]-1659909856647
GPR[SPS]-1659909856647
[846998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:948.
GPR[EPS]-1659909857533
GPR[ESUN]-1659909857533
GPR[SSUN]-1659909857533
-128675625
GPR[SPVATF]-1659909857783
GPR[EPVATF]-1659909858682
GPR[SPS]-1659909858682
[848825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:282.
GPR[EPS]-1659909859360
GPR[SPVATF]-1659909859360
GPR[EPVATF]-1659909860198
GPR[SPS]-1659909860198
GPR[EPS]-1659909871748
GPR[ESUN]-1659909871749
GPR[SSUN]-1659909871749
-128675625
GPR[ESUN]-1659909872001
GPR[SSUN]-1659909872001
-1119592721
GPR[ESUN]-1659909872240
GPR[SSUN]-1659909872240
-128675625
GPR[SPVATF]-1659909872483
GPR[EPVATF]-1659909873350
GPR[SPS]-1659909873350
GPR[EPS]-1659909881634
GPR[ESUN]-1659909881634
GPR[SSUN]-1659909881634
-128675625
GPR[ESUN]-1659909881888
GPR[SSUN]-1659909881888
-128675625
GPR[SPVATF]-1659909882136
GPR[EPVATF]-1659909883102
GPR[SPS]-1659909883102
GPR[EPS]-1659909891844
GPR[SPVATF]-1659909891844
GPR[EPVATF]-1659909892863
GPR[SPS]-1659909892863
GPR[EPS]-1659909910400
GPR[ESUN]-1659909910400
GPR[SSUN]-1659909910400
-1119592721
GPR[SPVATF]-1659909910640
GPR[EPVATF]-1659909911723
GPR[SPS]-1659909911723
[901844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:286.
GPR[EPS]-1659909912379
GPR[ESUN]-1659909912379
GPR[SSUN]-1659909912379
-1119592721
GPR[SPVATF]-1659909912616
GPR[EPVATF]-1659909913726
GPR[SPS]-1659909913726
GPR[EPS]-1659909915772
GPR[SPVATR]-1659909915772
[905237] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:284: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[905587] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659909917097
[906562] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659909917097
[906569] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -283,4 +283,6 @@
             computeMustDef(name.getNext(), cfgNode, output, conditional);
-            addToDefIfLocal(name.getString(), conditional ? null : cfgNode,
+            if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+              addToDefIfLocal(name.getString(), conditional ? null : cfgNode,
               n.getLastChild(), output);
+            }
             return;

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_901982_3ts_1659909917104.diff
GPR[ESUN]-1659909917105
GPR[SSUN]-1659909917105
-1119592721
GPR[SPVATF]-1659909917351
GPR[EPVATF]-1659909918520
GPR[SPS]-1659909918520
[908647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:283.
GPR[EPS]-1659909919182
GPR[ESUN]-1659909919182
GPR[SSUN]-1659909919182
-1119592721
GPR[ESUN]-1659909919426
GPR[SSUN]-1659909919426
-1117079791
GPR[ESUN]-1659909919626
GPR[SSUN]-1659909919626
-1117079791
GPR[SPVATF]-1659909919828
GPR[EPVATF]-1659909921003
GPR[SPS]-1659909921003
[911166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:541.
GPR[EPS]-1659909921701
GPR[ESUN]-1659909921701
GPR[SSUN]-1659909921701
-1117079791
GPR[SPVATF]-1659909921908
GPR[EPVATF]-1659909923074
GPR[SPS]-1659909923074
[913150] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:540.
GPR[EPS]-1659909923685
GPR[ESUN]-1659909923685
GPR[SSUN]-1659909923685
-1117079791
GPR[SPVATF]-1659909923893
GPR[EPVATF]-1659909925070
GPR[SPS]-1659909925070
[915133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:539.
GPR[EPS]-1659909925668
GPR[ESUN]-1659909925668
GPR[SSUN]-1659909925668
-1117079791
GPR[SPVATF]-1659909925871
GPR[EPVATF]-1659909927062
GPR[SPS]-1659909927062
[917123] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:538.
GPR[EPS]-1659909927658
GPR[ESUN]-1659909927659
GPR[SSUN]-1659909927659
-1117079791
GPR[SPVATF]-1659909927868
GPR[EPVATF]-1659909929009
GPR[SPS]-1659909929009
[919058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:523.
GPR[EPS]-1659909929593
GPR[ESUN]-1659909929593
GPR[SSUN]-1659909929593
-1117079791
GPR[SPVATF]-1659909929796
GPR[EPVATF]-1659909930946
GPR[SPS]-1659909930946
[921000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:522.
GPR[EPS]-1659909931535
GPR[ESUN]-1659909931535
GPR[SSUN]-1659909931535
-718432441
GPR[SPVATF]-1659909931769
GPR[EPVATF]-1659909933028
GPR[SPS]-1659909933028
[923274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:163.
GPR[EPS]-1659909933809
GPR[SPVATF]-1659909933809
GPR[EPVATF]-1659909934964
GPR[SPS]-1659909934964
[925204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:163.
GPR[EPS]-1659909935739
GPR[ESUN]-1659909935739
GPR[SSUN]-1659909935739
-718432441
GPR[SPVATF]-1659909935967
GPR[EPVATF]-1659909937151
GPR[SPS]-1659909937151
[927420] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:159.
GPR[EPS]-1659909937955
GPR[SPVATF]-1659909937955
GPR[EPVATF]-1659909939104
GPR[SPS]-1659909939104
[929354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:159.
GPR[EPS]-1659909939889
GPR[ESUN]-1659909939889
GPR[SSUN]-1659909939889
-718432441
GPR[ESUN]-1659909940148
GPR[SSUN]-1659909940148
-718432441
GPR[SPVATF]-1659909940379
GPR[EPVATF]-1659909942802
GPR[SPS]-1659909942802
[933041] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:154.
GPR[EPS]-1659909943576
GPR[ESUN]-1659909943576
GPR[SSUN]-1659909943576
-718432441
GPR[SPVATF]-1659909943815
GPR[EPVATF]-1659909944950
GPR[SPS]-1659909944950
[935165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:153.
GPR[EPS]-1659909945700
GPR[ESUN]-1659909945701
GPR[SSUN]-1659909945701
-718432441
GPR[SPVATF]-1659909945923
GPR[EPVATF]-1659909947061
GPR[SPS]-1659909947061
[937281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:151.
GPR[EPS]-1659909947816
GPR[ESUN]-1659909947816
GPR[SSUN]-1659909947816
-718432441
GPR[SPVATF]-1659909948041
GPR[EPVATF]-1659909949176
GPR[SPS]-1659909949176
[939399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:149.
GPR[EPS]-1659909949934
GPR[ESUN]-1659909949934
GPR[SSUN]-1659909949934
-1119592721
GPR[SPVATF]-1659909950200
GPR[EPVATF]-1659909951320
GPR[SPS]-1659909951320
[941434] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:434.
GPR[EPS]-1659909951969
GPR[ESUN]-1659909951969
GPR[SSUN]-1659909951969
1187751237
GPR[ESUN]-1659909952264
GPR[SSUN]-1659909952264
1187751237
GPR[SPVATF]-1659909952564
GPR[EPVATF]-1659909953697
GPR[SPS]-1659909953697
[944076] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2762.
GPR[EPS]-1659909954611
GPR[ESUN]-1659909954611
GPR[SSUN]-1659909954611
2433571
GPR[SPVATF]-1659909954860
GPR[EPVATF]-1659909955987
GPR[SPS]-1659909955987
[946174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:938.
GPR[EPS]-1659909956709
GPR[SPVATF]-1659909956709
GPR[EPVATF]-1659909957844
GPR[SPS]-1659909957844
[948062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:938.
GPR[EPS]-1659909958597
GPR[ESUN]-1659909958598
GPR[SSUN]-1659909958598
80988634
GPR[ESUN]-1659909958787
GPR[SSUN]-1659909958787
2433571
GPR[ESUN]-1659909959037
GPR[SSUN]-1659909959037
2433571
GPR[SPVATF]-1659909959282
GPR[EPVATF]-1659909960435
GPR[SPS]-1659909960435
[950619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659909961154
GPR[SPVATF]-1659909961154
GPR[EPVATF]-1659909962323
GPR[SPS]-1659909962323
[952514] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659909963049
GPR[ESUN]-1659909963050
GPR[SSUN]-1659909963050
2433571
GPR[SPVATF]-1659909963304
GPR[EPVATF]-1659909964485
GPR[SPS]-1659909964485
[954685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659909965220
GPR[SPVATF]-1659909965221
GPR[EPVATF]-1659909966366
GPR[SPS]-1659909966366
[956582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659909967117
GPR[ESUN]-1659909967117
GPR[SSUN]-1659909967117
2433571
GPR[SPVATF]-1659909967367
GPR[EPVATF]-1659909968488
GPR[SPS]-1659909968488
[960203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:952.
GPR[EPS]-1659909970739
GPR[SPVATF]-1659909970739
GPR[EPVATF]-1659909972712
GPR[SPS]-1659909972712
[964217] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:952.
GPR[EPS]-1659909974752
GPR[ESUN]-1659909974753
GPR[SSUN]-1659909974753
2433571
GPR[SPVATF]-1659909975142
GPR[EPVATF]-1659909975915
GPR[SPS]-1659909975915
[966356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:935.
GPR[EPS]-1659909976891
GPR[SPVATF]-1659909976891
GPR[EPVATF]-1659909977631
GPR[SPS]-1659909977631
[968241] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:935.
GPR[EPS]-1659909978776
GPR[ESUN]-1659909978776
GPR[SSUN]-1659909978776
2433571
GPR[SPVATF]-1659909979068
GPR[EPVATF]-1659909979823
GPR[SPS]-1659909979823
[970147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:934.
GPR[EPS]-1659909980683
GPR[ESUN]-1659909980683
GPR[SSUN]-1659909980683
2433571
GPR[ESUN]-1659909980964
GPR[SSUN]-1659909980965
2433571
GPR[SPVATF]-1659909981239
GPR[EPVATF]-1659909981984
GPR[SPS]-1659909981984
[972268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:925.
GPR[EPS]-1659909982803
GPR[ESUN]-1659909982803
GPR[SSUN]-1659909982804
2433571
GPR[ESUN]-1659909983072
GPR[SSUN]-1659909983072
1613130706
GPR[SPVATF]-1659909983331
GPR[EPVATF]-1659909983630
[973095] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909983630
GPR[EPVATF]-1659909983882
[973348] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909983883
GPR[SSUN]-1659909983883
1613130706
GPR[SPVATF]-1659909984113
GPR[EPVATF]-1659909984372
[973837] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909984372
GPR[EPVATF]-1659909984629
[974094] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909984629
GPR[SSUN]-1659909984629
1613130706
GPR[ESUN]-1659909984854
GPR[SSUN]-1659909984854
1613130706
GPR[ESUN]-1659909985078
GPR[SSUN]-1659909985078
1613130706
GPR[ESUN]-1659909985300
GPR[SSUN]-1659909985300
1613130706
GPR[ESUN]-1659909985529
GPR[SSUN]-1659909985529
1613130706
GPR[SPVATF]-1659909985752
GPR[EPVATF]-1659909986013
[975479] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659909986014
GPR[EPVATF]-1659909986348
[975813] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659909986348
GPR[SSUN]-1659909986348
-1119592721
GPR[ESUN]-1659909986727
GPR[SSUN]-1659909986727
-1119592721
GPR[SPVATF]-1659909987337
GPR[EPVATF]-1659909988073
GPR[SPS]-1659909988073
[978225] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:430.
GPR[EPS]-1659909988760
GPR[SPVATF]-1659909988761
GPR[EPVATF]-1659909989492
GPR[SPS]-1659909989492
GPR[EPS]-1659909991592
GPR[SPVATR]-1659909991592
[981057] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:430: CONDITIONAL (def!=null) && ((def.unknownDependencies) || (!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())))
[981420] INFO TestPatch - Running test suite to check the patch "(def!=null) && ((def.unknownDependencies) || (!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())))" is working
GPR[EPVATR]-1659909992881
[982347] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659909992882
[982353] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -429,3 +429,3 @@
   boolean dependsOnOuterScopeVars(Definition def) {
-    if (def.unknownDependencies) {
+    if ((def!=null) && ((def.unknownDependencies) || (!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())))) {
       return true;

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_977766_4ts_1659909992888.diff
GPR[ESUN]-1659909992889
GPR[SSUN]-1659909992889
-128675625
GPR[SPVATF]-1659909993159
GPR[EPVATF]-1659909993958
GPR[SPS]-1659909993958
[984106] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:224.
GPR[EPS]-1659909994641
GPR[ESUN]-1659909994641
GPR[SSUN]-1659909994641
-1119592721
GPR[SPVATF]-1659909994886
GPR[EPVATF]-1659909995686
GPR[SPS]-1659909995686
GPR[EPS]-1659909997594
GPR[SPVATR]-1659909997594
[987059] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:281: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[987415] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659909998951
[988416] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659909998951
[988419] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -280,17 +280,19 @@
         if (NodeUtil.isAssignmentOp(n)) {
-          if (n.getFirstChild().isName()) {
-            Node name = n.getFirstChild();
-            computeMustDef(name.getNext(), cfgNode, output, conditional);
-            addToDefIfLocal(name.getString(), conditional ? null : cfgNode,
+          if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+            if (n.getFirstChild().isName()) {
+              Node name = n.getFirstChild();
+              computeMustDef(name.getNext(), cfgNode, output, conditional);
+              addToDefIfLocal(name.getString(), conditional ? null : cfgNode,
               n.getLastChild(), output);
-            return;
-          } else if (NodeUtil.isGet(n.getFirstChild())) {
-            // Treat all assignments to arguments as redefining the
-            // parameters itself.
-            Node obj = n.getFirstChild().getFirstChild();
-            if (obj.isName() && "arguments".equals(obj.getString())) {
-              // TODO(user): More accuracy can be introduced
-              // i.e. We know exactly what arguments[x] is if x is a constant
-              // number.
-              escapeParameters(output);
+              return;
+            } else if (NodeUtil.isGet(n.getFirstChild())) {
+              // Treat all assignments to arguments as redefining the
+              // parameters itself.
+              Node obj = n.getFirstChild().getFirstChild();
+              if (obj.isName() && "arguments".equals(obj.getString())) {
+                // TODO(user): More accuracy can be introduced
+                // i.e. We know exactly what arguments[x] is if x is a constant
+                // number.
+                escapeParameters(output);
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_983832_5ts_1659909998954.diff
GPR[SPVATF]-1659909998955
GPR[EPVATF]-1659909999753
GPR[SPS]-1659909999753
GPR[EPS]-1659910007004
GPR[ESUN]-1659910007004
GPR[SSUN]-1659910007004
-1765952779
GPR[SPVATF]-1659910007243
GPR[EPVATF]-1659910008058
GPR[SPS]-1659910008058
[998243] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:264.
GPR[EPS]-1659910008778
GPR[ESUN]-1659910008778
GPR[SSUN]-1659910008778
-1117079791
GPR[ESUN]-1659910008989
GPR[SSUN]-1659910008989
-1117079791
GPR[SPVATF]-1659910009217
GPR[EPVATF]-1659910010062
GPR[SPS]-1659910010062
[1000121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:532.
GPR[EPS]-1659910010656
GPR[SPVATF]-1659910010656
GPR[EPVATF]-1659910011540
GPR[SPS]-1659910011540
[1001592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:532.
GPR[EPS]-1659910012127
GPR[ESUN]-1659910012127
GPR[SSUN]-1659910012127
-1117079791
GPR[SPVATF]-1659910012337
GPR[EPVATF]-1659910013217
GPR[SPS]-1659910013217
[1003272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:527.
GPR[EPS]-1659910013807
GPR[SPVATF]-1659910013807
GPR[EPVATF]-1659910014714
GPR[SPS]-1659910014714
[1004874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:527.
GPR[EPS]-1659910015409
GPR[ESUN]-1659910015409
GPR[SSUN]-1659910015410
-1117079791
GPR[SPVATF]-1659910015617
GPR[EPVATF]-1659910016538
GPR[SPS]-1659910016538
[1006583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:521.
GPR[EPS]-1659910017118
GPR[SPVATF]-1659910017118
GPR[EPVATF]-1659910018091
GPR[SPS]-1659910018091
[1008135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:521.
GPR[EPS]-1659910018670
GPR[ESUN]-1659910018670
GPR[SSUN]-1659910018670
-1117079791
GPR[SPVATF]-1659910018881
GPR[EPVATF]-1659910019973
GPR[SPS]-1659910019973
[1010046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:520.
GPR[EPS]-1659910020581
GPR[ESUN]-1659910020581
GPR[SSUN]-1659910020581
-1117079791
GPR[SPVATF]-1659910020785
GPR[EPVATF]-1659910021819
GPR[SPS]-1659910021819
[1011880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:519.
GPR[EPS]-1659910022415
GPR[ESUN]-1659910022415
GPR[SSUN]-1659910022415
-1117079791
GPR[ESUN]-1659910022640
GPR[SSUN]-1659910022640
-1117079791
GPR[ESUN]-1659910022842
GPR[SSUN]-1659910022842
-1117079791
GPR[SPVATF]-1659910023047
GPR[EPVATF]-1659910024143
GPR[SPS]-1659910024143
[1014216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:513.
GPR[EPS]-1659910024751
GPR[ESUN]-1659910024751
GPR[SSUN]-1659910024751
-1117079791
GPR[SPVATF]-1659910024959
GPR[EPVATF]-1659910026073
GPR[SPS]-1659910026073
[1016145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:512.
GPR[EPS]-1659910026680
GPR[ESUN]-1659910026680
GPR[SSUN]-1659910026680
-1117079791
GPR[SPVATF]-1659910026886
GPR[EPVATF]-1659910028100
GPR[SPS]-1659910028100
[1018165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:511.
GPR[EPS]-1659910028700
GPR[ESUN]-1659910028700
GPR[SSUN]-1659910028700
-1117079791
GPR[SPVATF]-1659910028904
GPR[EPVATF]-1659910030089
GPR[SPS]-1659910030089
[1020262] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:510.
GPR[EPS]-1659910030797
GPR[ESUN]-1659910030797
GPR[SSUN]-1659910030797
-1117079791
GPR[ESUN]-1659910031002
GPR[SSUN]-1659910031002
-1117079791
GPR[SPVATF]-1659910031210
GPR[EPVATF]-1659910032371
GPR[SPS]-1659910032371
[1022432] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:134.
GPR[EPS]-1659910032967
GPR[ESUN]-1659910032967
GPR[SSUN]-1659910032967
-1966087783
GPR[ESUN]-1659910033172
GPR[SSUN]-1659910033172
-1966087783
GPR[SPVATF]-1659910033372
GPR[EPVATF]-1659910033453
[1022918] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910033454
GPR[EPVATF]-1659910033531
[1022996] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910033531
GPR[SSUN]-1659910033531
-1966087783
GPR[SPVATF]-1659910033729
GPR[EPVATF]-1659910033811
[1023276] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910033812
GPR[SSUN]-1659910033812
1187751237
GPR[SPVATF]-1659910034122
GPR[EPVATF]-1659910035288
GPR[SPS]-1659910035288
[1025603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1650.
GPR[EPS]-1659910036138
GPR[ESUN]-1659910036138
GPR[SSUN]-1659910036138
-1765952779
GPR[SPVATF]-1659910036365
GPR[EPVATF]-1659910037576
GPR[SPS]-1659910037576
[1027712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:282.
GPR[EPS]-1659910038247
GPR[ESUN]-1659910038247
GPR[SSUN]-1659910038247
1613130706
GPR[SPVATF]-1659910038469
GPR[EPVATF]-1659910038767
[1028232] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910038767
GPR[SSUN]-1659910038767
1613130706
GPR[ESUN]-1659910039003
GPR[SSUN]-1659910039003
1613130706
GPR[SPVATF]-1659910039224
GPR[EPVATF]-1659910039514
[1028979] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910039514
GPR[EPVATF]-1659910039799
[1029264] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910039799
GPR[SSUN]-1659910039799
1613130706
GPR[ESUN]-1659910040126
GPR[SSUN]-1659910040126
1613130706
GPR[SPVATF]-1659910040352
GPR[EPVATF]-1659910040648
[1030113] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910040648
GPR[EPVATF]-1659910040936
[1030401] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910040936
GPR[SSUN]-1659910040936
-1765952779
GPR[ESUN]-1659910041167
GPR[SSUN]-1659910041167
-1765952779
GPR[SPVATF]-1659910041397
GPR[EPVATF]-1659910042580
GPR[SPS]-1659910042580
[1032698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:222.
GPR[EPS]-1659910043233
GPR[SPVATF]-1659910043233
GPR[EPVATF]-1659910044433
GPR[SPS]-1659910044433
[1034561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:222.
GPR[EPS]-1659910045096
GPR[ESUN]-1659910045096
GPR[SSUN]-1659910045096
-1765952779
GPR[SPVATF]-1659910045327
GPR[EPVATF]-1659910046507
GPR[SPS]-1659910046507
[1036628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:220.
GPR[EPS]-1659910047163
GPR[ESUN]-1659910047163
GPR[SSUN]-1659910047163
-1765952779
GPR[ESUN]-1659910047390
GPR[SSUN]-1659910047390
-1765952779
GPR[ESUN]-1659910047619
GPR[SSUN]-1659910047619
-1765952779
GPR[SPVATF]-1659910047844
GPR[EPVATF]-1659910049015
GPR[SPS]-1659910049015
[1039128] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:281.
GPR[EPS]-1659910049663
GPR[SPVATF]-1659910049664
GPR[EPVATF]-1659910050942
GPR[SPS]-1659910050942
[1041103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:281.
GPR[EPS]-1659910051638
GPR[ESUN]-1659910051638
GPR[SSUN]-1659910051638
-1765952779
GPR[SPVATF]-1659910051871
GPR[EPVATF]-1659910053059
GPR[SPS]-1659910053059
[1043181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:278.
GPR[EPS]-1659910053716
GPR[SPVATF]-1659910053716
GPR[EPVATF]-1659910054891
GPR[SPS]-1659910054891
[1045013] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:278.
GPR[EPS]-1659910055548
GPR[ESUN]-1659910055548
GPR[SSUN]-1659910055548
-1765952779
GPR[ESUN]-1659910055781
GPR[SSUN]-1659910055781
-128675625
GPR[SPVATF]-1659910056040
GPR[EPVATF]-1659910057218
GPR[SPS]-1659910057218
GPR[EPS]-1659910071041
GPR[SPVATF]-1659910071041
GPR[EPVATF]-1659910072222
GPR[SPS]-1659910072222
GPR[EPS]-1659910078312
GPR[ESUN]-1659910078312
GPR[SSUN]-1659910078312
-128675625
GPR[ESUN]-1659910078672
GPR[SSUN]-1659910078672
-128675625
GPR[SPVATF]-1659910078935
GPR[EPVATF]-1659910080096
GPR[SPS]-1659910080096
[1070330] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:228.
GPR[EPS]-1659910080865
GPR[SPVATF]-1659910080865
GPR[EPVATF]-1659910082038
GPR[SPS]-1659910082038
GPR[EPS]-1659910098600
GPR[ESUN]-1659910098600
GPR[SSUN]-1659910098600
-128675625
GPR[ESUN]-1659910098870
GPR[SSUN]-1659910098870
1852376448
GPR[SPVATF]-1659910099103
GPR[EPVATF]-1659910100259
GPR[SPS]-1659910100259
[1090468] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:158.
GPR[EPS]-1659910101003
GPR[ESUN]-1659910101003
GPR[SSUN]-1659910101003
-1119592721
GPR[ESUN]-1659910101249
GPR[SSUN]-1659910101249
-1119592721
GPR[SPVATF]-1659910101516
GPR[EPVATF]-1659910102673
GPR[SPS]-1659910102673
[1092828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:397.
GPR[EPS]-1659910103363
GPR[SPVATF]-1659910103363
GPR[EPVATF]-1659910104547
GPR[SPS]-1659910104547
[1094720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:397.
GPR[EPS]-1659910105255
GPR[ESUN]-1659910105255
GPR[SSUN]-1659910105255
-1119592721
GPR[ESUN]-1659910105499
GPR[SSUN]-1659910105499
-1119592721
GPR[SPVATF]-1659910105747
GPR[EPVATF]-1659910106940
GPR[SPS]-1659910106940
[1097080] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:393.
GPR[EPS]-1659910107615
GPR[ESUN]-1659910107615
GPR[SSUN]-1659910107615
-1119592721
GPR[SPVATF]-1659910107860
GPR[EPVATF]-1659910109019
GPR[SPS]-1659910109019
[1099156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:353.
GPR[EPS]-1659910109691
GPR[ESUN]-1659910109691
GPR[SSUN]-1659910109691
-1119592721
GPR[ESUN]-1659910109934
GPR[SSUN]-1659910109934
-1119592721
GPR[SPVATF]-1659910110177
GPR[EPVATF]-1659910111427
GPR[SPS]-1659910111427
[1101561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:271.
GPR[EPS]-1659910112096
GPR[SPVATF]-1659910112096
GPR[EPVATF]-1659910113284
GPR[SPS]-1659910113284
[1105093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:271.
GPR[EPS]-1659910115628
GPR[ESUN]-1659910115629
GPR[SSUN]-1659910115629
-1119592721
GPR[SPVATF]-1659910116908
GPR[EPVATF]-1659910125443
GPR[SPS]-1659910125443
[1116574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:270.
GPR[EPS]-1659910127110
GPR[ESUN]-1659910127110
GPR[SSUN]-1659910127110
-1119592721
GPR[SPVATF]-1659910127503
GPR[EPVATF]-1659910128366
GPR[SPS]-1659910128366
GPR[EPS]-1659910130672
GPR[SPVATR]-1659910130672
[1120137] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:355: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1120608] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659910132133
[1121598] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910132133
[1121604] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -354,3 +354,5 @@
         }
-        def.reachingDef.put(var, definition);
+        if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+          def.reachingDef.put(var, definition);
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1117018_6ts_1659910132140.diff
GPR[ESUN]-1659910132141
GPR[SSUN]-1659910132141
-1119592721
GPR[SPVATF]-1659910132451
GPR[EPVATF]-1659910133296
GPR[SPS]-1659910133296
[1123603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:352.
GPR[EPS]-1659910134138
GPR[SPVATF]-1659910134138
GPR[EPVATF]-1659910134913
GPR[SPS]-1659910134913
[1125211] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:352.
GPR[EPS]-1659910135746
GPR[ESUN]-1659910135746
GPR[SSUN]-1659910135746
-1119592721
GPR[ESUN]-1659910136016
GPR[SSUN]-1659910136016
-1119592721
GPR[SPVATF]-1659910136284
GPR[EPVATF]-1659910137071
GPR[SPS]-1659910137071
GPR[EPS]-1659910139233
GPR[SPVATR]-1659910139234
[1128699] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:348: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1129119] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659910140565
[1130030] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910140565
[1130034] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -347,10 +347,12 @@
     if (!escaped.contains(var)) {
-      if (node == null) {
-        def.reachingDef.put(var, null);
-      } else {
-        Definition definition = new Definition(node);
-        if (rValue != null) {
-          computeDependence(definition, rValue);
+      if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+        if (node == null) {
+          def.reachingDef.put(var, null);
+        } else {
+          Definition definition = new Definition(node);
+          if (rValue != null) {
+            computeDependence(definition, rValue);
+          }
+          def.reachingDef.put(var, definition);
         }
-        def.reachingDef.put(var, definition);
       }

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1125447_7ts_1659910140569.diff
GPR[SPVATF]-1659910140569
GPR[EPVATF]-1659910141392
GPR[SPS]-1659910141392
GPR[EPS]-1659910143538
GPR[SPVATR]-1659910143538
[1133004] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:348: CONDITIONAL (!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())) || (node == null)
[1133400] INFO TestPatch - Running test suite to check the patch "(!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())) || (node == null)" is working
GPR[EPVATR]-1659910144886
[1134351] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910144887
[1134355] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -347,3 +347,3 @@
     if (!escaped.contains(var)) {
-      if (node == null) {
+      if ((!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())) || (node == null)) {
         def.reachingDef.put(var, null);

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1129768_8ts_1659910144890.diff
GPR[ESUN]-1659910144890
GPR[SSUN]-1659910144890
-128675625
GPR[SPVATF]-1659910145182
GPR[EPVATF]-1659910145981
GPR[SPS]-1659910145981
[1136185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:221.
GPR[EPS]-1659910146721
GPR[SPVATF]-1659910146721
GPR[EPVATF]-1659910147511
GPR[SPS]-1659910147511
GPR[EPS]-1659910154069
GPR[ESUN]-1659910154069
GPR[SSUN]-1659910154069
-128675625
GPR[SPVATF]-1659910154338
GPR[EPVATF]-1659910155161
GPR[SPS]-1659910155161
[1145347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:216.
GPR[EPS]-1659910155882
GPR[SPVATF]-1659910155882
GPR[EPVATF]-1659910156706
GPR[SPS]-1659910156706
GPR[EPS]-1659910163993
GPR[ESUN]-1659910163994
GPR[SSUN]-1659910163994
160819208
GPR[SPVATF]-1659910164262
GPR[EPVATF]-1659910165153
GPR[SPS]-1659910165153
[1155371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:515.
GPR[EPS]-1659910165906
GPR[ESUN]-1659910165906
GPR[SSUN]-1659910165906
-1765952779
GPR[SPVATF]-1659910166139
GPR[EPVATF]-1659910167028
GPR[SPS]-1659910167028
GPR[EPS]-1659910181058
GPR[ESUN]-1659910181059
GPR[SSUN]-1659910181059
-1119592721
GPR[ESUN]-1659910181312
GPR[SSUN]-1659910181312
-1119592721
GPR[SPVATF]-1659910181560
GPR[EPVATF]-1659910182477
GPR[SPS]-1659910182477
GPR[EPS]-1659910184573
GPR[SPVATR]-1659910184573
[1174038] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:347: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1174392] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659910185937
[1175402] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910185937
[1175405] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -346,11 +346,13 @@
 
-    if (!escaped.contains(var)) {
-      if (node == null) {
-        def.reachingDef.put(var, null);
-      } else {
-        Definition definition = new Definition(node);
-        if (rValue != null) {
-          computeDependence(definition, rValue);
+    if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+      if (!escaped.contains(var)) {
+        if (node == null) {
+          def.reachingDef.put(var, null);
+        } else {
+          Definition definition = new Definition(node);
+          if (rValue != null) {
+            computeDependence(definition, rValue);
+          }
+          def.reachingDef.put(var, definition);
         }
-        def.reachingDef.put(var, definition);
       }

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1170818_9ts_1659910185940.diff
GPR[SPVATF]-1659910185941
GPR[EPVATF]-1659910186972
GPR[SPS]-1659910186972
GPR[EPS]-1659910189147
GPR[SPVATR]-1659910189147
[1178612] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:347: CONDITIONAL com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1178969] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659910190592
[1180057] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910190593
[1180060] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -346,3 +346,3 @@
 
-    if (!escaped.contains(var)) {
+    if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
       if (node == null) {

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1175473_10ts_1659910190595.diff
GPR[ESUN]-1659910190596
GPR[SSUN]-1659910190596
-1119592721
GPR[ESUN]-1659910190851
GPR[SSUN]-1659910190851
-1119592721
GPR[SPVATF]-1659910191097
GPR[EPVATF]-1659910192304
GPR[SPS]-1659910192304
[1182467] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:342.
GPR[EPS]-1659910193002
GPR[SPVATF]-1659910193003
GPR[EPVATF]-1659910194170
GPR[SPS]-1659910194170
[1184326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:342.
GPR[EPS]-1659910194861
GPR[ESUN]-1659910194862
GPR[SSUN]-1659910194862
-1119592721
GPR[SPVATF]-1659910195111
GPR[EPVATF]-1659910196321
GPR[SPS]-1659910196321
[1186479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:339.
GPR[EPS]-1659910197015
GPR[SPVATF]-1659910197015
GPR[EPVATF]-1659910198324
GPR[SPS]-1659910198324
[1188475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:339.
GPR[EPS]-1659910199011
GPR[ESUN]-1659910199011
GPR[SSUN]-1659910199011
-1119592721
GPR[ESUN]-1659910199352
GPR[SSUN]-1659910199352
-1119592721
GPR[SPVATF]-1659910199599
GPR[EPVATF]-1659910200830
GPR[SPS]-1659910200830
[1190976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:337.
GPR[EPS]-1659910201511
GPR[ESUN]-1659910201511
GPR[SSUN]-1659910201511
-1765952779
GPR[ESUN]-1659910201743
GPR[SSUN]-1659910201744
-1765952779
GPR[SPVATF]-1659910201971
GPR[EPVATF]-1659910203161
GPR[SPS]-1659910203161
GPR[EPS]-1659910221154
GPR[SPVATF]-1659910221154
GPR[EPVATF]-1659910222334
GPR[SPS]-1659910222334
GPR[EPS]-1659910240195
GPR[ESUN]-1659910240195
GPR[SSUN]-1659910240195
-1119592721
GPR[SPVATF]-1659910240447
GPR[EPVATF]-1659910241663
GPR[SPS]-1659910241663
[1231818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:333.
GPR[EPS]-1659910242353
GPR[SPVATF]-1659910242353
GPR[EPVATF]-1659910243524
GPR[SPS]-1659910243524
GPR[EPS]-1659910246043
GPR[SPVATR]-1659910246043
[1235508] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:333: CONDITIONAL (1 <= com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size()) || ((var == null))
[1235861] INFO TestPatch - Running test suite to check the patch "(1 <= com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size()) || ((var == null))" is working
GPR[EPVATR]-1659910247585
[1237050] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910247585
[1237051] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -332,3 +332,3 @@
     // that we might not traverse.
-    if (var == null || var.scope != jsScope) {
+    if ((1 <= com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size()) || ((var == null))) {
       return;

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1232464_11ts_1659910247586.diff
GPR[ESUN]-1659910247587
GPR[SSUN]-1659910247587
-1119592721
GPR[ESUN]-1659910247849
GPR[SSUN]-1659910247849
-128675625
GPR[SPVATF]-1659910248100
GPR[EPVATF]-1659910249339
GPR[SPS]-1659910249339
[1239492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:202.
GPR[EPS]-1659910250027
GPR[ESUN]-1659910250027
GPR[SSUN]-1659910250028
-1765952779
GPR[ESUN]-1659910250262
GPR[SSUN]-1659910250262
-1765952779
GPR[SPVATF]-1659910250496
GPR[EPVATF]-1659910251812
GPR[SPS]-1659910251812
GPR[EPS]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260160
GPR[SSUN]-1659910260160
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260161
GPR[SSUN]-1659910260161
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
GPR[ESUN]-1659910260162
GPR[SSUN]-1659910260162
1537627151
GPR[ESUN]-1659910260480
GPR[SSUN]-1659910260480
-1345859678
GPR[ESUN]-1659910260760
GPR[SSUN]-1659910260760
-1345859678
GPR[SPVATF]-1659910261035
GPR[EPVATF]-1659910262209
GPR[SPS]-1659910262209
[1252621] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1084.
GPR[EPS]-1659910263156
GPR[ESUN]-1659910263156
GPR[SSUN]-1659910263156
-1345859678
GPR[SPVATF]-1659910263431
GPR[EPVATF]-1659910264616
GPR[SPS]-1659910264616
[1254863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1082.
GPR[EPS]-1659910265398
GPR[ESUN]-1659910265398
GPR[SSUN]-1659910265398
-1345859678
GPR[SPVATF]-1659910265669
GPR[EPVATF]-1659910266849
GPR[SPS]-1659910266849
[1257091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1081.
GPR[EPS]-1659910267626
GPR[ESUN]-1659910267626
GPR[SSUN]-1659910267626
-1345859678
GPR[SPVATF]-1659910267897
GPR[EPVATF]-1659910269075
GPR[SPS]-1659910269075
[1259302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1080.
GPR[EPS]-1659910269837
GPR[ESUN]-1659910269837
GPR[SSUN]-1659910269837
-1345859678
GPR[SPVATF]-1659910270112
GPR[EPVATF]-1659910271293
GPR[SPS]-1659910271293
[1261511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1079.
GPR[EPS]-1659910272046
GPR[SPVATF]-1659910272046
GPR[EPVATF]-1659910273222
GPR[SPS]-1659910273222
[1263552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1079.
GPR[EPS]-1659910274087
GPR[ESUN]-1659910274087
GPR[SSUN]-1659910274087
-1345859678
GPR[ESUN]-1659910274361
GPR[SSUN]-1659910274361
-1345859678
GPR[SPVATF]-1659910274627
GPR[EPVATF]-1659910275795
GPR[SPS]-1659910275795
[1266017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:606.
GPR[EPS]-1659910276552
GPR[ESUN]-1659910276552
GPR[SSUN]-1659910276552
-1345859678
GPR[SPVATF]-1659910276829
GPR[EPVATF]-1659910277993
GPR[SPS]-1659910277993
[1268226] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:600.
GPR[EPS]-1659910278761
GPR[SPVATF]-1659910278761
GPR[EPVATF]-1659910279936
GPR[SPS]-1659910279936
[1270142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:600.
GPR[EPS]-1659910280677
GPR[ESUN]-1659910280677
GPR[SSUN]-1659910280677
-1345859678
GPR[ESUN]-1659910280949
GPR[SSUN]-1659910280949
-1345859678
GPR[ESUN]-1659910281215
GPR[SSUN]-1659910281215
-1765952779
GPR[SPVATF]-1659910281447
GPR[EPVATF]-1659910282624
GPR[SPS]-1659910282624
[1272869] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:263.
GPR[EPS]-1659910283404
GPR[SPVATF]-1659910283404
GPR[EPVATF]-1659910284863
GPR[SPS]-1659910284863
GPR[EPS]-1659910318177
GPR[ESUN]-1659910318177
GPR[SSUN]-1659910318178
-1765952779
GPR[ESUN]-1659910318532
GPR[SSUN]-1659910318532
GPR[ESUN]-1659910318533
GPR[SSUN]-1659910318533
-1966087783
GPR[SPVATF]-1659910318824
GPR[EPVATF]-1659910318975
[1308440] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910318976
GPR[EPVATF]-1659910319074
[1308539] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910319074
GPR[SSUN]-1659910319074
-1966087783
GPR[SPVATF]-1659910319316
GPR[EPVATF]-1659910319422
[1308887] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910319423
GPR[EPVATF]-1659910319521
[1308986] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910319521
GPR[SSUN]-1659910319521
-1966087783
GPR[SPVATF]-1659910319754
GPR[EPVATF]-1659910319865
[1309330] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910319865
GPR[EPVATF]-1659910319957
[1309423] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910319958
GPR[SSUN]-1659910319958
-1966087783
GPR[ESUN]-1659910320190
GPR[SSUN]-1659910320190
-1966087783
GPR[ESUN]-1659910320530
GPR[SSUN]-1659910320530
-1966087783
GPR[SPVATF]-1659910320780
GPR[EPVATF]-1659910320890
[1310356] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910320891
GPR[EPVATF]-1659910320987
[1310452] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910320988
GPR[SSUN]-1659910320988
-1966087783
GPR[SPVATF]-1659910321215
GPR[EPVATF]-1659910321316
[1310781] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910321316
GPR[EPVATF]-1659910321404
[1310869] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910321404
GPR[SSUN]-1659910321404
-1966087783
GPR[ESUN]-1659910321632
GPR[SSUN]-1659910321632
-1966087783
GPR[SPVATF]-1659910321859
GPR[EPVATF]-1659910321968
[1311433] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910321968
GPR[SSUN]-1659910321968
-1765952779
GPR[SPVATF]-1659910322285
GPR[EPVATF]-1659910323160
GPR[SPS]-1659910323160
GPR[EPS]-1659910331985
GPR[ESUN]-1659910331985
GPR[SSUN]-1659910331985
-1119592721
GPR[ESUN]-1659910332266
GPR[SSUN]-1659910332266
-1119592721
GPR[ESUN]-1659910332552
GPR[SSUN]-1659910332552
-1119592721
GPR[ESUN]-1659910332826
GPR[SSUN]-1659910332826
-1119592721
GPR[SPVATF]-1659910333108
GPR[EPVATF]-1659910333957
GPR[SPS]-1659910333958
[1324305] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:418.
GPR[EPS]-1659910334840
GPR[ESUN]-1659910334840
GPR[SSUN]-1659910334840
-1765952779
GPR[ESUN]-1659910335089
GPR[SSUN]-1659910335089
-1765952779
GPR[SPVATF]-1659910335337
GPR[EPVATF]-1659910336134
GPR[SPS]-1659910336134
GPR[EPS]-1659910344423
GPR[ESUN]-1659910344423
GPR[SSUN]-1659910344423
-1765952779
GPR[SPVATF]-1659910344689
GPR[EPVATF]-1659910345502
GPR[SPS]-1659910345502
GPR[EPS]-1659910354008
GPR[SPVATF]-1659910354008
GPR[EPVATF]-1659910354835
GPR[SPS]-1659910354835
[1345075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:231.
GPR[EPS]-1659910355610
GPR[ESUN]-1659910355610
GPR[SSUN]-1659910355610
-1966087783
GPR[SPVATF]-1659910355827
GPR[EPVATF]-1659910355926
[1345391] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910355926
GPR[SSUN]-1659910355926
-1966087783
GPR[ESUN]-1659910356134
GPR[SSUN]-1659910356134
-1966087783
GPR[SPVATF]-1659910356348
GPR[EPVATF]-1659910356435
[1345900] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910356435
GPR[SSUN]-1659910356435
-1966087783
GPR[ESUN]-1659910356635
GPR[SSUN]-1659910356635
-1966087783
GPR[ESUN]-1659910356837
GPR[SSUN]-1659910356837
-1966087783
GPR[SPVATF]-1659910357040
GPR[EPVATF]-1659910357127
[1346593] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910357128
GPR[SSUN]-1659910357128
-1966087783
GPR[SPVATF]-1659910357331
GPR[EPVATF]-1659910357422
[1346887] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910357422
GPR[SSUN]-1659910357422
-1119592721
GPR[SPVATF]-1659910357679
GPR[EPVATF]-1659910358537
GPR[SPS]-1659910358537
GPR[EPS]-1659910360914
GPR[SPVATR]-1659910360914
[1350379] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:315: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1350809] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659910362650
[1352115] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910362650
[1352122] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -314,3 +314,5 @@
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          computeMustDef(c, cfgNode, output, conditional);
+          if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+            computeMustDef(c, cfgNode, output, conditional);
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1347535_12ts_1659910362657.diff
GPR[ESUN]-1659910362658
GPR[SSUN]-1659910362658
-1119592721
GPR[ESUN]-1659910362929
GPR[SSUN]-1659910362929
-1119592721
GPR[SPVATF]-1659910363206
GPR[EPVATF]-1659910364062
GPR[SPS]-1659910364062
GPR[EPS]-1659910366617
GPR[SPVATR]-1659910366617
[1356082] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:314: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1356520] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659910369604
[1359069] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910369604
[1359072] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -313,4 +313,6 @@
 
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          computeMustDef(c, cfgNode, output, conditional);
+        if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+            computeMustDef(c, cfgNode, output, conditional);
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1354485_13ts_1659910369607.diff
GPR[ESUN]-1659910369607
GPR[SSUN]-1659910369607
-1119592721
GPR[SPVATF]-1659910369872
GPR[EPVATF]-1659910370708
GPR[SPS]-1659910370709
[1360895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:305.
GPR[EPS]-1659910371430
GPR[SPVATF]-1659910371430
GPR[EPVATF]-1659910372313
GPR[SPS]-1659910372313
[1362460] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:305.
GPR[EPS]-1659910372995
GPR[ESUN]-1659910372995
GPR[SSUN]-1659910372995
-1119592721
GPR[SPVATF]-1659910373242
GPR[EPVATF]-1659910374167
GPR[SPS]-1659910374167
[1364312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:300.
GPR[EPS]-1659910374847
GPR[SPVATF]-1659910374847
GPR[EPVATF]-1659910375824
GPR[SPS]-1659910375824
[1365980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:300.
GPR[EPS]-1659910376515
GPR[ESUN]-1659910376516
GPR[SSUN]-1659910376516
-1119592721
GPR[SPVATF]-1659910376759
GPR[EPVATF]-1659910377726
GPR[SPS]-1659910377726
GPR[EPS]-1659910380142
GPR[SPVATR]-1659910380142
[1369608] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:280: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1370074] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659910381910
[1371375] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910381911
[1371378] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -279,18 +279,20 @@
       default:
-        if (NodeUtil.isAssignmentOp(n)) {
-          if (n.getFirstChild().isName()) {
-            Node name = n.getFirstChild();
-            computeMustDef(name.getNext(), cfgNode, output, conditional);
-            addToDefIfLocal(name.getString(), conditional ? null : cfgNode,
+        if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+          if (NodeUtil.isAssignmentOp(n)) {
+            if (n.getFirstChild().isName()) {
+              Node name = n.getFirstChild();
+              computeMustDef(name.getNext(), cfgNode, output, conditional);
+              addToDefIfLocal(name.getString(), conditional ? null : cfgNode,
               n.getLastChild(), output);
-            return;
-          } else if (NodeUtil.isGet(n.getFirstChild())) {
-            // Treat all assignments to arguments as redefining the
-            // parameters itself.
-            Node obj = n.getFirstChild().getFirstChild();
-            if (obj.isName() && "arguments".equals(obj.getString())) {
-              // TODO(user): More accuracy can be introduced
-              // i.e. We know exactly what arguments[x] is if x is a constant
-              // number.
-              escapeParameters(output);
+              return;
+            } else if (NodeUtil.isGet(n.getFirstChild())) {
+              // Treat all assignments to arguments as redefining the
+              // parameters itself.
+              Node obj = n.getFirstChild().getFirstChild();
+              if (obj.isName() && "arguments".equals(obj.getString())) {
+                // TODO(user): More accuracy can be introduced
+                // i.e. We know exactly what arguments[x] is if x is a constant
+                // number.
+                escapeParameters(output);
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/3/seed_264/patch_1366791_14ts_1659910381913.diff
GPR[SPVATF]-1659910381914
GPR[EPVATF]-1659910383019
GPR[SPS]-1659910383019
GPR[EPS]-1659910393201
GPR[ESUN]-1659910393201
GPR[SSUN]-1659910393201
GPR[ESUN]-1659910393201
GPR[SSUN]-1659910393201
GPR[ESUN]-1659910393201
GPR[SSUN]-1659910393201
1207178244
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
GPR[ESUN]-1659910393429
GPR[SSUN]-1659910393429
1537627151
GPR[ESUN]-1659910393644
GPR[SSUN]-1659910393644
-1345859678
GPR[ESUN]-1659910393921
GPR[SSUN]-1659910393921
-1345859678
GPR[SPVATF]-1659910394190
GPR[EPVATF]-1659910395312
GPR[SPS]-1659910395312
[1385605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1096.
GPR[EPS]-1659910396140
GPR[SPVATF]-1659910396140
GPR[EPVATF]-1659910397321
GPR[SPS]-1659910397321
[1387525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1096.
GPR[EPS]-1659910398060
GPR[ESUN]-1659910398060
GPR[SSUN]-1659910398060
-1345859678
GPR[SPVATF]-1659910398372
GPR[EPVATF]-1659910399538
GPR[SPS]-1659910399538
[1389773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1089.
GPR[EPS]-1659910400308
GPR[SPVATF]-1659910400308
GPR[EPVATF]-1659910401480
GPR[SPS]-1659910401480
[1391692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1089.
GPR[EPS]-1659910402227
GPR[ESUN]-1659910402227
GPR[SSUN]-1659910402227
-1345859678
GPR[ESUN]-1659910402495
GPR[SSUN]-1659910402495
-1345859678
GPR[SPVATF]-1659910402759
GPR[EPVATF]-1659910403926
GPR[SPS]-1659910403926
[1394157] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1086.
GPR[EPS]-1659910404692
GPR[ESUN]-1659910404692
GPR[SSUN]-1659910404692
-1345859678
GPR[SPVATF]-1659910404963
GPR[EPVATF]-1659910406149
GPR[SPS]-1659910406149
[1396336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1076.
GPR[EPS]-1659910406872
GPR[ESUN]-1659910406872
GPR[SSUN]-1659910406872
-1345859678
GPR[ESUN]-1659910407140
GPR[SSUN]-1659910407140
-1345859678
GPR[ESUN]-1659910407409
GPR[SSUN]-1659910407409
-1345859678
GPR[ESUN]-1659910407722
GPR[SSUN]-1659910407722
160819208
GPR[ESUN]-1659910407970
GPR[SSUN]-1659910407971
-1966087783
GPR[SPVATF]-1659910408167
GPR[EPVATF]-1659910408248
[1397713] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910408248
GPR[SSUN]-1659910408248
GPR[ESUN]-1659910408248
GPR[SSUN]-1659910408248
69062959
GPR[ESUN]-1659910408447
GPR[SSUN]-1659910408448
GPR[ESUN]-1659910408448
GPR[SSUN]-1659910408448
1207178244
GPR[ESUN]-1659910408670
GPR[SSUN]-1659910408670
-1966087783
GPR[SPVATF]-1659910408863
GPR[EPVATF]-1659910408942
[1398407] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910408942
GPR[SSUN]-1659910408942
-1966087783
GPR[SPVATF]-1659910409140
GPR[EPVATF]-1659910409218
[1398683] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910409218
GPR[SSUN]-1659910409218
-1966087783
GPR[SPVATF]-1659910409415
GPR[EPVATF]-1659910409496
[1398961] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910409496
GPR[SSUN]-1659910409496
-1966087783
GPR[SPVATF]-1659910409692
GPR[EPVATF]-1659910409773
[1399238] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910409773
GPR[SSUN]-1659910409773
-1966087783
GPR[SPVATF]-1659910409970
GPR[EPVATF]-1659910410051
[1399516] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910410051
GPR[SSUN]-1659910410051
-1966087783
GPR[SPVATF]-1659910410251
GPR[EPVATF]-1659910410329
[1399794] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910410329
GPR[EPVATF]-1659910410406
[1399871] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910410406
GPR[SSUN]-1659910410406
-1966087783
GPR[ESUN]-1659910410601
GPR[SSUN]-1659910410601
-128675625
GPR[ESUN]-1659910410849
GPR[SSUN]-1659910410849
-128675625
GPR[SPVATF]-1659910411101
GPR[EPVATF]-1659910412292
GPR[SPS]-1659910412292
GPR[EPS]-1659910425474
GPR[SPVATF]-1659910425474
GPR[EPVATF]-1659910426715
GPR[SPS]-1659910426715
GPR[EPS]-1659910447503
GPR[ESUN]-1659910447503
GPR[SSUN]-1659910447503
-128675625
GPR[ESUN]-1659910447863
GPR[SSUN]-1659910447863
-128675625
GPR[SPVATF]-1659910448107
GPR[EPVATF]-1659910449302
GPR[SPS]-1659910449302
GPR[EPS]-1659910459363
GPR[ESUN]-1659910459363
GPR[SSUN]-1659910459363
-128675625
GPR[SPVATF]-1659910459616
GPR[EPVATF]-1659910460806
GPR[SPS]-1659910460806
[1450933] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:153.
GPR[EPS]-1659910461468
GPR[ESUN]-1659910461468
GPR[SSUN]-1659910461468
-128675625
GPR[SPVATF]-1659910461721
GPR[EPVATF]-1659910462922
GPR[SPS]-1659910462922
[1453050] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:152.
GPR[EPS]-1659910463585
GPR[ESUN]-1659910463585
GPR[SSUN]-1659910463586
-128675625
GPR[SPVATF]-1659910463843
GPR[EPVATF]-1659910465047
GPR[SPS]-1659910465047
GPR[EPS]-1659910485963
GPR[ESUN]-1659910485963
GPR[SSUN]-1659910485963
-128675625
GPR[SPVATF]-1659910486215
GPR[EPVATF]-1659910487450
GPR[SPS]-1659910487450
[1477573] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:144.
GPR[EPS]-1659910488108
GPR[ESUN]-1659910488108
GPR[SSUN]-1659910488108
-128675625
GPR[SPVATF]-1659910488358
GPR[EPVATF]-1659910489533
GPR[SPS]-1659910489533
[1479660] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:143.
GPR[EPS]-1659910490195
GPR[ESUN]-1659910490195
GPR[SSUN]-1659910490195
-128675625
GPR[SPVATF]-1659910490445
GPR[EPVATF]-1659910491650
GPR[SPS]-1659910491650
[1481787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:142.
GPR[EPS]-1659910492322
GPR[ESUN]-1659910492322
GPR[SSUN]-1659910492322
-128675625
GPR[SPVATF]-1659910492573
GPR[EPVATF]-1659910493777
GPR[SPS]-1659910493777
[1483910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:141.
GPR[EPS]-1659910494445
GPR[ESUN]-1659910494445
GPR[SSUN]-1659910494445
-128675625
GPR[SPVATF]-1659910494696
GPR[EPVATF]-1659910495869
GPR[SPS]-1659910495869
[1486172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:140.
GPR[EPS]-1659910496707
GPR[ESUN]-1659910496707
GPR[SSUN]-1659910496707
-128675625
GPR[SPVATF]-1659910497773
GPR[EPVATF]-1659910501037
GPR[SPS]-1659910501037
[1492722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:139.
GPR[EPS]-1659910503257
GPR[ESUN]-1659910503257
GPR[SSUN]-1659910503257
-128675625
GPR[ESUN]-1659910504081
GPR[SSUN]-1659910504082
-128675625
GPR[SPVATF]-1659910504517
GPR[EPVATF]-1659910505350
GPR[SPS]-1659910505350
[1496042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:131.
GPR[EPS]-1659910506577
GPR[SPVATF]-1659910506577
GPR[EPVATF]-1659910507385
GPR[SPS]-1659910507385
GPR[EPS]-1659910516809
GPR[ESUN]-1659910516810
GPR[SSUN]-1659910516810
-128675625
GPR[ESUN]-1659910517106
GPR[SSUN]-1659910517106
-128675625
GPR[SPVATF]-1659910517415
GPR[EPVATF]-1659910518301
GPR[SPS]-1659910518301
GPR[EPS]-1659910530843
GPR[ESUN]-1659910530843
GPR[SSUN]-1659910530843
-128675625
GPR[ESUN]-1659910531135
GPR[SSUN]-1659910531135
-128675625
GPR[ESUN]-1659910531420
GPR[SSUN]-1659910531420
-128675625
GPR[ESUN]-1659910531702
GPR[SSUN]-1659910531702
-128675625
GPR[ESUN]-1659910531993
GPR[SSUN]-1659910531993
-128675625
GPR[SPVATF]-1659910532283
GPR[EPVATF]-1659910533094
GPR[SPS]-1659910533095
[1523392] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:200.
GPR[EPS]-1659910533927
GPR[SPVATF]-1659910533928
GPR[EPVATF]-1659910534746
GPR[SPS]-1659910534746
GPR[EPS]-1659910549083
GPR[ESUN]-1659910549084
GPR[SSUN]-1659910549084
-128675625
GPR[ESUN]-1659910549360
GPR[SSUN]-1659910549360
-128675625
GPR[ESUN]-1659910549635
GPR[SSUN]-1659910549635
-128675625
GPR[ESUN]-1659910549916
GPR[SSUN]-1659910549916
-128675625
GPR[SPVATF]-1659910550231
GPR[EPVATF]-1659910551054
GPR[SPS]-1659910551054
GPR[EPS]-1659910565092
GPR[ESUN]-1659910565092
GPR[SSUN]-1659910565092
-128675625
GPR[ESUN]-1659910565351
GPR[SSUN]-1659910565351
-128675625
GPR[SPVATF]-1659910565615
GPR[EPVATF]-1659910566441
GPR[SPS]-1659910566441
[1556635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:128.
GPR[EPS]-1659910567170
GPR[ESUN]-1659910567170
GPR[SSUN]-1659910567170
-128675625
GPR[SPVATF]-1659910567424
GPR[EPVATF]-1659910568258
GPR[SPS]-1659910568258
[1558496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:127.
GPR[EPS]-1659910569031
GPR[SPVATF]-1659910569032
GPR[EPVATF]-1659910569895
GPR[SPS]-1659910569895
GPR[EPS]-1659910579164
GPR[ESUN]-1659910579164
GPR[SSUN]-1659910579164
GPR[ESUN]-1659910579164
GPR[SSUN]-1659910579164
-1765952779
GPR[ESUN]-1659910579476
GPR[SSUN]-1659910579476
-1765952779
GPR[ESUN]-1659910579707
GPR[SSUN]-1659910579707
-1765952779
GPR[ESUN]-1659910579939
GPR[SSUN]-1659910579939
-1765952779
GPR[SPVATF]-1659910580179
GPR[EPVATF]-1659910581154
GPR[SPS]-1659910581154
GPR[EPS]-1659910591509
GPR[ESUN]-1659910591509
GPR[SSUN]-1659910591509
-1765952779
GPR[ESUN]-1659910591745
GPR[SSUN]-1659910591745
-1765952779
GPR[ESUN]-1659910591980
GPR[SSUN]-1659910591980
-1765952779
GPR[SPVATF]-1659910592224
GPR[EPVATF]-1659910593179
GPR[SPS]-1659910593179
[1583341] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:162.
GPR[EPS]-1659910593877
GPR[SPVATF]-1659910593877
GPR[EPVATF]-1659910594880
GPR[SPS]-1659910594880
[1585057] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:162.
GPR[EPS]-1659910595592
GPR[ESUN]-1659910595592
GPR[SSUN]-1659910595592
-1765952779
GPR[SPVATF]-1659910595830
GPR[EPVATF]-1659910596893
GPR[SPS]-1659910596893
[1587126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:161.
GPR[EPS]-1659910597661
GPR[ESUN]-1659910597661
GPR[SSUN]-1659910597661
-1765952779
GPR[ESUN]-1659910597896
GPR[SSUN]-1659910597896
-1765952779
GPR[ESUN]-1659910598126
GPR[SSUN]-1659910598126
-1765952779
GPR[SPVATF]-1659910598365
GPR[EPVATF]-1659910599476
GPR[SPS]-1659910599476
GPR[EPS]-1659910609740
GPR[ESUN]-1659910609740
GPR[SSUN]-1659910609740
-1765952779
GPR[ESUN]-1659910609974
GPR[SSUN]-1659910609974
-1765952779
GPR[ESUN]-1659910610201
GPR[SSUN]-1659910610201
-1765952779
GPR[ESUN]-1659910610429
GPR[SSUN]-1659910610429
-1765952779
GPR[ESUN]-1659910610658
GPR[SSUN]-1659910610658
-1765952779
GPR[ESUN]-1659910610888
GPR[SSUN]-1659910610888
2433571
GPR[SPVATF]-1659910611163
GPR[EPVATF]-1659910611948
GPR[SPS]-1659910611948
[1602417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:950.
GPR[EPS]-1659910612952
GPR[ESUN]-1659910612952
GPR[SSUN]-1659910612952
2433571
GPR[SPVATF]-1659910613222
GPR[EPVATF]-1659910614126
GPR[SPS]-1659910614126
[1604416] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:949.
GPR[EPS]-1659910614951
GPR[ESUN]-1659910614951
GPR[SSUN]-1659910614951
1616555300
GPR[SPVATF]-1659910615155
GPR[EPVATF]-1659910616348
GPR[SPS]-1659910616348
[1606412] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:142.
GPR[EPS]-1659910616947
GPR[ESUN]-1659910616947
GPR[SSUN]-1659910616947
1616555300
GPR[SPVATF]-1659910617145
GPR[EPVATF]-1659910618346
GPR[SPS]-1659910618346
[1608412] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:141.
GPR[EPS]-1659910618947
GPR[ESUN]-1659910618947
GPR[SSUN]-1659910618947
1616555300
GPR[SPVATF]-1659910619145
GPR[EPVATF]-1659910620347
GPR[SPS]-1659910620347
[1610422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:140.
GPR[EPS]-1659910620957
GPR[ESUN]-1659910620957
GPR[SSUN]-1659910620957
-1119592721
GPR[ESUN]-1659910621203
GPR[SSUN]-1659910621203
-1119592721
GPR[SPVATF]-1659910621457
GPR[EPVATF]-1659910622688
GPR[SPS]-1659910622688
GPR[EPS]-1659910633329
GPR[ESUN]-1659910633330
GPR[SSUN]-1659910633330
-1119592721
GPR[ESUN]-1659910633688
GPR[SSUN]-1659910633688
-1119592721
GPR[SPVATF]-1659910633931
GPR[EPVATF]-1659910635147
GPR[SPS]-1659910635147
GPR[EPS]-1659910645556
GPR[ESUN]-1659910645556
GPR[SSUN]-1659910645556
-1119592721
GPR[ESUN]-1659910645805
GPR[SSUN]-1659910645805
-1119592721
GPR[ESUN]-1659910646050
GPR[SSUN]-1659910646050
-1119592721
GPR[ESUN]-1659910646290
GPR[SSUN]-1659910646290
-1119592721
GPR[ESUN]-1659910646527
GPR[SSUN]-1659910646527
-1119592721
GPR[ESUN]-1659910646766
GPR[SSUN]-1659910646766
948429589
GPR[ESUN]-1659910647007
GPR[SSUN]-1659910647007
948429589
GPR[SPVATF]-1659910647247
GPR[EPVATF]-1659910648471
GPR[SPS]-1659910648471
[1638631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:296.
GPR[EPS]-1659910649167
GPR[SPVATF]-1659910649167
GPR[EPVATF]-1659910650389
GPR[SPS]-1659910650389
[1640545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:296.
GPR[EPS]-1659910651080
GPR[ESUN]-1659910651080
GPR[SSUN]-1659910651080
948429589
GPR[SPVATF]-1659910651319
GPR[EPVATF]-1659910652533
GPR[SPS]-1659910652533
GPR[EPS]-1659910672101
GPR[ESUN]-1659910672101
GPR[SSUN]-1659910672101
948429589
GPR[ESUN]-1659910672343
GPR[SSUN]-1659910672343
948429589
GPR[SPVATF]-1659910672584
GPR[EPVATF]-1659910673778
GPR[SPS]-1659910673778
GPR[EPS]-1659910690059
GPR[SPVATF]-1659910690059
GPR[EPVATF]-1659910691408
GPR[SPS]-1659910691408
GPR[EPS]-1659910711044
GPR[ESUN]-1659910711044
GPR[SSUN]-1659910711044
948429589
GPR[ESUN]-1659910711352
GPR[SSUN]-1659910711352
948429589
GPR[SPVATF]-1659910711641
GPR[EPVATF]-1659910712829
GPR[SPS]-1659910712829
[1702986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:290.
GPR[EPS]-1659910713521
GPR[ESUN]-1659910713521
GPR[SSUN]-1659910713521
948429589
GPR[SPVATF]-1659910713764
GPR[EPVATF]-1659910714976
GPR[SPS]-1659910714976
GPR[EPS]-1659910723678
GPR[SPVATF]-1659910723678
GPR[EPVATF]-1659910725091
GPR[SPS]-1659910725091
GPR[EPS]-1659910743286
GPR[ESUN]-1659910743287
GPR[SSUN]-1659910743287
948429589
GPR[SPVATF]-1659910743644
GPR[EPVATF]-1659910744513
GPR[SPS]-1659910744513
[1734888] ERROR ConstraintModelBuilder - Unable to compile the change: 
abstract class DataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> {
    private final com.google.javascript.jscomp.ControlFlowGraph<N> cfg;

    final com.google.javascript.jscomp.JoinOp<L> joinOp;

    protected final java.util.Set<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> orderedWorkSet;

    public static final int MAX_STEPS = 200000;

    DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
        this.cfg = targetCfg;
        this.joinOp = joinOp;
        java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nodeComparator = cfg.getOptionalNodeComparator(isForward());
        if (nodeComparator != null) {
            this.orderedWorkSet = com.google.common.collect.Sets.newTreeSet(nodeComparator);
        } else {
            this.orderedWorkSet = com.google.common.collect.Sets.newLinkedHashSet();
        }
    }

    final com.google.javascript.jscomp.ControlFlowGraph<N> getCfg() {
        return cfg;
    }

    L getExitLatticeElement() {
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        return state.getIn();
    }

    @java.lang.SuppressWarnings("unchecked")
    protected L join(L latticeA, L latticeB) {
        return joinOp.apply(com.google.common.collect.Lists.<L>newArrayList(latticeA, latticeB));
    }

    abstract boolean isForward();

    abstract L flowThrough(N node, L input);

    final void analyze() {
        analyze(com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);
    }

    final void analyze(int maxSteps) {
        initialize();
        int step = 0;
        while (!orderedWorkSet.isEmpty()) {
            if (step > maxSteps) {
                throw new com.google.javascript.jscomp.DataFlowAnalysis.MaxIterationsExceededException(("Analysis did not terminate after " + maxSteps) + " iterations");
            }
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> curNode = orderedWorkSet.iterator().next();
            orderedWorkSet.remove(curNode);
            joinInputs(curNode);
            if (flow(curNode)) {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nextNodes = (isForward()) ? cfg.getDirectedSuccNodes(curNode) : cfg.getDirectedPredNodes(curNode);
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> nextNode : nextNodes) {
                    if (nextNode != cfg.getImplicitReturn()) {
                        orderedWorkSet.add(nextNode);
                    }
                }
            }
            step++;
        } 
        if (isForward()) {
            joinInputs(getCfg().getImplicitReturn());
        }
    }

    abstract L createInitialEstimateLattice();

    abstract L createEntryLattice();

    protected void initialize() {
        orderedWorkSet.clear();
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : cfg.getDirectedGraphNodes()) {
            node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L>(createInitialEstimateLattice(), createInitialEstimateLattice()));
            if (node != cfg.getImplicitReturn()) {
                orderedWorkSet.add(node);
            }
        }
    }

    protected boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            L outBefore = state.out;
            state.out = flowThrough(node.getValue(), state.in);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(383).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet",com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.cfg",com.google.javascript.jscomp.DataFlowAnalysis.this.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectInput("outBefore",outBefore);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp",com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(383).collectionEnds();
            }
            if (runtimeAngelicValue)
                return !outBefore.equals(state.out);

        } else {
            L inBefore = state.in;
            state.in = flowThrough(node.getValue(), state.out);
            return !inBefore.equals(state.in);
        }
    }

    protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            if (cfg.getEntry() == node) {
                state.setIn(createEntryLattice());
            } else {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedPredNodes(node);
                if (inNodes.size() == 1) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNodes.get(0).getAnnotation();
                    state.setIn(inNodeState.getOut());
                } else if (inNodes.size() > 1) {
                    java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                    for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                        values.add(currentNodeState.getOut());
                    }
                    state.setIn(joinOp.apply(values));
                }
            }
        } else {
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedSuccNodes(node);
            if (inNodes.size() == 1) {
                com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> inNode = inNodes.get(0);
                if (inNode == cfg.getImplicitReturn()) {
                    state.setOut(createEntryLattice());
                } else {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNode.getAnnotation();
                    state.setOut(inNodeState.getIn());
                }
            } else if (inNodes.size() > 1) {
                java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                    values.add(currentNodeState.getIn());
                }
                state.setOut(joinOp.apply(values));
            }
        }
    }

    static class FlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private L out;

        private FlowState(L inState, L outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        L getOut() {
            return out;
        }

        void setOut(L out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static class MaxIterationsExceededException extends java.lang.RuntimeException {
        private static final long serialVersionUID = 1L;

        MaxIterationsExceededException(java.lang.String msg) {
            super(msg);
        }
    }

    static abstract class BranchedForwardDataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> extends com.google.javascript.jscomp.DataFlowAnalysis<N, L> {
        @java.lang.Override
        protected void initialize() {
            orderedWorkSet.clear();
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : getCfg().getDirectedGraphNodes()) {
                int outEdgeCount = getCfg().getOutEdges(node.getValue()).size();
                java.util.List<L> outLattices = com.google.common.collect.Lists.newArrayList();
                for (int i = 0; i < outEdgeCount; i++) {
                    outLattices.add(createInitialEstimateLattice());
                }
                node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L>(createInitialEstimateLattice(), outLattices));
                if (node != getCfg().getImplicitReturn()) {
                    orderedWorkSet.add(node);
                }
            }
        }

        BranchedForwardDataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
            super(targetCfg, joinOp);
        }

        @java.lang.Override
        L getExitLatticeElement() {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            return state.getIn();
        }

        @java.lang.Override
        final boolean isForward() {
            return true;
        }

        abstract java.util.List<L> branchedFlowThrough(N node, L input);

        @java.lang.Override
        protected final boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<L> outBefore = state.out;
            state.out = branchedFlowThrough(node.getValue(), state.in);
            com.google.common.base.Preconditions.checkState(outBefore.size() == state.out.size());
            for (int i = 0; i < outBefore.size(); i++) {
                if (!outBefore.get(i).equals(state.out.get(i))) {
                    return true;
                }
            }
            return false;
        }

        @java.lang.Override
        protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> predNodes = getCfg().getDirectedPredNodes(node);
            java.util.List<L> values = new java.util.ArrayList<L>(predNodes.size());
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> predNode : predNodes) {
                com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> predNodeState = predNode.getAnnotation();
                L in = predNodeState.out.get(getCfg().getDirectedSuccNodes(predNode).indexOf(node));
                values.add(in);
            }
            if (getCfg().getEntry() == node) {
                state.setIn(createEntryLattice());
            } else if (!values.isEmpty()) {
                state.setIn(joinOp.apply(values));
            }
        }
    }

    static class BranchedFlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private java.util.List<L> out;

        private BranchedFlowState(L inState, java.util.List<L> outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        java.util.List<L> getOut() {
            return out;
        }

        void setOut(java.util.List<L> out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            for (L item : out) {
                com.google.common.base.Preconditions.checkNotNull(item);
            }
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static void computeEscaped(final com.google.javascript.jscomp.Scope jsScope, final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped, com.google.javascript.jscomp.AbstractCompiler compiler) {
        com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback finder = new com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (((jsScope == t.getScope()) || (!n.isName())) || parent.isFunction()) {
                    return;
                }
                java.lang.String name = n.getString();
                com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name);
                if ((var != null) && (var.scope == jsScope)) {
                    escaped.add(jsScope.getVar(name));
                }
            }
        };
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, finder);
        t.traverseAtScope(jsScope);
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var var = i.next();
            if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {
                escaped.add(var);
            }
        }
    }
}
[1734890] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659910745425
GPR[SSUN]-1659910745425
948429589
GPR[SPVATF]-1659910745776
GPR[EPVATF]-1659910746714
GPR[SPS]-1659910746714
GPR[EPS]-1659910760489
GPR[ESUN]-1659910760489
GPR[SSUN]-1659910760489
948429589
GPR[ESUN]-1659910760854
GPR[SSUN]-1659910760854
948429589
GPR[ESUN]-1659910761143
GPR[SSUN]-1659910761143
948429589
GPR[ESUN]-1659910761431
GPR[SSUN]-1659910761431
948429589
GPR[SPVATF]-1659910761721
GPR[EPVATF]-1659910762554
GPR[SPS]-1659910762554
GPR[EPS]-1659910783232
GPR[ESUN]-1659910783232
GPR[SSUN]-1659910783232
948429589
GPR[SPVATF]-1659910783509
GPR[EPVATF]-1659910784348
GPR[SPS]-1659910784348
[1774699] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:353.
GPR[EPS]-1659910785234
GPR[ESUN]-1659910785234
GPR[SSUN]-1659910785234
1187751237
GPR[ESUN]-1659910785646
GPR[SSUN]-1659910785647
1187751237
GPR[ESUN]-1659910786005
GPR[SSUN]-1659910786005
1187751237
GPR[SPVATF]-1659910786346
GPR[EPVATF]-1659910787201
GPR[SPS]-1659910787201
[1777813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1649.
GPR[EPS]-1659910788348
GPR[SPVATF]-1659910788348
GPR[EPVATF]-1659910789170
GPR[SPS]-1659910789170
[1779707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1649.
GPR[EPS]-1659910790242
GPR[ESUN]-1659910790242
GPR[SSUN]-1659910790242
1187751237
GPR[SPVATF]-1659910790560
GPR[EPVATF]-1659910791469
GPR[SPS]-1659910791469
[1781910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1645.
GPR[EPS]-1659910792445
GPR[SPVATF]-1659910792445
GPR[EPVATF]-1659910793378
GPR[SPS]-1659910793378
GPR[EPS]-1659910812942
GPR[ESUN]-1659910812942
GPR[SSUN]-1659910812942
1187751237
GPR[SPVATF]-1659910813254
GPR[EPVATF]-1659910814133
GPR[SPS]-1659910814133
[1804599] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1644.
GPR[EPS]-1659910815134
GPR[ESUN]-1659910815135
GPR[SSUN]-1659910815135
948429589
GPR[SPVATF]-1659910815381
GPR[EPVATF]-1659910816277
GPR[SPS]-1659910816277
GPR[EPS]-1659910827960
GPR[ESUN]-1659910827960
GPR[SSUN]-1659910827960
948429589
GPR[ESUN]-1659910828321
GPR[SSUN]-1659910828321
1207178244
GPR[SPVATF]-1659910828547
GPR[EPVATF]-1659910829555
GPR[SPS]-1659910829555
GPR[EPS]-1659910836850
GPR[ESUN]-1659910836850
GPR[SSUN]-1659910836850
1207178244
GPR[SPVATF]-1659910837073
GPR[EPVATF]-1659910838120
GPR[SPS]-1659910838120
GPR[EPS]-1659910845833
GPR[SPVATF]-1659910845833
GPR[EPVATF]-1659910846967
GPR[SPS]-1659910846967
GPR[EPS]-1659910857468
GPR[ESUN]-1659910857468
GPR[SSUN]-1659910857468
2433571
GPR[ESUN]-1659910857738
GPR[SSUN]-1659910857738
1187751237
GPR[ESUN]-1659910858047
GPR[SSUN]-1659910858047
1187751237
GPR[ESUN]-1659910858353
GPR[SSUN]-1659910858353
GPR[ESUN]-1659910858353
GPR[SSUN]-1659910858353
-132053243
GPR[SPVATF]-1659910858553
GPR[EPVATF]-1659910858634
[1848099] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910858634
GPR[SSUN]-1659910858634
-132053243
GPR[SPVATF]-1659910858843
GPR[EPVATF]-1659910858929
[1848394] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910858929
GPR[SSUN]-1659910858929
-132053243
GPR[SPVATF]-1659910859131
GPR[EPVATF]-1659910859214
[1848679] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910859214
GPR[SSUN]-1659910859214
948429589
GPR[SPVATF]-1659910859462
GPR[EPVATF]-1659910860729
GPR[SPS]-1659910860729
[1850898] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:310.
GPR[EPS]-1659910861433
GPR[ESUN]-1659910861433
GPR[SSUN]-1659910861433
1852376448
GPR[SPVATF]-1659910861675
GPR[EPVATF]-1659910862970
GPR[SPS]-1659910862970
[1853273] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:184.
GPR[EPS]-1659910863808
GPR[ESUN]-1659910863808
GPR[SSUN]-1659910863808
-132053243
GPR[SPVATF]-1659910864006
GPR[EPVATF]-1659910864092
[1853557] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910864092
GPR[EPVATF]-1659910864167
[1853632] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910864167
GPR[SSUN]-1659910864167
-132053243
GPR[ESUN]-1659910864363
GPR[SSUN]-1659910864363
160819208
GPR[SPVATF]-1659910864637
GPR[EPVATF]-1659910865838
GPR[SPS]-1659910865838
[1855749] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class ControlFlowAnalysis implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

    private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

    private java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> nodePriorities;

    private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> priorityComparator = new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
        @java.lang.Override
        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> a, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> b) {
            return astPosition.get(a.getValue()) - astPosition.get(b.getValue());
        }
    };

    private int astPositionCounter;

    private int priorityCounter;

    private final boolean shouldTraverseFunctions;

    private final boolean edgeAnnotations;

    private com.google.javascript.rhino.Node root;

    private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap = com.google.common.collect.HashMultimap.create();

    ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler compiler, boolean shouldTraverseFunctions, boolean edgeAnnotations) {
        this.compiler = compiler;
        this.shouldTraverseFunctions = shouldTraverseFunctions;
        this.edgeAnnotations = edgeAnnotations;
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg() {
        return cfg;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        this.root = root;
        astPositionCounter = 0;
        astPosition = com.google.common.collect.Maps.newHashMap();
        nodePriorities = com.google.common.collect.Maps.newHashMap();
        cfg = new com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(root), nodePriorities, edgeAnnotations);
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);
        astPosition.put(null, ++astPositionCounter);
        priorityCounter = 0;
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry = cfg.getEntry();
        prioritizeFromEntryNode(entry);
        if (shouldTraverseFunctions) {
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
                com.google.javascript.rhino.Node value = candidate.getValue();
                if ((value != null) && value.isFunction()) {
                    com.google.common.base.Preconditions.checkState((!nodePriorities.containsKey(candidate)) || (candidate == entry));
                    prioritizeFromEntryNode(candidate);
                }
            }
        }
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
            if (!nodePriorities.containsKey(candidate)) {
                nodePriorities.put(candidate, ++priorityCounter);
            }
        }
        nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);
    }

    private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry) {
        java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> worklist = new java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>(10, priorityComparator);
        worklist.add(entry);
        while (!worklist.isEmpty()) {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> current = worklist.remove();
            if (nodePriorities.containsKey(current)) {
                continue;
            }
            nodePriorities.put(current, ++priorityCounter);
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> successors = cfg.getDirectedSuccNodes(current);
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : successors) {
                worklist.add(candidate);
            }
        } 
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        astPosition.put(n, astPositionCounter++);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                if (shouldTraverseFunctions || (n == cfg.getEntry().getValue())) {
                    exceptionHandler.push(n);
                    return true;
                }
                return false;
            case com.google.javascript.rhino.Token.TRY :
                exceptionHandler.push(n);
                return true;
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.FOR :
                    return n == parent.getLastChild();
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.DO :
                    return n != parent.getFirstChild().getNext();
                case com.google.javascript.rhino.Token.SWITCH :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.CATCH :
                case com.google.javascript.rhino.Token.LABEL :
                    return n != parent.getFirstChild();
                case com.google.javascript.rhino.Token.FUNCTION :
                    return n == parent.getFirstChild().getNext().getNext();
                case com.google.javascript.rhino.Token.CONTINUE :
                case com.google.javascript.rhino.Token.BREAK :
                case com.google.javascript.rhino.Token.EXPR_RESULT :
                case com.google.javascript.rhino.Token.VAR :
                case com.google.javascript.rhino.Token.RETURN :
                case com.google.javascript.rhino.Token.THROW :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if (n == parent.getFirstChild().getNext()) {
                        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == parent);
                        exceptionHandler.pop();
                    }
            }
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                handleIf(n);
                return;
            case com.google.javascript.rhino.Token.WHILE :
                handleWhile(n);
                return;
            case com.google.javascript.rhino.Token.DO :
                handleDo(n);
                return;
            case com.google.javascript.rhino.Token.FOR :
                handleFor(n);
                return;
            case com.google.javascript.rhino.Token.SWITCH :
                handleSwitch(n);
                return;
            case com.google.javascript.rhino.Token.CASE :
                handleCase(n);
                return;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                handleDefault(n);
                return;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
                handleStmtList(n);
                return;
            case com.google.javascript.rhino.Token.FUNCTION :
                handleFunction(n);
                return;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleExpr(n);
                return;
            case com.google.javascript.rhino.Token.THROW :
                handleThrow(n);
                return;
            case com.google.javascript.rhino.Token.TRY :
                handleTry(n);
                return;
            case com.google.javascript.rhino.Token.CATCH :
                handleCatch(n);
                return;
            case com.google.javascript.rhino.Token.BREAK :
                handleBreak(n);
                return;
            case com.google.javascript.rhino.Token.CONTINUE :
                handleContinue(n);
                return;
            case com.google.javascript.rhino.Token.RETURN :
                handleReturn(n);
                return;
            case com.google.javascript.rhino.Token.WITH :
                handleWith(n);
                return;
            case com.google.javascript.rhino.Token.LABEL :
                return;
            default :
                handleStmt(n);
                return;
        }
    }

    private void handleIf(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node thenBlock = node.getFirstChild().getNext();
        com.google.javascript.rhino.Node elseBlock = thenBlock.getNext();
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(thenBlock));
        if (elseBlock == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(elseBlock));
        }
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleWhile(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleDo(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleFor(com.google.javascript.rhino.Node forNode) {
        if (forNode.getChildCount() == 4) {
            com.google.javascript.rhino.Node init = forNode.getFirstChild();
            com.google.javascript.rhino.Node cond = init.getNext();
            com.google.javascript.rhino.Node iter = cond.getNext();
            com.google.javascript.rhino.Node body = iter.getNext();
            createEdge(init, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            createEdge(iter, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            connectToPossibleExceptionHandler(init, init);
            connectToPossibleExceptionHandler(forNode, cond);
            connectToPossibleExceptionHandler(iter, iter);
        } else {
            com.google.javascript.rhino.Node item = forNode.getFirstChild();
            com.google.javascript.rhino.Node collection = item.getNext();
            com.google.javascript.rhino.Node body = collection.getNext();
            createEdge(collection, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            connectToPossibleExceptionHandler(forNode, collection);
        }
    }

    private void handleSwitch(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getFirstChild().getNext(), com.google.javascript.rhino.Token.CASE, com.google.javascript.rhino.Token.EMPTY);
        if (next != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, next);
        } else if (node.getFirstChild().getNext() != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild().getNext());
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleCase(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, node.getFirstChild().getNext());
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getNext(), com.google.javascript.rhino.Token.CASE);
        if (next != null) {
            com.google.common.base.Preconditions.checkState(next.isCase());
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, next);
        } else {
            com.google.javascript.rhino.Node parent = node.getParent();
            com.google.javascript.rhino.Node deflt = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(parent.getFirstChild().getNext(), com.google.javascript.rhino.Token.DEFAULT_CASE);
            if (deflt != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, deflt);
            } else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleDefault(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleWith(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleStmtList(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if ((((node.isBlock() && (parent != null)) && parent.isTry()) && (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node)) && (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(node))) {
            return;
        }
        com.google.javascript.rhino.Node child = node.getFirstChild();
        while ((child != null) && child.isFunction()) {
            child = child.getNext();
        } 
        if (child != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));
        } else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.TRY :
                    break;
                default :
                    if (node.isBlock() && node.isSyntheticBlock()) {
                        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
                    }
                    break;
            }
        }
    }

    private void handleFunction(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(node.getChildCount() >= 3);
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext().getNext()));
        com.google.common.base.Preconditions.checkState(exceptionHandler.peek() == node);
        exceptionHandler.pop();
    }

    private void handleExpr(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleThrow(com.google.javascript.rhino.Node node) {
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleTry(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleCatch(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
    }

    private void handleBreak(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(cur, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            if (parent == null) {
                if (compiler.isIdeMode()) {
                    return;
                } else {
                    throw new java.lang.IllegalStateException("Cannot find break target.");
                }
            }
            previous = cur;
        }
        if (lastJump == node) {
            createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        } else {
            finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }
    }

    private void handleContinue(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(cur, parent, label); cur = parent , parent = parent.getParent()) {
            if ((cur.isTry() && com.google.javascript.jscomp.NodeUtil.hasFinally(cur)) && (cur.getLastChild() != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, cur.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            com.google.common.base.Preconditions.checkState(parent != null, "Cannot find continue target.");
            previous = cur;
        }
        com.google.javascript.rhino.Node iter = cur;
        if (cur.getChildCount() == 4) {
            iter = cur.getFirstChild().getNext().getNext();
        }
        if (lastJump == node) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, iter);
        } else {
            finallyMap.put(lastJump, iter);
        }
    }

    private void handleReturn(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node lastJump = null;
        for (java.util.Iterator<com.google.javascript.rhino.Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
            com.google.javascript.rhino.Node curHandler = iter.next();
            if (curHandler.isFunction()) {
                break;
            }
            if (com.google.javascript.jscomp.NodeUtil.hasFinally(curHandler)) {
                if (lastJump == null) {
                    createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, curHandler.getLastChild());
                } else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(curHandler.getLastChild()));
                }
                lastJump = curHandler;
            }
        }
        if (node.hasChildren()) {
            connectToPossibleExceptionHandler(node, node.getFirstChild());
        }
        if (lastJump == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, null);
        } else {
            finallyMap.put(lastJump, null);
        }
    }

    private void handleStmt(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, cfa);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, null);
    }

    private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node fromNode, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((parent == null) || parent.isFunction()) || ((cfa != null) && (node == cfa.root))) {
            return null;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.IF :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                if (parent.getNext() != null) {
                    if (parent.getNext().isCase()) {
                        return parent.getNext().getFirstChild().getNext();
                    } else if (parent.getNext().isDefaultCase()) {
                        return parent.getNext().getFirstChild();
                    } else {
                        com.google.common.base.Preconditions.checkState(false, "Not reachable");
                    }
                } else {
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent;
                } else {
                    return parent.getFirstChild().getNext().getNext();
                }
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
                return parent;
            case com.google.javascript.rhino.Token.TRY :
                if (parent.getFirstChild() == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent) == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());
                    } else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                } else if (parent.getLastChild() == node) {
                    if (cfa != null) {
                        for (com.google.javascript.rhino.Node finallyNode : cfa.finallyMap.get(parent)) {
                            cfa.createEdge(fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, finallyNode);
                        }
                    }
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
        }
        com.google.javascript.rhino.Node nextSibling = node.getNext();
        while ((nextSibling != null) && nextSibling.isFunction()) {
            nextSibling = nextSibling.getNext();
        } 
        if (nextSibling != null) {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);
        } else {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
        }
    }

    static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DO :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    return n.getFirstChild().getNext();
                }
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.LABEL :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getLastChild());
            default :
                return n;
        }
    }

    private void createEdge(com.google.javascript.rhino.Node fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch branch, com.google.javascript.rhino.Node toNode) {
        cfg.createNode(fromNode);
        cfg.createNode(toNode);
        cfg.connectIfNotFound(fromNode, branch, toNode);
    }

    private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node cfgNode, com.google.javascript.rhino.Node target) {
        if (com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(target) && (!exceptionHandler.isEmpty())) {
            com.google.javascript.rhino.Node lastJump = cfgNode;
            for (com.google.javascript.rhino.Node handler : exceptionHandler) {
                if (handler.isFunction()) {
                    return;
                }
                com.google.common.base.Preconditions.checkState(handler.isTry());
                com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);
                if (!com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock)) {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, handler.getLastChild());
                    } else {
                        finallyMap.put(lastJump, handler.getLastChild());
                    }
                } else if (lastJump == cfgNode) {
                    createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, catchBlock);
                    return;
                } else {
                    finallyMap.put(lastJump, catchBlock);
                }
                lastJump = handler;
            }
        }
    }

    private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node first, int... types) {
        for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
            for (int type : types) {
                if (c.getType() == type) {
                    return c;
                }
            }
        }
        return null;
    }

    public static boolean isBreakTarget(com.google.javascript.rhino.Node target, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(target, label != null) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(target.getParent(), label);
    }

    private static boolean isContinueTarget(com.google.javascript.rhino.Node target, com.google.javascript.rhino.Node parent, java.lang.String label) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(target) && com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(parent, label);
    }

    private static boolean matchLabel(com.google.javascript.rhino.Node target, java.lang.String label) {
        if (label == null) {
            return true;
        }
        while (target.isLabel()) {
            if (target.getFirstChild().getString().equals(label)) {
                return true;
            }
            target = target.getParent();
        } 
        return false;
    }

    public static boolean mayThrowException(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if ((!com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(c)) && com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean isBreakStructure(com.google.javascript.rhino.Node n, boolean labeled) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.SWITCH :
                return true;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.TRY :
                return labeled;
            default :
                return false;
        }
    }

    static boolean isContinueStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node cur = n; (!cur.isScript()) && (!cur.isFunction()); cur = cur.getParent()) {
            com.google.javascript.rhino.Node catchNode = com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(cur);
            if (catchNode != null) {
                return catchNode;
            }
        }
        return null;
    }

    static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node block) {
        if ((block.isBlock() && block.getParent().isTry()) && (block.getParent().getFirstChild() == block)) {
            for (com.google.javascript.rhino.Node s = block.getNext(); s != null; s = s.getNext()) {
                if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(s)) {
                    return s.getFirstChild();
                }
            }
        }
        return null;
    }

    private static class AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
        private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities;

        private AstControlFlowGraph(com.google.javascript.rhino.Node entry, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities, boolean edgeAnnotations) {
            super(entry, true, edgeAnnotations);
            this.priorities = priorities;
        }

        @java.lang.Override
        public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> getOptionalNodeComparator(boolean isForward) {
            if (isForward) {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return getPosition(n1) - getPosition(n2);
                    }
                };
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(398).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(398).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(398).collectInput("isForward",isForward);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(398).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(398).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                        @java.lang.Override
                        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                            return getPosition(n2) - getPosition(n1);
                        }
                    };

            }
        }

        private int getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n) {
            java.lang.Integer priority = priorities.get(n);
            com.google.common.base.Preconditions.checkNotNull(priority);
            return priority;
        }
    }
}
[1855749] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659910866284
GPR[SSUN]-1659910866284
948429589
GPR[SPVATF]-1659910866615
GPR[EPVATF]-1659910868088
GPR[SPS]-1659910868088
[1858269] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:315.
GPR[EPS]-1659910868805
GPR[SPVATF]-1659910868805
GPR[EPVATF]-1659910870041
GPR[SPS]-1659910870041
[1860213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:315.
GPR[EPS]-1659910870748
GPR[ESUN]-1659910870748
GPR[SSUN]-1659910870748
948429589
GPR[SPVATF]-1659910870995
GPR[EPVATF]-1659910872226
GPR[SPS]-1659910872226
GPR[EPS]-1659910888407
GPR[SPVATF]-1659910888407
GPR[EPVATF]-1659910889737
GPR[SPS]-1659910889737
GPR[EPS]-1659910903339
GPR[ESUN]-1659910903339
GPR[SSUN]-1659910903339
948429589
GPR[ESUN]-1659910903584
GPR[SSUN]-1659910903584
948429589
GPR[SPVATF]-1659910903836
GPR[EPVATF]-1659910905075
GPR[SPS]-1659910905075
GPR[EPS]-1659910924514
GPR[SPVATF]-1659910924515
GPR[EPVATF]-1659910925735
GPR[SPS]-1659910925735
GPR[EPS]-1659910943478
GPR[ESUN]-1659910943478
GPR[SSUN]-1659910943478
948429589
GPR[ESUN]-1659910943731
GPR[SSUN]-1659910943731
948429589
GPR[SPVATF]-1659910944018
GPR[EPVATF]-1659910945255
GPR[SPS]-1659910945255
[1935098] ERROR ConstraintModelBuilder - Unable to compile the change: 
abstract class DataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> {
    private final com.google.javascript.jscomp.ControlFlowGraph<N> cfg;

    final com.google.javascript.jscomp.JoinOp<L> joinOp;

    protected final java.util.Set<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> orderedWorkSet;

    public static final int MAX_STEPS = 200000;

    DataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
        this.cfg = targetCfg;
        this.joinOp = joinOp;
        java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nodeComparator = cfg.getOptionalNodeComparator(isForward());
        if (nodeComparator != null) {
            this.orderedWorkSet = com.google.common.collect.Sets.newTreeSet(nodeComparator);
        } else {
            this.orderedWorkSet = com.google.common.collect.Sets.newLinkedHashSet();
        }
    }

    final com.google.javascript.jscomp.ControlFlowGraph<N> getCfg() {
        return cfg;
    }

    L getExitLatticeElement() {
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        return state.getIn();
    }

    @java.lang.SuppressWarnings("unchecked")
    protected L join(L latticeA, L latticeB) {
        return joinOp.apply(com.google.common.collect.Lists.<L>newArrayList(latticeA, latticeB));
    }

    abstract boolean isForward();

    abstract L flowThrough(N node, L input);

    final void analyze() {
        analyze(com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);
    }

    final void analyze(int maxSteps) {
        initialize();
        int step = 0;
        while (!orderedWorkSet.isEmpty()) {
            if (step > maxSteps) {
                throw new com.google.javascript.jscomp.DataFlowAnalysis.MaxIterationsExceededException(("Analysis did not terminate after " + maxSteps) + " iterations");
            }
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> curNode = orderedWorkSet.iterator().next();
            orderedWorkSet.remove(curNode);
            joinInputs(curNode);
            if (flow(curNode)) {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> nextNodes = (isForward()) ? cfg.getDirectedSuccNodes(curNode) : cfg.getDirectedPredNodes(curNode);
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> nextNode : nextNodes) {
                    if (nextNode != cfg.getImplicitReturn()) {
                        orderedWorkSet.add(nextNode);
                    }
                }
            }
            step++;
        } 
        if (isForward()) {
            joinInputs(getCfg().getImplicitReturn());
        }
    }

    abstract L createInitialEstimateLattice();

    abstract L createEntryLattice();

    protected void initialize() {
        orderedWorkSet.clear();
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : cfg.getDirectedGraphNodes()) {
            node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L>(createInitialEstimateLattice(), createInitialEstimateLattice()));
            if (node != cfg.getImplicitReturn()) {
                orderedWorkSet.add(node);
            }
        }
    }

    protected boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            L outBefore = state.out;
            state.out = flowThrough(node.getValue(), state.in);
            return !outBefore.equals(state.out);
        } else {
            L inBefore = state.in;
            state.in = flowThrough(node.getValue(), state.out);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(405).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet",com.google.javascript.jscomp.DataFlowAnalysis.this.orderedWorkSet);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.cfg",com.google.javascript.jscomp.DataFlowAnalysis.this.cfg);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectInput("state",state);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectInput("inBefore",inBefore);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectInput("com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp",com.google.javascript.jscomp.DataFlowAnalysis.this.joinOp);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(405).collectionEnds();
            }
            if (runtimeAngelicValue)
                return !inBefore.equals(state.in);

        }
    }

    protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> state = node.getAnnotation();
        if (isForward()) {
            if (cfg.getEntry() == node) {
                state.setIn(createEntryLattice());
            } else {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedPredNodes(node);
                if (inNodes.size() == 1) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNodes.get(0).getAnnotation();
                    state.setIn(inNodeState.getOut());
                } else if (inNodes.size() > 1) {
                    java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                    for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                        com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                        values.add(currentNodeState.getOut());
                    }
                    state.setIn(joinOp.apply(values));
                }
            }
        } else {
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> inNodes = cfg.getDirectedSuccNodes(node);
            if (inNodes.size() == 1) {
                com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> inNode = inNodes.get(0);
                if (inNode == cfg.getImplicitReturn()) {
                    state.setOut(createEntryLattice());
                } else {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> inNodeState = inNode.getAnnotation();
                    state.setOut(inNodeState.getIn());
                }
            } else if (inNodes.size() > 1) {
                java.util.List<L> values = new java.util.ArrayList<L>(inNodes.size());
                for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> currentNode : inNodes) {
                    com.google.javascript.jscomp.DataFlowAnalysis.FlowState<L> currentNodeState = currentNode.getAnnotation();
                    values.add(currentNodeState.getIn());
                }
                state.setOut(joinOp.apply(values));
            }
        }
    }

    static class FlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private L out;

        private FlowState(L inState, L outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        L getOut() {
            return out;
        }

        void setOut(L out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static class MaxIterationsExceededException extends java.lang.RuntimeException {
        private static final long serialVersionUID = 1L;

        MaxIterationsExceededException(java.lang.String msg) {
            super(msg);
        }
    }

    static abstract class BranchedForwardDataFlowAnalysis<N, L extends com.google.javascript.jscomp.graph.LatticeElement> extends com.google.javascript.jscomp.DataFlowAnalysis<N, L> {
        @java.lang.Override
        protected void initialize() {
            orderedWorkSet.clear();
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node : getCfg().getDirectedGraphNodes()) {
                int outEdgeCount = getCfg().getOutEdges(node.getValue()).size();
                java.util.List<L> outLattices = com.google.common.collect.Lists.newArrayList();
                for (int i = 0; i < outEdgeCount; i++) {
                    outLattices.add(createInitialEstimateLattice());
                }
                node.setAnnotation(new com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L>(createInitialEstimateLattice(), outLattices));
                if (node != getCfg().getImplicitReturn()) {
                    orderedWorkSet.add(node);
                }
            }
        }

        BranchedForwardDataFlowAnalysis(com.google.javascript.jscomp.ControlFlowGraph<N> targetCfg, com.google.javascript.jscomp.JoinOp<L> joinOp) {
            super(targetCfg, joinOp);
        }

        @java.lang.Override
        L getExitLatticeElement() {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node = getCfg().getImplicitReturn();
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            return state.getIn();
        }

        @java.lang.Override
        final boolean isForward() {
            return true;
        }

        abstract java.util.List<L> branchedFlowThrough(N node, L input);

        @java.lang.Override
        protected final boolean flow(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<L> outBefore = state.out;
            state.out = branchedFlowThrough(node.getValue(), state.in);
            com.google.common.base.Preconditions.checkState(outBefore.size() == state.out.size());
            for (int i = 0; i < outBefore.size(); i++) {
                if (!outBefore.get(i).equals(state.out.get(i))) {
                    return true;
                }
            }
            return false;
        }

        @java.lang.Override
        protected void joinInputs(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> node) {
            com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> state = node.getAnnotation();
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch>> predNodes = getCfg().getDirectedPredNodes(node);
            java.util.List<L> values = new java.util.ArrayList<L>(predNodes.size());
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, com.google.javascript.jscomp.ControlFlowGraph.Branch> predNode : predNodes) {
                com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState<L> predNodeState = predNode.getAnnotation();
                L in = predNodeState.out.get(getCfg().getDirectedSuccNodes(predNode).indexOf(node));
                values.add(in);
            }
            if (getCfg().getEntry() == node) {
                state.setIn(createEntryLattice());
            } else if (!values.isEmpty()) {
                state.setIn(joinOp.apply(values));
            }
        }
    }

    static class BranchedFlowState<L extends com.google.javascript.jscomp.graph.LatticeElement> implements com.google.javascript.jscomp.graph.Annotation {
        private L in;

        private java.util.List<L> out;

        private BranchedFlowState(L inState, java.util.List<L> outState) {
            com.google.common.base.Preconditions.checkNotNull(inState);
            com.google.common.base.Preconditions.checkNotNull(outState);
            this.in = inState;
            this.out = outState;
        }

        L getIn() {
            return in;
        }

        void setIn(L in) {
            com.google.common.base.Preconditions.checkNotNull(in);
            this.in = in;
        }

        java.util.List<L> getOut() {
            return out;
        }

        void setOut(java.util.List<L> out) {
            com.google.common.base.Preconditions.checkNotNull(out);
            for (L item : out) {
                com.google.common.base.Preconditions.checkNotNull(item);
            }
            this.out = out;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.format("IN: %s OUT: %s", in, out);
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(in, out);
        }
    }

    static void computeEscaped(final com.google.javascript.jscomp.Scope jsScope, final java.util.Set<com.google.javascript.jscomp.Scope.Var> escaped, com.google.javascript.jscomp.AbstractCompiler compiler) {
        com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback finder = new com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback() {
            @java.lang.Override
            public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
                if (((jsScope == t.getScope()) || (!n.isName())) || parent.isFunction()) {
                    return;
                }
                java.lang.String name = n.getString();
                com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name);
                if ((var != null) && (var.scope == jsScope)) {
                    escaped.add(jsScope.getVar(name));
                }
            }
        };
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, finder);
        t.traverseAtScope(jsScope);
        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> i = jsScope.getVars(); i.hasNext();) {
            com.google.javascript.jscomp.Scope.Var var = i.next();
            if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {
                escaped.add(var);
            }
        }
    }
}
[1935099] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659910945634
GPR[SSUN]-1659910945634
948429589
GPR[SPVATF]-1659910945879
GPR[EPVATF]-1659910947117
GPR[SPS]-1659910947117
GPR[EPS]-1659910971419
GPR[ESUN]-1659910971419
GPR[SSUN]-1659910971419
948429589
GPR[ESUN]-1659910971665
GPR[SSUN]-1659910971665
948429589
GPR[ESUN]-1659910971913
GPR[SSUN]-1659910971913
948429589
GPR[SPVATF]-1659910972159
GPR[EPVATF]-1659910973380
GPR[SPS]-1659910973380
GPR[EPS]-1659910995436
GPR[ESUN]-1659910995436
GPR[SSUN]-1659910995436
948429589
GPR[SPVATF]-1659910995686
GPR[EPVATF]-1659910996941
GPR[SPS]-1659910996941
[1987404] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$FlowState:362.
GPR[EPS]-1659910997940
GPR[ESUN]-1659910997940
GPR[SSUN]-1659910997940
948429589
GPR[ESUN]-1659910998771
GPR[SSUN]-1659910998771
79711797
GPR[ESUN]-1659910999632
GPR[SSUN]-1659910999632
-132053243
GPR[ESUN]-1659911000124
GPR[SSUN]-1659911000124
-132053243
GPR[SPVATF]-1659911000598
GPR[EPVATF]-1659911000765
[1990230] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659911000765
GPR[EPVATF]-1659911000891
[1990356] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911000891
GPR[SSUN]-1659911000891
-132053243
GPR[ESUN]-1659911001405
GPR[SSUN]-1659911001406
-132053243
GPR[ESUN]-1659911001752
GPR[SSUN]-1659911001752
-132053243
GPR[ESUN]-1659911002061
GPR[SSUN]-1659911002062
-132053243
GPR[SPVATF]-1659911002356
GPR[EPVATF]-1659911002484
[1991949] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659911002484
GPR[EPVATF]-1659911002602
[1992067] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911002602
GPR[SSUN]-1659911002602
-132053243
GPR[SPVATF]-1659911002890
GPR[EPVATF]-1659911003012
[1992477] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911003012
GPR[SSUN]-1659911003012
948429589
GPR[ESUN]-1659911003396
GPR[SSUN]-1659911003396
948429589
GPR[SPVATF]-1659911003736
GPR[EPVATF]-1659911004711
GPR[SPS]-1659911004711
[1995688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:573.
GPR[EPS]-1659911006223
GPR[SPVATF]-1659911006223
GPR[EPVATF]-1659911007098
GPR[SPS]-1659911007098
GPR[EPS]-1659911022067
GPR[ESUN]-1659911022068
GPR[SSUN]-1659911022068
948429589
GPR[ESUN]-1659911022469
GPR[SSUN]-1659911022469
948429589
GPR[SPVATF]-1659911022760
GPR[EPVATF]-1659911023604
GPR[SPS]-1659911023604
[2014010] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:556.
GPR[EPS]-1659911024545
GPR[ESUN]-1659911024545
GPR[SSUN]-1659911024545
948429589
GPR[SPVATF]-1659911024827
GPR[EPVATF]-1659911025712
GPR[SPS]-1659911025712
[2016074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:554.
GPR[EPS]-1659911026609
GPR[SPVATF]-1659911026609
GPR[EPVATF]-1659911027487
GPR[SPS]-1659911027487
[2017858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis$1:554.
GPR[EPS]-1659911028393
GPR[ESUN]-1659911028393
GPR[SSUN]-1659911028393
948429589
GPR[ESUN]-1659911028667
GPR[SSUN]-1659911028667
948429589
GPR[SPVATF]-1659911028935
GPR[EPVATF]-1659911029849
GPR[SPS]-1659911029849
[2020166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:571.
GPR[EPS]-1659911030701
GPR[ESUN]-1659911030701
GPR[SSUN]-1659911030701
948429589
GPR[SPVATF]-1659911030967
GPR[EPVATF]-1659911031831
GPR[SPS]-1659911031831
[2022195] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:567.
GPR[EPS]-1659911032730
GPR[ESUN]-1659911032730
GPR[SSUN]-1659911032730
948429589
GPR[ESUN]-1659911032996
GPR[SSUN]-1659911032996
948429589
GPR[ESUN]-1659911033285
GPR[SSUN]-1659911033285
948429589
GPR[ESUN]-1659911033551
GPR[SSUN]-1659911033551
948429589
GPR[ESUN]-1659911033817
GPR[SSUN]-1659911033817
948429589
GPR[SPVATF]-1659911034075
GPR[EPVATF]-1659911034958
GPR[SPS]-1659911034958
GPR[EPS]-1659911046351
GPR[SPVATF]-1659911046351
GPR[EPVATF]-1659911047230
GPR[SPS]-1659911047230
GPR[EPS]-1659911059862
GPR[ESUN]-1659911059862
GPR[SSUN]-1659911059862
948429589
GPR[ESUN]-1659911060119
GPR[SSUN]-1659911060119
948429589
GPR[SPVATF]-1659911060380
GPR[EPVATF]-1659911061256
GPR[SPS]-1659911061256
GPR[EPS]-1659911079440
GPR[ESUN]-1659911079440
GPR[SSUN]-1659911079440
948429589
GPR[ESUN]-1659911079700
GPR[SSUN]-1659911079700
948429589
GPR[ESUN]-1659911079950
GPR[SSUN]-1659911079950
948429589
GPR[ESUN]-1659911080197
GPR[SSUN]-1659911080197
948429589
GPR[SPVATF]-1659911080445
GPR[EPVATF]-1659911081434
GPR[SPS]-1659911081434
GPR[EPS]-1659911097384
GPR[ESUN]-1659911097384
GPR[SSUN]-1659911097384
948429589
GPR[SPVATF]-1659911097675
GPR[EPVATF]-1659911098712
GPR[SPS]-1659911098712
GPR[EPS]-1659911114737
GPR[SPVATF]-1659911114738
GPR[EPVATF]-1659911115880
GPR[SPS]-1659911115880
GPR[EPS]-1659911132423
GPR[ESUN]-1659911132423
GPR[SSUN]-1659911132423
948429589
GPR[SPVATF]-1659911132684
GPR[EPVATF]-1659911133917
GPR[SPS]-1659911133917
[2124105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:254.
GPR[EPS]-1659911134640
GPR[ESUN]-1659911134640
GPR[SSUN]-1659911134640
948429589
GPR[SPVATF]-1659911134908
GPR[EPVATF]-1659911136163
GPR[SPS]-1659911136163
[2126359] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:253.
GPR[EPS]-1659911136894
GPR[ESUN]-1659911136894
GPR[SSUN]-1659911136894
948429589
GPR[SPVATF]-1659911137146
GPR[EPVATF]-1659911138397
GPR[SPS]-1659911138397
[2128590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:252.
GPR[EPS]-1659911139125
GPR[ESUN]-1659911139125
GPR[SSUN]-1659911139125
1331276989
GPR[SPVATF]-1659911139375
GPR[EPVATF]-1659911140651
GPR[SPS]-1659911140651
[2130855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:357.
GPR[EPS]-1659911141390
GPR[ESUN]-1659911141390
GPR[SSUN]-1659911141390
1331276989
GPR[ESUN]-1659911141645
GPR[SSUN]-1659911141645
1331276989
GPR[ESUN]-1659911141871
GPR[SSUN]-1659911141871
1331276989
GPR[SPVATF]-1659911142091
GPR[EPVATF]-1659911143410
GPR[SPS]-1659911143410
[2133600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:368.
GPR[EPS]-1659911144135
GPR[ESUN]-1659911144135
GPR[SSUN]-1659911144135
1331276989
GPR[SPVATF]-1659911144359
GPR[EPVATF]-1659911145589
GPR[SPS]-1659911145589
[2135845] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:366.
GPR[EPS]-1659911146380
GPR[ESUN]-1659911146380
GPR[SSUN]-1659911146380
1331276989
GPR[SPVATF]-1659911146604
GPR[EPVATF]-1659911147847
GPR[SPS]-1659911147847
[2137999] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:365.
GPR[EPS]-1659911148534
GPR[ESUN]-1659911148534
GPR[SSUN]-1659911148534
1331276989
GPR[ESUN]-1659911148760
GPR[SSUN]-1659911148760
1331276989
GPR[ESUN]-1659911148981
GPR[SSUN]-1659911148981
1331276989
GPR[SPVATF]-1659911149202
GPR[EPVATF]-1659911150455
GPR[SPS]-1659911150455
[2140602] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:361.
GPR[EPS]-1659911151137
GPR[ESUN]-1659911151137
GPR[SSUN]-1659911151137
1331276989
GPR[SPVATF]-1659911151363
GPR[EPVATF]-1659911152617
GPR[SPS]-1659911152617
[2142777] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:360.
GPR[EPS]-1659911153312
GPR[ESUN]-1659911153312
GPR[SSUN]-1659911153312
1331276989
GPR[SPVATF]-1659911153535
GPR[EPVATF]-1659911154801
GPR[SPS]-1659911154801
[2145040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:359.
GPR[EPS]-1659911155575
GPR[ESUN]-1659911155575
GPR[SSUN]-1659911155575
1331276989
GPR[SPVATF]-1659911155802
GPR[EPVATF]-1659911157064
GPR[SPS]-1659911157064
[2147262] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:356.
GPR[EPS]-1659911157797
GPR[SPVATF]-1659911157798
GPR[EPVATF]-1659911159058
GPR[SPS]-1659911159058
[2149219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:356.
GPR[EPS]-1659911159754
GPR[ESUN]-1659911159754
GPR[SSUN]-1659911159754
1331276989
GPR[SPVATF]-1659911159976
GPR[EPVATF]-1659911161204
GPR[SPS]-1659911161204
[2151370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:353.
GPR[EPS]-1659911161905
GPR[SPVATF]-1659911161905
GPR[EPVATF]-1659911163159
GPR[SPS]-1659911163159
[2153315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:353.
GPR[EPS]-1659911163850
GPR[ESUN]-1659911163850
GPR[SSUN]-1659911163850
1331276989
GPR[ESUN]-1659911164072
GPR[SSUN]-1659911164073
80988634
GPR[ESUN]-1659911164256
GPR[SSUN]-1659911164256
-132053243
GPR[SPVATF]-1659911164456
GPR[EPVATF]-1659911164546
[2154011] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911164546
GPR[SSUN]-1659911164546
-132053243
GPR[SPVATF]-1659911164745
GPR[EPVATF]-1659911164836
[2154302] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911164837
GPR[SSUN]-1659911164837
-132053243
GPR[SPVATF]-1659911165034
GPR[EPVATF]-1659911165124
[2154589] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659911165124
GPR[EPVATF]-1659911165214
[2154679] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911165215
GPR[SSUN]-1659911165215
1852376448
GPR[SPVATF]-1659911165457
GPR[EPVATF]-1659911166708
GPR[SPS]-1659911166708
[2156928] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:126.
GPR[EPS]-1659911167463
GPR[SPVATF]-1659911167464
GPR[EPVATF]-1659911168741
GPR[SPS]-1659911168741
[2158895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:126.
GPR[EPS]-1659911169431
GPR[ESUN]-1659911169431
GPR[SSUN]-1659911169431
2013302092
GPR[SPVATF]-1659911169690
GPR[EPVATF]-1659911170950
GPR[SPS]-1659911170950
[2161138] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder:84.
GPR[EPS]-1659911171673
GPR[SPVATF]-1659911171674
GPR[EPVATF]-1659911172946
GPR[SPS]-1659911172946
[2163147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder:84.
GPR[EPS]-1659911173682
GPR[ESUN]-1659911173682
GPR[SSUN]-1659911173682
2013302092
GPR[ESUN]-1659911173946
GPR[SSUN]-1659911173946
-1117079791
GPR[SPVATF]-1659911174159
GPR[EPVATF]-1659911175425
GPR[SPS]-1659911175425
[2165544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:795.
GPR[EPS]-1659911176079
GPR[ESUN]-1659911176079
GPR[SSUN]-1659911176079
2013302092
GPR[SPVATF]-1659911176348
GPR[EPVATF]-1659911177607
GPR[SPS]-1659911177607
[2167825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:205.
GPR[EPS]-1659911178360
GPR[ESUN]-1659911178360
GPR[SSUN]-1659911178360
2013302092
GPR[SPVATF]-1659911178623
GPR[EPVATF]-1659911179939
GPR[SPS]-1659911179939
[2170136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:194.
GPR[EPS]-1659911180671
GPR[ESUN]-1659911180671
GPR[SSUN]-1659911180671
2013302092
GPR[SPVATF]-1659911180930
GPR[EPVATF]-1659911182200
GPR[SPS]-1659911182200
[2172408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:193.
GPR[EPS]-1659911182943
GPR[SPVATF]-1659911182943
GPR[EPVATF]-1659911184214
GPR[SPS]-1659911184214
[2174399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:193.
GPR[EPS]-1659911184934
GPR[ESUN]-1659911184934
GPR[SSUN]-1659911184934
2013302092
GPR[ESUN]-1659911185194
GPR[SSUN]-1659911185194
2013302092
GPR[ESUN]-1659911185449
GPR[SSUN]-1659911185449
-1117079791
GPR[SPVATF]-1659911185660
GPR[EPVATF]-1659911186958
GPR[SPS]-1659911186958
[2178773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:483.
GPR[EPS]-1659911189308
GPR[ESUN]-1659911189308
GPR[SSUN]-1659911189309
-132053243
GPR[ESUN]-1659911189763
GPR[SSUN]-1659911189764
-132053243
GPR[SPVATF]-1659911190103
GPR[EPVATF]-1659911190888
[2180353] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659911190889
GPR[EPVATF]-1659911191063
[2180528] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911191063
GPR[SSUN]-1659911191063
-132053243
GPR[ESUN]-1659911191501
GPR[SSUN]-1659911191501
-1117079791
GPR[ESUN]-1659911191883
GPR[SSUN]-1659911191883
-1117079791
GPR[SPVATF]-1659911192236
GPR[EPVATF]-1659911193374
GPR[SPS]-1659911193374
[2184315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659911194850
GPR[SPVATF]-1659911194851
GPR[EPVATF]-1659911195771
GPR[SPS]-1659911195771
[2186193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:482.
GPR[EPS]-1659911196728
GPR[ESUN]-1659911196728
GPR[SSUN]-1659911196729
-1117079791
GPR[SPVATF]-1659911196973
GPR[EPVATF]-1659911197876
GPR[SPS]-1659911197876
[2188210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659911198745
GPR[ESUN]-1659911198745
GPR[SSUN]-1659911198745
-1117079791
GPR[SPVATF]-1659911198994
GPR[EPVATF]-1659911199926
GPR[SPS]-1659911199926
[2190212] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:480.
GPR[EPS]-1659911200747
GPR[ESUN]-1659911200747
GPR[SSUN]-1659911200747
-1117079791
GPR[ESUN]-1659911200974
GPR[SSUN]-1659911200974
-1117079791
GPR[SPVATF]-1659911201205
GPR[EPVATF]-1659911202128
GPR[SPS]-1659911202128
[2192423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:128.
GPR[EPS]-1659911202958
GPR[ESUN]-1659911202959
GPR[SSUN]-1659911202959
80988634
GPR[ESUN]-1659911203149
GPR[SSUN]-1659911203149
-132053243
GPR[SPVATF]-1659911203380
GPR[EPVATF]-1659911203483
[2192948] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911203483
GPR[SSUN]-1659911203483
-132053243
GPR[SPVATF]-1659911203703
GPR[EPVATF]-1659911203798
[2193263] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911203798
GPR[SSUN]-1659911203798
-132053243
GPR[SPVATF]-1659911204017
GPR[EPVATF]-1659911204124
[2193589] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911204124
GPR[SSUN]-1659911204124
-132053243
GPR[SPVATF]-1659911204347
GPR[EPVATF]-1659911204446
[2193911] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911204446
GPR[SSUN]-1659911204446
-132053243
GPR[SPVATF]-1659911204664
GPR[EPVATF]-1659911204828
[2194293] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911204828
GPR[SSUN]-1659911204828
-132053243
GPR[ESUN]-1659911205044
GPR[SSUN]-1659911205044
GPR[ESUN]-1659911205044
GPR[SSUN]-1659911205044
-1966087783
GPR[ESUN]-1659911205283
GPR[SSUN]-1659911205283
-1966087783
GPR[SPVATF]-1659911205507
GPR[EPVATF]-1659911205619
[2195085] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659911205620
GPR[EPVATF]-1659911205708
[2195173] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659911205708
GPR[SSUN]-1659911205708
GPR[ESUN]-1659911205708
GPR[SSUN]-1659911205708
1852376448
GPR[ESUN]-1659911206077
GPR[SSUN]-1659911206077
-1117079791
GPR[SPVATF]-1659911206306
GPR[EPVATF]-1659911207202
GPR[SPS]-1659911207202
[2197479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:794.
GPR[EPS]-1659911208014
GPR[SPVATF]-1659911208014
GPR[EPVATF]-1659911208913
GPR[SPS]-1659911208913
[2199179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:794.
GPR[EPS]-1659911209714
GPR[ESUN]-1659911209714
GPR[SSUN]-1659911209714
-1117079791
GPR[SPVATF]-1659911209935
GPR[EPVATF]-1659911210834
GPR[SPS]-1659911210835
[2201036] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:812.
GPR[EPS]-1659911211571
GPR[ESUN]-1659911211572
GPR[SSUN]-1659911211572
1187751237
GPR[SPVATF]-1659911212000
GPR[EPVATF]-1659911212931
GPR[SPS]-1659911212931
[2203552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:845.
GPR[EPS]-1659911214087
GPR[SPVATF]-1659911214087
GPR[EPVATF]-1659911215044
GPR[SPS]-1659911215044
GPR[EPS]-1659911233189
GPR[ESUN]-1659911233189
GPR[SSUN]-1659911233189
1852376448
GPR[SPVATF]-1659911233446
GPR[EPVATF]-1659911234377
GPR[SPS]-1659911234377
[2224654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659911235189
GPR[SPVATF]-1659911235189
GPR[EPVATF]-1659911236146
GPR[SPS]-1659911236146
[2226422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:157.
GPR[EPS]-1659911236957
GPR[ESUN]-1659911236957
GPR[SSUN]-1659911236957
1852376448
GPR[SPVATF]-1659911237214
GPR[EPVATF]-1659911238165
GPR[SPS]-1659911238165
[2228408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659911238943
GPR[SPVATF]-1659911238943
GPR[EPVATF]-1659911239923
GPR[SPS]-1659911239923
[2230120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:140.
GPR[EPS]-1659911240655
GPR[ESUN]-1659911240656
GPR[SSUN]-1659911240656
1852376448
GPR[ESUN]-1659911240905
GPR[SSUN]-1659911240905
1852376448
GPR[SPVATF]-1659911241152
GPR[EPVATF]-1659911242161
GPR[SPS]-1659911242161
[2232368] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:136.
GPR[EPS]-1659911242903
GPR[ESUN]-1659911242903
GPR[SSUN]-1659911242903
1852376448
GPR[ESUN]-1659911243158
GPR[SSUN]-1659911243158
1852376448
GPR[ESUN]-1659911243408
GPR[SSUN]-1659911243408
-1251822497
GPR[SPVATF]-1659911243617
GPR[EPVATF]-1659911244644
GPR[SPS]-1659911244644
[2234401] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(annotation);
            position.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
            marker.setAnnotation(position);
            populated = true;
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.StringPosition position = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            position.setItem(text);
            position.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
            currentMarker.setDescription(position);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TypePosition position = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            position.setItem(typeNode);
            position.setHasBrackets(hasLC);
            position.setPositionInformation(lineno, startCharno, endLineno, endCharno);
            currentMarker.setType(position);
        }
    }

    @java.lang.Deprecated
    public void markName(java.lang.String name, int lineno, int charno) {
        markName(name, null, lineno, charno);
    }

    public void markName(java.lang.String name, com.google.javascript.rhino.jstype.StaticSourceFile file, int lineno, int charno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(name);
            position.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setName(position);
            com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodePos = new com.google.javascript.rhino.JSDocInfo.NamePosition();
            com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name, lineno, charno);
            node.setLength(name.length());
            node.setStaticSourceFile(file);
            nodePos.setItem(node);
            nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setNameNode(nodePos);
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeNames(java.util.List<java.lang.String> names) {
        if (currentInfo.declareTemplateTypeNames(names)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordStableIdGenerator() {
        if (!currentInfo.isStableIdGenerator()) {
            currentInfo.setStableIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordStruct() {
        if (((hasAnySingletonTypeTags() || currentInfo.isInterface()) || currentInfo.makesDicts()) || currentInfo.makesStructs()) {
            return false;
        }
        currentInfo.setStruct();
        populated = true;
        return true;
    }

    public boolean recordDict() {
        if (((hasAnySingletonTypeTags() || currentInfo.isInterface()) || currentInfo.makesDicts()) || currentInfo.makesStructs()) {
            return false;
        }
        currentInfo.setDict();
        populated = true;
        return true;
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if ((((hasAnySingletonTypeTags() || currentInfo.makesStructs()) || currentInfo.makesDicts()) || currentInfo.isConstructor()) || currentInfo.isInterface()) {
            return false;
        }
        currentInfo.setInterface(true);
        populated = true;
        return true;
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExpose() {
        if (!currentInfo.isExpose()) {
            currentInfo.setExpose(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(461).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(461).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(461).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(461).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(461).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(461).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(461).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(461).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[2234403] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659911244938
GPR[SSUN]-1659911244938
-1251822497
GPR[SPVATF]-1659911245170
GPR[EPVATF]-1659911246289
GPR[SPS]-1659911246289
[2236392] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:935.
GPR[EPS]-1659911246928
GPR[ESUN]-1659911246928
GPR[SSUN]-1659911246928
-1251822497
GPR[SPVATF]-1659911247140
GPR[EPVATF]-1659911248206
GPR[SPS]-1659911248206
[2238295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:934.
GPR[EPS]-1659911248830
GPR[ESUN]-1659911248830
GPR[SSUN]-1659911248830
1508981886
GPR[ESUN]-1659911249078
GPR[SSUN]-1659911249078
1508981886
GPR[SPVATF]-1659911249312
GPR[EPVATF]-1659911250387
GPR[SPS]-1659911250387
[2240581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:419.
GPR[EPS]-1659911251116
GPR[ESUN]-1659911251117
GPR[SSUN]-1659911251117
1852376448
GPR[SPVATF]-1659911251361
GPR[EPVATF]-1659911252487
GPR[SPS]-1659911252487
[2242658] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:183.
GPR[EPS]-1659911253193
GPR[SPVATF]-1659911253194
GPR[EPVATF]-1659911254362
GPR[SPS]-1659911254362
[2244539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:183.
GPR[EPS]-1659911255074
GPR[ESUN]-1659911255074
GPR[SSUN]-1659911255074
1852376448
GPR[ESUN]-1659911255317
GPR[SSUN]-1659911255317
-1251822497
GPR[SPVATF]-1659911255522
GPR[EPVATF]-1659911256697
GPR[SPS]-1659911256697
[2246782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:932.
GPR[EPS]-1659911257317
GPR[ESUN]-1659911257317
GPR[SSUN]-1659911257317
-179796259
GPR[SPVATF]-1659911257596
GPR[EPVATF]-1659911258942
GPR[SPS]-1659911258942
[2249394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:723.
GPR[EPS]-1659911259929
GPR[ESUN]-1659911259929
GPR[SSUN]-1659911259929
-179796259
GPR[SPVATF]-1659911260204
GPR[EPVATF]-1659911261456
GPR[SPS]-1659911261456
[2251862] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:722.
GPR[EPS]-1659911262397
GPR[ESUN]-1659911262397
GPR[SSUN]-1659911262397
-179796259
GPR[SPVATF]-1659911262679
GPR[EPVATF]-1659911264035
GPR[SPS]-1659911264035
[2254381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:718.
GPR[EPS]-1659911264916
GPR[SPVATF]-1659911264917
GPR[EPVATF]-1659911266204
GPR[SPS]-1659911266204
[2256713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:718.
GPR[EPS]-1659911267248
GPR[ESUN]-1659911267248
GPR[SSUN]-1659911267248
80988634
GPR[ESUN]-1659911267430
GPR[SSUN]-1659911267430
-1251822497
GPR[ESUN]-1659911267627
GPR[SSUN]-1659911267627
1508981886
GPR[ESUN]-1659911267857
GPR[SSUN]-1659911267857
1508981886
GPR[ESUN]-1659911268081
GPR[SSUN]-1659911268081
-718432441
GPR[SPVATF]-1659911268314
GPR[EPVATF]-1659911269588
GPR[SPS]-1659911269588
[2259914] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:659.
GPR[EPS]-1659911270449
GPR[ESUN]-1659911270449
GPR[SSUN]-1659911270449
-718432441
GPR[SPVATF]-1659911270687
GPR[EPVATF]-1659911271971
GPR[SPS]-1659911271971
[2262295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:658.
GPR[EPS]-1659911272830
GPR[ESUN]-1659911272830
GPR[SSUN]-1659911272830
-718432441
GPR[SPVATF]-1659911273068
GPR[EPVATF]-1659911274351
GPR[SPS]-1659911274351
[2264723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:656.
GPR[EPS]-1659911275258
GPR[ESUN]-1659911275259
GPR[SSUN]-1659911275259
-718432441
GPR[SPVATF]-1659911275517
GPR[EPVATF]-1659911276806
GPR[SPS]-1659911276806
[2266933] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private static final java.lang.String LT_ESCAPED = "\\x3c";

    private static final java.lang.String GT_ESCAPED = "\\x3e";

    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    private final boolean preferSingleQuotes;

    private final boolean trustedStrings;

    private CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        cc = consumer;
        outputCharsetEncoder = null;
        preferSingleQuotes = false;
        trustedStrings = true;
    }

    static com.google.javascript.jscomp.CodeGenerator forCostEstimation(com.google.javascript.jscomp.CodeConsumer consumer) {
        return new com.google.javascript.jscomp.CodeGenerator(consumer);
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, com.google.javascript.jscomp.CompilerOptions options) {
        cc = consumer;
        java.nio.charset.Charset outputCharset = options.getOutputCharset();
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
        this.preferSingleQuotes = options.preferSingleQuotes;
        this.trustedStrings = options.trustedStrings;
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.CAST :
                add("(");
                add(first);
                add(")");
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (preferSingleQuotes ? singleq <= doubleq : singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(475).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("com.google.javascript.jscomp.CodeGenerator.this.preferSingleQuotes",com.google.javascript.jscomp.CodeGenerator.this.preferSingleQuotes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("com.google.javascript.jscomp.CodeGenerator.this.trustedStrings",com.google.javascript.jscomp.CodeGenerator.this.trustedStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED",com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED",com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(475).collectionEnds();
            }
            if (runtimeAngelicValue)
                singlequote = "\'";

        }
        return strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV, false);
    }

    java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false, true);
    }

    java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return strEscape(s, '"', "\\\"", "\'", "\\\\", null, false, false);
    }

    java.lang.String regexpEscape(java.lang.String s) {
        return regexpEscape(s, null);
    }

    private java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV, boolean isRegexp) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '=' :
                    if (trustedStrings || isRegexp) {
                        sb.append(c);
                    } else {
                        sb.append("\\x3d");
                    }
                    break;
                case '&' :
                    if (trustedStrings || isRegexp) {
                        sb.append(c);
                    } else {
                        sb.append("\\x26");
                    }
                    break;
                case '>' :
                    if ((!trustedStrings) && (!isRegexp)) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);
                        break;
                    }
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    if ((!trustedStrings) && (!isRegexp)) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                        break;
                    }
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[2266934] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659911277469
GPR[SSUN]-1659911277469
-718432441
GPR[SPVATF]-1659911277711
GPR[EPVATF]-1659911278999
GPR[SPS]-1659911278999
[2269105] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private static final java.lang.String LT_ESCAPED = "\\x3c";

    private static final java.lang.String GT_ESCAPED = "\\x3e";

    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    private final boolean preferSingleQuotes;

    private final boolean trustedStrings;

    private CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        cc = consumer;
        outputCharsetEncoder = null;
        preferSingleQuotes = false;
        trustedStrings = true;
    }

    static com.google.javascript.jscomp.CodeGenerator forCostEstimation(com.google.javascript.jscomp.CodeConsumer consumer) {
        return new com.google.javascript.jscomp.CodeGenerator(consumer);
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, com.google.javascript.jscomp.CompilerOptions options) {
        cc = consumer;
        java.nio.charset.Charset outputCharset = options.getOutputCharset();
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
        this.preferSingleQuotes = options.preferSingleQuotes;
        this.trustedStrings = options.trustedStrings;
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.CAST :
                add("(");
                add(first);
                add(")");
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (preferSingleQuotes ? singleq <= doubleq : singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(476).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("com.google.javascript.jscomp.CodeGenerator.this.preferSingleQuotes",com.google.javascript.jscomp.CodeGenerator.this.preferSingleQuotes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("com.google.javascript.jscomp.CodeGenerator.this.trustedStrings",com.google.javascript.jscomp.CodeGenerator.this.trustedStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED",com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED",com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(476).collectionEnds();
            }
            if (runtimeAngelicValue)
                doublequote = "\\\"";

            singlequote = "\'";
        }
        return strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV, false);
    }

    java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false, true);
    }

    java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return strEscape(s, '"', "\\\"", "\'", "\\\\", null, false, false);
    }

    java.lang.String regexpEscape(java.lang.String s) {
        return regexpEscape(s, null);
    }

    private java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV, boolean isRegexp) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '=' :
                    if (trustedStrings || isRegexp) {
                        sb.append(c);
                    } else {
                        sb.append("\\x3d");
                    }
                    break;
                case '&' :
                    if (trustedStrings || isRegexp) {
                        sb.append(c);
                    } else {
                        sb.append("\\x26");
                    }
                    break;
                case '>' :
                    if ((!trustedStrings) && (!isRegexp)) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);
                        break;
                    }
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    if ((!trustedStrings) && (!isRegexp)) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                        break;
                    }
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[2269107] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659911279642
GPR[SSUN]-1659911279642
-718432441
GPR[SPVATF]-1659911279879
GPR[EPVATF]-1659911281155
GPR[SPS]-1659911281155
[2271294] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private static final java.lang.String LT_ESCAPED = "\\x3c";

    private static final java.lang.String GT_ESCAPED = "\\x3e";

    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    private final boolean preferSingleQuotes;

    private final boolean trustedStrings;

    private CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        cc = consumer;
        outputCharsetEncoder = null;
        preferSingleQuotes = false;
        trustedStrings = true;
    }

    static com.google.javascript.jscomp.CodeGenerator forCostEstimation(com.google.javascript.jscomp.CodeConsumer consumer) {
        return new com.google.javascript.jscomp.CodeGenerator(consumer);
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, com.google.javascript.jscomp.CompilerOptions options) {
        cc = consumer;
        java.nio.charset.Charset outputCharset = options.getOutputCharset();
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
        this.preferSingleQuotes = options.preferSingleQuotes;
        this.trustedStrings = options.trustedStrings;
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.CAST :
                add("(");
                add(first);
                add(")");
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (preferSingleQuotes ? singleq <= doubleq : singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(477).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("com.google.javascript.jscomp.CodeGenerator.this.preferSingleQuotes",com.google.javascript.jscomp.CodeGenerator.this.preferSingleQuotes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("com.google.javascript.jscomp.CodeGenerator.this.trustedStrings",com.google.javascript.jscomp.CodeGenerator.this.trustedStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED",com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED",com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(477).collectionEnds();
            }
            if (runtimeAngelicValue)
                quote = '\"';

            doublequote = "\\\"";
            singlequote = "\'";
        }
        return strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV, false);
    }

    java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false, true);
    }

    java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return strEscape(s, '"', "\\\"", "\'", "\\\\", null, false, false);
    }

    java.lang.String regexpEscape(java.lang.String s) {
        return regexpEscape(s, null);
    }

    private java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV, boolean isRegexp) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '=' :
                    if (trustedStrings || isRegexp) {
                        sb.append(c);
                    } else {
                        sb.append("\\x3d");
                    }
                    break;
                case '&' :
                    if (trustedStrings || isRegexp) {
                        sb.append(c);
                    } else {
                        sb.append("\\x26");
                    }
                    break;
                case '>' :
                    if ((!trustedStrings) && (!isRegexp)) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);
                        break;
                    }
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    if ((!trustedStrings) && (!isRegexp)) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                        break;
                    }
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[2271296] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659911281832
GPR[SSUN]-1659911281832
-718432441
GPR[SPVATF]-1659911282067
GPR[EPVATF]-1659911283349
GPR[SPS]-1659911283349
[2273675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:986.
GPR[EPS]-1659911284211
GPR[ESUN]-1659911284211
GPR[SSUN]-1659911284212
-718432441
GPR[SPVATF]-1659911284449
GPR[EPVATF]-1659911285733
GPR[SPS]-1659911285733
[2276059] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:984.
GPR[EPS]-1659911286594
GPR[ESUN]-1659911286594
GPR[SSUN]-1659911286594
-718432441
GPR[SPVATF]-1659911286833
GPR[EPVATF]-1659911288125
GPR[SPS]-1659911288125
[2278509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:983.
GPR[EPS]-1659911289044
GPR[ESUN]-1659911289044
GPR[SSUN]-1659911289044
-718432441
GPR[SPVATF]-1659911289281
GPR[EPVATF]-1659911290564
GPR[SPS]-1659911290564
[2280898] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:982.
GPR[EPS]-1659911291433
GPR[SPVATF]-1659911291433
GPR[EPVATF]-1659911292704
GPR[SPS]-1659911292704
[2283027] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:982.
GPR[EPS]-1659911293562
GPR[ESUN]-1659911293562
GPR[SSUN]-1659911293562
-718432441
GPR[ESUN]-1659911293799
GPR[SSUN]-1659911293799
-718432441
GPR[ESUN]-1659911294035
GPR[SSUN]-1659911294035
-718432441
GPR[SPVATF]-1659911294274
GPR[EPVATF]-1659911295565
GPR[SPS]-1659911295565
[2285718] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private static final java.lang.String LT_ESCAPED = "\\x3c";

    private static final java.lang.String GT_ESCAPED = "\\x3e";

    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    private final boolean preferSingleQuotes;

    private final boolean trustedStrings;

    private CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        cc = consumer;
        outputCharsetEncoder = null;
        preferSingleQuotes = false;
        trustedStrings = true;
    }

    static com.google.javascript.jscomp.CodeGenerator forCostEstimation(com.google.javascript.jscomp.CodeConsumer consumer) {
        return new com.google.javascript.jscomp.CodeGenerator(consumer);
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, com.google.javascript.jscomp.CompilerOptions options) {
        cc = consumer;
        java.nio.charset.Charset outputCharset = options.getOutputCharset();
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
        this.preferSingleQuotes = options.preferSingleQuotes;
        this.trustedStrings = options.trustedStrings;
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            case com.google.javascript.rhino.Token.CAST :
                add("(");
                add(first);
                add(")");
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(483).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("com.google.javascript.jscomp.CodeGenerator.this.preferSingleQuotes",com.google.javascript.jscomp.CodeGenerator.this.preferSingleQuotes);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("singleq < doubleq",singleq < doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("com.google.javascript.jscomp.CodeGenerator.this.trustedStrings",com.google.javascript.jscomp.CodeGenerator.this.trustedStrings);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED",com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("singleq <= doubleq",singleq <= doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED",com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(483).collectionEnds();
        }
        if (runtimeAngelicValue) if (preferSingleQuotes ? singleq <= doubleq : singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            singlequote = "\'";
        }
        return strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV, false);
    }

    java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false, true);
    }

    java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return strEscape(s, '"', "\\\"", "\'", "\\\\", null, false, false);
    }

    java.lang.String regexpEscape(java.lang.String s) {
        return regexpEscape(s, null);
    }

    private java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV, boolean isRegexp) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '=' :
                    if (trustedStrings || isRegexp) {
                        sb.append(c);
                    } else {
                        sb.append("\\x3d");
                    }
                    break;
                case '&' :
                    if (trustedStrings || isRegexp) {
                        sb.append(c);
                    } else {
                        sb.append("\\x26");
                    }
                    break;
                case '>' :
                    if ((!trustedStrings) && (!isRegexp)) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);
                        break;
                    }
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED);
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    if ((!trustedStrings) && (!isRegexp)) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                        break;
                    }
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append(com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED);
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[2285719] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659911296254
GPR[EPVATF]-1659911297535
GPR[SPS]-1659911297535
[2287867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1003.
GPR[EPS]-1659911298403
GPR[ESUN]-1659911298403
GPR[SSUN]-1659911298403
-718432441
GPR[SPVATF]-1659911298649
GPR[EPVATF]-1659911299935
GPR[SPS]-1659911299935
[2290277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:994.
GPR[EPS]-1659911300812
GPR[ESUN]-1659911300812
GPR[SSUN]-1659911300812
-718432441
GPR[ESUN]-1659911301054
GPR[SSUN]-1659911301054
-718432441
GPR[ESUN]-1659911301293
GPR[SSUN]-1659911301293
-718432441
GPR[SPVATF]-1659911301531
GPR[EPVATF]-1659911302816
GPR[SPS]-1659911302816
[2293160] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:978.
GPR[EPS]-1659911303695
GPR[SPVATF]-1659911303695
GPR[EPVATF]-1659911305039
GPR[SPS]-1659911305039
[2295362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:978.
GPR[EPS]-1659911305897
GPR[ESUN]-1659911305897
GPR[SSUN]-1659911305897
-718432441
GPR[ESUN]-1659911306138
GPR[SSUN]-1659911306138
-718432441
GPR[ESUN]-1659911306376
GPR[SSUN]-1659911306376
2013302092
GPR[SPVATF]-1659911306641
GPR[EPVATF]-1659911307943
GPR[SPS]-1659911307943
[2297779] ERROR ConstraintModelBuilder - Unable to compile the change: 
class SimpleDefinitionFinder implements com.google.javascript.jscomp.CompilerPass , com.google.javascript.jscomp.DefinitionProvider {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.DefinitionSite> definitionSiteMap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.DefinitionsRemover.Definition> nameDefinitionMultimap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.UseSite> nameUseSiteMultimap;

    public SimpleDefinitionFinder(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
        this.definitionSiteMap = com.google.common.collect.Maps.newLinkedHashMap();
        this.nameDefinitionMultimap = com.google.common.collect.LinkedHashMultimap.create();
        this.nameUseSiteMultimap = com.google.common.collect.LinkedHashMultimap.create();
    }

    public java.util.Collection<com.google.javascript.jscomp.DefinitionSite> getDefinitionSites() {
        return definitionSiteMap.values();
    }

    private com.google.javascript.jscomp.DefinitionSite getDefinitionAt(com.google.javascript.rhino.Node node) {
        return definitionSiteMap.get(node);
    }

    com.google.javascript.jscomp.DefinitionSite getDefinitionForFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return getDefinitionAt(com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(function));
    }

    @java.lang.Override
    public java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> getDefinitionsReferencedAt(com.google.javascript.rhino.Node useSite) {
        if (definitionSiteMap.containsKey(useSite)) {
            return null;
        }
        if (useSite.isGetProp()) {
            java.lang.String propName = useSite.getLastChild().getString();
            if (propName.equals("apply") || propName.equals("call")) {
                useSite = useSite.getFirstChild();
            }
        }
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
        if (name != null) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = nameDefinitionMultimap.get(name);
            if (!defs.isEmpty()) {
                return defs;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(488).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectInput("defs",defs);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler",com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectInput("useSite",useSite);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(488).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return null;

            }
        } else {
            return null;
        }
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node source) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externs, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(true));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(false));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.UseSiteGatheringCallback());
    }

    java.util.Collection<com.google.javascript.jscomp.UseSite> getUseSites(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(definition.getLValue());
        return nameUseSiteMultimap.get(name);
    }

    private static java.lang.String getSimplifiedName(com.google.javascript.rhino.Node node) {
        if (node.isName()) {
            java.lang.String name = node.getString();
            if ((name != null) && (!name.isEmpty())) {
                return name;
            } else {
                return null;
            }
        } else if (node.isGetProp()) {
            return "this." + node.getLastChild().getString();
        }
        return null;
    }

    private class DefinitionGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        private boolean inExterns;

        DefinitionGatheringCallback(boolean inExterns) {
            this.inExterns = inExterns;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            if ((inExterns && node.isName()) && parent.isParamList()) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition def = com.google.javascript.jscomp.DefinitionsRemover.getDefinition(node, inExterns);
            if (def != null) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    com.google.javascript.rhino.Node rValue = def.getRValue();
                    if (((rValue != null) && (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(rValue))) && (!rValue.isFunction())) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition unknownDef = new com.google.javascript.jscomp.DefinitionsRemover.UnknownDefinition(def.getLValue(), inExterns);
                        def = unknownDef;
                    }
                    if (inExterns) {
                        java.util.List<com.google.javascript.jscomp.DefinitionsRemover.Definition> stubsToRemove = com.google.common.collect.Lists.newArrayList();
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                if ((prevDef instanceof com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition) && (!jsdocContainsDeclarations(node))) {
                                    java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                    if (qualifiedName.equals(prevName)) {
                                        stubsToRemove.add(prevDef);
                                    }
                                }
                            }
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : stubsToRemove) {
                                nameDefinitionMultimap.remove(name, prevDef);
                            }
                        }
                    }
                    nameDefinitionMultimap.put(name, def);
                    definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, def, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                }
            }
            if ((inExterns && (parent != null)) && parent.isExprResult()) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(node);
                if (name != null) {
                    boolean dropStub = false;
                    if (!jsdocContainsDeclarations(node)) {
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                if (qualifiedName.equals(prevName)) {
                                    dropStub = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!dropStub) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition definition = new com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition(node);
                        nameDefinitionMultimap.put(name, definition);
                        definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, definition, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                    }
                }
            }
        }

        private boolean jsdocContainsDeclarations(com.google.javascript.rhino.Node node) {
            com.google.javascript.rhino.JSDocInfo info = node.getJSDocInfo();
            return (info != null) && info.containsDeclaration();
        }
    }

    private class UseSiteGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = getDefinitionsReferencedAt(node);
            if (defs == null) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition first = defs.iterator().next();
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(first.getLValue());
            com.google.common.base.Preconditions.checkNotNull(name);
            nameUseSiteMultimap.put(name, new com.google.javascript.jscomp.UseSite(node, traversal.getScope(), traversal.getModule()));
        }
    }

    static boolean isCallOrNewSite(com.google.javascript.jscomp.UseSite use) {
        com.google.javascript.rhino.Node call = use.node.getParent();
        if (call == null) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isCallOrNew(call) && (call.getFirstChild() == use.node);
    }

    boolean canModifyDefinition(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        if (isExported(definition)) {
            return false;
        }
        java.util.Collection<com.google.javascript.jscomp.UseSite> useSites = getUseSites(definition);
        if (useSites.isEmpty()) {
            return false;
        }
        for (com.google.javascript.jscomp.UseSite site : useSites) {
            com.google.javascript.rhino.Node nameNode = site.node;
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> singleSiteDefinitions = getDefinitionsReferencedAt(nameNode);
            if (singleSiteDefinitions.size() > 1) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(!singleSiteDefinitions.isEmpty());
            com.google.common.base.Preconditions.checkState(singleSiteDefinitions.contains(definition));
        }
        return true;
    }

    private boolean isExported(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        com.google.javascript.rhino.Node lValue = definition.getLValue();
        if (lValue == null) {
            return true;
        }
        java.lang.String partialName;
        if (lValue.isGetProp()) {
            partialName = lValue.getLastChild().getString();
        } else if (lValue.isName()) {
            partialName = lValue.getString();
        } else {
            return true;
        }
        com.google.javascript.jscomp.CodingConvention codingConvention = compiler.getCodingConvention();
        if (codingConvention.isExported(partialName)) {
            return true;
        }
        return false;
    }

    static boolean isSimpleFunctionDeclaration(com.google.javascript.rhino.Node fn) {
        com.google.javascript.rhino.Node parent = fn.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(fn);
        if ((nameNode != null) && nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (name.equals(com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN) || name.equals(com.google.javascript.jscomp.ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {
                return false;
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(fn)) {
            return true;
        }
        if (fn.getFirstChild().getString().isEmpty() && (com.google.javascript.jscomp.NodeUtil.isExprAssign(gramps) || parent.isName())) {
            return true;
        }
        return false;
    }

    static com.google.javascript.rhino.Node getNameNodeFromFunctionNode(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(function)) {
            return function.getFirstChild();
        } else {
            com.google.javascript.rhino.Node parent = function.getParent();
            if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(parent)) {
                return parent;
            } else if (parent.isAssign()) {
                return parent.getFirstChild();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent;
            }
        }
        return null;
    }

    void removeReferences(com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.DefinitionsRemover.isDefinitionNode(node)) {
            com.google.javascript.jscomp.DefinitionSite defSite = definitionSiteMap.get(node);
            if (defSite != null) {
                com.google.javascript.jscomp.DefinitionsRemover.Definition def = defSite.definition;
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    this.definitionSiteMap.remove(node);
                    this.nameDefinitionMultimap.remove(name, node);
                }
            }
        } else {
            com.google.javascript.rhino.Node useSite = node;
            if (useSite.isGetProp()) {
                java.lang.String propName = useSite.getLastChild().getString();
                if (propName.equals("apply") || propName.equals("call")) {
                    useSite = useSite.getFirstChild();
                }
            }
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
            if (name != null) {
                this.nameUseSiteMultimap.remove(name, new com.google.javascript.jscomp.UseSite(useSite, null, null));
            }
        }
        for (com.google.javascript.rhino.Node child : node.children()) {
            removeReferences(child);
        }
    }
}
[2297780] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659911308315
GPR[SSUN]-1659911308315
602654447
GPR[ESUN]-1659911308529
GPR[SSUN]-1659911308529
-718432441
GPR[ESUN]-1659911308765
GPR[SSUN]-1659911308765
-718432441
GPR[SPVATF]-1659911309000
GPR[EPVATF]-1659911312129
GPR[SPS]-1659911312129
[2302431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1161.
GPR[EPS]-1659911312966
GPR[ESUN]-1659911312966
GPR[SSUN]-1659911312966
-718432441
GPR[SPVATF]-1659911313200
GPR[EPVATF]-1659911314445
GPR[SPS]-1659911314445
[2304710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1051.
GPR[EPS]-1659911315245
GPR[ESUN]-1659911315245
GPR[SSUN]-1659911315245
-718432441
GPR[SPVATF]-1659911315476
GPR[EPVATF]-1659911316722
GPR[SPS]-1659911316722
[2306986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1050.
GPR[EPS]-1659911317521
GPR[ESUN]-1659911317522
GPR[SSUN]-1659911317522
-718432441
GPR[ESUN]-1659911317753
GPR[SSUN]-1659911317753
-718432441
GPR[SPVATF]-1659911317979
GPR[EPVATF]-1659911319211
GPR[SPS]-1659911319211
[2309503] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:191.
GPR[EPS]-1659911320038
GPR[ESUN]-1659911320039
GPR[SSUN]-1659911320039
2013302092
GPR[SPVATF]-1659911320291
GPR[EPVATF]-1659911321532
GPR[SPS]-1659911321532
[2311697] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:178.
GPR[EPS]-1659911322232
GPR[ESUN]-1659911322232
GPR[SSUN]-1659911322232
2013302092
GPR[ESUN]-1659911322483
GPR[SSUN]-1659911322483
602654447
GPR[ESUN]-1659911322692
GPR[SSUN]-1659911322692
-718432441
GPR[SPVATF]-1659911322918
GPR[EPVATF]-1659911324170
GPR[SPS]-1659911324170
[2316190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:196.
GPR[EPS]-1659911326725
GPR[ESUN]-1659911326725
GPR[SSUN]-1659911326725
-718432441
GPR[SPVATF]-1659911327784
GPR[EPVATF]-1659911331210
GPR[SPS]-1659911331210
[2323009] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:195.
GPR[EPS]-1659911333544
GPR[ESUN]-1659911333545
GPR[SSUN]-1659911333546
-718432441
GPR[SPVATF]-1659911333944
GPR[EPVATF]-1659911334926
GPR[SPS]-1659911334926
[2325563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:190.
GPR[EPS]-1659911336098
GPR[SPVATF]-1659911336099
GPR[EPVATF]-1659911336968
GPR[SPS]-1659911336968
[2327544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:190.
GPR[EPS]-1659911338079
GPR[ESUN]-1659911338080
GPR[SSUN]-1659911338080
-718432441
GPR[SPVATF]-1659911338349
GPR[EPVATF]-1659911339320
GPR[SPS]-1659911339320
[2329818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:189.
GPR[EPS]-1659911340353
GPR[ESUN]-1659911340353
GPR[SSUN]-1659911340354
1852376448
GPR[SPVATF]-1659911340657
GPR[EPVATF]-1659911341562
GPR[SPS]-1659911341563
[2331803] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:178.
GPR[EPS]-1659911342338
GPR[ESUN]-1659911342339
GPR[SSUN]-1659911342339
1852376448
GPR[SPVATF]-1659911342600
GPR[EPVATF]-1659911343457
GPR[SPS]-1659911343457
[2333646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:177.
GPR[EPS]-1659911344181
GPR[SPVATF]-1659911344181
GPR[EPVATF]-1659911345041
GPR[SPS]-1659911345042
[2335225] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:177.
GPR[EPS]-1659911345760
GPR[ESUN]-1659911345761
GPR[SSUN]-1659911345761
1852376448
GPR[ESUN]-1659911346004
GPR[SSUN]-1659911346004
1852376448
GPR[ESUN]-1659911346241
GPR[SSUN]-1659911346241
1852376448
GPR[ESUN]-1659911346484
GPR[SSUN]-1659911346484
1852376448
GPR[SPVATF]-1659911346727
GPR[EPVATF]-1659911347598
GPR[SPS]-1659911347598
[2337802] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:69.
GPR[EPS]-1659911348337
GPR[ESUN]-1659911348337
GPR[SSUN]-1659911348337
1852376448
GPR[SPVATF]-1659911348593
GPR[EPVATF]-1659911349456
GPR[SPS]-1659911349456
[2339699] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:66.
GPR[EPS]-1659911350234
GPR[ESUN]-1659911350235
GPR[SSUN]-1659911350235
1852376448
GPR[SPVATF]-1659911350483
GPR[EPVATF]-1659911351344
GPR[SPS]-1659911351344
[2341510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:64.
GPR[EPS]-1659911352045
GPR[ESUN]-1659911352045
GPR[SSUN]-1659911352046
1852376448
GPR[SPVATF]-1659911352287
GPR[EPVATF]-1659911353141
GPR[SPS]-1659911353141
[2343295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:60.
GPR[EPS]-1659911353830
GPR[ESUN]-1659911353830
GPR[SSUN]-1659911353830
1852376448
GPR[ESUN]-1659911354071
GPR[SSUN]-1659911354071
1852376448
GPR[ESUN]-1659911354318
GPR[SSUN]-1659911354318
1852376448
GPR[SPVATF]-1659911354577
GPR[EPVATF]-1659911355464
GPR[SPS]-1659911355464
[2345647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659911356182
GPR[SPVATF]-1659911356182
GPR[EPVATF]-1659911357098
GPR[SPS]-1659911357098
[2347245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659911357780
GPR[ESUN]-1659911357780
GPR[SSUN]-1659911357780
1852376448
GPR[SPVATF]-1659911358038
GPR[EPVATF]-1659911358936
GPR[SPS]-1659911358936
[2349175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659911359711
GPR[SPVATF]-1659911359711
GPR[EPVATF]-1659911360615
GPR[SPS]-1659911360615
[2350787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659911361322
GPR[ESUN]-1659911361322
GPR[SSUN]-1659911361322
1852376448
GPR[SPVATF]-1659911361584
GPR[EPVATF]-1659911362496
GPR[SPS]-1659911362496
[2352666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659911363202
GPR[SPVATF]-1659911363202
GPR[EPVATF]-1659911364138
GPR[SPS]-1659911364138
[2354287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659911364822
GPR[ESUN]-1659911364822
GPR[SSUN]-1659911364822
2433571
GPR[ESUN]-1659911365145
GPR[SSUN]-1659911365145
2433571
GPR[ESUN]-1659911365460
GPR[SSUN]-1659911365460
2433571
GPR[ESUN]-1659911365755
GPR[SSUN]-1659911365755
2433571
GPR[SPVATF]-1659911366036
GPR[EPVATF]-1659911367015
GPR[SPS]-1659911367015
[2582410] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659911601071
GPR[SSUN]-1659911601071
\n\nNode: host-50\n
\n\nDate: Sun 07 Aug 2022 03:37:50 PM PDT\n
End running Nopol Closure/3 results at /experiment_home///results/Nopol/Closure/3/seed_264/
Removing checked out dir script/workingdir/Nopol/Closure_3
GPR[SSLE]-1659911870937
GPR[ESLE]-1659911930944
