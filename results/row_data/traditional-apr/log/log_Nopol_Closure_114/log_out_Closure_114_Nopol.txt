Sleep 1m start
GPR[SSLI]-1659913031061
GPR[ESLI]-1659913091065
Running Nopol Closure 114b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/114/seed_261/
The file script/workingdir/Nopol/Closure_114 does not exist!
script/workingdir/Nopol/Closure_114
script/workingdir/Nopol/Closure_114
classpath:  script/workingdir/Nopol/Closure_114/build/classes:script/workingdir/Nopol/Closure_114/lib/args4j.jar:script/workingdir/Nopol/Closure_114/lib/guava.jar:script/workingdir/Nopol/Closure_114/lib/json.jar:script/workingdir/Nopol/Closure_114/lib/jsr305.jar:script/workingdir/Nopol/Closure_114/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_114/build/lib/rhino.jar:script/workingdir/Nopol/Closure_114/lib/ant.jar:script/workingdir/Nopol/Closure_114/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_114/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_114/lib/jarjar.jar:script/workingdir/Nopol/Closure_114/lib/junit.jar:script/workingdir/Nopol/Closure_114/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659913109477
GPR[ESLB]-1659913169483
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_114//build/classes:script/workingdir/Nopol/Closure_114//build/test:script/workingdir/Nopol/Closure_114/build/classes:script/workingdir/Nopol/Closure_114/lib/args4j.jar:script/workingdir/Nopol/Closure_114/lib/guava.jar:script/workingdir/Nopol/Closure_114/lib/json.jar:script/workingdir/Nopol/Closure_114/lib/jsr305.jar:script/workingdir/Nopol/Closure_114/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_114/build/lib/rhino.jar:script/workingdir/Nopol/Closure_114/lib/ant.jar:script/workingdir/Nopol/Closure_114/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_114/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_114/lib/jarjar.jar:script/workingdir/Nopol/Closure_114/lib/junit.jar:script/workingdir/Nopol/Closure_114/build/test
Node: host-46
Date init: Sun 07 Aug 2022 03:59:29 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_114/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_114/build/classes/, file:script/workingdir/Nopol/Closure_114/build/test/, file:script/workingdir/Nopol/Closure_114/build/classes/, file:script/workingdir/Nopol/Closure_114/lib/args4j.jar, file:script/workingdir/Nopol/Closure_114/lib/guava.jar, file:script/workingdir/Nopol/Closure_114/lib/json.jar, file:script/workingdir/Nopol/Closure_114/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_114/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_114/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_114/lib/ant.jar, file:script/workingdir/Nopol/Closure_114/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_114/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_114/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_114/lib/junit.jar, file:script/workingdir/Nopol/Closure_114/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_114/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/114/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659913175107
GPR[ESUP]-1659913175107
GPR[SFL]-1659913175107
GPR[EFL]-1659913224204
GPR[SFP]-1659913224204
GPR[SSUN]-1659913228415
-1966087783
GPR[ESUN]-1659913228964
GPR[SSUN]-1659913228964
-1966087783
GPR[SPVATF]-1659913229176
GPR[EPVATF]-1659913229228
[58906] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913229228
GPR[SSUN]-1659913229228
-1659631726
GPR[ESUN]-1659913229452
GPR[SSUN]-1659913229452
130004992
GPR[ESUN]-1659913229644
GPR[SSUN]-1659913229644
130004992
GPR[SPVATF]-1659913229832
GPR[EPVATF]-1659913229860
[59538] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913229860
GPR[SSUN]-1659913229860
130004992
GPR[ESUN]-1659913230054
GPR[SSUN]-1659913230054
-1966087783
GPR[SPVATF]-1659913230259
GPR[EPVATF]-1659913230280
[59959] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913230281
GPR[SSUN]-1659913230281
-1966087783
GPR[SPVATF]-1659913230486
GPR[EPVATF]-1659913230508
[60186] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913230508
GPR[SSUN]-1659913230508
890942016
GPR[ESUN]-1659913230713
GPR[SSUN]-1659913230713
890942016
GPR[SPVATF]-1659913230910
GPR[EPVATF]-1659913230930
[60609] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913230931
GPR[SSUN]-1659913230931
890942016
GPR[SPVATF]-1659913231134
GPR[EPVATF]-1659913231153
[60831] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913231154
GPR[EPVATF]-1659913231172
[60851] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913231173
GPR[SSUN]-1659913231173
890942016
GPR[ESUN]-1659913231373
GPR[SSUN]-1659913231373
890942016
GPR[ESUN]-1659913231576
GPR[SSUN]-1659913231576
-1966087783
GPR[ESUN]-1659913231778
GPR[SSUN]-1659913231779
-1966087783
GPR[SPVATF]-1659913231982
GPR[EPVATF]-1659913232001
[61679] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913232001
GPR[EPVATF]-1659913232020
[61698] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913232020
GPR[SSUN]-1659913232020
-1966087783
GPR[ESUN]-1659913232297
GPR[SSUN]-1659913232297
-1966087783
GPR[SPVATF]-1659913232495
GPR[EPVATF]-1659913232514
[62192] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913232514
GPR[EPVATF]-1659913232534
[62212] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913232534
GPR[SSUN]-1659913232534
-1966087783
GPR[ESUN]-1659913232755
GPR[SSUN]-1659913232755
-1966087783
GPR[ESUN]-1659913232951
GPR[SSUN]-1659913232951
-1966087783
GPR[ESUN]-1659913233153
GPR[SSUN]-1659913233153
1613130706
GPR[ESUN]-1659913233374
GPR[SSUN]-1659913233374
1613130706
GPR[ESUN]-1659913233588
GPR[SSUN]-1659913233588
1613130706
GPR[SPVATF]-1659913233805
GPR[EPVATF]-1659913234010
[63688] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913234011
GPR[SSUN]-1659913234011
234947553
GPR[ESUN]-1659913234216
GPR[SSUN]-1659913234216
234947553
GPR[SPVATF]-1659913234414
GPR[EPVATF]-1659913234430
[64108] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913234430
GPR[EPVATF]-1659913234445
[64123] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913234445
GPR[SSUN]-1659913234445
234947553
GPR[ESUN]-1659913234642
GPR[SSUN]-1659913234642
234947553
GPR[SPVATF]-1659913234837
GPR[EPVATF]-1659913234852
[64530] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913234852
GPR[EPVATF]-1659913234867
[64545] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913234867
GPR[SSUN]-1659913234867
234947553
GPR[SPVATF]-1659913235075
GPR[EPVATF]-1659913235089
[64767] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913235089
GPR[SSUN]-1659913235089
234947553
GPR[ESUN]-1659913235281
GPR[SSUN]-1659913235281
234947553
GPR[ESUN]-1659913235474
GPR[SSUN]-1659913235474
234947553
GPR[SPVATF]-1659913235667
GPR[EPVATF]-1659913235682
[65360] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913235682
GPR[SSUN]-1659913235682
234947553
GPR[SPVATF]-1659913235878
GPR[EPVATF]-1659913235894
[65572] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913235894
GPR[SSUN]-1659913235894
234947553
GPR[SPVATF]-1659913236095
GPR[EPVATF]-1659913236111
[65789] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913236111
GPR[SSUN]-1659913236111
234947553
GPR[ESUN]-1659913236308
GPR[SSUN]-1659913236308
234947553
GPR[ESUN]-1659913236500
GPR[SSUN]-1659913236500
234947553
GPR[SPVATF]-1659913236693
GPR[EPVATF]-1659913236709
[66387] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913236709
GPR[SSUN]-1659913236709
234947553
GPR[SPVATF]-1659913236901
GPR[EPVATF]-1659913236916
[66594] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913236916
GPR[SSUN]-1659913236916
234947553
GPR[ESUN]-1659913237112
GPR[SSUN]-1659913237112
234947553
GPR[SPVATF]-1659913237306
GPR[EPVATF]-1659913237320
[66998] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913237320
GPR[SSUN]-1659913237320
234947553
GPR[SPVATF]-1659913237514
GPR[EPVATF]-1659913237528
[67206] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913237528
GPR[SSUN]-1659913237528
234947553
GPR[ESUN]-1659913237728
GPR[SSUN]-1659913237728
890942016
GPR[SPVATF]-1659913237925
GPR[EPVATF]-1659913237945
[67623] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913237945
GPR[EPVATF]-1659913237964
[67642] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913237964
GPR[SSUN]-1659913237964
890942016
GPR[SPVATF]-1659913238161
GPR[EPVATF]-1659913238181
[67859] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913238181
GPR[SSUN]-1659913238181
890942016
GPR[ESUN]-1659913238376
GPR[SSUN]-1659913238376
890942016
GPR[SPVATF]-1659913238570
GPR[EPVATF]-1659913238589
[68267] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913238589
GPR[SSUN]-1659913238589
890942016
GPR[SPVATF]-1659913238785
GPR[EPVATF]-1659913238803
[68481] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913238803
GPR[EPVATF]-1659913238820
[68498] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913238820
GPR[SSUN]-1659913238820
890942016
GPR[SPVATF]-1659913239019
GPR[EPVATF]-1659913239037
[68716] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913239038
GPR[SSUN]-1659913239038
890942016
GPR[SPVATF]-1659913239240
GPR[EPVATF]-1659913239258
[68936] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913239258
GPR[EPVATF]-1659913239277
[68955] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913239277
GPR[SSUN]-1659913239277
890942016
GPR[ESUN]-1659913239475
GPR[SSUN]-1659913239475
890942016
GPR[SPVATF]-1659913239673
GPR[EPVATF]-1659913239691
[69369] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913239691
GPR[SSUN]-1659913239691
890942016
GPR[SPVATF]-1659913239891
GPR[EPVATF]-1659913239910
[69588] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913239910
GPR[SSUN]-1659913239910
890942016
GPR[SPVATF]-1659913240111
GPR[EPVATF]-1659913240129
[69807] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913240129
GPR[SSUN]-1659913240129
890942016
GPR[ESUN]-1659913240336
GPR[SSUN]-1659913240336
1613130706
GPR[SPVATF]-1659913240551
GPR[EPVATF]-1659913241785
[71463] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913241785
GPR[EPVATF]-1659913241972
[71650] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913241972
GPR[SSUN]-1659913241972
1613130706
GPR[SPVATF]-1659913242192
GPR[EPVATF]-1659913242376
[72055] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913242377
GPR[EPVATF]-1659913242570
[72249] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913242571
GPR[SSUN]-1659913242571
1613130706
GPR[SPVATF]-1659913242788
GPR[EPVATF]-1659913242977
[72655] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913242977
GPR[SSUN]-1659913242977
2433571
GPR[SPVATF]-1659913243237
GPR[EPVATF]-1659913243847
GPR[SPS]-1659913243847
[74839] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1459.
GPR[EPS]-1659913245161
GPR[ESUN]-1659913245161
GPR[SSUN]-1659913245161
2433571
GPR[SPVATF]-1659913245421
GPR[EPVATF]-1659913246016
GPR[SPS]-1659913246016
GPR[EPS]-1659913247375
GPR[SPVATR]-1659913247375
[77053] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION com.google.javascript.rhino.Node.this.type <= 29
[77533] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.type <= 29" is working
GPR[EPVATR]-1659913248794
[78472] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659913248794
[78502] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (com.google.javascript.rhino.Node.this.type <= 29) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/114/seed_261/patch_73717_1ts_1659913248824.diff
GPR[ESUN]-1659913248825
GPR[SSUN]-1659913248825
1613130706
GPR[SPVATF]-1659913249052
GPR[EPVATF]-1659913249253
[78931] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913249253
GPR[EPVATF]-1659913249449
[79128] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913249450
GPR[SSUN]-1659913249450
1613130706
GPR[SPVATF]-1659913249669
GPR[EPVATF]-1659913249864
[79542] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913249864
GPR[EPVATF]-1659913250060
[79738] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913250060
GPR[SSUN]-1659913250060
1613130706
GPR[ESUN]-1659913250276
GPR[SSUN]-1659913250276
1613130706
GPR[ESUN]-1659913250488
GPR[SSUN]-1659913250488
1613130706
GPR[ESUN]-1659913250702
GPR[SSUN]-1659913250702
1613130706
GPR[ESUN]-1659913250917
GPR[SSUN]-1659913250917
1613130706
GPR[SPVATF]-1659913251130
GPR[EPVATF]-1659913251324
[81002] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913251324
GPR[EPVATF]-1659913251516
[81195] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913251517
GPR[SSUN]-1659913251517
1613130706
GPR[SPVATF]-1659913251735
GPR[EPVATF]-1659913251927
[81605] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913251927
GPR[SSUN]-1659913251927
1613130706
GPR[ESUN]-1659913252165
GPR[SSUN]-1659913252165
1613130706
GPR[SPVATF]-1659913252380
GPR[EPVATF]-1659913252576
[82254] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913252576
GPR[EPVATF]-1659913252770
[82448] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913252770
GPR[SSUN]-1659913252770
1613130706
GPR[ESUN]-1659913253105
GPR[SSUN]-1659913253105
1613130706
GPR[SPVATF]-1659913253323
GPR[EPVATF]-1659913253513
[83191] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913253513
GPR[EPVATF]-1659913253707
[83385] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913253707
GPR[SSUN]-1659913253707
-1966087783
GPR[ESUN]-1659913253907
GPR[SSUN]-1659913253907
-1966087783
GPR[SPVATF]-1659913254103
GPR[EPVATF]-1659913254123
[83801] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913254123
GPR[EPVATF]-1659913254141
[83819] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913254141
GPR[SSUN]-1659913254141
-1966087783
GPR[SPVATF]-1659913254336
GPR[EPVATF]-1659913254355
[84033] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913254355
GPR[SSUN]-1659913254355
198689906
GPR[ESUN]-1659913254633
GPR[SSUN]-1659913254633
198689906
GPR[SPVATF]-1659913254910
GPR[EPVATF]-1659913255516
GPR[SPS]-1659913255516
[85992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1724.
GPR[EPS]-1659913256314
GPR[ESUN]-1659913256314
GPR[SSUN]-1659913256314
198689906
GPR[SPVATF]-1659913256589
GPR[EPVATF]-1659913258011
GPR[SPS]-1659913258011
[88455] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1723.
GPR[EPS]-1659913258777
GPR[ESUN]-1659913258777
GPR[SSUN]-1659913258777
198689906
GPR[ESUN]-1659913259052
GPR[SSUN]-1659913259052
2433571
GPR[SPVATF]-1659913259306
GPR[EPVATF]-1659913259888
GPR[SPS]-1659913259888
[90272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1446.
GPR[EPS]-1659913260594
GPR[ESUN]-1659913260594
GPR[SSUN]-1659913260594
-1966087783
GPR[SPVATF]-1659913260792
GPR[EPVATF]-1659913260814
[90492] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913260814
GPR[EPVATF]-1659913260834
[90512] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913260834
GPR[SSUN]-1659913260834
-1966087783
GPR[SPVATF]-1659913261028
GPR[EPVATF]-1659913261049
[90727] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913261049
GPR[EPVATF]-1659913261070
[90748] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913261070
GPR[SSUN]-1659913261070
-1966087783
GPR[SPVATF]-1659913261268
GPR[EPVATF]-1659913261289
[90967] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913261289
GPR[EPVATF]-1659913261310
[90989] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913261311
GPR[SSUN]-1659913261311
-1966087783
GPR[ESUN]-1659913261504
GPR[SSUN]-1659913261504
-1966087783
GPR[ESUN]-1659913261698
GPR[SSUN]-1659913261698
-1966087783
GPR[SPVATF]-1659913261895
GPR[EPVATF]-1659913261917
[91595] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913261917
GPR[EPVATF]-1659913261937
[91615] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913261937
GPR[SSUN]-1659913261937
-1966087783
GPR[SPVATF]-1659913262136
GPR[EPVATF]-1659913262157
[91835] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913262157
GPR[EPVATF]-1659913262180
[91858] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913262180
GPR[SSUN]-1659913262180
-1966087783
GPR[ESUN]-1659913262377
GPR[SSUN]-1659913262377
-1966087783
GPR[SPVATF]-1659913262570
GPR[EPVATF]-1659913262592
[92270] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913262592
GPR[SSUN]-1659913262592
-1966087783
GPR[SPVATF]-1659913262789
GPR[EPVATF]-1659913262822
[92500] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913262823
GPR[SSUN]-1659913262823
-1966087783
GPR[ESUN]-1659913263022
GPR[SSUN]-1659913263022
-1966087783
GPR[SPVATF]-1659913263216
GPR[EPVATF]-1659913263237
[92915] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913263237
GPR[SSUN]-1659913263237
-1966087783
GPR[ESUN]-1659913263431
GPR[SSUN]-1659913263431
-1966087783
GPR[ESUN]-1659913263623
GPR[SSUN]-1659913263623
-1966087783
GPR[SPVATF]-1659913263817
GPR[EPVATF]-1659913263839
[93517] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913263839
GPR[SSUN]-1659913263839
-1966087783
GPR[SPVATF]-1659913264035
GPR[EPVATF]-1659913264057
[93735] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913264057
GPR[SSUN]-1659913264057
-1966087783
GPR[SPVATF]-1659913264254
GPR[EPVATF]-1659913264270
[93948] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913264270
GPR[SSUN]-1659913264270
198689906
GPR[SPVATF]-1659913264552
GPR[EPVATF]-1659913265143
GPR[SPS]-1659913265143
GPR[EPS]-1659913273331
GPR[ESUN]-1659913273331
GPR[SSUN]-1659913273331
-1966087783
GPR[SPVATF]-1659913273536
GPR[EPVATF]-1659913273554
[103232] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913273554
GPR[SSUN]-1659913273554
-1966087783
GPR[SPVATF]-1659913273751
GPR[EPVATF]-1659913273769
[103447] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913273769
GPR[SSUN]-1659913273769
-1966087783
GPR[SPVATF]-1659913273966
GPR[EPVATF]-1659913273984
[103662] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913273984
GPR[SSUN]-1659913273984
-1966087783
GPR[SPVATF]-1659913274179
GPR[EPVATF]-1659913274197
[103875] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913274197
GPR[SSUN]-1659913274197
-1966087783
GPR[SPVATF]-1659913274392
GPR[EPVATF]-1659913274410
[104088] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913274410
GPR[SSUN]-1659913274410
-1966087783
GPR[SPVATF]-1659913274605
GPR[EPVATF]-1659913274622
[104301] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913274623
GPR[EPVATF]-1659913274639
[104317] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913274639
GPR[SSUN]-1659913274639
-1966087783
GPR[ESUN]-1659913274834
GPR[SSUN]-1659913274834
-132053243
GPR[SPVATF]-1659913275045
GPR[EPVATF]-1659913275062
[104740] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913275062
GPR[SSUN]-1659913275062
-132053243
GPR[SPVATF]-1659913275254
GPR[EPVATF]-1659913275270
[104949] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913275271
GPR[SSUN]-1659913275271
-132053243
GPR[SPVATF]-1659913275465
GPR[EPVATF]-1659913275482
[105160] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913275482
GPR[SSUN]-1659913275482
198689906
GPR[SPVATF]-1659913275751
GPR[EPVATF]-1659913276343
GPR[SPS]-1659913276343
[106763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1864.
GPR[EPS]-1659913277085
GPR[ESUN]-1659913277085
GPR[SSUN]-1659913277085
-132053243
GPR[SPVATF]-1659913277283
GPR[EPVATF]-1659913277302
[106980] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913277302
GPR[EPVATF]-1659913277320
[106998] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913277320
GPR[SSUN]-1659913277320
-132053243
GPR[ESUN]-1659913277515
GPR[SSUN]-1659913277515
-132053243
GPR[ESUN]-1659913277726
GPR[SSUN]-1659913277726
-132053243
GPR[SPVATF]-1659913277921
GPR[EPVATF]-1659913277938
[107616] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913277938
GPR[EPVATF]-1659913277954
[107632] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913277954
GPR[SSUN]-1659913277954
-132053243
GPR[ESUN]-1659913278148
GPR[SSUN]-1659913278148
-132053243
GPR[ESUN]-1659913278341
GPR[SSUN]-1659913278341
-132053243
GPR[ESUN]-1659913278532
GPR[SSUN]-1659913278532
-132053243
GPR[SPVATF]-1659913278725
GPR[EPVATF]-1659913278743
[108421] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913278743
GPR[EPVATF]-1659913278759
[108437] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913278759
GPR[SSUN]-1659913278759
-132053243
GPR[SPVATF]-1659913278956
GPR[EPVATF]-1659913278973
[108651] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913278973
GPR[SSUN]-1659913278973
198689906
GPR[ESUN]-1659913279250
GPR[SSUN]-1659913279250
198689906
GPR[SPVATF]-1659913279523
GPR[EPVATF]-1659913280169
GPR[SPS]-1659913280170
[110589] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:950.
GPR[EPS]-1659913280911
GPR[ESUN]-1659913280911
GPR[SSUN]-1659913280911
198689906
GPR[SPVATF]-1659913281182
GPR[EPVATF]-1659913281784
GPR[SPS]-1659913281784
[112188] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:949.
GPR[EPS]-1659913282510
GPR[ESUN]-1659913282510
GPR[SSUN]-1659913282510
-132053243
GPR[SPVATF]-1659913282704
GPR[EPVATF]-1659913282721
[112399] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913282721
GPR[SSUN]-1659913282721
-132053243
GPR[SPVATF]-1659913282913
GPR[EPVATF]-1659913282930
[112608] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913282930
GPR[SSUN]-1659913282930
-132053243
GPR[SPVATF]-1659913283146
GPR[EPVATF]-1659913283163
[112842] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913283164
GPR[EPVATF]-1659913283181
[112859] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913283181
GPR[SSUN]-1659913283181
198689906
GPR[SPVATF]-1659913283453
GPR[EPVATF]-1659913284077
GPR[SPS]-1659913284077
[114496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:332.
GPR[EPS]-1659913284818
GPR[ESUN]-1659913284818
GPR[SSUN]-1659913284818
198689906
GPR[SPVATF]-1659913285090
GPR[EPVATF]-1659913285703
GPR[SPS]-1659913285703
[116123] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:330.
GPR[EPS]-1659913286445
GPR[ESUN]-1659913286445
GPR[SSUN]-1659913286445
198689906
GPR[SPVATF]-1659913286720
GPR[EPVATF]-1659913287326
GPR[SPS]-1659913287326
GPR[EPS]-1659913295844
GPR[SPVATF]-1659913295844
GPR[EPVATF]-1659913297384
GPR[SPS]-1659913297384
GPR[EPS]-1659913305909
GPR[ESUN]-1659913305909
GPR[SSUN]-1659913305909
-132053243
GPR[ESUN]-1659913306223
GPR[SSUN]-1659913306223
-132053243
GPR[SPVATF]-1659913306420
GPR[EPVATF]-1659913306438
[136116] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913306438
GPR[EPVATF]-1659913306454
[136132] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913306454
GPR[SSUN]-1659913306454
-132053243
GPR[ESUN]-1659913306653
GPR[SSUN]-1659913306653
-89962275
GPR[ESUN]-1659913306855
GPR[SSUN]-1659913306855
-89962275
GPR[SPVATF]-1659913307060
GPR[EPVATF]-1659913307668
GPR[SPS]-1659913307668
[137852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:88.
GPR[EPS]-1659913308174
GPR[ESUN]-1659913308174
GPR[SSUN]-1659913308174
198689906
GPR[ESUN]-1659913308446
GPR[SSUN]-1659913308446
-132053243
GPR[SPVATF]-1659913308637
GPR[EPVATF]-1659913308656
[138334] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913308656
GPR[SSUN]-1659913308656
-132053243
GPR[SPVATF]-1659913308847
GPR[EPVATF]-1659913308864
[138542] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913308864
GPR[SSUN]-1659913308864
-132053243
GPR[SPVATF]-1659913309057
GPR[EPVATF]-1659913309074
[138752] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913309074
GPR[SSUN]-1659913309074
-132053243
GPR[SPVATF]-1659913309285
GPR[EPVATF]-1659913309301
[138980] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913309302
GPR[SSUN]-1659913309302
-132053243
GPR[SPVATF]-1659913309494
GPR[EPVATF]-1659913309512
[139190] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913309512
GPR[SSUN]-1659913309512
-132053243
GPR[ESUN]-1659913309704
GPR[SSUN]-1659913309704
-1966087783
GPR[ESUN]-1659913309897
GPR[SSUN]-1659913309897
-1966087783
GPR[SPVATF]-1659913310090
GPR[EPVATF]-1659913310109
[139787] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913310110
GPR[EPVATF]-1659913310127
[139805] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913310127
GPR[SSUN]-1659913310127
198689906
GPR[SPVATF]-1659913310399
GPR[EPVATF]-1659913311008
GPR[SPS]-1659913311008
[141411] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1606.
GPR[EPS]-1659913311733
GPR[SPVATF]-1659913311733
GPR[EPVATF]-1659913312365
GPR[SPS]-1659913312365
[142754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1606.
GPR[EPS]-1659913313076
GPR[ESUN]-1659913313076
GPR[SSUN]-1659913313076
198689906
GPR[SPVATF]-1659913313345
GPR[EPVATF]-1659913313977
GPR[SPS]-1659913313977
[144349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1602.
GPR[EPS]-1659913314671
GPR[ESUN]-1659913314671
GPR[SSUN]-1659913314672
198689906
GPR[SPVATF]-1659913314944
GPR[EPVATF]-1659913315605
GPR[SPS]-1659913315605
GPR[EPS]-1659913325456
GPR[SPVATF]-1659913325456
GPR[EPVATF]-1659913326114
GPR[SPS]-1659913326114
GPR[EPS]-1659913336027
GPR[ESUN]-1659913336027
GPR[SSUN]-1659913336027
198689906
GPR[ESUN]-1659913336298
GPR[SSUN]-1659913336298
198689906
GPR[SPVATF]-1659913336572
GPR[EPVATF]-1659913337255
GPR[SPS]-1659913337255
[167675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1592.
GPR[EPS]-1659913337997
GPR[SPVATF]-1659913337997
GPR[EPVATF]-1659913338666
GPR[SPS]-1659913338666
GPR[EPS]-1659913360178
GPR[ESUN]-1659913360178
GPR[SSUN]-1659913360178
198689906
GPR[ESUN]-1659913360454
GPR[SSUN]-1659913360454
198689906
GPR[SPVATF]-1659913360722
GPR[EPVATF]-1659913361432
GPR[SPS]-1659913361432
[191812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1554.
GPR[EPS]-1659913362134
GPR[ESUN]-1659913362134
GPR[SSUN]-1659913362134
198689906
GPR[SPVATF]-1659913362405
GPR[EPVATF]-1659913363157
GPR[SPS]-1659913363157
[193533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:327.
GPR[EPS]-1659913363855
GPR[SPVATF]-1659913363855
GPR[EPVATF]-1659913364596
GPR[SPS]-1659913364596
[194961] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:327.
GPR[EPS]-1659913365283
GPR[ESUN]-1659913365283
GPR[SSUN]-1659913365283
-1966087783
GPR[SPVATF]-1659913365478
GPR[EPVATF]-1659913365497
[195175] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659913365497
GPR[EPVATF]-1659913365514
[195192] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913365514
GPR[SSUN]-1659913365514
-1966087783
GPR[ESUN]-1659913365707
GPR[SSUN]-1659913365707
-89962275
GPR[ESUN]-1659913365945
GPR[SSUN]-1659913365945
-89962275
GPR[SPVATF]-1659913366269
GPR[EPVATF]-1659913367097
GPR[SPS]-1659913367097
[197248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:121.
GPR[EPS]-1659913367570
GPR[ESUN]-1659913367570
GPR[SSUN]-1659913367570
-89962275
GPR[SPVATF]-1659913367777
GPR[EPVATF]-1659913368562
GPR[SPS]-1659913368562
[198718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:120.
GPR[EPS]-1659913369040
GPR[ESUN]-1659913369040
GPR[SSUN]-1659913369040
1852376448
GPR[SPVATF]-1659913369265
GPR[EPVATF]-1659913370068
GPR[SPS]-1659913370068
[200295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:152.
GPR[EPS]-1659913370617
GPR[ESUN]-1659913370617
GPR[SSUN]-1659913370617
1852376448
GPR[SPVATF]-1659913370842
GPR[EPVATF]-1659913371686
GPR[SPS]-1659913371686
[201878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:148.
GPR[EPS]-1659913372200
GPR[SPVATF]-1659913372200
GPR[EPVATF]-1659913374134
GPR[SPS]-1659913374134
[204336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:148.
GPR[EPS]-1659913374658
GPR[ESUN]-1659913374658
GPR[SSUN]-1659913374659
198689906
GPR[SPVATF]-1659913374928
GPR[EPVATF]-1659913375613
GPR[SPS]-1659913375613
[205997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:799.
GPR[EPS]-1659913376319
GPR[ESUN]-1659913376319
GPR[SSUN]-1659913376320
198689906
GPR[SPVATF]-1659913376587
GPR[EPVATF]-1659913377293
GPR[SPS]-1659913377293
[207683] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:524.
GPR[EPS]-1659913378005
GPR[SPVATF]-1659913378005
GPR[EPVATF]-1659913378686
GPR[SPS]-1659913378686
[209062] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:524.
GPR[EPS]-1659913379384
GPR[ESUN]-1659913379385
GPR[SSUN]-1659913379385
198689906
GPR[ESUN]-1659913379652
GPR[SSUN]-1659913379652
198689906
GPR[ESUN]-1659913379924
GPR[SSUN]-1659913379924
198689906
GPR[ESUN]-1659913380211
GPR[SSUN]-1659913380211
198689906
GPR[SPVATF]-1659913380483
GPR[EPVATF]-1659913381175
GPR[SPS]-1659913381175
[211567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:797.
GPR[EPS]-1659913381889
GPR[ESUN]-1659913381889
GPR[SSUN]-1659913381889
-718432441
GPR[SPVATF]-1659913382137
GPR[EPVATF]-1659913382826
GPR[SPS]-1659913382826
[213263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:325.
GPR[EPS]-1659913383585
GPR[ESUN]-1659913383585
GPR[SSUN]-1659913383585
-718432441
GPR[SPVATF]-1659913383829
GPR[EPVATF]-1659913384545
GPR[SPS]-1659913384545
[214955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:314.
GPR[EPS]-1659913385277
GPR[ESUN]-1659913385277
GPR[SSUN]-1659913385277
198689906
GPR[ESUN]-1659913385552
GPR[SSUN]-1659913385552
198689906
GPR[SPVATF]-1659913385823
GPR[EPVATF]-1659913386557
GPR[SPS]-1659913386557
[216948] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:532.
GPR[EPS]-1659913387270
GPR[ESUN]-1659913387270
GPR[SSUN]-1659913387270
198689906
GPR[ESUN]-1659913387539
GPR[SSUN]-1659913387539
198689906
GPR[SPVATF]-1659913387811
GPR[EPVATF]-1659913388549
GPR[SPS]-1659913388549
[218955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:512.
GPR[EPS]-1659913389277
GPR[ESUN]-1659913389277
GPR[SSUN]-1659913389277
198689906
GPR[SPVATF]-1659913389572
GPR[EPVATF]-1659913390393
GPR[SPS]-1659913390393
[220825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:322.
GPR[EPS]-1659913391147
GPR[ESUN]-1659913391147
GPR[SSUN]-1659913391147
198689906
GPR[SPVATF]-1659913391419
GPR[EPVATF]-1659913392198
GPR[SPS]-1659913392198
[222577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:321.
GPR[EPS]-1659913392899
GPR[ESUN]-1659913392899
GPR[SSUN]-1659913392899
198689906
GPR[SPVATF]-1659913393199
GPR[EPVATF]-1659913393972
GPR[SPS]-1659913393972
[224345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:320.
GPR[EPS]-1659913394667
GPR[ESUN]-1659913394667
GPR[SSUN]-1659913394667
198689906
GPR[ESUN]-1659913394941
GPR[SSUN]-1659913394941
198689906
GPR[ESUN]-1659913395221
GPR[SSUN]-1659913395221
198689906
GPR[SPVATF]-1659913395499
GPR[EPVATF]-1659913396308
GPR[SPS]-1659913396308
[226731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1879.
GPR[EPS]-1659913397053
GPR[ESUN]-1659913397054
GPR[SSUN]-1659913397054
198689906
GPR[SPVATF]-1659913397332
GPR[EPVATF]-1659913398172
GPR[SPS]-1659913398172
[228634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1878.
GPR[EPS]-1659913398956
GPR[ESUN]-1659913398956
GPR[SSUN]-1659913398956
198689906
GPR[ESUN]-1659913399227
GPR[SSUN]-1659913399227
198689906
GPR[SPVATF]-1659913399495
GPR[EPVATF]-1659913400357
GPR[SPS]-1659913400357
[230756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1861.
GPR[EPS]-1659913401078
GPR[SPVATF]-1659913401078
GPR[EPVATF]-1659913401950
GPR[SPS]-1659913401950
[232325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1861.
GPR[EPS]-1659913402647
GPR[ESUN]-1659913402647
GPR[SSUN]-1659913402647
198689906
GPR[ESUN]-1659913402924
GPR[SSUN]-1659913402924
1884422692
GPR[ESUN]-1659913403147
GPR[SSUN]-1659913403147
1884422692
GPR[SPVATF]-1659913403363
GPR[EPVATF]-1659913404274
GPR[SPS]-1659913404274
[234494] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:338.
GPR[EPS]-1659913404816
GPR[ESUN]-1659913404816
GPR[SSUN]-1659913404816
1884422692
GPR[SPVATF]-1659913405039
GPR[EPVATF]-1659913406008
GPR[SPS]-1659913406008
[236205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:334.
GPR[EPS]-1659913406527
GPR[SPVATF]-1659913406527
GPR[EPVATF]-1659913407505
GPR[SPS]-1659913407505
[237695] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:334.
GPR[EPS]-1659913408017
GPR[ESUN]-1659913408017
GPR[SSUN]-1659913408017
198689906
GPR[SPVATF]-1659913408299
GPR[EPVATF]-1659913409288
GPR[SPS]-1659913409288
[239699] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1457.
GPR[EPS]-1659913410022
GPR[SPVATF]-1659913410022
GPR[EPVATF]-1659913410999
GPR[SPS]-1659913410999
[241376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1457.
GPR[EPS]-1659913411698
GPR[ESUN]-1659913411698
GPR[SSUN]-1659913411698
198689906
GPR[ESUN]-1659913411973
GPR[SSUN]-1659913411973
198689906
GPR[ESUN]-1659913412247
GPR[SSUN]-1659913412247
198689906
GPR[SPVATF]-1659913412518
GPR[EPVATF]-1659913413503
GPR[SPS]-1659913413503
[243929] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:318.
GPR[EPS]-1659913414251
GPR[ESUN]-1659913414251
GPR[SSUN]-1659913414251
198689906
GPR[ESUN]-1659913414523
GPR[SSUN]-1659913414523
-89962275
GPR[ESUN]-1659913414724
GPR[SSUN]-1659913414724
-89962275
GPR[SPVATF]-1659913414923
GPR[EPVATF]-1659913415910
GPR[SPS]-1659913415910
[246069] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:125.
GPR[EPS]-1659913416391
GPR[ESUN]-1659913416391
GPR[SSUN]-1659913416391
-89962275
GPR[SPVATF]-1659913416590
GPR[EPVATF]-1659913417578
GPR[SPS]-1659913417578
[247776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:123.
GPR[EPS]-1659913418098
GPR[ESUN]-1659913418099
GPR[SSUN]-1659913418099
-89962275
GPR[SPVATF]-1659913418302
GPR[EPVATF]-1659913419284
GPR[SPS]-1659913419284
[249447] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:119.
GPR[EPS]-1659913419769
GPR[ESUN]-1659913419770
GPR[SSUN]-1659913419770
-89962275
GPR[SPVATF]-1659913419973
GPR[EPVATF]-1659913420939
GPR[SPS]-1659913420939
[251105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:111.
GPR[EPS]-1659913421427
GPR[SPVATF]-1659913421427
GPR[EPVATF]-1659913422401
GPR[SPS]-1659913422401
[253557] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:111.
GPR[EPS]-1659913423879
GPR[ESUN]-1659913423879
GPR[SSUN]-1659913423879
-89962275
GPR[SPVATF]-1659913424087
GPR[EPVATF]-1659913425036
GPR[SPS]-1659913425036
[255201] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:106.
GPR[EPS]-1659913425523
GPR[ESUN]-1659913425524
GPR[SSUN]-1659913425524
-89962275
GPR[ESUN]-1659913425731
GPR[SSUN]-1659913425731
-89962275
GPR[SPVATF]-1659913425932
GPR[EPVATF]-1659913427237
GPR[SPS]-1659913427237
[257511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:99.
GPR[EPS]-1659913427833
GPR[SPVATF]-1659913427833
GPR[EPVATF]-1659913428558
GPR[SPS]-1659913428558
[258735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:99.
GPR[EPS]-1659913429057
GPR[ESUN]-1659913429057
GPR[SSUN]-1659913429057
-89962275
GPR[ESUN]-1659913429282
GPR[SSUN]-1659913429282
-89962275
GPR[SPVATF]-1659913429488
GPR[EPVATF]-1659913430198
GPR[SPS]-1659913430199
[260362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:95.
GPR[EPS]-1659913430684
GPR[ESUN]-1659913430684
GPR[SSUN]-1659913430684
-89962275
GPR[ESUN]-1659913430887
GPR[SSUN]-1659913430888
-89962275
GPR[ESUN]-1659913431091
GPR[SSUN]-1659913431091
-89962275
GPR[SPVATF]-1659913431290
GPR[EPVATF]-1659913432009
GPR[SPS]-1659913432009
[262172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:71.
GPR[EPS]-1659913432494
GPR[ESUN]-1659913432494
GPR[SSUN]-1659913432494
-89962275
GPR[SPVATF]-1659913432693
GPR[EPVATF]-1659913433414
GPR[SPS]-1659913433414
[263599] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:70.
GPR[EPS]-1659913433921
GPR[ESUN]-1659913433921
GPR[SSUN]-1659913433921
198689906
GPR[ESUN]-1659913434205
GPR[SSUN]-1659913434205
198689906
GPR[ESUN]-1659913434482
GPR[SSUN]-1659913434482
198689906
GPR[ESUN]-1659913434753
GPR[SSUN]-1659913434754
198689906
GPR[ESUN]-1659913435027
GPR[SSUN]-1659913435027
198689906
GPR[SPVATF]-1659913435299
GPR[EPVATF]-1659913435985
GPR[SPS]-1659913435985
[266371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1800.
GPR[EPS]-1659913436693
GPR[SPVATF]-1659913436693
GPR[EPVATF]-1659913437448
GPR[SPS]-1659913437448
[267841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1800.
GPR[EPS]-1659913438163
GPR[ESUN]-1659913438163
GPR[SSUN]-1659913438163
198689906
GPR[ESUN]-1659913438440
GPR[SSUN]-1659913438440
198689906
GPR[SPVATF]-1659913438715
GPR[EPVATF]-1659913439458
GPR[SPS]-1659913439458
[269842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1781.
GPR[EPS]-1659913440164
GPR[ESUN]-1659913440164
GPR[SSUN]-1659913440164
198689906
GPR[SPVATF]-1659913440445
GPR[EPVATF]-1659913441234
GPR[SPS]-1659913441235
[271607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1770.
GPR[EPS]-1659913441929
GPR[SPVATF]-1659913441929
GPR[EPVATF]-1659913442704
GPR[SPS]-1659913442704
[273090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1770.
GPR[EPS]-1659913443412
GPR[ESUN]-1659913443412
GPR[SSUN]-1659913443412
198689906
GPR[SPVATF]-1659913443686
GPR[EPVATF]-1659913444484
GPR[SPS]-1659913444484
[274907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1766.
GPR[EPS]-1659913445229
GPR[ESUN]-1659913445229
GPR[SSUN]-1659913445229
198689906
GPR[ESUN]-1659913445503
GPR[SSUN]-1659913445503
198689906
GPR[SPVATF]-1659913445778
GPR[EPVATF]-1659913446590
GPR[SPS]-1659913446590
[276978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1752.
GPR[EPS]-1659913447300
GPR[ESUN]-1659913447300
GPR[SSUN]-1659913447300
198689906
GPR[SPVATF]-1659913447582
GPR[EPVATF]-1659913448420
GPR[SPS]-1659913448420
[278850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1748.
GPR[EPS]-1659913449172
GPR[ESUN]-1659913449172
GPR[SSUN]-1659913449172
198689906
GPR[SPVATF]-1659913449456
GPR[EPVATF]-1659913450284
GPR[SPS]-1659913450284
[280662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1741.
GPR[EPS]-1659913450984
GPR[ESUN]-1659913450984
GPR[SSUN]-1659913450984
198689906
GPR[SPVATF]-1659913451274
GPR[EPVATF]-1659913452147
GPR[SPS]-1659913452148
[282527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1736.
GPR[EPS]-1659913452849
GPR[ESUN]-1659913452849
GPR[SSUN]-1659913452849
198689906
GPR[ESUN]-1659913453137
GPR[SSUN]-1659913453137
198689906
GPR[SPVATF]-1659913453459
GPR[EPVATF]-1659913454355
GPR[SPS]-1659913454355
[284738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1726.
GPR[EPS]-1659913455060
GPR[ESUN]-1659913455060
GPR[SSUN]-1659913455060
198689906
GPR[SPVATF]-1659913455338
GPR[EPVATF]-1659913456276
GPR[SPS]-1659913456276
[286647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1703.
GPR[EPS]-1659913456969
GPR[SPVATF]-1659913456969
GPR[EPVATF]-1659913457932
GPR[SPS]-1659913457932
[288351] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1703.
GPR[EPS]-1659913458673
GPR[ESUN]-1659913458673
GPR[SSUN]-1659913458674
198689906
GPR[SPVATF]-1659913458952
GPR[EPVATF]-1659913459965
GPR[SPS]-1659913459965
[290345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1202.
GPR[EPS]-1659913460667
GPR[ESUN]-1659913460667
GPR[SSUN]-1659913460667
198689906
GPR[ESUN]-1659913460940
GPR[SSUN]-1659913460940
198689906
GPR[SPVATF]-1659913461211
GPR[EPVATF]-1659913462214
GPR[SPS]-1659913462214
[292705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$RemoveListener:1089.
GPR[EPS]-1659913463027
GPR[ESUN]-1659913463027
GPR[SSUN]-1659913463027
198689906
GPR[SPVATF]-1659913463303
GPR[EPVATF]-1659913464256
GPR[SPS]-1659913464256
[294662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:940.
GPR[EPS]-1659913464984
GPR[ESUN]-1659913464984
GPR[SSUN]-1659913464985
1884422692
GPR[SPVATF]-1659913465208
GPR[EPVATF]-1659913466172
GPR[SPS]-1659913466172
[296363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:327.
GPR[EPS]-1659913466685
GPR[SPVATF]-1659913466686
GPR[EPVATF]-1659913467651
GPR[SPS]-1659913467651
[297881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:327.
GPR[EPS]-1659913468203
GPR[ESUN]-1659913468203
GPR[SSUN]-1659913468203
1884422692
GPR[ESUN]-1659913468425
GPR[SSUN]-1659913468425
1884422692
GPR[SPVATF]-1659913468641
GPR[EPVATF]-1659913469607
GPR[SPS]-1659913469607
[299797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:321.
GPR[EPS]-1659913470119
GPR[ESUN]-1659913470120
GPR[SSUN]-1659913470120
1884422692
GPR[SPVATF]-1659913470342
GPR[EPVATF]-1659913471316
GPR[SPS]-1659913471317
[301336] ERROR ConstraintModelBuilder - Unable to compile the change: 
class GatherSideEffectSubexpressionsCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
    interface SideEffectAccumulator {
        public abstract boolean classDefiningCallsHaveSideEffects();

        public abstract void keepSubTree(com.google.javascript.rhino.Node original);

        public abstract void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original);

        public abstract void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects);
    }

    static final class GetReplacementSideEffectSubexpressions implements com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        private final java.util.List<com.google.javascript.rhino.Node> replacements;

        GetReplacementSideEffectSubexpressions(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> replacements) {
            this.compiler = compiler;
            this.replacements = replacements;
        }

        @java.lang.Override
        public boolean classDefiningCallsHaveSideEffects() {
            return true;
        }

        @java.lang.Override
        public void keepSubTree(com.google.javascript.rhino.Node original) {
            if (original.getParent() != null) {
                original.detachFromParent();
            }
            replacements.add(original);
        }

        @java.lang.Override
        public void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original) {
            com.google.common.base.Preconditions.checkArgument(original.isAnd() || original.isOr(), "Expected: AND or OR, Got: %s", com.google.javascript.rhino.Token.name(original.getType()));
            com.google.javascript.rhino.Node left = original.getFirstChild();
            com.google.javascript.rhino.Node right = left.getNext();
            com.google.javascript.rhino.Node simplifiedRight = simplifyShortCircuitBranch(right);
            original.detachChildren();
            original.addChildToBack(left);
            original.addChildToBack(simplifiedRight);
            keepSubTree(original);
        }

        @java.lang.Override
        public void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects) {
            com.google.common.base.Preconditions.checkArgument(hook.isHook(), "Expected: HOOK, Got: %s", com.google.javascript.rhino.Token.name(hook.getType()));
            com.google.javascript.rhino.Node condition = hook.getFirstChild();
            com.google.javascript.rhino.Node thenBranch = condition.getNext();
            com.google.javascript.rhino.Node elseBranch = thenBranch.getNext();
            if (thenHasSideEffects && elseHasSideEffects) {
                hook.detachChildren();
                hook.addChildToBack(condition);
                hook.addChildToBack(simplifyShortCircuitBranch(thenBranch));
                hook.addChildToBack(simplifyShortCircuitBranch(elseBranch));
                keepSubTree(hook);
            } else if (thenHasSideEffects || elseHasSideEffects) {
                int type = (thenHasSideEffects) ? com.google.javascript.rhino.Token.AND : com.google.javascript.rhino.Token.OR;
                com.google.javascript.rhino.Node body = (thenHasSideEffects) ? thenBranch : elseBranch;
                com.google.javascript.rhino.Node simplified = new com.google.javascript.rhino.Node(type, condition.detachFromParent(), simplifyShortCircuitBranch(body)).copyInformationFrom(hook);
                keepSubTree(simplified);
            } else {
                throw new java.lang.IllegalArgumentException("keepSimplifiedHookExpression must keep at least 1 branch");
            }
        }

        private com.google.javascript.rhino.Node simplifyShortCircuitBranch(com.google.javascript.rhino.Node node) {
            java.util.List<com.google.javascript.rhino.Node> parts = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, node, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback(compiler, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.GetReplacementSideEffectSubexpressions(compiler, parts)));
            com.google.javascript.rhino.Node ret = null;
            for (com.google.javascript.rhino.Node part : parts) {
                if (ret != null) {
                    ret = com.google.javascript.rhino.IR.comma(ret, part).srcref(node);
                } else {
                    ret = part;
                }
            }
            if (ret == null) {
                throw new java.lang.IllegalArgumentException("expected at least one side effect subexpression in short " + "circuit branch.");
            }
            return ret;
        }
    }

    private static final java.util.Set<java.lang.Integer> FORBIDDEN_TYPES = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.BLOCK, com.google.javascript.rhino.Token.SCRIPT, com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Token.RETURN);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator accumulator;

    GatherSideEffectSubexpressionsCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator accumulator) {
        this.compiler = compiler;
        this.accumulator = accumulator;
    }

    private boolean isClassDefiningCall(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship classes = compiler.getCodingConvention().getClassesDefinedByCall(callNode);
        return classes != null;
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES.contains(node.getType()) || com.google.javascript.jscomp.NodeUtil.isControlStructure(node)) {
            throw new java.lang.IllegalArgumentException(com.google.javascript.rhino.Token.name(node.getType()) + " nodes are not supported.");
        }
        if (node.isFunction()) {
            return false;
        }
        if (node.isHook()) {
            return processHook(node);
        }
        if (node.isAnd() || node.isOr()) {
            return processShortCircuitExpression(node);
        }
        if (!com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(node, compiler)) {
            return true;
        } else if (node.isCall()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(80).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.accumulator",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.accumulator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.compiler",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectInput("traversal",traversal);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(80).collectionEnds();
            }
            if (runtimeAngelicValue)
                return processFunctionCall(node);

        } else if (node.isNew()) {
            return processConstructorCall(node);
        } else {
            accumulator.keepSubTree(node);
            return false;
        }
    }

    boolean processShortCircuitExpression(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isAnd() || node.isOr(), "Expected: AND or OR, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node left = node.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(right, compiler)) {
            accumulator.keepSimplifiedShortCircuitExpression(node);
            return false;
        } else {
            return true;
        }
    }

    boolean processHook(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isHook(), "Expected: HOOK, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node condition = node.getFirstChild();
        com.google.javascript.rhino.Node ifBranch = condition.getNext();
        com.google.javascript.rhino.Node elseBranch = ifBranch.getNext();
        boolean thenHasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(ifBranch, compiler);
        boolean elseHasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(elseBranch, compiler);
        if (thenHasSideEffects || elseHasSideEffects) {
            accumulator.keepSimplifiedHookExpression(node, thenHasSideEffects, elseHasSideEffects);
            return false;
        } else {
            return true;
        }
    }

    boolean processFunctionCall(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isCall(), "Expected: CALL, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node functionName = node.getFirstChild();
        if (functionName.isName() || functionName.isGetProp()) {
            if ((!accumulator.classDefiningCallsHaveSideEffects()) && isClassDefiningCall(node)) {
                return true;
            }
        }
        if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(node)) {
            return true;
        }
        accumulator.keepSubTree(node);
        return false;
    }

    boolean processConstructorCall(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isNew(), "Expected: NEW, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(node)) {
            return true;
        }
        accumulator.keepSubTree(node);
        return false;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
    }
}
[301336] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659913471658
GPR[SSUN]-1659913471658
198689906
GPR[SPVATF]-1659913471935
GPR[EPVATF]-1659913472933
GPR[SPS]-1659913472933
[303365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1447.
GPR[EPS]-1659913473687
GPR[SPVATF]-1659913473688
GPR[EPVATF]-1659913474686
GPR[SPS]-1659913474686
[305081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1447.
GPR[EPS]-1659913475403
GPR[ESUN]-1659913475403
GPR[SSUN]-1659913475403
198689906
GPR[ESUN]-1659913475680
GPR[SSUN]-1659913475680
198689906
GPR[ESUN]-1659913475950
GPR[SSUN]-1659913475950
711965926
GPR[ESUN]-1659913476130
GPR[SSUN]-1659913476130
711965926
GPR[SPVATF]-1659913476308
GPR[EPVATF]-1659913477342
GPR[SPS]-1659913477342
[307564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:36.
GPR[EPS]-1659913477886
GPR[ESUN]-1659913477886
GPR[SSUN]-1659913477886
-132053243
GPR[ESUN]-1659913478083
GPR[SSUN]-1659913478083
-132053243
GPR[SPVATF]-1659913478279
GPR[EPVATF]-1659913478299
[307977] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659913478299
GPR[SSUN]-1659913478299
198689906
GPR[ESUN]-1659913478620
GPR[SSUN]-1659913478620
198689906
GPR[SPVATF]-1659913478895
GPR[EPVATF]-1659913479888
GPR[SPS]-1659913479888
[310287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences$NodeAccumulator:1057.
GPR[EPS]-1659913480609
GPR[ESUN]-1659913480609
GPR[SSUN]-1659913480609
198689906
GPR[ESUN]-1659913480884
GPR[SSUN]-1659913480884
198689906
GPR[SPVATF]-1659913481161
GPR[EPVATF]-1659913482163
GPR[SPS]-1659913482163
[312552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:666.
GPR[EPS]-1659913482874
GPR[ESUN]-1659913482874
GPR[SSUN]-1659913482874
198689906
GPR[SPVATF]-1659913483199
GPR[EPVATF]-1659913484238
GPR[SPS]-1659913484238
GPR[EPS]-1659913494901
GPR[ESUN]-1659913494901
GPR[SSUN]-1659913494901
198689906
GPR[SPVATF]-1659913495183
GPR[EPVATF]-1659913496191
GPR[SPS]-1659913496191
[326643] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:672.
GPR[EPS]-1659913496965
GPR[SPVATF]-1659913496965
GPR[EPVATF]-1659913497971
GPR[SPS]-1659913497971
[328356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:672.
GPR[EPS]-1659913498678
GPR[ESUN]-1659913498678
GPR[SSUN]-1659913498678
198689906
GPR[ESUN]-1659913498955
GPR[SSUN]-1659913498955
198689906
GPR[ESUN]-1659913499232
GPR[SSUN]-1659913499232
198689906
GPR[SPVATF]-1659913499509
GPR[EPVATF]-1659913500565
GPR[SPS]-1659913500565
[330965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:506.
GPR[EPS]-1659913501287
GPR[ESUN]-1659913501287
GPR[SSUN]-1659913501287
198689906
GPR[SPVATF]-1659913501571
GPR[EPVATF]-1659913502575
GPR[SPS]-1659913502575
[333002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:795.
GPR[EPS]-1659913503324
GPR[SPVATF]-1659913503324
GPR[EPVATF]-1659913504326
GPR[SPS]-1659913504326
[334713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:795.
GPR[EPS]-1659913505035
GPR[ESUN]-1659913505035
GPR[SSUN]-1659913505035
198689906
GPR[SPVATF]-1659913505314
GPR[EPVATF]-1659913506324
GPR[SPS]-1659913506324
GPR[EPS]-1659913517010
GPR[SPVATF]-1659913517010
GPR[EPVATF]-1659913518022
GPR[SPS]-1659913518022
[348442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:563.
GPR[EPS]-1659913518764
GPR[ESUN]-1659913518764
GPR[SSUN]-1659913518764
198689906
GPR[SPVATF]-1659913519072
GPR[EPVATF]-1659913520140
GPR[SPS]-1659913520140
[351628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1587.
GPR[EPS]-1659913521950
GPR[SPVATF]-1659913521950
GPR[EPVATF]-1659913522956
GPR[SPS]-1659913522956
GPR[EPS]-1659913597318
GPR[ESUN]-1659913597318
GPR[SSUN]-1659913597318
198689906
GPR[ESUN]-1659913597749
GPR[SSUN]-1659913597749
198689906
GPR[SPVATF]-1659913598016
GPR[EPVATF]-1659913598836
GPR[SPS]-1659913598836
[429224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:958.
GPR[EPS]-1659913599546
GPR[SPVATF]-1659913599546
GPR[EPVATF]-1659913600321
GPR[SPS]-1659913600321
[430707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:958.
GPR[EPS]-1659913601029
GPR[ESUN]-1659913601029
GPR[SSUN]-1659913601029
198689906
GPR[SPVATF]-1659913601309
GPR[EPVATF]-1659913602107
GPR[SPS]-1659913602107
[432522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:948.
GPR[EPS]-1659913602844
GPR[SPVATF]-1659913602845
GPR[EPVATF]-1659913603639
GPR[SPS]-1659913603639
GPR[EPS]-1659913927029
GPR[SPVATR]-1659913927029
[756707] INFO TestPatch - Applying patch: com.google.javascript.jscomp.NameAnalyzer$FindReferences:948: CONDITIONAL ((com.google.javascript.jscomp.NameAnalyzer.FindReferences.this.nodesToKeep.size() < com.google.javascript.jscomp.NameAnalyzer.this.allNames.size()) || (com.google.javascript.jscomp.NameAnalyzer.FindReferences.this.nodesToKeep.size() == com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING_LEN)) && (!(functionScopes.size() <= 0))
[757356] INFO TestPatch - Running test suite to check the patch "((com.google.javascript.jscomp.NameAnalyzer.FindReferences.this.nodesToKeep.size() < com.google.javascript.jscomp.NameAnalyzer.this.allNames.size()) || (com.google.javascript.jscomp.NameAnalyzer.FindReferences.this.nodesToKeep.size() == com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING_LEN)) && (!(functionScopes.size() <= 0))" is working
GPR[EPVATR]-1659913929462
[759140] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659913929462
[759150] INFO NoPol - --- a/src/com/google/javascript/jscomp/NameAnalyzer.java
+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java
@@ -947,3 +947,3 @@
             getEnclosingFunctionDependencyScope(t);
-        if (!functionScopes.isEmpty()) {
+        if (((com.google.javascript.jscomp.NameAnalyzer.FindReferences.this.nodesToKeep.size() < com.google.javascript.jscomp.NameAnalyzer.this.allNames.size()) || (com.google.javascript.jscomp.NameAnalyzer.FindReferences.this.nodesToKeep.size() == com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING_LEN)) && (!(functionScopes.size() <= 0))) {
           for (NameInformation functionScope : functionScopes) {

Saving patch at /experiment_home///results/Nopol/Closure/114/seed_261/patch_754365_2ts_1659913929472.diff
GPR[ESUN]-1659913929473
GPR[SSUN]-1659913929473
198689906
GPR[ESUN]-1659913929755
GPR[SSUN]-1659913929755
1884422692
GPR[SPVATF]-1659913929972
GPR[EPVATF]-1659913930817
GPR[SPS]-1659913930817
[760816] ERROR ConstraintModelBuilder - Unable to compile the change: 
class GatherSideEffectSubexpressionsCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
    interface SideEffectAccumulator {
        public abstract boolean classDefiningCallsHaveSideEffects();

        public abstract void keepSubTree(com.google.javascript.rhino.Node original);

        public abstract void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original);

        public abstract void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects);
    }

    static final class GetReplacementSideEffectSubexpressions implements com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        private final java.util.List<com.google.javascript.rhino.Node> replacements;

        GetReplacementSideEffectSubexpressions(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> replacements) {
            this.compiler = compiler;
            this.replacements = replacements;
        }

        @java.lang.Override
        public boolean classDefiningCallsHaveSideEffects() {
            return true;
        }

        @java.lang.Override
        public void keepSubTree(com.google.javascript.rhino.Node original) {
            if (original.getParent() != null) {
                original.detachFromParent();
            }
            replacements.add(original);
        }

        @java.lang.Override
        public void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original) {
            com.google.common.base.Preconditions.checkArgument(original.isAnd() || original.isOr(), "Expected: AND or OR, Got: %s", com.google.javascript.rhino.Token.name(original.getType()));
            com.google.javascript.rhino.Node left = original.getFirstChild();
            com.google.javascript.rhino.Node right = left.getNext();
            com.google.javascript.rhino.Node simplifiedRight = simplifyShortCircuitBranch(right);
            original.detachChildren();
            original.addChildToBack(left);
            original.addChildToBack(simplifiedRight);
            keepSubTree(original);
        }

        @java.lang.Override
        public void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects) {
            com.google.common.base.Preconditions.checkArgument(hook.isHook(), "Expected: HOOK, Got: %s", com.google.javascript.rhino.Token.name(hook.getType()));
            com.google.javascript.rhino.Node condition = hook.getFirstChild();
            com.google.javascript.rhino.Node thenBranch = condition.getNext();
            com.google.javascript.rhino.Node elseBranch = thenBranch.getNext();
            if (thenHasSideEffects && elseHasSideEffects) {
                hook.detachChildren();
                hook.addChildToBack(condition);
                hook.addChildToBack(simplifyShortCircuitBranch(thenBranch));
                hook.addChildToBack(simplifyShortCircuitBranch(elseBranch));
                keepSubTree(hook);
            } else if (thenHasSideEffects || elseHasSideEffects) {
                int type = (thenHasSideEffects) ? com.google.javascript.rhino.Token.AND : com.google.javascript.rhino.Token.OR;
                com.google.javascript.rhino.Node body = (thenHasSideEffects) ? thenBranch : elseBranch;
                com.google.javascript.rhino.Node simplified = new com.google.javascript.rhino.Node(type, condition.detachFromParent(), simplifyShortCircuitBranch(body)).copyInformationFrom(hook);
                keepSubTree(simplified);
            } else {
                throw new java.lang.IllegalArgumentException("keepSimplifiedHookExpression must keep at least 1 branch");
            }
        }

        private com.google.javascript.rhino.Node simplifyShortCircuitBranch(com.google.javascript.rhino.Node node) {
            java.util.List<com.google.javascript.rhino.Node> parts = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, node, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback(compiler, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.GetReplacementSideEffectSubexpressions(compiler, parts)));
            com.google.javascript.rhino.Node ret = null;
            for (com.google.javascript.rhino.Node part : parts) {
                if (ret != null) {
                    ret = com.google.javascript.rhino.IR.comma(ret, part).srcref(node);
                } else {
                    ret = part;
                }
            }
            if (ret == null) {
                throw new java.lang.IllegalArgumentException("expected at least one side effect subexpression in short " + "circuit branch.");
            }
            return ret;
        }
    }

    private static final java.util.Set<java.lang.Integer> FORBIDDEN_TYPES = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.BLOCK, com.google.javascript.rhino.Token.SCRIPT, com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Token.RETURN);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator accumulator;

    GatherSideEffectSubexpressionsCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator accumulator) {
        this.compiler = compiler;
        this.accumulator = accumulator;
    }

    private boolean isClassDefiningCall(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship classes = compiler.getCodingConvention().getClassesDefinedByCall(callNode);
        return classes != null;
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES.contains(node.getType()) || com.google.javascript.jscomp.NodeUtil.isControlStructure(node)) {
            throw new java.lang.IllegalArgumentException(com.google.javascript.rhino.Token.name(node.getType()) + " nodes are not supported.");
        }
        if (node.isFunction()) {
            return false;
        }
        if (node.isHook()) {
            return processHook(node);
        }
        if (node.isAnd() || node.isOr()) {
            return processShortCircuitExpression(node);
        }
        if (!com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(node, compiler)) {
            return true;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(100).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.accumulator",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.accumulator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.compiler",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("traversal",traversal);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(100).collectionEnds();
            }
            if (runtimeAngelicValue) if (node.isCall()) {
                return processFunctionCall(node);
            } else if (node.isNew()) {
                return processConstructorCall(node);
            } else {
                accumulator.keepSubTree(node);
                return false;
            }
        }
    }

    boolean processShortCircuitExpression(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isAnd() || node.isOr(), "Expected: AND or OR, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node left = node.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(right, compiler)) {
            accumulator.keepSimplifiedShortCircuitExpression(node);
            return false;
        } else {
            return true;
        }
    }

    boolean processHook(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isHook(), "Expected: HOOK, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node condition = node.getFirstChild();
        com.google.javascript.rhino.Node ifBranch = condition.getNext();
        com.google.javascript.rhino.Node elseBranch = ifBranch.getNext();
        boolean thenHasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(ifBranch, compiler);
        boolean elseHasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(elseBranch, compiler);
        if (thenHasSideEffects || elseHasSideEffects) {
            accumulator.keepSimplifiedHookExpression(node, thenHasSideEffects, elseHasSideEffects);
            return false;
        } else {
            return true;
        }
    }

    boolean processFunctionCall(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isCall(), "Expected: CALL, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node functionName = node.getFirstChild();
        if (functionName.isName() || functionName.isGetProp()) {
            if ((!accumulator.classDefiningCallsHaveSideEffects()) && isClassDefiningCall(node)) {
                return true;
            }
        }
        if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(node)) {
            return true;
        }
        accumulator.keepSubTree(node);
        return false;
    }

    boolean processConstructorCall(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isNew(), "Expected: NEW, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(node)) {
            return true;
        }
        accumulator.keepSubTree(node);
        return false;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
    }
}
[760817] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659913931140
GPR[EPVATF]-1659913932029
GPR[SPS]-1659913932029
[762212] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:257.
GPR[EPS]-1659913932534
GPR[ESUN]-1659913932535
GPR[SSUN]-1659913932535
1187751237
GPR[ESUN]-1659913932831
GPR[SSUN]-1659913932831
1187751237
GPR[ESUN]-1659913933116
GPR[SSUN]-1659913933117
198689906
GPR[ESUN]-1659913933392
GPR[SSUN]-1659913933392
198689906
GPR[SPVATF]-1659913933666
GPR[EPVATF]-1659913934580
GPR[SPS]-1659913934580
GPR[EPS]-1659913944342
GPR[SPVATF]-1659913944342
GPR[EPVATF]-1659913945290
GPR[SPS]-1659913945290
GPR[EPS]-1659913956057
GPR[ESUN]-1659913956057
GPR[SSUN]-1659913956057
198689906
GPR[ESUN]-1659913956323
GPR[SSUN]-1659913956323
198689906
GPR[ESUN]-1659913956584
GPR[SSUN]-1659913956584
198689906
GPR[ESUN]-1659913956846
GPR[SSUN]-1659913956846
198689906
GPR[SPVATF]-1659913957116
GPR[EPVATF]-1659913958110
GPR[SPS]-1659913958110
[788490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:511.
GPR[EPS]-1659913958812
GPR[SPVATF]-1659913958812
GPR[EPVATF]-1659913959836
GPR[SPS]-1659913959836
[790310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:511.
GPR[EPS]-1659913960632
GPR[ESUN]-1659913960632
GPR[SSUN]-1659913960632
198689906
GPR[SPVATF]-1659913960905
GPR[EPVATF]-1659913961900
GPR[SPS]-1659913961900
GPR[EPS]-1659913972450
GPR[ESUN]-1659913972450
GPR[SSUN]-1659913972450
198689906
GPR[SPVATF]-1659913972727
GPR[EPVATF]-1659913973732
GPR[SPS]-1659913973732
[804117] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:663.
GPR[EPS]-1659913974439
GPR[SPVATF]-1659913974439
GPR[EPVATF]-1659913975428
GPR[SPS]-1659913975428
[805804] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:663.
GPR[EPS]-1659913976126
GPR[ESUN]-1659913976126
GPR[SSUN]-1659913976126
198689906
GPR[SPVATF]-1659913976401
GPR[EPVATF]-1659913977398
GPR[SPS]-1659913977398
[807790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1521.
GPR[EPS]-1659913978112
GPR[ESUN]-1659913978112
GPR[SSUN]-1659913978112
198689906
GPR[SPVATF]-1659913978389
GPR[EPVATF]-1659913979440
GPR[SPS]-1659913979440
[809823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:862.
GPR[EPS]-1659913980145
GPR[ESUN]-1659913980145
GPR[SSUN]-1659913980145
198689906
GPR[SPVATF]-1659913980427
GPR[EPVATF]-1659913981440
GPR[SPS]-1659913981440
[811804] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class NameAnalyzer implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.NameAnalyzer.JsName> allNames = com.google.common.collect.Maps.newTreeMap();

    private com.google.javascript.jscomp.graph.DiGraph<com.google.javascript.jscomp.NameAnalyzer.JsName, com.google.javascript.jscomp.NameAnalyzer.RefType> referenceGraph = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();

    private final com.google.common.collect.ListMultimap<com.google.javascript.rhino.Node, com.google.javascript.jscomp.NameAnalyzer.NameInformation> scopes = com.google.common.collect.LinkedListMultimap.create();

    private static final java.lang.String PROTOTYPE_SUBSTRING = ".prototype.";

    private static final int PROTOTYPE_SUBSTRING_LEN = com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING.length();

    private static final int PROTOTYPE_SUFFIX_LEN = ".prototype".length();

    private static final java.lang.String WINDOW = "window";

    private static final java.lang.String FUNCTION = "Function";

    static final java.util.Set<java.lang.String> DEFAULT_GLOBAL_NAMES = com.google.common.collect.ImmutableSet.of("window", "goog.global");

    private final boolean removeUnreferenced;

    private final java.util.Set<java.lang.String> globalNames;

    private final com.google.javascript.jscomp.AstChangeProxy changeProxy;

    private final java.util.Set<java.lang.String> externalNames = com.google.common.collect.Sets.newHashSet();

    private final java.util.List<com.google.javascript.jscomp.NameAnalyzer.RefNode> refNodes = com.google.common.collect.Lists.newArrayList();

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.NameAnalyzer.AliasSet> aliases = com.google.common.collect.Maps.newHashMap();

    private static class AliasSet {
        java.util.Set<java.lang.String> names = com.google.common.collect.Sets.newHashSet();

        AliasSet(java.lang.String name1, java.lang.String name2) {
            names.add(name1);
            names.add(name2);
        }
    }

    private static enum RefType {

        REGULAR,
        INHERITANCE;}

    private static class ReferencePropagationCallback implements com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<com.google.javascript.jscomp.NameAnalyzer.JsName, com.google.javascript.jscomp.NameAnalyzer.RefType> {
        @java.lang.Override
        public boolean traverseEdge(com.google.javascript.jscomp.NameAnalyzer.JsName from, com.google.javascript.jscomp.NameAnalyzer.RefType callSite, com.google.javascript.jscomp.NameAnalyzer.JsName to) {
            if (from.referenced && (!to.referenced)) {
                to.referenced = true;
                return true;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(111).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.NameAnalyzer.DEFAULT_GLOBAL_NAMES",com.google.javascript.jscomp.NameAnalyzer.DEFAULT_GLOBAL_NAMES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("to.name",to.name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("to.referenced",to.referenced);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("to.hasWrittenDescendants",to.hasWrittenDescendants);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.NameAnalyzer.NON_LOCAL_RESULT_PREDICATE",com.google.javascript.jscomp.NameAnalyzer.NON_LOCAL_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING_LEN",com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING",com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.NameAnalyzer.WINDOW",com.google.javascript.jscomp.NameAnalyzer.WINDOW);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("from.prototypeNames",from.prototypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("to.hasInstanceOfReference",to.hasInstanceOfReference);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("callSite",callSite);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("from.referenced",from.referenced);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("to.externallyDefined",to.externallyDefined);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("from.name",from.name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("from",from);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("from.hasWrittenDescendants",from.hasWrittenDescendants);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("to",to);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("to.prototypeNames",to.prototypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUFFIX_LEN",com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUFFIX_LEN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("from.externallyDefined",from.externallyDefined);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("com.google.javascript.jscomp.NameAnalyzer.FUNCTION",com.google.javascript.jscomp.NameAnalyzer.FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectInput("from.hasInstanceOfReference",from.hasInstanceOfReference);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(111).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return false;

            }
        }
    }

    private static class NameInformation {
        java.lang.String name;

        boolean isExternallyReferenceable = false;

        boolean isPrototype = false;

        java.lang.String prototypeClass = null;

        java.lang.String prototypeProperty = null;

        java.lang.String superclass = null;

        boolean onlyAffectsClassDef = false;
    }

    private static class JsName implements java.lang.Comparable<com.google.javascript.jscomp.NameAnalyzer.JsName> {
        java.lang.String name;

        java.util.List<java.lang.String> prototypeNames = com.google.common.collect.Lists.newArrayList();

        boolean externallyDefined = false;

        boolean referenced = false;

        boolean hasWrittenDescendants = false;

        boolean hasInstanceOfReference = false;

        @java.lang.Override
        public java.lang.String toString() {
            java.lang.StringBuilder out = new java.lang.StringBuilder();
            out.append(name);
            if (prototypeNames.size() > 0) {
                out.append(" (CLASS)\n");
                out.append(" - FUNCTIONS: ");
                java.util.Iterator<java.lang.String> pIter = prototypeNames.iterator();
                while (pIter.hasNext()) {
                    out.append(pIter.next());
                    if (pIter.hasNext()) {
                        out.append(", ");
                    }
                } 
            }
            return out.toString();
        }

        @java.lang.Override
        public int compareTo(com.google.javascript.jscomp.NameAnalyzer.JsName rhs) {
            return this.name.compareTo(rhs.name);
        }
    }

    interface RefNode {
        public abstract com.google.javascript.jscomp.NameAnalyzer.JsName name();

        public abstract void remove();
    }

    private class JsNameRefNode implements com.google.javascript.jscomp.NameAnalyzer.RefNode {
        com.google.javascript.jscomp.NameAnalyzer.JsName name;

        @java.lang.SuppressWarnings("unused")
        com.google.javascript.rhino.Node node;

        com.google.javascript.rhino.Node parent;

        JsNameRefNode(com.google.javascript.jscomp.NameAnalyzer.JsName name, com.google.javascript.rhino.Node node) {
            this.name = name;
            this.node = node;
            this.parent = node.getParent();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.NameAnalyzer.JsName name() {
            return name;
        }

        @java.lang.Override
        public void remove() {
            com.google.javascript.rhino.Node containingNode = parent.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.VAR :
                    com.google.common.base.Preconditions.checkState(parent.hasOneChild());
                    replaceWithRhs(containingNode, parent);
                    break;
                case com.google.javascript.rhino.Token.FUNCTION :
                    replaceWithRhs(containingNode, parent);
                    break;
                case com.google.javascript.rhino.Token.ASSIGN :
                    if (containingNode.isExprResult()) {
                        replaceWithRhs(containingNode.getParent(), containingNode);
                    } else {
                        replaceWithRhs(containingNode, parent);
                    }
                    break;
                case com.google.javascript.rhino.Token.OBJECTLIT :
                    break;
            }
        }
    }

    private class PrototypeSetNode extends com.google.javascript.jscomp.NameAnalyzer.JsNameRefNode {
        PrototypeSetNode(com.google.javascript.jscomp.NameAnalyzer.JsName name, com.google.javascript.rhino.Node parent) {
            super(name, parent.getFirstChild());
            com.google.common.base.Preconditions.checkState(parent.isAssign());
        }

        @java.lang.Override
        public void remove() {
            com.google.javascript.rhino.Node gramps = parent.getParent();
            if (gramps.isExprResult()) {
                changeProxy.removeChild(gramps.getParent(), gramps);
            } else {
                changeProxy.replaceWith(gramps, parent, parent.getLastChild().detachFromParent());
            }
        }
    }

    private abstract class SpecialReferenceNode implements com.google.javascript.jscomp.NameAnalyzer.RefNode {
        com.google.javascript.jscomp.NameAnalyzer.JsName name;

        com.google.javascript.rhino.Node node;

        SpecialReferenceNode(com.google.javascript.jscomp.NameAnalyzer.JsName name, com.google.javascript.rhino.Node node) {
            this.name = name;
            this.node = node;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.NameAnalyzer.JsName name() {
            return name;
        }

        com.google.javascript.rhino.Node getParent() {
            return node.getParent();
        }

        com.google.javascript.rhino.Node getGramps() {
            return node.getParent() == null ? null : node.getParent().getParent();
        }
    }

    private class ClassDefiningFunctionNode extends com.google.javascript.jscomp.NameAnalyzer.SpecialReferenceNode {
        ClassDefiningFunctionNode(com.google.javascript.jscomp.NameAnalyzer.JsName name, com.google.javascript.rhino.Node node) {
            super(name, node);
            com.google.common.base.Preconditions.checkState(node.isCall());
        }

        @java.lang.Override
        public void remove() {
            com.google.common.base.Preconditions.checkState(node.isCall());
            com.google.javascript.rhino.Node parent = getParent();
            if (parent.isExprResult()) {
                changeProxy.removeChild(getGramps(), parent);
            } else {
                changeProxy.replaceWith(parent, node, com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0)));
            }
        }
    }

    private class InstanceOfCheckNode extends com.google.javascript.jscomp.NameAnalyzer.SpecialReferenceNode {
        InstanceOfCheckNode(com.google.javascript.jscomp.NameAnalyzer.JsName name, com.google.javascript.rhino.Node node) {
            super(name, node);
            com.google.common.base.Preconditions.checkState(node.isQualifiedName());
            com.google.common.base.Preconditions.checkState(getParent().isInstanceOf());
        }

        @java.lang.Override
        public void remove() {
            changeProxy.replaceWith(getGramps(), getParent(), com.google.javascript.rhino.IR.falseNode());
        }
    }

    private class ProcessExternals extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = null;
            if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(n)) {
                ns = createNameInformation(t, n);
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n)) {
                ns = createNameInformation(t, n.getFirstChild());
            }
            if (ns != null) {
                com.google.javascript.jscomp.NameAnalyzer.JsName jsName = getName(ns.name, true);
                jsName.externallyDefined = true;
                externalNames.add(ns.name);
            }
        }
    }

    private class FindDependencyScopes extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (!t.inGlobalScope()) {
                return;
            }
            if (n.isAssign()) {
                recordAssignment(t, n, n);
                if (!com.google.javascript.jscomp.NodeUtil.isImmutableResult(n.getLastChild())) {
                    recordConsumers(t, n, n);
                }
            } else if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(n)) {
                com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, n);
                recordDepScope(n, ns);
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n)) {
                com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, n.getFirstChild());
                recordDepScope(n, ns);
            } else if (com.google.javascript.jscomp.NodeUtil.isExprCall(n)) {
                com.google.javascript.rhino.Node callNode = n.getFirstChild();
                com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
                com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, nameNode);
                if ((ns != null) && ns.onlyAffectsClassDef) {
                    recordDepScope(n, ns);
                }
            }
        }

        private void recordConsumers(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node recordNode) {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.ASSIGN :
                    if (n == parent.getLastChild()) {
                        recordAssignment(t, parent, recordNode);
                    }
                    recordConsumers(t, parent, recordNode);
                    break;
                case com.google.javascript.rhino.Token.NAME :
                    com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, parent);
                    recordDepScope(recordNode, ns);
                    break;
                case com.google.javascript.rhino.Token.OR :
                    recordConsumers(t, parent, recordNode);
                    break;
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.COMMA :
                case com.google.javascript.rhino.Token.HOOK :
                    if (n != parent.getFirstChild()) {
                        recordConsumers(t, parent, recordNode);
                    }
                    break;
            }
        }

        private void recordAssignment(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node recordNode) {
            com.google.javascript.rhino.Node nameNode = n.getFirstChild();
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, nameNode);
            if (ns != null) {
                if (parent.isFor() && (!com.google.javascript.jscomp.NodeUtil.isForIn(parent))) {
                    if (parent.getFirstChild().getNext() != n) {
                        recordDepScope(recordNode, ns);
                    } else {
                        recordDepScope(nameNode, ns);
                    }
                } else {
                    recordDepScope(recordNode, ns);
                }
            }
        }

        private void recordDepScope(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NameAnalyzer.NameInformation name) {
            com.google.common.base.Preconditions.checkNotNull(name);
            scopes.put(node, name);
        }
    }

    private class HoistVariableAndFunctionDeclarations extends com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(n)) {
                com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, n);
                com.google.common.base.Preconditions.checkNotNull(ns, "NameInformation is null");
                createName(ns.name);
            } else if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n)) {
                com.google.javascript.rhino.Node nameNode = n.getFirstChild();
                com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, nameNode);
                com.google.common.base.Preconditions.checkNotNull(ns, "NameInformation is null");
                createName(nameNode.getString());
            }
        }
    }

    private class FindDeclarationsAndSetters extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (t.inGlobalScope()) {
                if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(n)) {
                    com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, n);
                    com.google.common.base.Preconditions.checkNotNull(ns);
                    recordSet(ns.name, n);
                } else if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n)) {
                    com.google.javascript.rhino.Node nameNode = n.getFirstChild();
                    com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, nameNode);
                    if (ns != null) {
                        com.google.javascript.jscomp.NameAnalyzer.JsName nameInfo = getName(nameNode.getString(), true);
                        recordSet(nameInfo.name, nameNode);
                    }
                } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(n)) {
                    com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, n);
                    if (ns != null) {
                        recordSet(ns.name, n);
                    }
                }
            }
            if (n.isAssign()) {
                com.google.javascript.rhino.Node nameNode = n.getFirstChild();
                com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, nameNode);
                if (ns != null) {
                    if (ns.isPrototype) {
                        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
                    } else {
                        recordSet(ns.name, nameNode);
                    }
                }
            } else if (n.isCall()) {
                com.google.javascript.rhino.Node nameNode = n.getFirstChild();
                com.google.javascript.jscomp.NameAnalyzer.NameInformation ns = createNameInformation(t, nameNode);
                if ((ns != null) && ns.onlyAffectsClassDef) {
                    com.google.javascript.jscomp.NameAnalyzer.JsName name = getName(ns.name, true);
                    refNodes.add(new com.google.javascript.jscomp.NameAnalyzer.ClassDefiningFunctionNode(name, n));
                }
            }
        }

        private void recordSet(java.lang.String name, com.google.javascript.rhino.Node node) {
            com.google.javascript.jscomp.NameAnalyzer.JsName jsn = getName(name, true);
            com.google.javascript.jscomp.NameAnalyzer.JsNameRefNode nameRefNode = new com.google.javascript.jscomp.NameAnalyzer.JsNameRefNode(jsn, node);
            refNodes.add(nameRefNode);
            if (node.isGetElem()) {
                recordWriteOnProperties(name);
            } else if (name.indexOf('.') != (-1)) {
                recordWriteOnProperties(name.substring(0, name.lastIndexOf('.')));
            }
        }

        private void recordPrototypeSet(java.lang.String className, java.lang.String prototypeProperty, com.google.javascript.rhino.Node node) {
            com.google.javascript.jscomp.NameAnalyzer.JsName name = getName(className, true);
            name.prototypeNames.add(prototypeProperty);
            refNodes.add(new com.google.javascript.jscomp.NameAnalyzer.PrototypeSetNode(name, node));
            recordWriteOnProperties(className);
        }

        private void recordWriteOnProperties(java.lang.String parentName) {
            do {
                com.google.javascript.jscomp.NameAnalyzer.JsName parent = getName(parentName, true);
                if (parent.hasWrittenDescendants) {
                    return;
                } else {
                    parent.hasWrittenDescendants = true;
                }
                if (parentName.indexOf('.') == (-1)) {
                    return;
                }
                parentName = parentName.substring(0, parentName.lastIndexOf('.'));
            } while (true );
        }
    }

    private static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> NON_LOCAL_RESULT_PREDICATE = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node input) {
            if (input.isCall()) {
                return false;
            }
            return true;
        }
    };

    private class FindReferences implements com.google.javascript.jscomp.NodeTraversal.Callback {
        java.util.Set<com.google.javascript.rhino.Node> nodesToKeep;

        FindReferences() {
            nodesToKeep = com.google.common.collect.Sets.newHashSet();
        }

        private void addAllChildren(com.google.javascript.rhino.Node n) {
            nodesToKeep.add(n);
            for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                addAllChildren(child);
            }
        }

        private void addSimplifiedChildren(com.google.javascript.rhino.Node n) {
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, n, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback(compiler, new com.google.javascript.jscomp.NameAnalyzer.FindReferences.NodeAccumulator()));
        }

        private void addSimplifiedExpression(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (parent.isVar()) {
                com.google.javascript.rhino.Node value = n.getFirstChild();
                if (value != null) {
                    addSimplifiedChildren(value);
                }
            } else if (n.isAssign() && ((parent.isExprResult() || parent.isFor()) || parent.isReturn())) {
                for (com.google.javascript.rhino.Node child : n.children()) {
                    addSimplifiedChildren(child);
                }
            } else if (n.isCall() && parent.isExprResult()) {
                addSimplifiedChildren(n);
            } else {
                addAllChildren(n);
            }
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (parent == null) {
                return true;
            }
            if (n.isFor()) {
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    com.google.javascript.rhino.Node decl = n.getFirstChild();
                    com.google.javascript.rhino.Node pred = decl.getNext();
                    com.google.javascript.rhino.Node step = pred.getNext();
                    addSimplifiedExpression(decl, n);
                    addSimplifiedExpression(pred, n);
                    addSimplifiedExpression(step, n);
                } else {
                    com.google.javascript.rhino.Node decl = n.getFirstChild();
                    com.google.javascript.rhino.Node iter = decl.getNext();
                    addAllChildren(decl);
                    addAllChildren(iter);
                }
            }
            if (((parent.isVar() || parent.isExprResult()) || parent.isReturn()) || parent.isThrow()) {
                addSimplifiedExpression(n, parent);
            }
            if (((((parent.isIf() || parent.isWhile()) || parent.isWith()) || parent.isSwitch()) || parent.isCase()) && (parent.getFirstChild() == n)) {
                addAllChildren(n);
            }
            if (parent.isDo() && (parent.getLastChild() == n)) {
                addAllChildren(n);
            }
            return true;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (!(n.isName() || (com.google.javascript.jscomp.NodeUtil.isGet(n) && (!parent.isGetProp())))) {
                return;
            }
            com.google.javascript.jscomp.NameAnalyzer.NameInformation nameInfo = createNameInformation(t, n);
            if (nameInfo == null) {
                return;
            }
            if (nameInfo.onlyAffectsClassDef) {
                if (nameInfo.superclass != null) {
                    recordReference(nameInfo.name, nameInfo.superclass, com.google.javascript.jscomp.NameAnalyzer.RefType.INHERITANCE);
                }
                java.lang.String nodeName = n.getQualifiedName();
                if (nodeName != null) {
                    recordReference(nameInfo.name, nodeName, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                }
                return;
            }
            if ((parent.isInstanceOf() && (parent.getLastChild() == n)) && n.isQualifiedName()) {
                com.google.javascript.jscomp.NameAnalyzer.JsName checkedClass = getName(nameInfo.name, true);
                refNodes.add(new com.google.javascript.jscomp.NameAnalyzer.InstanceOfCheckNode(checkedClass, n));
                checkedClass.hasInstanceOfReference = true;
                return;
            }
            java.util.List<com.google.javascript.jscomp.NameAnalyzer.NameInformation> referers = getDependencyScope(n);
            if (referers.isEmpty()) {
                maybeRecordReferenceOrAlias(t, n, parent, nameInfo, null);
            } else {
                for (com.google.javascript.jscomp.NameAnalyzer.NameInformation referring : referers) {
                    maybeRecordReferenceOrAlias(t, n, parent, nameInfo, referring);
                }
                recordAliases(referers);
            }
        }

        private void maybeRecordReferenceOrAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.NameAnalyzer.NameInformation nameInfo, com.google.javascript.jscomp.NameAnalyzer.NameInformation referring) {
            java.lang.String referringName = "";
            if (referring != null) {
                referringName = (referring.isPrototype) ? referring.prototypeClass : referring.name;
            }
            java.lang.String name = nameInfo.name;
            if (maybeHiddenAlias(n)) {
                recordAlias(name, com.google.javascript.jscomp.NameAnalyzer.WINDOW);
            }
            if (nameInfo.isExternallyReferenceable) {
                recordReference(com.google.javascript.jscomp.NameAnalyzer.WINDOW, name, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                maybeRecordAlias(name, parent, referring, referringName);
                return;
            }
            if (com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {
                if (referring != null) {
                    recordReference(referringName, name, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                }
                return;
            }
            if (nodesToKeep.contains(n)) {
                java.util.List<com.google.javascript.jscomp.NameAnalyzer.NameInformation> functionScopes = getEnclosingFunctionDependencyScope(t);
                if (!functionScopes.isEmpty()) {
                    for (com.google.javascript.jscomp.NameAnalyzer.NameInformation functionScope : functionScopes) {
                        recordReference(functionScope.name, name, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                    }
                } else {
                    recordReference(com.google.javascript.jscomp.NameAnalyzer.WINDOW, name, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                    if (referring != null) {
                        maybeRecordAlias(name, parent, referring, referringName);
                    }
                }
            } else if (referring != null) {
                if (!maybeRecordAlias(name, parent, referring, referringName)) {
                    com.google.javascript.jscomp.NameAnalyzer.RefType depType = (referring.onlyAffectsClassDef) ? com.google.javascript.jscomp.NameAnalyzer.RefType.INHERITANCE : com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR;
                    recordReference(referringName, name, depType);
                }
            } else {
                for (com.google.javascript.rhino.Node ancestor : n.getAncestors()) {
                    if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(ancestor) || ancestor.isFunction()) {
                        recordReference(com.google.javascript.jscomp.NameAnalyzer.WINDOW, name, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                        break;
                    }
                }
            }
        }

        private void recordAliases(java.util.List<com.google.javascript.jscomp.NameAnalyzer.NameInformation> referers) {
            int size = referers.size();
            for (int i = 0; i < size; i++) {
                for (int j = i + 1; j < size; j++) {
                    recordAlias(referers.get(i).name, referers.get(j).name);
                    recordAlias(referers.get(j).name, referers.get(i).name);
                }
            }
        }

        private boolean maybeHiddenAlias(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {
                com.google.javascript.rhino.Node rhs = (parent.isVar()) ? n.getFirstChild() : parent.getLastChild();
                return (rhs != null) && (!com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(rhs, com.google.javascript.jscomp.NameAnalyzer.NON_LOCAL_RESULT_PREDICATE));
            }
            return false;
        }

        private boolean maybeRecordAlias(java.lang.String name, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.NameAnalyzer.NameInformation referring, java.lang.String referringName) {
            boolean isPrototypePropAssignment = parent.isAssign() && com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(parent.getFirstChild());
            if ((((parent.isName() || parent.isAssign()) && (!isPrototypePropAssignment)) && (referring != null)) && scopes.get(parent).contains(referring)) {
                recordAlias(referringName, name);
                return true;
            }
            return false;
        }

        private class NodeAccumulator implements com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator {
            @java.lang.Override
            public boolean classDefiningCallsHaveSideEffects() {
                return false;
            }

            @java.lang.Override
            public void keepSubTree(com.google.javascript.rhino.Node original) {
                addAllChildren(original);
            }

            @java.lang.Override
            public void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original) {
                com.google.javascript.rhino.Node condition = original.getFirstChild();
                com.google.javascript.rhino.Node thenBranch = condition.getNext();
                addAllChildren(condition);
                addSimplifiedChildren(thenBranch);
            }

            @java.lang.Override
            public void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects) {
                com.google.javascript.rhino.Node condition = hook.getFirstChild();
                com.google.javascript.rhino.Node thenBranch = condition.getNext();
                com.google.javascript.rhino.Node elseBranch = thenBranch.getNext();
                addAllChildren(condition);
                if (thenHasSideEffects) {
                    addSimplifiedChildren(thenBranch);
                }
                if (elseHasSideEffects) {
                    addSimplifiedChildren(elseBranch);
                }
            }
        }
    }

    private class RemoveListener implements com.google.javascript.jscomp.AstChangeProxy.ChangeListener {
        @java.lang.Override
        public void nodeRemoved(com.google.javascript.rhino.Node n) {
            compiler.reportCodeChange();
        }
    }

    NameAnalyzer(com.google.javascript.jscomp.AbstractCompiler compiler, boolean removeUnreferenced) {
        this.compiler = compiler;
        this.removeUnreferenced = removeUnreferenced;
        this.globalNames = com.google.javascript.jscomp.NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        this.changeProxy = new com.google.javascript.jscomp.AstChangeProxy();
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externs, new com.google.javascript.jscomp.NameAnalyzer.ProcessExternals());
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.NameAnalyzer.FindDependencyScopes());
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.NameAnalyzer.HoistVariableAndFunctionDeclarations());
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.NameAnalyzer.FindDeclarationsAndSetters());
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.NameAnalyzer.FindReferences());
        referenceParentNames();
        referenceAliases();
        calculateReferences();
        if (removeUnreferenced) {
            removeUnreferenced();
        }
    }

    private void recordAlias(java.lang.String fromName, java.lang.String toName) {
        recordReference(fromName, toName, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
        com.google.javascript.jscomp.NameAnalyzer.AliasSet toNameAliasSet = aliases.get(toName);
        com.google.javascript.jscomp.NameAnalyzer.AliasSet fromNameAliasSet = aliases.get(fromName);
        com.google.javascript.jscomp.NameAnalyzer.AliasSet resultSet = null;
        if ((toNameAliasSet == null) && (fromNameAliasSet == null)) {
            resultSet = new com.google.javascript.jscomp.NameAnalyzer.AliasSet(toName, fromName);
        } else if ((toNameAliasSet != null) && (fromNameAliasSet != null)) {
            resultSet = toNameAliasSet;
            resultSet.names.addAll(fromNameAliasSet.names);
            for (java.lang.String name : fromNameAliasSet.names) {
                aliases.put(name, resultSet);
            }
        } else if (toNameAliasSet != null) {
            resultSet = toNameAliasSet;
            resultSet.names.add(fromName);
        } else {
            resultSet = fromNameAliasSet;
            resultSet.names.add(toName);
        }
        aliases.put(fromName, resultSet);
        aliases.put(toName, resultSet);
    }

    private void recordReference(java.lang.String fromName, java.lang.String toName, com.google.javascript.jscomp.NameAnalyzer.RefType depType) {
        if (fromName.equals(toName)) {
            return;
        }
        com.google.javascript.jscomp.NameAnalyzer.JsName from = getName(fromName, true);
        com.google.javascript.jscomp.NameAnalyzer.JsName to = getName(toName, true);
        referenceGraph.createNode(from);
        referenceGraph.createNode(to);
        if (!referenceGraph.isConnectedInDirection(from, depType, to)) {
            referenceGraph.connect(from, depType, to);
        }
    }

    void removeUnreferenced() {
        com.google.javascript.jscomp.NameAnalyzer.RemoveListener listener = new com.google.javascript.jscomp.NameAnalyzer.RemoveListener();
        changeProxy.registerListener(listener);
        for (com.google.javascript.jscomp.NameAnalyzer.RefNode refNode : refNodes) {
            com.google.javascript.jscomp.NameAnalyzer.JsName name = refNode.name();
            if ((!name.referenced) && (!name.externallyDefined)) {
                refNode.remove();
            }
        }
        changeProxy.unregisterListener(listener);
    }

    java.lang.String getHtmlReport() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        sb.append("<html><body><style type=\"text/css\">" + ((("body, td, p {font-family: Arial; font-size: 83%} " + "ul {margin-top:2px; margin-left:0px; padding-left:1em;} ") + "li {margin-top:3px; margin-left:24px; padding-left:0px;") + "padding-bottom: 4px}</style>"));
        sb.append("OVERALL STATS<ul>");
        appendListItem(sb, "Total Names: " + countOf(com.google.javascript.jscomp.NameAnalyzer.TriState.BOTH, com.google.javascript.jscomp.NameAnalyzer.TriState.BOTH));
        appendListItem(sb, "Total Classes: " + countOf(com.google.javascript.jscomp.NameAnalyzer.TriState.TRUE, com.google.javascript.jscomp.NameAnalyzer.TriState.BOTH));
        appendListItem(sb, "Total Static Functions: " + countOf(com.google.javascript.jscomp.NameAnalyzer.TriState.FALSE, com.google.javascript.jscomp.NameAnalyzer.TriState.BOTH));
        appendListItem(sb, "Referenced Names: " + countOf(com.google.javascript.jscomp.NameAnalyzer.TriState.BOTH, com.google.javascript.jscomp.NameAnalyzer.TriState.TRUE));
        appendListItem(sb, "Referenced Classes: " + countOf(com.google.javascript.jscomp.NameAnalyzer.TriState.TRUE, com.google.javascript.jscomp.NameAnalyzer.TriState.TRUE));
        appendListItem(sb, "Referenced Functions: " + countOf(com.google.javascript.jscomp.NameAnalyzer.TriState.FALSE, com.google.javascript.jscomp.NameAnalyzer.TriState.TRUE));
        sb.append("</ul>");
        sb.append("ALL NAMES<ul>\n");
        for (com.google.javascript.jscomp.NameAnalyzer.JsName node : allNames.values()) {
            sb.append(("<li>" + nameAnchor(node.name)) + "<ul>");
            if (node.prototypeNames.size() > 0) {
                sb.append("<li>PROTOTYPES: ");
                java.util.Iterator<java.lang.String> protoIter = node.prototypeNames.iterator();
                while (protoIter.hasNext()) {
                    sb.append(protoIter.next());
                    if (protoIter.hasNext()) {
                        sb.append(", ");
                    }
                } 
            }
            if (referenceGraph.hasNode(node)) {
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge<com.google.javascript.jscomp.NameAnalyzer.JsName, com.google.javascript.jscomp.NameAnalyzer.RefType>> refersTo = referenceGraph.getOutEdges(node);
                if (refersTo.size() > 0) {
                    sb.append("<li>REFERS TO: ");
                    java.util.Iterator<com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge<com.google.javascript.jscomp.NameAnalyzer.JsName, com.google.javascript.jscomp.NameAnalyzer.RefType>> toIter = refersTo.iterator();
                    while (toIter.hasNext()) {
                        sb.append(nameLink(toIter.next().getDestination().getValue().name));
                        if (toIter.hasNext()) {
                            sb.append(", ");
                        }
                    } 
                }
                java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge<com.google.javascript.jscomp.NameAnalyzer.JsName, com.google.javascript.jscomp.NameAnalyzer.RefType>> referencedBy = referenceGraph.getInEdges(node);
                if (referencedBy.size() > 0) {
                    sb.append("<li>REFERENCED BY: ");
                    java.util.Iterator<com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge<com.google.javascript.jscomp.NameAnalyzer.JsName, com.google.javascript.jscomp.NameAnalyzer.RefType>> fromIter = refersTo.iterator();
                    while (fromIter.hasNext()) {
                        sb.append(nameLink(fromIter.next().getDestination().getValue().name));
                        if (fromIter.hasNext()) {
                            sb.append(", ");
                        }
                    } 
                }
            }
            sb.append("</li>");
            sb.append("</ul></li>");
        }
        sb.append("</ul>");
        sb.append("</body></html>");
        return sb.toString();
    }

    private void appendListItem(java.lang.StringBuilder sb, java.lang.String text) {
        sb.append(("<li>" + text) + "</li>\n");
    }

    private java.lang.String nameLink(java.lang.String name) {
        return ((("<a href=\"#" + name) + "\">") + name) + "</a>";
    }

    private java.lang.String nameAnchor(java.lang.String name) {
        return ((("<a name=\"" + name) + "\">") + name) + "</a>";
    }

    private com.google.javascript.jscomp.NameAnalyzer.JsName getName(java.lang.String name, boolean canCreate) {
        if (canCreate) {
            createName(name);
        }
        return allNames.get(name);
    }

    private void createName(java.lang.String name) {
        com.google.javascript.jscomp.NameAnalyzer.JsName jsn = allNames.get(name);
        if (jsn == null) {
            jsn = new com.google.javascript.jscomp.NameAnalyzer.JsName();
            jsn.name = name;
            allNames.put(name, jsn);
        }
    }

    private void referenceAliases() {
        for (java.util.Map.Entry<java.lang.String, com.google.javascript.jscomp.NameAnalyzer.AliasSet> entry : aliases.entrySet()) {
            com.google.javascript.jscomp.NameAnalyzer.JsName name = getName(entry.getKey(), false);
            if (name.hasWrittenDescendants || name.hasInstanceOfReference) {
                for (java.lang.String alias : entry.getValue().names) {
                    recordReference(alias, entry.getKey(), com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                }
            }
        }
    }

    private void referenceParentNames() {
        java.util.Set<com.google.javascript.jscomp.NameAnalyzer.JsName> allNamesCopy = com.google.common.collect.Sets.newHashSet(allNames.values());
        for (com.google.javascript.jscomp.NameAnalyzer.JsName name : allNamesCopy) {
            java.lang.String curName = name.name;
            com.google.javascript.jscomp.NameAnalyzer.JsName curJsName = name;
            while (curName.indexOf('.') != (-1)) {
                java.lang.String parentName = curName.substring(0, curName.lastIndexOf('.'));
                if (!globalNames.contains(parentName)) {
                    com.google.javascript.jscomp.NameAnalyzer.JsName parentJsName = getName(parentName, true);
                    recordReference(curJsName.name, parentJsName.name, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                    recordReference(parentJsName.name, curJsName.name, com.google.javascript.jscomp.NameAnalyzer.RefType.REGULAR);
                    curJsName = parentJsName;
                }
                curName = parentName;
            } 
        }
    }

    private com.google.javascript.jscomp.NameAnalyzer.NameInformation createNameInformation(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        java.lang.String name = "";
        com.google.javascript.rhino.Node rootNameNode = n;
        boolean bNameWasShortened = false;
        while (true) {
            if (com.google.javascript.jscomp.NodeUtil.isGet(rootNameNode)) {
                com.google.javascript.rhino.Node prop = rootNameNode.getLastChild();
                if (rootNameNode.isGetProp()) {
                    name = ("." + prop.getString()) + name;
                } else {
                    bNameWasShortened = true;
                    name = "";
                }
                rootNameNode = rootNameNode.getFirstChild();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(rootNameNode)) {
                name = ("." + rootNameNode.getString()) + name;
                com.google.javascript.rhino.Node objLit = rootNameNode.getParent();
                com.google.javascript.rhino.Node objLitParent = objLit.getParent();
                if (objLitParent.isAssign()) {
                    rootNameNode = objLitParent.getFirstChild();
                } else if (objLitParent.isName()) {
                    rootNameNode = objLitParent;
                } else if (objLitParent.isStringKey()) {
                    rootNameNode = objLitParent;
                } else {
                    return null;
                }
            } else {
                break;
            }
        } 
        if (parent.isCall() && t.inGlobalScope()) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
            if (classes != null) {
                com.google.javascript.jscomp.NameAnalyzer.NameInformation nameInfo = new com.google.javascript.jscomp.NameAnalyzer.NameInformation();
                nameInfo.name = classes.subclassName;
                nameInfo.onlyAffectsClassDef = true;
                nameInfo.superclass = classes.superclassName;
                return nameInfo;
            }
            java.lang.String singletonGetterClass = convention.getSingletonGetterClassName(parent);
            if (singletonGetterClass != null) {
                com.google.javascript.jscomp.NameAnalyzer.NameInformation nameInfo = new com.google.javascript.jscomp.NameAnalyzer.NameInformation();
                nameInfo.name = singletonGetterClass;
                nameInfo.onlyAffectsClassDef = true;
                return nameInfo;
            }
        }
        switch (rootNameNode.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                if ((((!bNameWasShortened) && n.isGetProp()) && parent.isAssign()) && "prototype".equals(n.getLastChild().getString())) {
                    if (createNameInformation(t, n.getFirstChild()) != null) {
                        name = rootNameNode.getString() + name;
                        name = name.substring(0, name.length() - com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUFFIX_LEN);
                        com.google.javascript.jscomp.NameAnalyzer.NameInformation nameInfo = new com.google.javascript.jscomp.NameAnalyzer.NameInformation();
                        nameInfo.name = name;
                        return nameInfo;
                    } else {
                        return null;
                    }
                }
                return createNameInformation(rootNameNode.getString() + name, t.getScope(), rootNameNode);
            case com.google.javascript.rhino.Token.THIS :
                if (t.inGlobalScope()) {
                    com.google.javascript.jscomp.NameAnalyzer.NameInformation nameInfo = new com.google.javascript.jscomp.NameAnalyzer.NameInformation();
                    if (name.indexOf('.') == 0) {
                        nameInfo.name = name.substring(1);
                    } else {
                        nameInfo.name = name;
                    }
                    nameInfo.isExternallyReferenceable = true;
                    return nameInfo;
                }
                return null;
            default :
                return null;
        }
    }

    private com.google.javascript.jscomp.NameAnalyzer.NameInformation createNameInformation(java.lang.String name, com.google.javascript.jscomp.Scope scope, com.google.javascript.rhino.Node rootNameNode) {
        java.lang.String rootName = rootNameNode.getString();
        com.google.javascript.jscomp.Scope.Var v = scope.getVar(rootName);
        boolean isExtern = (v == null) && externalNames.contains(rootName);
        boolean isGlobalRef = (((v != null) && v.isGlobal()) || isExtern) || rootName.equals(com.google.javascript.jscomp.NameAnalyzer.WINDOW);
        if (!isGlobalRef) {
            return null;
        }
        com.google.javascript.jscomp.NameAnalyzer.NameInformation nameInfo = new com.google.javascript.jscomp.NameAnalyzer.NameInformation();
        int idx = name.indexOf(com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING);
        if (idx != (-1)) {
            nameInfo.isPrototype = true;
            nameInfo.prototypeClass = name.substring(0, idx);
            nameInfo.prototypeProperty = name.substring(idx + com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING_LEN);
        }
        nameInfo.name = name;
        nameInfo.isExternallyReferenceable = isExtern || isExternallyReferenceable(scope, name);
        return nameInfo;
    }

    private boolean isExternallyReferenceable(com.google.javascript.jscomp.Scope scope, java.lang.String name) {
        if (compiler.getCodingConvention().isExported(name)) {
            return true;
        }
        if (scope.isLocal()) {
            return false;
        }
        for (java.lang.String s : globalNames) {
            if (name.startsWith(s)) {
                return true;
            }
        }
        return false;
    }

    private java.util.List<com.google.javascript.jscomp.NameAnalyzer.NameInformation> getDependencyScope(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node node : n.getAncestors()) {
            java.util.List<com.google.javascript.jscomp.NameAnalyzer.NameInformation> refs = scopes.get(node);
            if (!refs.isEmpty()) {
                return refs;
            }
        }
        return java.util.Collections.emptyList();
    }

    private java.util.List<com.google.javascript.jscomp.NameAnalyzer.NameInformation> getEnclosingFunctionDependencyScope(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return java.util.Collections.emptyList();
        }
        java.util.List<com.google.javascript.jscomp.NameAnalyzer.NameInformation> refs = scopes.get(function);
        if (!refs.isEmpty()) {
            return refs;
        }
        com.google.javascript.rhino.Node parent = function.getParent();
        if (parent != null) {
            while (parent.isHook()) {
                parent = parent.getParent();
            } 
            if (parent.isName()) {
                return scopes.get(parent);
            }
            if (parent.isAssign()) {
                return scopes.get(parent);
            }
        }
        return java.util.Collections.emptyList();
    }

    private void calculateReferences() {
        com.google.javascript.jscomp.NameAnalyzer.JsName window = getName(com.google.javascript.jscomp.NameAnalyzer.WINDOW, true);
        window.referenced = true;
        com.google.javascript.jscomp.NameAnalyzer.JsName function = getName(com.google.javascript.jscomp.NameAnalyzer.FUNCTION, true);
        function.referenced = true;
        com.google.javascript.jscomp.graph.FixedPointGraphTraversal.newTraversal(new com.google.javascript.jscomp.NameAnalyzer.ReferencePropagationCallback()).computeFixedPoint(referenceGraph);
    }

    private enum TriState {

        TRUE,
        FALSE,
        BOTH;}

    private int countOf(com.google.javascript.jscomp.NameAnalyzer.TriState isClass, com.google.javascript.jscomp.NameAnalyzer.TriState referenced) {
        int count = 0;
        for (com.google.javascript.jscomp.NameAnalyzer.JsName name : allNames.values()) {
            boolean nodeIsClass = name.prototypeNames.size() > 0;
            boolean classMatch = ((isClass == com.google.javascript.jscomp.NameAnalyzer.TriState.BOTH) || (nodeIsClass && (isClass == com.google.javascript.jscomp.NameAnalyzer.TriState.TRUE))) || ((!nodeIsClass) && (isClass == com.google.javascript.jscomp.NameAnalyzer.TriState.FALSE));
            boolean referenceMatch = ((referenced == com.google.javascript.jscomp.NameAnalyzer.TriState.BOTH) || (name.referenced && (referenced == com.google.javascript.jscomp.NameAnalyzer.TriState.TRUE))) || ((!name.referenced) && (referenced == com.google.javascript.jscomp.NameAnalyzer.TriState.FALSE));
            if ((classMatch && referenceMatch) && (!name.externallyDefined)) {
                count++;
            }
        }
        return count;
    }

    private java.util.List<com.google.javascript.rhino.Node> getSideEffectNodes(com.google.javascript.rhino.Node n) {
        java.util.List<com.google.javascript.rhino.Node> subexpressions = com.google.common.collect.Lists.newArrayList();
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, n, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback(compiler, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.GetReplacementSideEffectSubexpressions(compiler, subexpressions)));
        java.util.List<com.google.javascript.rhino.Node> replacements = com.google.common.collect.Lists.newArrayListWithExpectedSize(subexpressions.size());
        for (com.google.javascript.rhino.Node subexpression : subexpressions) {
            replacements.add(com.google.javascript.jscomp.NodeUtil.newExpr(subexpression));
        }
        return replacements;
    }

    private void replaceWithRhs(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        if (valueConsumedByParent(n, parent)) {
            java.util.List<com.google.javascript.rhino.Node> replacements = getRhsSubexpressions(n);
            java.util.List<com.google.javascript.rhino.Node> newReplacements = com.google.common.collect.Lists.newArrayList();
            for (int i = 0; i < (replacements.size() - 1); i++) {
                newReplacements.addAll(getSideEffectNodes(replacements.get(i)));
            }
            com.google.javascript.rhino.Node valueExpr = replacements.get(replacements.size() - 1);
            valueExpr.detachFromParent();
            newReplacements.add(valueExpr);
            changeProxy.replaceWith(parent, n, collapseReplacements(newReplacements));
        } else if (n.isAssign() && (!parent.isFor())) {
            com.google.javascript.rhino.Node replacement = n.getLastChild();
            replacement.detachFromParent();
            changeProxy.replaceWith(parent, n, replacement);
        } else {
            replaceTopLevelExpressionWithRhs(parent, n);
        }
    }

    private void replaceTopLevelExpressionWithRhs(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.LABEL :
                break;
            default :
                throw new java.lang.IllegalArgumentException("Unsupported parent node type in replaceWithRhs " + com.google.javascript.rhino.Token.name(parent.getType()));
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.VAR :
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.common.base.Preconditions.checkArgument(parent.isFor(), "Unsupported assignment in replaceWithRhs. parent: %s", com.google.javascript.rhino.Token.name(parent.getType()));
                break;
            default :
                throw new java.lang.IllegalArgumentException("Unsupported node type in replaceWithRhs " + com.google.javascript.rhino.Token.name(n.getType()));
        }
        java.util.List<com.google.javascript.rhino.Node> replacements = com.google.common.collect.Lists.newArrayList();
        for (com.google.javascript.rhino.Node rhs : getRhsSubexpressions(n)) {
            replacements.addAll(getSideEffectNodes(rhs));
        }
        if (parent.isFor()) {
            if (replacements.isEmpty()) {
                replacements.add(com.google.javascript.rhino.IR.empty());
            } else {
                com.google.javascript.rhino.Node expr = collapseReplacements(replacements);
                replacements.clear();
                replacements.add(expr);
            }
        }
        changeProxy.replaceWith(parent, n, replacements);
    }

    private boolean valueConsumedByParent(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent)) {
            return parent.getLastChild() == n;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.RETURN :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.FOR :
                return parent.getFirstChild().getNext() == n;
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getLastChild() == n;
            default :
                return false;
        }
    }

    private com.google.javascript.rhino.Node collapseReplacements(java.util.List<com.google.javascript.rhino.Node> replacements) {
        com.google.javascript.rhino.Node expr = null;
        for (com.google.javascript.rhino.Node rep : replacements) {
            if (rep.isExprResult()) {
                rep = rep.getFirstChild();
                rep.detachFromParent();
            }
            if (expr == null) {
                expr = rep;
            } else {
                expr = com.google.javascript.rhino.IR.comma(expr, rep);
            }
        }
        return expr;
    }

    private java.util.List<com.google.javascript.rhino.Node> getRhsSubexpressions(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return getRhsSubexpressions(n.getFirstChild());
            case com.google.javascript.rhino.Token.FUNCTION :
                return java.util.Collections.emptyList();
            case com.google.javascript.rhino.Token.NAME :
                {
                    com.google.javascript.rhino.Node rhs = n.getFirstChild();
                    if (rhs != null) {
                        return com.google.common.collect.Lists.newArrayList(rhs);
                    } else {
                        return java.util.Collections.emptyList();
                    }
                }
            case com.google.javascript.rhino.Token.ASSIGN :
                {
                    com.google.javascript.rhino.Node lhs = n.getFirstChild();
                    com.google.javascript.rhino.Node rhs = lhs.getNext();
                    return com.google.common.collect.Lists.newArrayList(lhs, rhs);
                }
            case com.google.javascript.rhino.Token.VAR :
                {
                    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
                    for (com.google.javascript.rhino.Node child : n.children()) {
                        nodes.addAll(getRhsSubexpressions(child));
                    }
                    return nodes;
                }
            default :
                throw new java.lang.IllegalArgumentException("AstChangeProxy::getRhs " + n);
        }
    }
}
[811804] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659913982126
GPR[SSUN]-1659913982127
198689906
GPR[SPVATF]-1659913982405
GPR[EPVATF]-1659913983424
GPR[SPS]-1659913983424
[813817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:669.
GPR[EPS]-1659913984139
GPR[SPVATF]-1659913984139
GPR[EPVATF]-1659913985145
GPR[SPS]-1659913985145
[815532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:669.
GPR[EPS]-1659913985854
GPR[ESUN]-1659913985854
GPR[SSUN]-1659913985854
198689906
GPR[SPVATF]-1659913986130
GPR[EPVATF]-1659913987137
GPR[SPS]-1659913987137
[817675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:662.
GPR[EPS]-1659913987997
GPR[SPVATF]-1659913987997
GPR[EPVATF]-1659913988997
GPR[SPS]-1659913988997
[819409] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:662.
GPR[EPS]-1659913989731
GPR[ESUN]-1659913989731
GPR[SSUN]-1659913989731
198689906
GPR[ESUN]-1659913990013
GPR[SSUN]-1659913990013
198689906
GPR[ESUN]-1659913990289
GPR[SSUN]-1659913990289
1187751237
GPR[ESUN]-1659913990584
GPR[SSUN]-1659913990584
1187751237
GPR[ESUN]-1659913990877
GPR[SSUN]-1659913990877
198689906
GPR[SPVATF]-1659913991150
GPR[EPVATF]-1659913992167
GPR[SPS]-1659913992167
[822554] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:771.
GPR[EPS]-1659913992876
GPR[ESUN]-1659913992876
GPR[SSUN]-1659913992877
198689906
GPR[SPVATF]-1659913993155
GPR[EPVATF]-1659913994168
GPR[SPS]-1659913994168
[824609] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1180.
GPR[EPS]-1659913994931
GPR[ESUN]-1659913994931
GPR[SSUN]-1659913994932
1852376448
GPR[SPVATF]-1659913995160
GPR[EPVATF]-1659913996165
GPR[SPS]-1659913996165
[826370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:182.
GPR[EPS]-1659913996692
GPR[ESUN]-1659913996692
GPR[SSUN]-1659913996692
198689906
GPR[ESUN]-1659913996973
GPR[SSUN]-1659913996973
198689906
GPR[ESUN]-1659913997249
GPR[SSUN]-1659913997249
198689906
GPR[SPVATF]-1659913997521
GPR[EPVATF]-1659913998528
GPR[SPS]-1659913998528
[828912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:768.
GPR[EPS]-1659913999234
GPR[ESUN]-1659913999234
GPR[SSUN]-1659913999234
198689906
GPR[SPVATF]-1659913999513
GPR[EPVATF]-1659914000517
GPR[SPS]-1659914000517
[830901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:767.
GPR[EPS]-1659914001223
GPR[ESUN]-1659914001223
GPR[SSUN]-1659914001223
198689906
GPR[SPVATF]-1659914001504
GPR[EPVATF]-1659914002511
GPR[SPS]-1659914002511
[832936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1571.
GPR[EPS]-1659914003258
GPR[ESUN]-1659914003258
GPR[SSUN]-1659914003258
198689906
GPR[ESUN]-1659914003543
GPR[SSUN]-1659914003543
198689906
GPR[SPVATF]-1659914003819
GPR[EPVATF]-1659914004828
GPR[SPS]-1659914004828
[835214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:982.
GPR[EPS]-1659914005536
GPR[ESUN]-1659914005536
GPR[SSUN]-1659914005536
198689906
GPR[SPVATF]-1659914005813
GPR[EPVATF]-1659914006818
GPR[SPS]-1659914006818
[837213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:981.
GPR[EPS]-1659914007535
GPR[ESUN]-1659914007536
GPR[SSUN]-1659914007536
198689906
GPR[ESUN]-1659914007822
GPR[SSUN]-1659914007822
198689906
GPR[SPVATF]-1659914008102
GPR[EPVATF]-1659914009129
GPR[SPS]-1659914009129
[839519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:913.
GPR[EPS]-1659914009841
GPR[ESUN]-1659914009842
GPR[SSUN]-1659914009842
198689906
GPR[SPVATF]-1659914010117
GPR[EPVATF]-1659914011124
GPR[SPS]-1659914011124
[841533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:904.
GPR[EPS]-1659914011856
GPR[ESUN]-1659914011856
GPR[SSUN]-1659914011856
198689906
GPR[ESUN]-1659914012135
GPR[SSUN]-1659914012135
198689906
GPR[SPVATF]-1659914012407
GPR[EPVATF]-1659914013423
GPR[SPS]-1659914013423
[843810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:902.
GPR[EPS]-1659914014133
GPR[ESUN]-1659914014133
GPR[SSUN]-1659914014133
198689906
GPR[SPVATF]-1659914014408
GPR[EPVATF]-1659914015435
GPR[SPS]-1659914015435
[845823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:901.
GPR[EPS]-1659914016145
GPR[ESUN]-1659914016146
GPR[SSUN]-1659914016146
198689906
GPR[ESUN]-1659914016425
GPR[SSUN]-1659914016425
198689906
GPR[SPVATF]-1659914016705
GPR[EPVATF]-1659914017730
GPR[SPS]-1659914017730
[848130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:945.
GPR[EPS]-1659914018452
GPR[SPVATF]-1659914018452
GPR[EPVATF]-1659914019460
GPR[SPS]-1659914019460
[849887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:945.
GPR[EPS]-1659914020209
GPR[ESUN]-1659914020209
GPR[SSUN]-1659914020209
198689906
GPR[SPVATF]-1659914020486
GPR[EPVATF]-1659914021645
GPR[SPS]-1659914021645
CodeCache: size=245760Kb used=243085Kb max_used=243232Kb free=2674Kb
 bounds [0x00007fc285000000, 0x00007fc294000000, 0x00007fc294000000]
 total_blobs=71480 nmethods=70973 adapters=403
 compilation: disabled (not enough contiguous free space left)
[855341] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations:614.
GPR[EPS]-1659914025663
GPR[SPVATF]-1659914025663
GPR[EPVATF]-1659914028644
GPR[SPS]-1659914028644
[860218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations:614.
GPR[EPS]-1659914030540
GPR[ESUN]-1659914030540
GPR[SSUN]-1659914030541
198689906
GPR[SPVATF]-1659914030970
GPR[EPVATF]-1659914031655
GPR[SPS]-1659914031655
[862280] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations:613.
GPR[EPS]-1659914032602
GPR[ESUN]-1659914032602
GPR[SSUN]-1659914032602
198689906
GPR[SPVATF]-1659914032942
GPR[EPVATF]-1659914033638
GPR[SPS]-1659914033638
[864177] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations:612.
GPR[EPS]-1659914034499
GPR[ESUN]-1659914034499
GPR[SSUN]-1659914034499
198689906
GPR[ESUN]-1659914034819
GPR[SSUN]-1659914034819
198689906
GPR[SPVATF]-1659914035141
GPR[EPVATF]-1659914035787
GPR[SPS]-1659914035787
[866281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:642.
GPR[EPS]-1659914036604
GPR[SPVATF]-1659914036604
GPR[EPVATF]-1659914037242
GPR[SPS]-1659914037242
[867725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:642.
GPR[EPS]-1659914038048
GPR[ESUN]-1659914038048
GPR[SSUN]-1659914038048
198689906
GPR[SPVATF]-1659914038344
GPR[EPVATF]-1659914038978
GPR[SPS]-1659914038978
[869469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:641.
GPR[EPS]-1659914039791
GPR[ESUN]-1659914039791
GPR[SSUN]-1659914039791
198689906
GPR[SPVATF]-1659914040081
GPR[EPVATF]-1659914040729
GPR[SPS]-1659914040729
[871207] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:640.
GPR[EPS]-1659914041529
GPR[ESUN]-1659914041529
GPR[SSUN]-1659914041529
198689906
GPR[ESUN]-1659914041832
GPR[SSUN]-1659914041832
198689906
GPR[SPVATF]-1659914042128
GPR[EPVATF]-1659914042783
GPR[SPS]-1659914042783
[873223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:517.
GPR[EPS]-1659914043545
GPR[SPVATF]-1659914043545
GPR[EPVATF]-1659914044189
GPR[SPS]-1659914044189
[874614] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:517.
GPR[EPS]-1659914044936
GPR[ESUN]-1659914044936
GPR[SSUN]-1659914044936
198689906
GPR[SPVATF]-1659914045228
GPR[EPVATF]-1659914045871
GPR[SPS]-1659914045871
[876342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:516.
GPR[EPS]-1659914046664
GPR[ESUN]-1659914046664
GPR[SSUN]-1659914046664
198689906
GPR[ESUN]-1659914046958
GPR[SSUN]-1659914046958
198689906
GPR[SPVATF]-1659914047250
GPR[EPVATF]-1659914047911
GPR[SPS]-1659914047912
[878436] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:788.
GPR[EPS]-1659914048758
GPR[SPVATF]-1659914048759
GPR[EPVATF]-1659914049409
GPR[SPS]-1659914049409
[879823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:788.
GPR[EPS]-1659914050145
GPR[ESUN]-1659914050145
GPR[SSUN]-1659914050145
198689906
GPR[SPVATF]-1659914050432
GPR[EPVATF]-1659914051092
GPR[SPS]-1659914051092
[881498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:785.
GPR[EPS]-1659914051820
GPR[SPVATF]-1659914051820
GPR[EPVATF]-1659914052515
GPR[SPS]-1659914052515
[882934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:785.
GPR[EPS]-1659914053256
GPR[ESUN]-1659914053256
GPR[SSUN]-1659914053256
198689906
GPR[ESUN]-1659914053544
GPR[SSUN]-1659914053544
198689906
GPR[SPVATF]-1659914053825
GPR[EPVATF]-1659914054488
GPR[SPS]-1659914054488
[884918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:942.
GPR[EPS]-1659914055240
GPR[ESUN]-1659914055240
GPR[SSUN]-1659914055240
198689906
GPR[SPVATF]-1659914055541
GPR[EPVATF]-1659914056207
GPR[SPS]-1659914056207
[886616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:939.
GPR[EPS]-1659914056938
GPR[SPVATF]-1659914056939
GPR[EPVATF]-1659914057634
GPR[SPS]-1659914057634
[888115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:939.
GPR[EPS]-1659914058437
GPR[ESUN]-1659914058437
GPR[SSUN]-1659914058437
1331276989
GPR[SPVATF]-1659914058661
GPR[EPVATF]-1659914059373
GPR[SPS]-1659914059373
[889431] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class NodeTraversal {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.NodeTraversal.Callback callback;

    private com.google.javascript.rhino.Node curNode;

    public static final com.google.javascript.jscomp.DiagnosticType NODE_TRAVERSAL_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NODE_TRAVERSAL_ERROR", "{0}");

    private final java.util.Deque<com.google.javascript.jscomp.Scope> scopes = new java.util.ArrayDeque<com.google.javascript.jscomp.Scope>();

    private final java.util.Deque<com.google.javascript.rhino.Node> scopeRoots = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    java.util.Deque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> cfgs = new java.util.LinkedList<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>();

    private java.lang.String sourceName;

    private com.google.javascript.rhino.InputId inputId;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private com.google.javascript.jscomp.NodeTraversal.ScopedCallback scopeCallback;

    public interface FunctionCallback {
        public abstract void visit(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node fnRoot);
    }

    public interface Callback {
        public abstract boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);

        public abstract void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);
    }

    public interface ScopedCallback extends com.google.javascript.jscomp.NodeTraversal.Callback {
        public abstract void enterScope(com.google.javascript.jscomp.NodeTraversal t);

        public abstract void exitScope(com.google.javascript.jscomp.NodeTraversal t);
    }

    public static abstract class AbstractPostOrderCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }
    }

    public static abstract class AbstractPreOrderCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        }
    }

    public static abstract class AbstractScopedCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }
    }

    public static abstract class AbstractShallowCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || (!parent.isFunction())) || (n == parent.getFirstChild());
        }
    }

    public static abstract class AbstractShallowStatementCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent);
        }
    }

    public static abstract class AbstractNodeTypePruningCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.Set<java.lang.Integer> nodeTypes;

        private final boolean include;

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes) {
            this(nodeTypes, true);
        }

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes, boolean include) {
            this.nodeTypes = nodeTypes;
            this.include = include;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return include == nodeTypes.contains(n.getType());
        }
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        this(compiler, cb, new com.google.javascript.jscomp.SyntacticScopeCreator(compiler));
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.jscomp.ScopeCreator scopeCreator) {
        this.callback = cb;
        if (cb instanceof com.google.javascript.jscomp.NodeTraversal.ScopedCallback) {
            this.scopeCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (cb));
        }
        this.compiler = compiler;
        this.inputId = null;
        this.sourceName = "";
        this.scopeCreator = scopeCreator;
    }

    private void throwUnexpectedException(java.lang.Exception unexpectedException) {
        java.lang.String message = unexpectedException.getMessage();
        if (inputId != null) {
            message = ((unexpectedException.getMessage() + "\n") + formatNodeContext("Node", curNode)) + (curNode == null ? "" : formatNodeContext("Parent", curNode.getParent()));
        }
        compiler.throwInternalError(message, unexpectedException);
    }

    private java.lang.String formatNodeContext(java.lang.String label, com.google.javascript.rhino.Node n) {
        if (n == null) {
            return ("  " + label) + ": NULL";
        }
        return (((("  " + label) + "(") + n.toString(false, false, false)) + "): ") + formatNodePosition(n);
    }

    public void traverse(com.google.javascript.rhino.Node root) {
        try {
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(root);
            sourceName = "";
            curNode = root;
            pushScope(root);
            traverseBranch(root, null);
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    public void traverseRoots(com.google.javascript.rhino.Node... roots) {
        traverseRoots(com.google.common.collect.Lists.newArrayList(roots));
    }

    public void traverseRoots(java.util.List<com.google.javascript.rhino.Node> roots) {
        if (roots.isEmpty()) {
            return;
        }
        try {
            com.google.javascript.rhino.Node scopeRoot = roots.get(0).getParent();
            com.google.common.base.Preconditions.checkState(scopeRoot != null);
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(scopeRoot);
            sourceName = "";
            curNode = scopeRoot;
            pushScope(scopeRoot);
            for (com.google.javascript.rhino.Node root : roots) {
                com.google.common.base.Preconditions.checkState(root.getParent() == scopeRoot);
                traverseBranch(root, scopeRoot);
            }
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    private static final java.lang.String MISSING_SOURCE = "[source unknown]";

    private java.lang.String formatNodePosition(com.google.javascript.rhino.Node n) {
        java.lang.String sourceFileName = getBestSourceFileName(n);
        if (sourceFileName == null) {
            return com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE + "\n";
        }
        int lineNumber = n.getLineno();
        int columnNumber = n.getCharno();
        java.lang.String src = compiler.getSourceLine(sourceFileName, lineNumber);
        if (src == null) {
            src = com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE;
        }
        return ((((((sourceFileName + ":") + lineNumber) + ":") + columnNumber) + "\n") + src) + "\n";
    }

    void traverseWithScope(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(s.isGlobal());
        inputId = null;
        sourceName = "";
        curNode = root;
        pushScope(s);
        traverseBranch(root, null);
        popScope();
    }

    void traverseAtScope(com.google.javascript.jscomp.Scope s) {
        com.google.javascript.rhino.Node n = s.getRootNode();
        if (n.isFunction()) {
            if (inputId == null) {
                inputId = com.google.javascript.jscomp.NodeUtil.getInputId(n);
            }
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
            curNode = n;
            pushScope(s);
            com.google.javascript.rhino.Node args = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node body = args.getNext();
            traverseBranch(args, n);
            traverseBranch(body, n);
            popScope();
        } else {
            traverseWithScope(n, s);
        }
    }

    protected void traverseInnerNode(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope refinedScope) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        if ((refinedScope != null) && (getScope() != refinedScope)) {
            curNode = node;
            pushScope(refinedScope);
            traverseBranch(node, parent);
            popScope();
        } else {
            traverseBranch(node, parent);
        }
    }

    public com.google.javascript.jscomp.AbstractCompiler getCompiler() {
        return compiler;
    }

    public int getLineNumber() {
        com.google.javascript.rhino.Node cur = curNode;
        while (cur != null) {
            int line = cur.getLineno();
            if (line >= 0) {
                return line;
            }
            cur = cur.getParent();
        } 
        return 0;
    }

    public java.lang.String getSourceName() {
        return sourceName;
    }

    public com.google.javascript.jscomp.CompilerInput getInput() {
        return compiler.getInput(inputId);
    }

    public com.google.javascript.jscomp.JSModule getModule() {
        com.google.javascript.jscomp.CompilerInput input = getInput();
        return input == null ? null : input.getModule();
    }

    public com.google.javascript.rhino.Node getCurrentNode() {
        return curNode;
    }

    public static void traverseChangedFunctions(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.FunctionCallback callback) {
        final com.google.javascript.jscomp.AbstractCompiler comp = compiler;
        final com.google.javascript.jscomp.NodeTraversal.FunctionCallback cb = callback;
        final com.google.javascript.rhino.Node jsRoot = comp.getJsRoot();
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(comp, new com.google.javascript.jscomp.NodeTraversal.AbstractPreOrderCallback() {
            @java.lang.Override
            public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node p) {
                if (((n == jsRoot) || n.isFunction()) && comp.hasScopeChanged(n)) {
                    cb.visit(comp, n);
                }
                return true;
            }
        });
        t.traverse(jsRoot);
    }

    public static void traverse(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverse(root);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> roots, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.rhino.Node... roots) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    private void traverseBranch(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.SCRIPT) {
            inputId = n.getInputId();
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
        }
        curNode = n;
        if (!callback.shouldTraverse(this, n, parent)) {
            return;
        }
        if (type == com.google.javascript.rhino.Token.FUNCTION) {
            traverseFunction(n, parent);
        } else {
            for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null;) {
                com.google.javascript.rhino.Node next = child.getNext();
                traverseBranch(child, n);
                child = next;
            }
        }
        curNode = n;
        callback.visit(this, n, parent);
    }

    private void traverseFunction(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(n.getChildCount() == 3);
        com.google.common.base.Preconditions.checkState(n.isFunction());
        final com.google.javascript.rhino.Node fnName = n.getFirstChild();
        boolean isFunctionExpression = (parent != null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
        if (!isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        curNode = n;
        pushScope(n);
        if (isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        final com.google.javascript.rhino.Node args = fnName.getNext();
        final com.google.javascript.rhino.Node body = args.getNext();
        traverseBranch(args, n);
        com.google.common.base.Preconditions.checkState((body.getNext() == null) && body.isBlock(), body);
        traverseBranch(body, n);
        popScope();
    }

    @java.lang.SuppressWarnings("unchecked")
    public com.google.javascript.rhino.Node getEnclosingFunction() {
        if ((scopes.size() + scopeRoots.size()) < 2) {
            return null;
        } else if (scopeRoots.isEmpty()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(148).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.compiler",com.google.javascript.jscomp.NodeTraversal.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopes",com.google.javascript.jscomp.NodeTraversal.this.scopes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.cfgs",com.google.javascript.jscomp.NodeTraversal.this.cfgs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCallback",com.google.javascript.jscomp.NodeTraversal.this.scopeCallback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.inputId",com.google.javascript.jscomp.NodeTraversal.this.inputId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.curNode",com.google.javascript.jscomp.NodeTraversal.this.curNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.sourceName",com.google.javascript.jscomp.NodeTraversal.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.callback",com.google.javascript.jscomp.NodeTraversal.this.callback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeRoots",com.google.javascript.jscomp.NodeTraversal.this.scopeRoots);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCreator",com.google.javascript.jscomp.NodeTraversal.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(148).collectionEnds();
            }
            if (runtimeAngelicValue)
                return scopes.peek().getRootNode();

        } else {
            return scopeRoots.peek();
        }
    }

    private void pushScope(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        compiler.setScope(node);
        scopeRoots.push(node);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void pushScope(com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        compiler.setScope(s.getRootNode());
        scopes.push(s);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void popScope() {
        if (scopeCallback != null) {
            scopeCallback.exitScope(this);
        }
        if (scopeRoots.isEmpty()) {
            scopes.pop();
        } else {
            scopeRoots.pop();
        }
        cfgs.pop();
        if (hasScope()) {
            compiler.setScope(getScopeRoot());
        }
    }

    public com.google.javascript.jscomp.Scope getScope() {
        com.google.javascript.jscomp.Scope scope = (scopes.isEmpty()) ? null : scopes.peek();
        if (scopeRoots.isEmpty()) {
            return scope;
        }
        java.util.Iterator<com.google.javascript.rhino.Node> it = scopeRoots.descendingIterator();
        while (it.hasNext()) {
            scope = scopeCreator.createScope(it.next(), scope);
            scopes.push(scope);
        } 
        scopeRoots.clear();
        return scope;
    }

    public com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getControlFlowGraph() {
        if (cfgs.peek() == null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(compiler, false, true);
            cfa.process(null, getScopeRoot());
            cfgs.pop();
            cfgs.push(cfa.getCfg());
        }
        return cfgs.peek();
    }

    public com.google.javascript.rhino.Node getScopeRoot() {
        if (scopeRoots.isEmpty()) {
            return scopes.peek().getRootNode();
        } else {
            return scopeRoots.peek();
        }
    }

    boolean inGlobalScope() {
        return getScopeDepth() <= 1;
    }

    int getScopeDepth() {
        return scopes.size() + scopeRoots.size();
    }

    public boolean hasScope() {
        return !(scopes.isEmpty() && scopeRoots.isEmpty());
    }

    public void report(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        com.google.javascript.jscomp.JSError error = com.google.javascript.jscomp.JSError.make(getBestSourceFileName(n), n, diagnosticType, arguments);
        compiler.report(error);
    }

    private static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String name = n.getSourceFileName();
        return name == null ? "" : name;
    }

    com.google.javascript.rhino.InputId getInputId() {
        return inputId;
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CheckLevel level, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getBestSourceFileName(n), n, level, type, arguments);
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getBestSourceFileName(n), n, type, arguments);
    }

    private java.lang.String getBestSourceFileName(com.google.javascript.rhino.Node n) {
        return n == null ? sourceName : n.getSourceFileName();
    }
}
[889432] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659914059754
GPR[SSUN]-1659914059754
198689906
GPR[ESUN]-1659914060051
GPR[SSUN]-1659914060051
198689906
GPR[ESUN]-1659914060343
GPR[SSUN]-1659914060344
198689906
GPR[SPVATF]-1659914060630
GPR[EPVATF]-1659914061325
GPR[SPS]-1659914061325
[891758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1188.
GPR[EPS]-1659914062081
GPR[ESUN]-1659914062081
GPR[SSUN]-1659914062081
198689906
GPR[SPVATF]-1659914062368
GPR[EPVATF]-1659914063068
GPR[SPS]-1659914063068
[893476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1187.
GPR[EPS]-1659914063798
GPR[SPVATF]-1659914063798
GPR[EPVATF]-1659914064523
GPR[SPS]-1659914064523
[895001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1187.
GPR[EPS]-1659914065323
GPR[ESUN]-1659914065323
GPR[SSUN]-1659914065324
198689906
GPR[SPVATF]-1659914065610
GPR[EPVATF]-1659914066338
GPR[SPS]-1659914066338
[896755] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1186.
GPR[EPS]-1659914067077
GPR[ESUN]-1659914067078
GPR[SSUN]-1659914067078
198689906
GPR[SPVATF]-1659914067358
GPR[EPVATF]-1659914068093
GPR[SPS]-1659914068093
[898501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1185.
GPR[EPS]-1659914068823
GPR[ESUN]-1659914068823
GPR[SSUN]-1659914068823
198689906
GPR[ESUN]-1659914070301
GPR[SSUN]-1659914070301
198689906
GPR[ESUN]-1659914070590
GPR[SSUN]-1659914070590
198689906
GPR[SPVATF]-1659914070871
GPR[EPVATF]-1659914071599
GPR[SPS]-1659914071599
[902003] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1132.
GPR[EPS]-1659914072325
GPR[ESUN]-1659914072325
GPR[SSUN]-1659914072325
198689906
GPR[ESUN]-1659914072606
GPR[SSUN]-1659914072606
198689906
GPR[SPVATF]-1659914072884
GPR[EPVATF]-1659914073666
GPR[SPS]-1659914073666
[2702565] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659915872898
GPR[SSUN]-1659915872898
198689906
GPR[SPVATF]-1659915873330
GPR[EPVATF]-1659915874173
GPR[SPS]-1659915874173
[2704607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:1000.
GPR[EPS]-1659915874929
GPR[ESUN]-1659915874929
GPR[SSUN]-1659915874929
198689906
GPR[ESUN]-1659915875230
GPR[SSUN]-1659915875230
198689906
GPR[ESUN]-1659915875512
GPR[SSUN]-1659915875512
198689906
GPR[SPVATF]-1659915875790
GPR[EPVATF]-1659915876687
GPR[SPS]-1659915876687
[2707066] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:899.
GPR[EPS]-1659915877388
GPR[ESUN]-1659915877388
GPR[SSUN]-1659915877388
198689906
GPR[SPVATF]-1659915877670
GPR[EPVATF]-1659915878631
GPR[SPS]-1659915878631
[2709018] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:938.
GPR[EPS]-1659915879340
GPR[SPVATF]-1659915879341
GPR[EPVATF]-1659915880307
GPR[SPS]-1659915880307
[2710683] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:938.
GPR[EPS]-1659915881005
GPR[ESUN]-1659915881005
GPR[SSUN]-1659915881005
198689906
GPR[SPVATF]-1659915881285
GPR[EPVATF]-1659915882267
GPR[SPS]-1659915882267
[2712649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:695.
GPR[EPS]-1659915882971
GPR[SPVATF]-1659915882972
GPR[EPVATF]-1659915883985
GPR[SPS]-1659915883985
[2714371] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:695.
GPR[EPS]-1659915884693
GPR[ESUN]-1659915884693
GPR[SSUN]-1659915884693
198689906
GPR[ESUN]-1659915884981
GPR[SSUN]-1659915884981
198689906
GPR[SPVATF]-1659915885272
GPR[EPVATF]-1659915886286
GPR[SPS]-1659915886286
[2716688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:693.
GPR[EPS]-1659915887010
GPR[SPVATF]-1659915887010
GPR[EPVATF]-1659915888019
GPR[SPS]-1659915888019
[2718437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:693.
GPR[EPS]-1659915888759
GPR[ESUN]-1659915888759
GPR[SSUN]-1659915888759
198689906
GPR[SPVATF]-1659915889038
GPR[EPVATF]-1659915890055
GPR[SPS]-1659915890055
[2720432] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:689.
GPR[EPS]-1659915890754
GPR[ESUN]-1659915890754
GPR[SSUN]-1659915890754
198689906
GPR[ESUN]-1659915891035
GPR[SSUN]-1659915891035
198689906
GPR[ESUN]-1659915891308
GPR[SSUN]-1659915891308
198689906
GPR[ESUN]-1659915891582
GPR[SSUN]-1659915891582
198689906
GPR[ESUN]-1659915891860
GPR[SSUN]-1659915891860
198689906
GPR[SPVATF]-1659915892139
GPR[EPVATF]-1659915893150
GPR[SPS]-1659915893151
[2723519] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1201.
GPR[EPS]-1659915893841
GPR[SPVATF]-1659915893841
GPR[EPVATF]-1659915894855
GPR[SPS]-1659915894855
[2725256] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1201.
GPR[EPS]-1659915895578
GPR[ESUN]-1659915895578
GPR[SSUN]-1659915895578
198689906
GPR[ESUN]-1659915895861
GPR[SSUN]-1659915895861
198689906
GPR[ESUN]-1659915896142
GPR[SSUN]-1659915896142
198689906
GPR[SPVATF]-1659915896421
GPR[EPVATF]-1659915897447
GPR[SPS]-1659915897447
GPR[EPS]-1659917230644
GPR[ESUN]-1659917230644
GPR[SSUN]-1659917230644
198689906
GPR[SPVATF]-1659917231089
GPR[EPVATF]-1659917232124
GPR[SPS]-1659917232125
[4062525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:594.
GPR[EPS]-1659917232847
GPR[ESUN]-1659917232847
GPR[SSUN]-1659917232847
198689906
GPR[SPVATF]-1659917233138
GPR[EPVATF]-1659917234179
GPR[SPS]-1659917234179
[4064574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1178.
GPR[EPS]-1659917234896
GPR[SPVATF]-1659917234896
GPR[EPVATF]-1659917235956
GPR[SPS]-1659917235956
[4066348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1178.
GPR[EPS]-1659917236670
GPR[ESUN]-1659917236670
GPR[SSUN]-1659917236670
198689906
GPR[ESUN]-1659917236954
GPR[SSUN]-1659917236954
198689906
GPR[SPVATF]-1659917237237
GPR[EPVATF]-1659917238271
GPR[SPS]-1659917238271
[4068661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1558.
GPR[EPS]-1659917238983
GPR[ESUN]-1659917238983
GPR[SSUN]-1659917238983
198689906
GPR[ESUN]-1659917239274
GPR[SSUN]-1659917239274
198689906
GPR[SPVATF]-1659917239582
GPR[EPVATF]-1659917240621
GPR[SPS]-1659917240621
[4071018] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:776.
GPR[EPS]-1659917241340
GPR[ESUN]-1659917241340
GPR[SSUN]-1659917241340
198689906
GPR[SPVATF]-1659917241625
GPR[EPVATF]-1659917242693
GPR[SPS]-1659917242693
[4073108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1570.
GPR[EPS]-1659917243430
GPR[SPVATF]-1659917243430
GPR[EPVATF]-1659917244471
GPR[SPS]-1659917244471
[4074863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1570.
GPR[EPS]-1659917245185
GPR[ESUN]-1659917245185
GPR[SSUN]-1659917245185
198689906
GPR[ESUN]-1659917245472
GPR[SSUN]-1659917245472
198689906
GPR[SPVATF]-1659917245758
GPR[EPVATF]-1659917246790
GPR[SPS]-1659917246790
[4077181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1568.
GPR[EPS]-1659917247503
GPR[ESUN]-1659917247503
GPR[SSUN]-1659917247503
198689906
GPR[SPVATF]-1659917247786
GPR[EPVATF]-1659917248877
GPR[SPS]-1659917248877
[4079267] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:997.
GPR[EPS]-1659917249589
GPR[SPVATF]-1659917249590
GPR[EPVATF]-1659917250628
GPR[SPS]-1659917250628
[4081048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:997.
GPR[EPS]-1659917251370
GPR[ESUN]-1659917251370
GPR[SSUN]-1659917251370
198689906
GPR[ESUN]-1659917251655
GPR[SSUN]-1659917251655
198689906
GPR[SPVATF]-1659917251940
GPR[EPVATF]-1659917252983
GPR[SPS]-1659917252983
[4083383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:930.
GPR[EPS]-1659917253705
GPR[SPVATF]-1659917253705
GPR[EPVATF]-1659917254742
GPR[SPS]-1659917254742
[4085203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:930.
GPR[EPS]-1659917255525
GPR[ESUN]-1659917255526
GPR[SSUN]-1659917255526
198689906
GPR[SPVATF]-1659917255811
GPR[EPVATF]-1659917256843
GPR[SPS]-1659917256843
[4087246] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:924.
GPR[EPS]-1659917257568
GPR[SPVATF]-1659917257569
GPR[EPVATF]-1659917258649
GPR[SPS]-1659917258649
[4089059] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:924.
GPR[EPS]-1659917259381
GPR[ESUN]-1659917259381
GPR[SSUN]-1659917259381
198689906
GPR[ESUN]-1659917259669
GPR[SSUN]-1659917259669
198689906
GPR[SPVATF]-1659917259950
GPR[EPVATF]-1659917261044
GPR[SPS]-1659917261045
[4091451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:912.
GPR[EPS]-1659917261773
GPR[SPVATF]-1659917261773
GPR[EPVATF]-1659917262814
GPR[SPS]-1659917262814
[4093226] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:912.
GPR[EPS]-1659917263548
GPR[ESUN]-1659917263548
GPR[SSUN]-1659917263548
198689906
GPR[ESUN]-1659917263836
GPR[SSUN]-1659917263836
198689906
GPR[ESUN]-1659917264123
GPR[SSUN]-1659917264123
198689906
GPR[SPVATF]-1659917264409
GPR[EPVATF]-1659917265427
GPR[SPS]-1659917265427
[4095861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:898.
GPR[EPS]-1659917266183
GPR[SPVATF]-1659917266183
GPR[EPVATF]-1659917267219
GPR[SPS]-1659917267219
[4097628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:898.
GPR[EPS]-1659917267950
GPR[ESUN]-1659917267950
GPR[SSUN]-1659917267950
198689906
GPR[ESUN]-1659917268237
GPR[SSUN]-1659917268237
198689906
GPR[SPVATF]-1659917268524
GPR[EPVATF]-1659917269549
GPR[SPS]-1659917269549
[4099949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:883.
GPR[EPS]-1659917270271
GPR[SPVATF]-1659917270271
GPR[EPVATF]-1659917271307
GPR[SPS]-1659917271307
[4101717] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:883.
GPR[EPS]-1659917272039
GPR[ESUN]-1659917272039
GPR[SSUN]-1659917272039
198689906
GPR[SPVATF]-1659917272330
GPR[EPVATF]-1659917273357
GPR[SPS]-1659917273357
[4105012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:865.
GPR[EPS]-1659917275334
GPR[SPVATF]-1659917275334
GPR[EPVATF]-1659917278168
GPR[SPS]-1659917278168
[4110886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:865.
GPR[EPS]-1659917281208
GPR[ESUN]-1659917281208
GPR[SSUN]-1659917281208
198689906
GPR[SPVATF]-1659917281756
GPR[EPVATF]-1659917282522
GPR[SPS]-1659917282522
[4113247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:469.
GPR[EPS]-1659917283569
GPR[ESUN]-1659917283569
GPR[SSUN]-1659917283569
2433571
GPR[ESUN]-1659917283886
GPR[SSUN]-1659917283886
1884422692
GPR[SPVATF]-1659917284152
GPR[EPVATF]-1659917284894
GPR[SPS]-1659917284894
[4115215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:251.
GPR[EPS]-1659917285537
GPR[ESUN]-1659917285537
GPR[SSUN]-1659917285537
1884422692
GPR[SPVATF]-1659917285787
GPR[EPVATF]-1659917286505
GPR[SPS]-1659917286505
[4116782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:247.
GPR[EPS]-1659917287104
GPR[SPVATF]-1659917287104
GPR[EPVATF]-1659917287782
GPR[SPS]-1659917287782
[4118058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:247.
GPR[EPS]-1659917288380
GPR[ESUN]-1659917288380
GPR[SSUN]-1659917288380
1884422692
GPR[SPVATF]-1659917288623
GPR[EPVATF]-1659917289294
GPR[SPS]-1659917289294
[4119566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:242.
GPR[EPS]-1659917289888
GPR[SPVATF]-1659917289889
GPR[EPVATF]-1659917290558
GPR[SPS]-1659917290558
[4121000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:242.
GPR[EPS]-1659917291322
GPR[ESUN]-1659917291322
GPR[SSUN]-1659917291322
1187751237
GPR[ESUN]-1659917291676
GPR[SSUN]-1659917291676
1884422692
GPR[SPVATF]-1659917291923
GPR[EPVATF]-1659917292599
GPR[SPS]-1659917292599
[4122877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:237.
GPR[EPS]-1659917293199
GPR[SPVATF]-1659917293199
GPR[EPVATF]-1659917293876
GPR[SPS]-1659917293876
[4124172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:237.
GPR[EPS]-1659917294494
GPR[ESUN]-1659917294494
GPR[SSUN]-1659917294494
1884422692
GPR[SPVATF]-1659917294782
GPR[EPVATF]-1659917295466
GPR[SPS]-1659917295466
[4125737] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:230.
GPR[EPS]-1659917296059
GPR[SPVATF]-1659917296059
GPR[EPVATF]-1659917296738
GPR[SPS]-1659917296739
[4127013] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:230.
GPR[EPS]-1659917297335
GPR[ESUN]-1659917297335
GPR[SSUN]-1659917297335
198689906
GPR[SPVATF]-1659917297685
GPR[EPVATF]-1659917298366
GPR[SPS]-1659917298366
[4128874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:833.
GPR[EPS]-1659917299196
GPR[ESUN]-1659917299196
GPR[SSUN]-1659917299196
198689906
GPR[ESUN]-1659917299507
GPR[SSUN]-1659917299507
198689906
GPR[SPVATF]-1659917299812
GPR[EPVATF]-1659917300495
GPR[SPS]-1659917300495
[4130990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:783.
GPR[EPS]-1659917301312
GPR[SPVATF]-1659917301312
GPR[EPVATF]-1659917302005
GPR[SPS]-1659917302005
[4132547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:783.
GPR[EPS]-1659917302869
GPR[ESUN]-1659917302869
GPR[SSUN]-1659917302869
198689906
GPR[SPVATF]-1659917303170
GPR[EPVATF]-1659917303888
GPR[SPS]-1659917303888
[4134369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:860.
GPR[EPS]-1659917304691
GPR[SPVATF]-1659917304691
GPR[EPVATF]-1659917305393
GPR[SPS]-1659917305393
[4135874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:860.
GPR[EPS]-1659917306196
GPR[ESUN]-1659917306196
GPR[SSUN]-1659917306196
198689906
GPR[ESUN]-1659917306500
GPR[SSUN]-1659917306500
-89962275
GPR[ESUN]-1659917306715
GPR[SSUN]-1659917306715
-89962275
GPR[SPVATF]-1659917306929
GPR[EPVATF]-1659917307625
GPR[SPS]-1659917307625
[4137840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:63.
GPR[EPS]-1659917308162
GPR[ESUN]-1659917308162
GPR[SSUN]-1659917308162
-89962275
GPR[ESUN]-1659917308373
GPR[SSUN]-1659917308373
-89962275
GPR[SPVATF]-1659917308585
GPR[EPVATF]-1659917309404
GPR[SPS]-1659917309404
[4139635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:56.
GPR[EPS]-1659917309957
GPR[ESUN]-1659917309957
GPR[SSUN]-1659917309957
198689906
GPR[ESUN]-1659917310266
GPR[SSUN]-1659917310266
198689906
GPR[SPVATF]-1659917310566
GPR[EPVATF]-1659917311304
GPR[SPS]-1659917311304
[4141767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations:610.
GPR[EPS]-1659917312089
GPR[SPVATF]-1659917312090
GPR[EPVATF]-1659917312831
GPR[SPS]-1659917312831
[4143293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$HoistVariableAndFunctionDeclarations:610.
GPR[EPS]-1659917313615
GPR[ESUN]-1659917313616
GPR[SSUN]-1659917313616
198689906
GPR[ESUN]-1659917313915
GPR[SSUN]-1659917313915
198689906
GPR[SPVATF]-1659917314206
GPR[EPVATF]-1659917314964
GPR[SPS]-1659917314964
[4145500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:476.
GPR[EPS]-1659917315822
GPR[ESUN]-1659917315822
GPR[SSUN]-1659917315822
198689906
GPR[SPVATF]-1659917316123
GPR[EPVATF]-1659917316884
GPR[SPS]-1659917316884
[4147318] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:475.
GPR[EPS]-1659917317640
GPR[ESUN]-1659917317640
GPR[SSUN]-1659917317640
198689906
GPR[ESUN]-1659917317949
GPR[SSUN]-1659917317949
198689906
GPR[SPVATF]-1659917318242
GPR[EPVATF]-1659917319014
GPR[SPS]-1659917319014
[4149451] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:473.
GPR[EPS]-1659917319773
GPR[SPVATF]-1659917319774
GPR[EPVATF]-1659917320567
GPR[SPS]-1659917320567
[4151005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:473.
GPR[EPS]-1659917321327
GPR[ESUN]-1659917321327
GPR[SSUN]-1659917321327
198689906
GPR[SPVATF]-1659917321619
GPR[EPVATF]-1659917322496
GPR[SPS]-1659917322496
[4152938] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:470.
GPR[EPS]-1659917323260
GPR[SPVATF]-1659917323260
GPR[EPVATF]-1659917324080
GPR[SPS]-1659917324080
[4154520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:470.
GPR[EPS]-1659917324842
GPR[ESUN]-1659917324842
GPR[SSUN]-1659917324842
198689906
GPR[SPVATF]-1659917325137
GPR[EPVATF]-1659917326007
GPR[SPS]-1659917326007
[4156492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:468.
GPR[EPS]-1659917326814
GPR[SPVATF]-1659917326814
GPR[EPVATF]-1659917327698
GPR[SPS]-1659917327698
[4158123] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:468.
GPR[EPS]-1659917328445
GPR[ESUN]-1659917328445
GPR[SSUN]-1659917328445
198689906
GPR[ESUN]-1659917328738
GPR[SSUN]-1659917328739
2433571
GPR[ESUN]-1659917329076
GPR[SSUN]-1659917329076
198689906
GPR[ESUN]-1659917329389
GPR[SSUN]-1659917329389
198689906
GPR[SPVATF]-1659917329684
GPR[EPVATF]-1659917330562
GPR[SPS]-1659917330562
[4160982] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1628.
GPR[EPS]-1659917331304
GPR[ESUN]-1659917331304
GPR[SSUN]-1659917331304
198689906
GPR[SPVATF]-1659917331599
GPR[EPVATF]-1659917332510
GPR[SPS]-1659917332510
[4162924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1625.
GPR[EPS]-1659917333246
GPR[ESUN]-1659917333246
GPR[SSUN]-1659917333246
198689906
GPR[ESUN]-1659917333534
GPR[SSUN]-1659917333534
198689906
GPR[SPVATF]-1659917333827
GPR[EPVATF]-1659917334767
GPR[SPS]-1659917334767
[4165275] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1623.
GPR[EPS]-1659917335598
GPR[ESUN]-1659917335598
GPR[SSUN]-1659917335598
198689906
GPR[ESUN]-1659917335890
GPR[SSUN]-1659917335890
198689906
GPR[ESUN]-1659917336220
GPR[SSUN]-1659917336220
198689906
GPR[ESUN]-1659917336512
GPR[SSUN]-1659917336512
198689906
GPR[SPVATF]-1659917336806
GPR[EPVATF]-1659917337765
GPR[SPS]-1659917337765
[4168194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1557.
GPR[EPS]-1659917338517
GPR[SPVATF]-1659917338517
GPR[EPVATF]-1659917339529
GPR[SPS]-1659917339529
[4169956] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1557.
GPR[EPS]-1659917340278
GPR[ESUN]-1659917340278
GPR[SSUN]-1659917340278
198689906
GPR[SPVATF]-1659917340591
GPR[EPVATF]-1659917341659
GPR[SPS]-1659917341659
[4172204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1556.
GPR[EPS]-1659917342526
GPR[ESUN]-1659917342526
GPR[SSUN]-1659917342526
198689906
GPR[SPVATF]-1659917342825
GPR[EPVATF]-1659917343887
GPR[SPS]-1659917343887
[4174320] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1553.
GPR[EPS]-1659917344642
GPR[SPVATF]-1659917344643
GPR[EPVATF]-1659917345709
GPR[SPS]-1659917345709
[4176146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1553.
GPR[EPS]-1659917346468
GPR[ESUN]-1659917346468
GPR[SSUN]-1659917346469
198689906
GPR[SPVATF]-1659917346767
GPR[EPVATF]-1659917347844
GPR[SPS]-1659917347844
[4178286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1550.
GPR[EPS]-1659917348608
GPR[SPVATF]-1659917348608
GPR[EPVATF]-1659917349671
GPR[SPS]-1659917349671
[4180188] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1550.
GPR[EPS]-1659917350510
GPR[ESUN]-1659917350510
GPR[SSUN]-1659917350510
198689906
GPR[ESUN]-1659917350804
GPR[SSUN]-1659917350804
198689906
GPR[SPVATF]-1659917351232
GPR[EPVATF]-1659917352294
GPR[SPS]-1659917352294
[4182743] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1536.
GPR[EPS]-1659917353065
GPR[ESUN]-1659917353065
GPR[SSUN]-1659917353065
198689906
GPR[SPVATF]-1659917353358
GPR[EPVATF]-1659917354415
GPR[SPS]-1659917354415
[4184863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1535.
GPR[EPS]-1659917355185
GPR[ESUN]-1659917355185
GPR[SSUN]-1659917355185
198689906
GPR[SPVATF]-1659917355484
GPR[EPVATF]-1659917356561
GPR[SPS]-1659917356561
[4187079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1528.
GPR[EPS]-1659917357401
GPR[SPVATF]-1659917357401
GPR[EPVATF]-1659917358469
GPR[SPS]-1659917358469
[4188913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1528.
GPR[EPS]-1659917359235
GPR[ESUN]-1659917359235
GPR[SSUN]-1659917359235
198689906
GPR[ESUN]-1659917359530
GPR[SSUN]-1659917359530
198689906
GPR[ESUN]-1659917359824
GPR[SSUN]-1659917359824
198689906
GPR[SPVATF]-1659917360116
GPR[EPVATF]-1659917361171
GPR[SPS]-1659917361171
[4191598] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1520.
GPR[EPS]-1659917361920
GPR[SPVATF]-1659917361920
GPR[EPVATF]-1659917362992
GPR[SPS]-1659917362992
[4193430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1520.
GPR[EPS]-1659917363752
GPR[ESUN]-1659917363752
GPR[SSUN]-1659917363752
198689906
GPR[ESUN]-1659917364046
GPR[SSUN]-1659917364046
198689906
GPR[ESUN]-1659917364429
GPR[SSUN]-1659917364429
198689906
GPR[ESUN]-1659917364727
GPR[SSUN]-1659917364727
198689906
GPR[ESUN]-1659917365019
GPR[SSUN]-1659917365019
198689906
GPR[ESUN]-1659917365315
GPR[SSUN]-1659917365315
198689906
GPR[SPVATF]-1659917365611
GPR[EPVATF]-1659917366678
GPR[SPS]-1659917366678
[4197110] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1469.
GPR[EPS]-1659917367432
GPR[SPVATF]-1659917367433
GPR[EPVATF]-1659917368494
GPR[SPS]-1659917368494
[4198921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1469.
GPR[EPS]-1659917369243
GPR[ESUN]-1659917369243
GPR[SSUN]-1659917369243
198689906
GPR[ESUN]-1659917369540
GPR[SSUN]-1659917369540
198689906
GPR[SPVATF]-1659917369837
GPR[EPVATF]-1659917370923
GPR[SPS]-1659917370923
[4201449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1444.
GPR[EPS]-1659917371771
GPR[SPVATF]-1659917371771
GPR[EPVATF]-1659917372839
GPR[SPS]-1659917372839
[4203279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1444.
GPR[EPS]-1659917373601
GPR[ESUN]-1659917373601
GPR[SSUN]-1659917373601
198689906
GPR[SPVATF]-1659917373898
GPR[EPVATF]-1659917374981
GPR[SPS]-1659917374981
GPR[EPS]-1659918587324
[6014879] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[SPVATF]-1659919185202
[6234034] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659919404356
GPR[SSUN]-1659919404356
198689906
GPR[ESUN]-1659921518483
GPR[SSUN]-1659921518483
198689906
GPR[ESUN]-1659922792485
GPR[SSUN]-1659922792485
198689906
GPR[ESUN]-1659924910856
GPR[SSUN]-1659924910856
198689906
GPR[ESUN]-1659926779055
GPR[SSUN]-1659926779055
198689906
GPR[ESUN]-1659926779483
GPR[SSUN]-1659926779483
198689906
GPR[ESUN]-1659926779760
GPR[SSUN]-1659926779760
198689906
GPR[SPVATF]-1659926780036
GPR[EPVATF]-1659926780661
GPR[SPS]-1659926780661
[13611121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1377.
GPR[EPS]-1659926781443
GPR[ESUN]-1659926781443
GPR[SSUN]-1659926781443
198689906
GPR[ESUN]-1659926781713
GPR[SSUN]-1659926781713
198689906
GPR[ESUN]-1659926781984
GPR[SSUN]-1659926781984
198689906
GPR[SPVATF]-1659926782253
GPR[EPVATF]-1659926782864
GPR[SPS]-1659926782864
[13613277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1374.
GPR[EPS]-1659926783599
GPR[ESUN]-1659926783599
GPR[SSUN]-1659926783599
198689906
GPR[ESUN]-1659926783871
GPR[SSUN]-1659926783871
198689906
GPR[ESUN]-1659926784149
GPR[SSUN]-1659926784149
198689906
GPR[SPVATF]-1659926784430
GPR[EPVATF]-1659926785069
GPR[SPS]-1659926785069
[13615501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1355.
GPR[EPS]-1659926785823
GPR[ESUN]-1659926785823
GPR[SSUN]-1659926785823
198689906
GPR[ESUN]-1659926786096
GPR[SSUN]-1659926786096
198689906
GPR[SPVATF]-1659926786365
GPR[EPVATF]-1659926786975
GPR[SPS]-1659926786975
[13617394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1325.
GPR[EPS]-1659926787716
GPR[ESUN]-1659926787716
GPR[SSUN]-1659926787716
198689906
GPR[SPVATF]-1659926787991
GPR[EPVATF]-1659926788608
GPR[SPS]-1659926788608
[13619011] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1324.
GPR[EPS]-1659926789333
GPR[ESUN]-1659926789333
GPR[SSUN]-1659926789333
198689906
GPR[SPVATF]-1659926789609
GPR[EPVATF]-1659926790231
GPR[SPS]-1659926790231
[13620782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1323.
GPR[EPS]-1659926791104
GPR[ESUN]-1659926791104
GPR[SSUN]-1659926791104
198689906
GPR[SPVATF]-1659926791390
GPR[EPVATF]-1659926792042
GPR[SPS]-1659926792042
[13622487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1322.
GPR[EPS]-1659926792809
GPR[SPVATF]-1659926792809
GPR[EPVATF]-1659926793418
GPR[SPS]-1659926793418
[13623828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1322.
GPR[EPS]-1659926794150
GPR[ESUN]-1659926794150
GPR[SSUN]-1659926794150
198689906
GPR[ESUN]-1659926794425
GPR[SSUN]-1659926794425
198689906
GPR[ESUN]-1659926794698
GPR[SSUN]-1659926794698
198689906
GPR[SPVATF]-1659926794970
GPR[EPVATF]-1659926795591
GPR[SPS]-1659926795591
[13626122] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1309.
GPR[EPS]-1659926796444
GPR[ESUN]-1659926796444
GPR[SSUN]-1659926796444
198689906
GPR[SPVATF]-1659926796721
GPR[EPVATF]-1659926797338
GPR[SPS]-1659926797339
[13627769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1308.
GPR[EPS]-1659926798091
GPR[SPVATF]-1659926798091
GPR[EPVATF]-1659926798715
GPR[SPS]-1659926798715
[13629177] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1308.
GPR[EPS]-1659926799499
GPR[ESUN]-1659926799500
GPR[SSUN]-1659926799500
198689906
GPR[ESUN]-1659926799774
GPR[SSUN]-1659926799774
198689906
GPR[SPVATF]-1659926800048
GPR[EPVATF]-1659926800665
GPR[SPS]-1659926800665
[13631092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1206.
GPR[EPS]-1659926801414
GPR[ESUN]-1659926801414
GPR[SSUN]-1659926801414
198689906
GPR[SPVATF]-1659926801690
GPR[EPVATF]-1659926802312
GPR[SPS]-1659926802312
[13632730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1199.
GPR[EPS]-1659926803052
GPR[ESUN]-1659926803052
GPR[SSUN]-1659926803052
198689906
GPR[SPVATF]-1659926803325
GPR[EPVATF]-1659926803972
GPR[SPS]-1659926803972
[13634408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1197.
GPR[EPS]-1659926804730
GPR[ESUN]-1659926804730
GPR[SSUN]-1659926804730
198689906
GPR[ESUN]-1659926805010
GPR[SSUN]-1659926805010
198689906
GPR[ESUN]-1659926805327
GPR[SSUN]-1659926805327
198689906
GPR[SPVATF]-1659926805599
GPR[EPVATF]-1659926806250
GPR[SPS]-1659926806250
[13636678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1131.
GPR[EPS]-1659926807000
GPR[SPVATF]-1659926807000
GPR[EPVATF]-1659926807638
GPR[SPS]-1659926807638
[13638071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1131.
GPR[EPS]-1659926808393
GPR[ESUN]-1659926808393
GPR[SSUN]-1659926808393
198689906
GPR[SPVATF]-1659926808667
GPR[EPVATF]-1659926809302
GPR[SPS]-1659926809302
[13639722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1129.
GPR[EPS]-1659926810044
GPR[ESUN]-1659926810044
GPR[SSUN]-1659926810044
198689906
GPR[SPVATF]-1659926810316
GPR[EPVATF]-1659926810982
GPR[SPS]-1659926810982
[13641449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1127.
GPR[EPS]-1659926811771
GPR[ESUN]-1659926811771
GPR[SSUN]-1659926811771
198689906
GPR[SPVATF]-1659926812039
GPR[EPVATF]-1659926812695
GPR[SPS]-1659926812695
[13643105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1123.
GPR[EPS]-1659926813427
GPR[ESUN]-1659926813427
GPR[SSUN]-1659926813427
198689906
GPR[SPVATF]-1659926813696
GPR[EPVATF]-1659926814374
GPR[SPS]-1659926814374
[13644779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1119.
GPR[EPS]-1659926815101
GPR[ESUN]-1659926815101
GPR[SSUN]-1659926815101
198689906
GPR[SPVATF]-1659926815370
GPR[EPVATF]-1659926816065
GPR[SPS]-1659926816065
[13646468] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1118.
GPR[EPS]-1659926816790
GPR[ESUN]-1659926816790
GPR[SSUN]-1659926816790
198689906
GPR[SPVATF]-1659926817061
GPR[EPVATF]-1659926817761
GPR[SPS]-1659926817761
[13648215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1116.
GPR[EPS]-1659926818537
GPR[ESUN]-1659926818537
GPR[SSUN]-1659926818537
198689906
GPR[SPVATF]-1659926818811
GPR[EPVATF]-1659926819525
GPR[SPS]-1659926819525
GPR[EPS]-1659926831037
GPR[ESUN]-1659926831037
GPR[SSUN]-1659926831037
198689906
GPR[SPVATF]-1659926831306
GPR[EPVATF]-1659926832107
GPR[SPS]-1659926832107
[13662515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1114.
GPR[EPS]-1659926832837
GPR[ESUN]-1659926832837
GPR[SSUN]-1659926832837
198689906
GPR[ESUN]-1659926833112
GPR[SSUN]-1659926833112
198689906
GPR[SPVATF]-1659926833388
GPR[EPVATF]-1659926834225
GPR[SPS]-1659926834225
[13664632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:658.
GPR[EPS]-1659926834954
GPR[SPVATF]-1659926834954
GPR[EPVATF]-1659926835787
GPR[SPS]-1659926835787
[13666185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:658.
GPR[EPS]-1659926836507
GPR[ESUN]-1659926836507
GPR[SSUN]-1659926836507
198689906
GPR[SPVATF]-1659926836856
GPR[EPVATF]-1659926837749
GPR[SPS]-1659926837749
[13668153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:638.
GPR[EPS]-1659926838475
GPR[SPVATF]-1659926838475
GPR[EPVATF]-1659926839394
GPR[SPS]-1659926839394
[13669901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:638.
GPR[EPS]-1659926840223
GPR[ESUN]-1659926840223
GPR[SSUN]-1659926840223
198689906
GPR[SPVATF]-1659926840495
GPR[EPVATF]-1659926841456
GPR[SPS]-1659926841456
[13671863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:637.
GPR[EPS]-1659926842185
GPR[SPVATF]-1659926842185
GPR[EPVATF]-1659926843158
GPR[SPS]-1659926843158
[13673561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:637.
GPR[EPS]-1659926843883
GPR[ESUN]-1659926843883
GPR[SSUN]-1659926843883
198689906
GPR[ESUN]-1659926844231
GPR[SSUN]-1659926844231
198689906
GPR[SPVATF]-1659926844503
GPR[EPVATF]-1659926845487
GPR[SPS]-1659926845487
[13675895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:514.
GPR[EPS]-1659926846217
GPR[SPVATF]-1659926846217
GPR[EPVATF]-1659926847189
GPR[SPS]-1659926847189
[13677597] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:514.
GPR[EPS]-1659926847919
GPR[ESUN]-1659926847919
GPR[SSUN]-1659926847919
198689906
GPR[SPVATF]-1659926848192
GPR[EPVATF]-1659926849212
GPR[SPS]-1659926849212
GPR[EPS]-1659926876631
GPR[SPVATF]-1659926876631
GPR[EPVATF]-1659926877650
GPR[SPS]-1659926877650
GPR[EPS]-1659926898252
GPR[ESUN]-1659926898253
GPR[SSUN]-1659926898253
198689906
GPR[SPVATF]-1659926898525
GPR[EPVATF]-1659926899498
GPR[SPS]-1659926899498
[13730006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:505.
GPR[EPS]-1659926900328
GPR[SPVATF]-1659926900328
GPR[EPVATF]-1659926901295
GPR[SPS]-1659926901295
GPR[EPS]-1659926917529
GPR[ESUN]-1659926917529
GPR[SSUN]-1659926917529
198689906
GPR[SPVATF]-1659926917803
GPR[EPVATF]-1659926918796
GPR[SPS]-1659926918796
[13749248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:856.
GPR[EPS]-1659926919570
GPR[ESUN]-1659926919570
GPR[SSUN]-1659926919570
198689906
GPR[SPVATF]-1659926919842
GPR[EPVATF]-1659926920833
GPR[SPS]-1659926920833
[13751238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:854.
GPR[EPS]-1659926921560
GPR[SPVATF]-1659926921560
GPR[EPVATF]-1659926922554
GPR[SPS]-1659926922554
[13752967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:854.
GPR[EPS]-1659926923289
GPR[ESUN]-1659926923289
GPR[SSUN]-1659926923289
198689906
GPR[ESUN]-1659926923561
GPR[SSUN]-1659926923561
198689906
GPR[SPVATF]-1659926923862
GPR[EPVATF]-1659926924852
GPR[SPS]-1659926924852
[13755263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:845.
GPR[EPS]-1659926925585
GPR[SPVATF]-1659926925585
GPR[EPVATF]-1659926926570
GPR[SPS]-1659926926571
[13756993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:845.
GPR[EPS]-1659926927315
GPR[ESUN]-1659926927315
GPR[SSUN]-1659926927315
198689906
GPR[SPVATF]-1659926927590
GPR[EPVATF]-1659926928601
GPR[SPS]-1659926928601
[13759004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:836.
GPR[EPS]-1659926929326
GPR[SPVATF]-1659926929326
GPR[EPVATF]-1659926930324
GPR[SPS]-1659926930324
[13760735] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:836.
GPR[EPS]-1659926931057
GPR[ESUN]-1659926931057
GPR[SSUN]-1659926931057
198689906
GPR[SPVATF]-1659926931329
GPR[EPVATF]-1659926932356
GPR[SPS]-1659926932356
[13762771] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:829.
GPR[EPS]-1659926933093
GPR[SPVATF]-1659926933093
GPR[EPVATF]-1659926934073
GPR[SPS]-1659926934074
[13764491] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:829.
GPR[EPS]-1659926934813
GPR[ESUN]-1659926934813
GPR[SSUN]-1659926934813
198689906
GPR[SPVATF]-1659926935088
GPR[EPVATF]-1659926936117
GPR[SPS]-1659926936117
[13766527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:813.
GPR[EPS]-1659926936850
GPR[SPVATF]-1659926936850
GPR[EPVATF]-1659926937849
GPR[SPS]-1659926937849
[13768266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:813.
GPR[EPS]-1659926938588
GPR[ESUN]-1659926938588
GPR[SSUN]-1659926938588
198689906
GPR[SPVATF]-1659926938864
GPR[EPVATF]-1659926939874
GPR[SPS]-1659926939874
[13770320] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:806.
GPR[EPS]-1659926940642
GPR[ESUN]-1659926940642
GPR[SSUN]-1659926940642
198689906
GPR[SPVATF]-1659926940916
GPR[EPVATF]-1659926941914
GPR[SPS]-1659926941914
[13772369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:805.
GPR[EPS]-1659926942691
GPR[SPVATF]-1659926942691
GPR[EPVATF]-1659926943686
GPR[SPS]-1659926943686
[13774097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:805.
GPR[EPS]-1659926944419
GPR[ESUN]-1659926944419
GPR[SSUN]-1659926944419
2433571
GPR[ESUN]-1659926944670
GPR[SSUN]-1659926944670
2433571
GPR[ESUN]-1659926944918
GPR[SSUN]-1659926944918
-2054390034
GPR[ESUN]-1659926945174
GPR[SSUN]-1659926945174
-2054390034
GPR[SPVATF]-1659926945428
GPR[EPVATF]-1659926946435
GPR[SPS]-1659926946435
[13776672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:637.
GPR[EPS]-1659926946994
GPR[ESUN]-1659926946994
GPR[SSUN]-1659926946994
-2054390034
GPR[SPVATF]-1659926947280
GPR[EPVATF]-1659926948272
GPR[SPS]-1659926948272
[13780159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:636.
GPR[EPS]-1659926950481
GPR[ESUN]-1659926950481
GPR[SSUN]-1659926950481
-2054390034
GPR[ESUN]-1659926951136
GPR[SSUN]-1659926951136
-2054390034
GPR[SPVATF]-1659926951661
GPR[EPVATF]-1659926952868
GPR[SPS]-1659926952868
[13783797] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:634.
GPR[EPS]-1659926954119
GPR[ESUN]-1659926954119
GPR[SSUN]-1659926954119
-2054390034
GPR[ESUN]-1659926954524
GPR[SSUN]-1659926954524
2013302092
GPR[SPVATF]-1659926954850
GPR[EPVATF]-1659926955532
GPR[SPS]-1659926955532
[13785896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder:142.
GPR[EPS]-1659926956218
GPR[ESUN]-1659926956218
GPR[SSUN]-1659926956219
1852376448
GPR[SPVATF]-1659926956476
GPR[EPVATF]-1659926957120
GPR[SPS]-1659926957121
[13787443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:126.
GPR[EPS]-1659926957765
GPR[SPVATF]-1659926957766
GPR[EPVATF]-1659926958409
GPR[SPS]-1659926958409
[13788684] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:126.
GPR[EPS]-1659926959006
GPR[ESUN]-1659926959006
GPR[SSUN]-1659926959006
GPR[ESUN]-1659926959006
GPR[SSUN]-1659926959006
1187751237
GPR[ESUN]-1659926959417
GPR[SSUN]-1659926959417
1187751237
GPR[ESUN]-1659926959973
GPR[SSUN]-1659926959974
-2054390034
GPR[ESUN]-1659926960287
GPR[SSUN]-1659926960287
-2054390034
GPR[SPVATF]-1659926960580
GPR[EPVATF]-1659926961233
GPR[SPS]-1659926961233
[13791625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:374.
GPR[EPS]-1659926961947
GPR[ESUN]-1659926961948
GPR[SSUN]-1659926961948
GPR[ESUN]-1659926961948
GPR[SSUN]-1659926961948
GPR[ESUN]-1659926961948
GPR[SSUN]-1659926961948
GPR[ESUN]-1659926961948
GPR[SSUN]-1659926961948
-2054390034
GPR[SPVATF]-1659926962232
GPR[EPVATF]-1659926962862
GPR[SPS]-1659926962862
[13793207] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:370.
GPR[EPS]-1659926963529
GPR[SPVATF]-1659926963529
GPR[EPVATF]-1659926964169
GPR[SPS]-1659926964169
[13794592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$NormalizeStatements:370.
GPR[EPS]-1659926964914
GPR[ESUN]-1659926964914
GPR[SSUN]-1659926964914
-1117079791
GPR[ESUN]-1659926965138
GPR[SSUN]-1659926965138
-1117079791
GPR[SPVATF]-1659926965359
GPR[EPVATF]-1659926966031
GPR[SPS]-1659926966031
[13796259] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:269.
GPR[EPS]-1659926966581
GPR[ESUN]-1659926966581
GPR[SSUN]-1659926966581
-1117079791
GPR[ESUN]-1659926966797
GPR[SSUN]-1659926966797
-1117079791
GPR[SPVATF]-1659926967049
GPR[EPVATF]-1659926967704
GPR[SPS]-1659926967704
[13797934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:364.
GPR[EPS]-1659926968256
GPR[ESUN]-1659926968256
GPR[SSUN]-1659926968256
-1117079791
GPR[SPVATF]-1659926968470
GPR[EPVATF]-1659926969110
GPR[SPS]-1659926969110
[13799293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:363.
GPR[EPS]-1659926969615
GPR[ESUN]-1659926969615
GPR[SSUN]-1659926969615
-1117079791
GPR[SPVATF]-1659926969824
GPR[EPVATF]-1659926970506
GPR[SPS]-1659926970506
[13800696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:362.
GPR[EPS]-1659926971018
GPR[ESUN]-1659926971018
GPR[SSUN]-1659926971019
-1117079791
GPR[SPVATF]-1659926971230
GPR[EPVATF]-1659926971922
GPR[SPS]-1659926971922
[13802175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:361.
GPR[EPS]-1659926972497
GPR[ESUN]-1659926972497
GPR[SSUN]-1659926972497
-1117079791
GPR[SPVATF]-1659926972714
GPR[EPVATF]-1659926973363
GPR[SPS]-1659926973363
[13803555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:360.
GPR[EPS]-1659926973877
GPR[ESUN]-1659926973877
GPR[SSUN]-1659926973877
-1117079791
GPR[ESUN]-1659926974093
GPR[SSUN]-1659926974093
-1117079791
GPR[SPVATF]-1659926974306
GPR[EPVATF]-1659926974958
GPR[SPS]-1659926974958
[13805224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:348.
GPR[EPS]-1659926975546
GPR[ESUN]-1659926975546
GPR[SSUN]-1659926975546
-1117079791
GPR[SPVATF]-1659926975755
GPR[EPVATF]-1659926976418
GPR[SPS]-1659926976418
[13806620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:347.
GPR[EPS]-1659926976942
GPR[ESUN]-1659926976942
GPR[SSUN]-1659926976942
-1117079791
GPR[SPVATF]-1659926977149
GPR[EPVATF]-1659926977812
GPR[SPS]-1659926977812
[13807992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:346.
GPR[EPS]-1659926978314
GPR[ESUN]-1659926978315
GPR[SSUN]-1659926978315
-2054390034
GPR[SPVATF]-1659926978606
GPR[EPVATF]-1659926979255
GPR[SPS]-1659926979255
[13809570] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Normalize$VerifyConstants:304.
GPR[EPS]-1659926979893
GPR[ESUN]-1659926979893
GPR[SSUN]-1659926979893
2433571
GPR[SPVATF]-1659926980189
GPR[EPVATF]-1659926980391
[13810069] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926980392
GPR[EPVATF]-1659926980595
[13810274] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926980596
GPR[SSUN]-1659926980596
2433571
GPR[ESUN]-1659926980861
GPR[SSUN]-1659926980861
2433571
GPR[ESUN]-1659926981119
GPR[SSUN]-1659926981119
-1117079791
GPR[ESUN]-1659926981326
GPR[SSUN]-1659926981326
-1117079791
GPR[SPVATF]-1659926981534
GPR[EPVATF]-1659926981736
[13811414] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926981736
GPR[SSUN]-1659926981736
-1117079791
GPR[SPVATF]-1659926981945
GPR[EPVATF]-1659926982145
[13811823] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926982145
GPR[SSUN]-1659926982145
-1117079791
GPR[SPVATF]-1659926982352
GPR[EPVATF]-1659926982572
[13812251] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926982573
GPR[SSUN]-1659926982573
-1117079791
GPR[SPVATF]-1659926982783
GPR[EPVATF]-1659926983055
[13812734] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926983056
GPR[SSUN]-1659926983056
-1117079791
GPR[ESUN]-1659926983286
GPR[SSUN]-1659926983286
-1117079791
GPR[SPVATF]-1659926983492
GPR[EPVATF]-1659926983690
[13813368] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926983690
GPR[SSUN]-1659926983690
-1117079791
GPR[SPVATF]-1659926983898
GPR[EPVATF]-1659926984556
GPR[SPS]-1659926984556
[13814754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:281.
GPR[EPS]-1659926985076
GPR[ESUN]-1659926985076
GPR[SSUN]-1659926985076
-1117079791
GPR[SPVATF]-1659926985303
GPR[EPVATF]-1659926985510
[13815188] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926985510
GPR[SSUN]-1659926985510
2433571
GPR[SPVATF]-1659926985777
GPR[EPVATF]-1659926986443
GPR[SPS]-1659926986443
[13817167] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int CHANGE_TIME = 56;

    public static final int REFLECTED_OBJECT = 57;

    public static final int LAST_PROP = 57;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            case com.google.javascript.rhino.Node.CHANGE_TIME :
                return "change_time";
            case com.google.javascript.rhino.Node.REFLECTED_OBJECT :
                return "reflected_object";
            default :
                throw new java.lang.IllegalStateException("unexpected prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
            boolean equiv = super.isEquivalentTo(node, compareJsType, recur, shallow);
            if (equiv) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
            return super.isEquivalentTo(node, compareJsType, recur, shallow) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double value) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String value) throws java.lang.UnsupportedOperationException {
        if ((this.getType() == com.google.javascript.rhino.Token.STRING) || (this.getType() == com.google.javascript.rhino.Token.NAME)) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true, false);
    }

    public boolean isEquivalentToShallow(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true, false);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recur) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, !(shallow && n.isFunction()), shallow)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(308).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.REFLECTED_OBJECT",com.google.javascript.rhino.Node.REFLECTED_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.CHANGE_TIME",com.google.javascript.rhino.Node.CHANGE_TIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.Node.this.last!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.next!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.first!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(308).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setChangeTime(int time) {
        putIntProp(com.google.javascript.rhino.Node.CHANGE_TIME, time);
    }

    public int getChangeTime() {
        return getIntProp(com.google.javascript.rhino.Node.CHANGE_TIME);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public com.google.javascript.rhino.Node.SideEffectFlags setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
            return this;
        }

        public com.google.javascript.rhino.Node.SideEffectFlags clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
            return this;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public com.google.javascript.rhino.Node.SideEffectFlags setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
            return this;
        }

        public com.google.javascript.rhino.Node.SideEffectFlags setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
            return this;
        }

        public com.google.javascript.rhino.Node.SideEffectFlags setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
            return this;
        }

        public com.google.javascript.rhino.Node.SideEffectFlags setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            return this;
        }

        public com.google.javascript.rhino.Node.SideEffectFlags setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
            return this;
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isOnlyModifiesArgumentsCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    public boolean mayMutateArguments() {
        return !areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
    }

    public boolean mayMutateGlobalStateOrThrow() {
        return !areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[13817168] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659926987490
GPR[SSUN]-1659926987490
-1117079791
GPR[ESUN]-1659926987697
GPR[SSUN]-1659926987697
-1117079791
GPR[SPVATF]-1659926987904
GPR[EPVATF]-1659926988113
[13817792] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659926988114
GPR[EPVATF]-1659926988322
[13818000] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926988322
GPR[SSUN]-1659926988323
-1117079791
GPR[SPVATF]-1659926988532
GPR[EPVATF]-1659926988739
[13818417] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926988739
GPR[SSUN]-1659926988739
-1117079791
GPR[SPVATF]-1659926988964
GPR[EPVATF]-1659926989169
[13818847] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659926989170
GPR[SSUN]-1659926989170
1187751237
GPR[ESUN]-1659926989485
GPR[SSUN]-1659926989485
-42906419
GPR[ESUN]-1659926989685
GPR[SSUN]-1659926989685
-42906419
GPR[SPVATF]-1659926989885
GPR[EPVATF]-1659926990699
GPR[SPS]-1659926990699
[13820876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:71.
GPR[EPS]-1659926991198
GPR[ESUN]-1659926991198
GPR[SSUN]-1659926991198
1852376448
GPR[SPVATF]-1659926991444
GPR[EPVATF]-1659926992173
GPR[SPS]-1659926992173
[13822398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:181.
GPR[EPS]-1659926992720
GPR[SPVATF]-1659926992721
GPR[EPVATF]-1659926993485
GPR[SPS]-1659926993485
[13823706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:181.
GPR[EPS]-1659926994028
GPR[ESUN]-1659926994029
GPR[SSUN]-1659926994029
1852376448
GPR[ESUN]-1659926994255
GPR[SSUN]-1659926994255
GPR[ESUN]-1659926994255
GPR[SSUN]-1659926994255
2013302092
GPR[SPVATF]-1659926994497
GPR[EPVATF]-1659926995255
GPR[SPS]-1659926995255
[13825481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:238.
GPR[EPS]-1659926995803
GPR[ESUN]-1659926995803
GPR[SSUN]-1659926995803
2013302092
GPR[SPVATF]-1659926996045
GPR[EPVATF]-1659926996864
GPR[SPS]-1659926996864
[13827116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:237.
GPR[EPS]-1659926997438
GPR[SPVATF]-1659926997438
GPR[EPVATF]-1659926998269
GPR[SPS]-1659926998269
[13828513] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:237.
GPR[EPS]-1659926998835
GPR[ESUN]-1659926998835
GPR[SSUN]-1659926998835
2013302092
GPR[ESUN]-1659926999156
GPR[SSUN]-1659926999156
2013302092
GPR[ESUN]-1659926999395
GPR[SSUN]-1659926999395
2013302092
GPR[ESUN]-1659926999637
GPR[SSUN]-1659926999637
2013302092
GPR[SPVATF]-1659926999879
GPR[EPVATF]-1659927000715
GPR[SPS]-1659927000715
[13830959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:252.
GPR[EPS]-1659927001281
GPR[ESUN]-1659927001281
GPR[SSUN]-1659927001281
2013302092
GPR[SPVATF]-1659927001524
GPR[EPVATF]-1659927002415
GPR[SPS]-1659927002415
[13832649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:251.
GPR[EPS]-1659927002971
GPR[ESUN]-1659927002971
GPR[SSUN]-1659927002971
2013302092
GPR[ESUN]-1659927003218
GPR[SSUN]-1659927003218
2013302092
GPR[SPVATF]-1659927003461
GPR[EPVATF]-1659927004377
GPR[SPS]-1659927004377
[13834607] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:248.
GPR[EPS]-1659927004929
GPR[SPVATF]-1659927004930
GPR[EPVATF]-1659927005873
GPR[SPS]-1659927005873
[13836117] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:248.
GPR[EPS]-1659927006439
GPR[ESUN]-1659927006439
GPR[SSUN]-1659927006439
2013302092
GPR[SPVATF]-1659927006685
GPR[EPVATF]-1659927007736
GPR[SPS]-1659927007736
[13837952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:235.
GPR[EPS]-1659927008275
GPR[SPVATF]-1659927008275
GPR[EPVATF]-1659927009247
GPR[SPS]-1659927009248
[13839461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:235.
GPR[EPS]-1659927009784
GPR[ESUN]-1659927009784
GPR[SSUN]-1659927009784
2013302092
GPR[ESUN]-1659927010028
GPR[SSUN]-1659927010028
1852376448
GPR[SPVATF]-1659927010254
GPR[EPVATF]-1659927011243
GPR[SPS]-1659927011243
[13841441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:155.
GPR[EPS]-1659927011764
GPR[SPVATF]-1659927011764
GPR[EPVATF]-1659927012765
GPR[SPS]-1659927012765
[13842954] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:155.
GPR[EPS]-1659927013276
GPR[ESUN]-1659927013276
GPR[SSUN]-1659927013276
1852376448
GPR[SPVATF]-1659927013502
GPR[EPVATF]-1659927014502
GPR[SPS]-1659927014502
[13851683] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:138.
GPR[EPS]-1659927022005
GPR[SPVATF]-1659927022005
GPR[EPVATF]-1659927022992
GPR[SPS]-1659927022992
[13853324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:138.
GPR[EPS]-1659927023646
GPR[ESUN]-1659927023646
GPR[SSUN]-1659927023646
1852376448
GPR[SPVATF]-1659927023875
GPR[EPVATF]-1659927024897
GPR[SPS]-1659927024897
[13855109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:136.
GPR[EPS]-1659927025431
GPR[ESUN]-1659927025431
GPR[SSUN]-1659927025431
1852376448
GPR[ESUN]-1659927025659
GPR[SSUN]-1659927025659
1852376448
GPR[ESUN]-1659927025909
GPR[SSUN]-1659927025909
2433571
GPR[ESUN]-1659927026171
GPR[SSUN]-1659927026171
2433571
GPR[ESUN]-1659927026428
GPR[SSUN]-1659927026428
704176156
GPR[SPVATF]-1659927026634
GPR[EPVATF]-1659927027657
GPR[SPS]-1659927027657
[13857827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:170.
GPR[EPS]-1659927028149
GPR[ESUN]-1659927028149
GPR[SSUN]-1659927028149
-42906419
GPR[ESUN]-1659927028346
GPR[SSUN]-1659927028346
-42906419
GPR[SPVATF]-1659927028541
GPR[EPVATF]-1659927029575
GPR[SPS]-1659927029575
[13859736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:73.
GPR[EPS]-1659927030058
GPR[ESUN]-1659927030058
GPR[SSUN]-1659927030058
-42906419
GPR[SPVATF]-1659927030256
GPR[EPVATF]-1659927031248
GPR[SPS]-1659927031248
[13861427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:70.
GPR[EPS]-1659927031749
GPR[ESUN]-1659927031749
GPR[SSUN]-1659927031749
-42906419
GPR[ESUN]-1659927031945
GPR[SSUN]-1659927031945
1187751237
GPR[SPVATF]-1659927032252
GPR[EPVATF]-1659927033268
GPR[SPS]-1659927033268
[13863800] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3335.
GPR[EPS]-1659927034122
GPR[ESUN]-1659927034122
GPR[SSUN]-1659927034122
-1117079791
GPR[ESUN]-1659927034329
GPR[SSUN]-1659927034329
-1117079791
GPR[SPVATF]-1659927034532
GPR[EPVATF]-1659927035558
GPR[SPS]-1659927035558
[13865730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:378.
GPR[EPS]-1659927036052
GPR[ESUN]-1659927036052
GPR[SSUN]-1659927036052
-1117079791
GPR[SPVATF]-1659927036259
GPR[EPVATF]-1659927037272
GPR[SPS]-1659927037272
[13867457] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:377.
GPR[EPS]-1659927037779
GPR[ESUN]-1659927037779
GPR[SSUN]-1659927037779
-1117079791
GPR[SPVATF]-1659927038002
GPR[EPVATF]-1659927039025
GPR[SPS]-1659927039025
[13869190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:376.
GPR[EPS]-1659927039512
GPR[ESUN]-1659927039512
GPR[SSUN]-1659927039513
-1117079791
GPR[SPVATF]-1659927039750
GPR[EPVATF]-1659927040780
GPR[SPS]-1659927040780
[13870952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:375.
GPR[EPS]-1659927041274
GPR[ESUN]-1659927041274
GPR[SSUN]-1659927041274
-1117079791
GPR[ESUN]-1659927041479
GPR[SSUN]-1659927041479
-1117079791
GPR[SPVATF]-1659927041681
GPR[EPVATF]-1659927042741
GPR[SPS]-1659927042741
[13872912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:261.
GPR[EPS]-1659927043234
GPR[ESUN]-1659927043234
GPR[SSUN]-1659927043234
2433571
GPR[SPVATF]-1659927043489
GPR[EPVATF]-1659927044531
GPR[SPS]-1659927044531
[13874988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1547.
GPR[EPS]-1659927045310
GPR[SPVATF]-1659927045310
GPR[EPVATF]-1659927046341
GPR[SPS]-1659927046341
[13876805] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1547.
GPR[EPS]-1659927047128
GPR[ESUN]-1659927047128
GPR[SSUN]-1659927047128
602654447
GPR[SPVATF]-1659927047340
GPR[EPVATF]-1659927048370
GPR[SPS]-1659927048370
[13878568] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DefinitionsRemover:52.
GPR[EPS]-1659927048890
GPR[SPVATF]-1659927048890
GPR[EPVATF]-1659927049892
GPR[SPS]-1659927049892
[13880071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DefinitionsRemover:52.
GPR[EPS]-1659927050393
GPR[ESUN]-1659927050393
GPR[SSUN]-1659927050393
-42906419
GPR[ESUN]-1659927050596
GPR[SSUN]-1659927050596
-42906419
GPR[SPVATF]-1659927050792
GPR[EPVATF]-1659927051805
GPR[SPS]-1659927051805
[13881983] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:119.
GPR[EPS]-1659927052305
GPR[SPVATF]-1659927052305
GPR[EPVATF]-1659927053312
GPR[SPS]-1659927053312
[13883471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.FixedPointGraphTraversal:119.
GPR[EPS]-1659927053793
GPR[ESUN]-1659927053793
GPR[SSUN]-1659927053793
-42906419
GPR[ESUN]-1659927053987
GPR[SSUN]-1659927053987
2433571
GPR[SPVATF]-1659927054237
GPR[EPVATF]-1659927055254
GPR[SPS]-1659927055254
[13885717] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1546.
GPR[EPS]-1659927056039
GPR[SPVATF]-1659927056039
GPR[EPVATF]-1659927057073
GPR[SPS]-1659927057073
[13887555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1546.
GPR[EPS]-1659927057877
GPR[ESUN]-1659927057877
GPR[SSUN]-1659927057877
2433571
GPR[SPVATF]-1659927058130
GPR[EPVATF]-1659927059155
GPR[SPS]-1659927059155
[13889596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1543.
GPR[EPS]-1659927059918
GPR[SPVATF]-1659927059918
GPR[EPVATF]-1659927060956
GPR[SPS]-1659927060956
[13891394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1543.
GPR[EPS]-1659927061716
GPR[ESUN]-1659927061716
GPR[SSUN]-1659927061716
2433571
GPR[ESUN]-1659927061972
GPR[SSUN]-1659927061972
2433571
GPR[ESUN]-1659927062227
GPR[SSUN]-1659927062227
2433571
GPR[SPVATF]-1659927062479
GPR[EPVATF]-1659927063488
GPR[SPS]-1659927063489
[13893958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1533.
GPR[EPS]-1659927064280
GPR[SPVATF]-1659927064280
GPR[EPVATF]-1659927065312
GPR[SPS]-1659927065312
[13895748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1533.
GPR[EPS]-1659927066071
GPR[ESUN]-1659927066071
GPR[SSUN]-1659927066071
2433571
GPR[SPVATF]-1659927066321
GPR[EPVATF]-1659927067393
GPR[SPS]-1659927067393
[13901185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:649.
GPR[EPS]-1659927071507
GPR[ESUN]-1659927071507
GPR[SSUN]-1659927071507
2433571
GPR[SPVATF]-1659927072296
GPR[EPVATF]-1659927073095
GPR[SPS]-1659927073095
[13903985] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:648.
GPR[EPS]-1659927074307
GPR[ESUN]-1659927074307
GPR[SSUN]-1659927074308
2433571
GPR[SPVATF]-1659927074646
GPR[EPVATF]-1659927075428
GPR[SPS]-1659927075429
[13906011] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:647.
GPR[EPS]-1659927076333
GPR[ESUN]-1659927076333
GPR[SSUN]-1659927076333
2433571
GPR[SPVATF]-1659927076627
GPR[EPVATF]-1659927077319
GPR[SPS]-1659927077320
[13907883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:646.
GPR[EPS]-1659927078205
GPR[ESUN]-1659927078206
GPR[SSUN]-1659927078206
1965452846
GPR[ESUN]-1659927078466
GPR[SSUN]-1659927078466
2013302092
GPR[SPVATF]-1659927078736
GPR[EPVATF]-1659927079389
GPR[SPS]-1659927079389
[13909508] ERROR ConstraintModelBuilder - Unable to compile the change: 
class SimpleDefinitionFinder implements com.google.javascript.jscomp.CompilerPass , com.google.javascript.jscomp.DefinitionProvider {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.DefinitionSite> definitionSiteMap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.DefinitionsRemover.Definition> nameDefinitionMultimap;

    private final com.google.common.collect.Multimap<java.lang.String, com.google.javascript.jscomp.UseSite> nameUseSiteMultimap;

    public SimpleDefinitionFinder(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.compiler = compiler;
        this.definitionSiteMap = com.google.common.collect.Maps.newLinkedHashMap();
        this.nameDefinitionMultimap = com.google.common.collect.LinkedHashMultimap.create();
        this.nameUseSiteMultimap = com.google.common.collect.LinkedHashMultimap.create();
    }

    public java.util.Collection<com.google.javascript.jscomp.DefinitionSite> getDefinitionSites() {
        return definitionSiteMap.values();
    }

    private com.google.javascript.jscomp.DefinitionSite getDefinitionAt(com.google.javascript.rhino.Node node) {
        return definitionSiteMap.get(node);
    }

    com.google.javascript.jscomp.DefinitionSite getDefinitionForFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return getDefinitionAt(com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(function));
    }

    @java.lang.Override
    public java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> getDefinitionsReferencedAt(com.google.javascript.rhino.Node useSite) {
        if (definitionSiteMap.containsKey(useSite)) {
            return null;
        }
        if (useSite.isGetProp()) {
            java.lang.String propName = useSite.getLastChild().getString();
            if (propName.equals("apply") || propName.equals("call")) {
                useSite = useSite.getFirstChild();
            }
        }
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
        if (name != null) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = nameDefinitionMultimap.get(name);
            if (!defs.isEmpty()) {
                return defs;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(351).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("defs",defs);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler",com.google.javascript.jscomp.SimpleDefinitionFinder.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("useSite",useSite);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameDefinitionMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.nameUseSiteMultimap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectInput("com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap",com.google.javascript.jscomp.SimpleDefinitionFinder.this.definitionSiteMap);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(351).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return null;

            }
        } else {
            return null;
        }
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node source) {
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, externs, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(true));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.DefinitionGatheringCallback(false));
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, source, new com.google.javascript.jscomp.SimpleDefinitionFinder.UseSiteGatheringCallback());
    }

    java.util.Collection<com.google.javascript.jscomp.UseSite> getUseSites(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(definition.getLValue());
        return nameUseSiteMultimap.get(name);
    }

    private static java.lang.String getSimplifiedName(com.google.javascript.rhino.Node node) {
        if (node.isName()) {
            java.lang.String name = node.getString();
            if ((name != null) && (!name.isEmpty())) {
                return name;
            } else {
                return null;
            }
        } else if (node.isGetProp()) {
            return "this." + node.getLastChild().getString();
        }
        return null;
    }

    private class DefinitionGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        private boolean inExterns;

        DefinitionGatheringCallback(boolean inExterns) {
            this.inExterns = inExterns;
        }

        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            if ((inExterns && node.isName()) && parent.isParamList()) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition def = com.google.javascript.jscomp.DefinitionsRemover.getDefinition(node, inExterns);
            if (def != null) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    com.google.javascript.rhino.Node rValue = def.getRValue();
                    if (((rValue != null) && (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(rValue))) && (!rValue.isFunction())) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition unknownDef = new com.google.javascript.jscomp.DefinitionsRemover.UnknownDefinition(def.getLValue(), inExterns);
                        def = unknownDef;
                    }
                    if (inExterns) {
                        java.util.List<com.google.javascript.jscomp.DefinitionsRemover.Definition> stubsToRemove = com.google.common.collect.Lists.newArrayList();
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                if ((prevDef instanceof com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition) && (!jsdocContainsDeclarations(node))) {
                                    java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                    if (qualifiedName.equals(prevName)) {
                                        stubsToRemove.add(prevDef);
                                    }
                                }
                            }
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : stubsToRemove) {
                                nameDefinitionMultimap.remove(name, prevDef);
                            }
                        }
                    }
                    nameDefinitionMultimap.put(name, def);
                    definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, def, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                }
            }
            if ((inExterns && (parent != null)) && parent.isExprResult()) {
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(node);
                if (name != null) {
                    boolean dropStub = false;
                    if (!jsdocContainsDeclarations(node)) {
                        java.lang.String qualifiedName = node.getQualifiedName();
                        if (qualifiedName != null) {
                            for (com.google.javascript.jscomp.DefinitionsRemover.Definition prevDef : nameDefinitionMultimap.get(name)) {
                                java.lang.String prevName = prevDef.getLValue().getQualifiedName();
                                if (qualifiedName.equals(prevName)) {
                                    dropStub = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!dropStub) {
                        com.google.javascript.jscomp.DefinitionsRemover.Definition definition = new com.google.javascript.jscomp.DefinitionsRemover.ExternalNameOnlyDefinition(node);
                        nameDefinitionMultimap.put(name, definition);
                        definitionSiteMap.put(node, new com.google.javascript.jscomp.DefinitionSite(node, definition, traversal.getModule(), traversal.inGlobalScope(), inExterns));
                    }
                }
            }
        }

        private boolean jsdocContainsDeclarations(com.google.javascript.rhino.Node node) {
            com.google.javascript.rhino.JSDocInfo info = node.getJSDocInfo();
            return (info != null) && info.containsDeclaration();
        }
    }

    private class UseSiteGatheringCallback extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> defs = getDefinitionsReferencedAt(node);
            if (defs == null) {
                return;
            }
            com.google.javascript.jscomp.DefinitionsRemover.Definition first = defs.iterator().next();
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(first.getLValue());
            com.google.common.base.Preconditions.checkNotNull(name);
            nameUseSiteMultimap.put(name, new com.google.javascript.jscomp.UseSite(node, traversal.getScope(), traversal.getModule()));
        }
    }

    static boolean isCallOrNewSite(com.google.javascript.jscomp.UseSite use) {
        com.google.javascript.rhino.Node call = use.node.getParent();
        if (call == null) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isCallOrNew(call) && (call.getFirstChild() == use.node);
    }

    boolean canModifyDefinition(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        if (isExported(definition)) {
            return false;
        }
        java.util.Collection<com.google.javascript.jscomp.UseSite> useSites = getUseSites(definition);
        if (useSites.isEmpty()) {
            return false;
        }
        for (com.google.javascript.jscomp.UseSite site : useSites) {
            com.google.javascript.rhino.Node nameNode = site.node;
            java.util.Collection<com.google.javascript.jscomp.DefinitionsRemover.Definition> singleSiteDefinitions = getDefinitionsReferencedAt(nameNode);
            if (singleSiteDefinitions.size() > 1) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(!singleSiteDefinitions.isEmpty());
            com.google.common.base.Preconditions.checkState(singleSiteDefinitions.contains(definition));
        }
        return true;
    }

    private boolean isExported(com.google.javascript.jscomp.DefinitionsRemover.Definition definition) {
        com.google.javascript.rhino.Node lValue = definition.getLValue();
        if (lValue == null) {
            return true;
        }
        java.lang.String partialName;
        if (lValue.isGetProp()) {
            partialName = lValue.getLastChild().getString();
        } else if (lValue.isName()) {
            partialName = lValue.getString();
        } else {
            return true;
        }
        com.google.javascript.jscomp.CodingConvention codingConvention = compiler.getCodingConvention();
        if (codingConvention.isExported(partialName)) {
            return true;
        }
        return false;
    }

    static boolean isSimpleFunctionDeclaration(com.google.javascript.rhino.Node fn) {
        com.google.javascript.rhino.Node parent = fn.getParent();
        com.google.javascript.rhino.Node gramps = parent.getParent();
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.SimpleDefinitionFinder.getNameNodeFromFunctionNode(fn);
        if ((nameNode != null) && nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (name.equals(com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN) || name.equals(com.google.javascript.jscomp.ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {
                return false;
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(fn)) {
            return true;
        }
        if (fn.getFirstChild().getString().isEmpty() && (com.google.javascript.jscomp.NodeUtil.isExprAssign(gramps) || parent.isName())) {
            return true;
        }
        return false;
    }

    static com.google.javascript.rhino.Node getNameNodeFromFunctionNode(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(function)) {
            return function.getFirstChild();
        } else {
            com.google.javascript.rhino.Node parent = function.getParent();
            if (com.google.javascript.jscomp.NodeUtil.isVarDeclaration(parent)) {
                return parent;
            } else if (parent.isAssign()) {
                return parent.getFirstChild();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent)) {
                return parent;
            }
        }
        return null;
    }

    void removeReferences(com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.DefinitionsRemover.isDefinitionNode(node)) {
            com.google.javascript.jscomp.DefinitionSite defSite = definitionSiteMap.get(node);
            if (defSite != null) {
                com.google.javascript.jscomp.DefinitionsRemover.Definition def = defSite.definition;
                java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(def.getLValue());
                if (name != null) {
                    this.definitionSiteMap.remove(node);
                    this.nameDefinitionMultimap.remove(name, node);
                }
            }
        } else {
            com.google.javascript.rhino.Node useSite = node;
            if (useSite.isGetProp()) {
                java.lang.String propName = useSite.getLastChild().getString();
                if (propName.equals("apply") || propName.equals("call")) {
                    useSite = useSite.getFirstChild();
                }
            }
            java.lang.String name = com.google.javascript.jscomp.SimpleDefinitionFinder.getSimplifiedName(useSite);
            if (name != null) {
                this.nameUseSiteMultimap.remove(name, new com.google.javascript.jscomp.UseSite(useSite, null, null));
            }
        }
        for (com.google.javascript.rhino.Node child : node.children()) {
            removeReferences(child);
        }
    }
}
[13909508] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659927079831
GPR[SSUN]-1659927079831
2433571
GPR[ESUN]-1659927080134
GPR[SSUN]-1659927080134
2013302092
GPR[SPVATF]-1659927080400
GPR[EPVATF]-1659927081043
GPR[SPS]-1659927081043
[13911336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:224.
GPR[EPS]-1659927081659
GPR[SPVATF]-1659927081659
GPR[EPVATF]-1659927082328
GPR[SPS]-1659927082328
[13912649] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SimpleDefinitionFinder$DefinitionGatheringCallback:224.
GPR[EPS]-1659927082971
GPR[ESUN]-1659927082971
GPR[SSUN]-1659927082971
2013302092
GPR[ESUN]-1659927083347
GPR[SSUN]-1659927083347
1187751237
GPR[ESUN]-1659927083709
GPR[SSUN]-1659927083709
GPR[ESUN]-1659927083709
GPR[SSUN]-1659927083709
GPR[ESUN]-1659927083709
GPR[SSUN]-1659927083709
1852376448
GPR[SPVATF]-1659927083954
GPR[EPVATF]-1659927084617
GPR[SPS]-1659927084617
[13914876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:176.
GPR[EPS]-1659927085198
GPR[ESUN]-1659927085198
GPR[SSUN]-1659927085198
1852376448
GPR[SPVATF]-1659927085442
GPR[EPVATF]-1659927086068
GPR[SPS]-1659927086068
[13916332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:175.
GPR[EPS]-1659927086654
GPR[SPVATF]-1659927086655
GPR[EPVATF]-1659927087299
GPR[SPS]-1659927087299
[13917542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$SetNoSideEffectCallProperty:175.
GPR[EPS]-1659927087864
GPR[ESUN]-1659927087864
GPR[SSUN]-1659927087864
1852376448
GPR[ESUN]-1659927088104
GPR[SSUN]-1659927088104
1852376448
GPR[ESUN]-1659927088348
GPR[SSUN]-1659927088348
1852376448
GPR[ESUN]-1659927088583
GPR[SSUN]-1659927088583
1852376448
GPR[ESUN]-1659927088821
GPR[SSUN]-1659927088821
1852376448
GPR[SPVATF]-1659927089062
GPR[EPVATF]-1659927089780
GPR[SPS]-1659927089780
[13920017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:69.
GPR[EPS]-1659927090339
GPR[ESUN]-1659927090339
GPR[SSUN]-1659927090339
1852376448
GPR[SPVATF]-1659927090578
GPR[EPVATF]-1659927091225
GPR[SPS]-1659927091225
[13921450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:66.
GPR[EPS]-1659927091772
GPR[ESUN]-1659927091772
GPR[SSUN]-1659927091772
1852376448
GPR[SPVATF]-1659927092009
GPR[EPVATF]-1659927092655
GPR[SPS]-1659927092655
[13922903] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:64.
GPR[EPS]-1659927093226
GPR[ESUN]-1659927093226
GPR[SSUN]-1659927093226
1852376448
GPR[SPVATF]-1659927093466
GPR[EPVATF]-1659927094100
GPR[SPS]-1659927094100
[13924326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls:60.
GPR[EPS]-1659927094649
GPR[ESUN]-1659927094649
GPR[SSUN]-1659927094649
1852376448
GPR[ESUN]-1659927094886
GPR[SSUN]-1659927094886
1852376448
GPR[ESUN]-1659927095125
GPR[SSUN]-1659927095125
1852376448
GPR[SPVATF]-1659927095373
GPR[EPVATF]-1659927096024
GPR[SPS]-1659927096024
[13926255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659927096577
GPR[SPVATF]-1659927096578
GPR[EPVATF]-1659927097232
GPR[SPS]-1659927097232
[13927537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:130.
GPR[EPS]-1659927097859
GPR[ESUN]-1659927097859
GPR[SSUN]-1659927097859
1852376448
GPR[SPVATF]-1659927098097
GPR[EPVATF]-1659927098748
GPR[SPS]-1659927098748
[13929049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659927099371
GPR[SPVATF]-1659927099372
GPR[EPVATF]-1659927100029
GPR[SPS]-1659927100029
[13930274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:125.
GPR[EPS]-1659927100596
GPR[ESUN]-1659927100596
GPR[SSUN]-1659927100596
1852376448
GPR[SPVATF]-1659927100833
GPR[EPVATF]-1659927101505
GPR[SPS]-1659927101505
[13931751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659927102073
GPR[SPVATF]-1659927102073
GPR[EPVATF]-1659927102737
GPR[SPS]-1659927102737
[13932975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:121.
GPR[EPS]-1659927103297
GPR[ESUN]-1659927103298
GPR[SSUN]-1659927103298
GPR[ESUN]-1659927103298
GPR[SSUN]-1659927103298
602654447
GPR[ESUN]-1659927103518
GPR[SSUN]-1659927103518
2433571
GPR[ESUN]-1659927103796
GPR[SSUN]-1659927103796
2433571
GPR[ESUN]-1659927104086
GPR[SSUN]-1659927104086
2433571
GPR[ESUN]-1659927104350
GPR[SSUN]-1659927104350
2433571
GPR[SPVATF]-1659927104613
GPR[EPVATF]-1659927105383
GPR[SPS]-1659927105383
[14451860] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659927657770
GPR[SSUN]-1659927657770
\n\nNode: host-46\n
\n\nDate: Sun 07 Aug 2022 08:27:43 PM PDT\n
End running Nopol Closure/114 results at /experiment_home///results/Nopol/Closure/114/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_114
GPR[SSLE]-1659929263675
GPR[ESLE]-1659929323679
