Sleep 1m start
GPR[SSLI]-1659899987229
GPR[ESLI]-1659900047232
Running Nopol Closure 26b with approach: smt
Timezone: America/Los_Angeles
Seed 264
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/26/seed_264/
The file script/workingdir/Nopol/Closure_26 does not exist!
script/workingdir/Nopol/Closure_26
script/workingdir/Nopol/Closure_26
classpath:  script/workingdir/Nopol/Closure_26/build/classes:script/workingdir/Nopol/Closure_26/lib/args4j.jar:script/workingdir/Nopol/Closure_26/lib/guava.jar:script/workingdir/Nopol/Closure_26/lib/json.jar:script/workingdir/Nopol/Closure_26/lib/jsr305.jar:script/workingdir/Nopol/Closure_26/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_26/build/lib/rhino.jar:script/workingdir/Nopol/Closure_26/lib/ant.jar:script/workingdir/Nopol/Closure_26/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_26/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_26/lib/jarjar.jar:script/workingdir/Nopol/Closure_26/lib/junit.jar:script/workingdir/Nopol/Closure_26/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659900065865
GPR[ESLB]-1659900125871
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_26//build/classes:script/workingdir/Nopol/Closure_26//build/test:script/workingdir/Nopol/Closure_26/build/classes:script/workingdir/Nopol/Closure_26/lib/args4j.jar:script/workingdir/Nopol/Closure_26/lib/guava.jar:script/workingdir/Nopol/Closure_26/lib/json.jar:script/workingdir/Nopol/Closure_26/lib/jsr305.jar:script/workingdir/Nopol/Closure_26/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_26/build/lib/rhino.jar:script/workingdir/Nopol/Closure_26/lib/ant.jar:script/workingdir/Nopol/Closure_26/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_26/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_26/lib/jarjar.jar:script/workingdir/Nopol/Closure_26/lib/junit.jar:script/workingdir/Nopol/Closure_26/build/test
Node: host-50
Date init: Sun 07 Aug 2022 12:22:05 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_26/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_26/build/classes/, file:script/workingdir/Nopol/Closure_26/build/test/, file:script/workingdir/Nopol/Closure_26/build/classes/, file:script/workingdir/Nopol/Closure_26/lib/args4j.jar, file:script/workingdir/Nopol/Closure_26/lib/guava.jar, file:script/workingdir/Nopol/Closure_26/lib/json.jar, file:script/workingdir/Nopol/Closure_26/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_26/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_26/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_26/lib/ant.jar, file:script/workingdir/Nopol/Closure_26/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_26/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_26/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_26/lib/junit.jar, file:script/workingdir/Nopol/Closure_26/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_26/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/26/seed_264/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659900131397
GPR[ESUP]-1659900131397
GPR[SFL]-1659900131397
GPR[EFL]-1659900171015
GPR[SFP]-1659900171016
GPR[SSUN]-1659900172653
2433571
GPR[ESUN]-1659900173214
GPR[SSUN]-1659900173214
-1052579291
GPR[ESUN]-1659900173449
GPR[SSUN]-1659900173449
-1052579291
GPR[ESUN]-1659900173685
GPR[SSUN]-1659900173685
-1052579291
GPR[SPVATF]-1659900174292
GPR[EPVATF]-1659900175771
GPR[SPS]-1659900175771
[52346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules:65.
GPR[EPS]-1659900179044
GPR[ESUN]-1659900179044
GPR[SSUN]-1659900179044
-1052579291
GPR[ESUN]-1659900179298
GPR[SSUN]-1659900179298
-1052579291
GPR[SPVATF]-1659900179558
GPR[EPVATF]-1659900180663
GPR[SPS]-1659900180663
[54729] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:210.
GPR[EPS]-1659900181426
GPR[ESUN]-1659900181426
GPR[SSUN]-1659900181426
-1052579291
GPR[ESUN]-1659900181647
GPR[SSUN]-1659900181647
-1052579291
GPR[ESUN]-1659900181864
GPR[SSUN]-1659900181864
-1052579291
GPR[SPVATF]-1659900182087
GPR[EPVATF]-1659900183207
GPR[SPS]-1659900183207
[57178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:197.
GPR[EPS]-1659900183875
GPR[ESUN]-1659900183875
GPR[SSUN]-1659900183875
-1052579291
GPR[SPVATF]-1659900184093
GPR[EPVATF]-1659900185863
GPR[SPS]-1659900185863
[59831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:194.
GPR[EPS]-1659900186528
GPR[ESUN]-1659900186528
GPR[SSUN]-1659900186528
-1052579291
GPR[SPVATF]-1659900186748
GPR[EPVATF]-1659900187883
GPR[SPS]-1659900187883
[61834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:191.
GPR[EPS]-1659900188531
GPR[ESUN]-1659900188531
GPR[SSUN]-1659900188531
-1052579291
GPR[SPVATF]-1659900188753
GPR[EPVATF]-1659900189912
GPR[SPS]-1659900189912
[63850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:187.
GPR[EPS]-1659900190547
GPR[ESUN]-1659900190547
GPR[SSUN]-1659900190547
-1052579291
GPR[SPVATF]-1659900190762
GPR[EPVATF]-1659900191939
GPR[SPS]-1659900191939
[65874] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:180.
GPR[EPS]-1659900192571
GPR[SPVATF]-1659900192572
GPR[EPVATF]-1659900193822
GPR[SPS]-1659900193822
[67753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:180.
GPR[EPS]-1659900194450
GPR[ESUN]-1659900194450
GPR[SSUN]-1659900194450
-1052579291
GPR[SPVATF]-1659900194673
GPR[EPVATF]-1659900196570
GPR[SPS]-1659900196570
[70629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:178.
GPR[EPS]-1659900197326
GPR[ESUN]-1659900197326
GPR[SSUN]-1659900197326
-1052579291
GPR[ESUN]-1659900197559
GPR[SSUN]-1659900197559
-1052579291
GPR[SPVATF]-1659900197778
GPR[EPVATF]-1659900198949
GPR[SPS]-1659900198949
[72901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:173.
GPR[EPS]-1659900199598
GPR[ESUN]-1659900199598
GPR[SSUN]-1659900199598
-1052579291
GPR[ESUN]-1659900199819
GPR[SSUN]-1659900199819
-1052579291
GPR[SPVATF]-1659900200036
GPR[EPVATF]-1659900201181
GPR[SPS]-1659900201181
[75141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:142.
GPR[EPS]-1659900201838
GPR[SPVATF]-1659900201838
GPR[EPVATF]-1659900203038
GPR[SPS]-1659900203038
[76969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:142.
GPR[EPS]-1659900203667
GPR[ESUN]-1659900203667
GPR[SSUN]-1659900203667
-1052579291
GPR[SPVATF]-1659900203896
GPR[EPVATF]-1659900205111
GPR[SPS]-1659900205111
[79049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:139.
GPR[EPS]-1659900205746
GPR[ESUN]-1659900205746
GPR[SSUN]-1659900205746
-1052579291
GPR[SPVATF]-1659900205962
GPR[EPVATF]-1659900207210
GPR[SPS]-1659900207210
[81156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:138.
GPR[EPS]-1659900207853
GPR[ESUN]-1659900207853
GPR[SSUN]-1659900207853
-1052579291
GPR[SPVATF]-1659900208082
GPR[EPVATF]-1659900209292
GPR[SPS]-1659900209292
[83265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:137.
GPR[EPS]-1659900209962
GPR[SPVATF]-1659900209963
GPR[EPVATF]-1659900211993
GPR[SPS]-1659900211993
[85847] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:137.
GPR[EPS]-1659900212544
GPR[ESUN]-1659900212544
GPR[SSUN]-1659900212544
-1052579291
GPR[SPVATF]-1659900212761
GPR[EPVATF]-1659900213888
GPR[SPS]-1659900213888
[87839] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:131.
GPR[EPS]-1659900214536
GPR[SPVATF]-1659900214537
GPR[EPVATF]-1659900215717
GPR[SPS]-1659900215717
[89651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:131.
GPR[EPS]-1659900216348
GPR[ESUN]-1659900216348
GPR[SSUN]-1659900216348
-1052579291
GPR[ESUN]-1659900216566
GPR[SSUN]-1659900216566
-1052579291
GPR[SPVATF]-1659900216781
GPR[EPVATF]-1659900217968
GPR[SPS]-1659900217968
[91900] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:268.
GPR[EPS]-1659900218597
GPR[SPVATF]-1659900218597
GPR[EPVATF]-1659900219797
GPR[SPS]-1659900219797
[93758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:268.
GPR[EPS]-1659900220455
GPR[ESUN]-1659900220456
GPR[SSUN]-1659900220456
-1052579291
GPR[ESUN]-1659900220679
GPR[SSUN]-1659900220679
-1052579291
GPR[SPVATF]-1659900220913
GPR[EPVATF]-1659900222105
GPR[SPS]-1659900222105
[96036] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:263.
GPR[EPS]-1659900222733
GPR[SPVATF]-1659900222733
GPR[EPVATF]-1659900223999
GPR[SPS]-1659900223999
[97943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:263.
GPR[EPS]-1659900224640
GPR[ESUN]-1659900224640
GPR[SSUN]-1659900224640
-1052579291
GPR[SPVATF]-1659900224860
GPR[EPVATF]-1659900226103
GPR[SPS]-1659900226103
[100034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:261.
GPR[EPS]-1659900226731
GPR[ESUN]-1659900226731
GPR[SSUN]-1659900226731
-1052579291
GPR[SPVATF]-1659900226955
GPR[EPVATF]-1659900228166
GPR[SPS]-1659900228166
[102105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:260.
GPR[EPS]-1659900228802
GPR[SPVATF]-1659900228802
GPR[EPVATF]-1659900230765
GPR[SPS]-1659900230765
[104826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:260.
GPR[EPS]-1659900231523
GPR[ESUN]-1659900231523
GPR[SSUN]-1659900231523
-1052579291
GPR[ESUN]-1659900231749
GPR[SSUN]-1659900231749
-1052579291
GPR[SPVATF]-1659900231971
GPR[EPVATF]-1659900233137
GPR[SPS]-1659900233137
[107075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:258.
GPR[EPS]-1659900233772
GPR[SPVATF]-1659900233772
GPR[EPVATF]-1659900234964
GPR[SPS]-1659900234964
[108952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:258.
GPR[EPS]-1659900235649
GPR[ESUN]-1659900235649
GPR[SSUN]-1659900235649
GPR[ESUN]-1659900235649
GPR[SSUN]-1659900235649
GPR[ESUN]-1659900235650
GPR[SSUN]-1659900235650
-1052579291
GPR[SPVATF]-1659900235918
GPR[EPVATF]-1659900236117
GPR[SPS]-1659900236117
[109908] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:270.
GPR[EPS]-1659900236605
GPR[ESUN]-1659900236605
GPR[SSUN]-1659900236605
-1052579291
GPR[SPVATF]-1659900236825
GPR[EPVATF]-1659900237004
GPR[SPS]-1659900237004
[110810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:269.
GPR[EPS]-1659900237507
GPR[ESUN]-1659900237507
GPR[SSUN]-1659900237507
80988634
GPR[ESUN]-1659900237691
GPR[SSUN]-1659900237691
-1052579291
GPR[ESUN]-1659900237906
GPR[SSUN]-1659900237906
-1052579291
GPR[SPVATF]-1659900238124
GPR[EPVATF]-1659900239339
GPR[SPS]-1659900239339
[113277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules:115.
GPR[EPS]-1659900239974
GPR[SPVATF]-1659900239974
GPR[EPVATF]-1659900241178
GPR[SPS]-1659900241178
[115086] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules:115.
GPR[EPS]-1659900241783
GPR[ESUN]-1659900241783
GPR[SSUN]-1659900241783
-1052579291
GPR[ESUN]-1659900242001
GPR[SSUN]-1659900242001
-1052579291
GPR[ESUN]-1659900242212
GPR[SSUN]-1659900242212
-1052579291
GPR[SPVATF]-1659900242429
GPR[EPVATF]-1659900245508
GPR[SPS]-1659900245508
[119545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:265.
GPR[EPS]-1659900246242
GPR[ESUN]-1659900246242
GPR[SSUN]-1659900246242
-1052579291
GPR[SPVATF]-1659900246464
GPR[EPVATF]-1659900247675
GPR[SPS]-1659900247675
[121603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$SuffixVarsCallback:264.
GPR[EPS]-1659900248300
GPR[ESUN]-1659900248300
GPR[SSUN]-1659900248300
80988634
GPR[ESUN]-1659900248478
GPR[SSUN]-1659900248478
2433571
GPR[SPVATF]-1659900248753
GPR[EPVATF]-1659900249944
GPR[SPS]-1659900249944
[124249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1459.
GPR[EPS]-1659900250947
GPR[ESUN]-1659900250947
GPR[SSUN]-1659900250947
2433571
GPR[SPVATF]-1659900251191
GPR[EPVATF]-1659900253200
GPR[SPS]-1659900253200
GPR[EPS]-1659900254705
GPR[SPVATR]-1659900254706
[128009] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.JSDOC_INFO_PROP
[128427] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.JSDOC_INFO_PROP" is working
GPR[EPVATR]-1659900255425
[128728] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659900255425
[128754] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/26/seed_264/patch_124054_1ts_1659900255451.diff
GPR[ESUN]-1659900255453
GPR[SSUN]-1659900255453
2433571
GPR[SPVATF]-1659900255697
GPR[EPVATF]-1659900256855
GPR[SPS]-1659900256855
GPR[EPS]-1659900258198
GPR[SPVATR]-1659900258198
[131501] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1446: PRECONDITION com.google.javascript.rhino.Node.this.sourcePosition < com.google.javascript.rhino.Node.DECR_FLAG
[131885] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.sourcePosition < com.google.javascript.rhino.Node.DECR_FLAG" is working
GPR[EPVATR]-1659900258887
[132190] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659900258888
[132206] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1445,3 +1445,5 @@
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (com.google.javascript.rhino.Node.this.sourcePosition < com.google.javascript.rhino.Node.DECR_FLAG) {
+        return new NodeMismatch(this, node2);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/26/seed_264/patch_127506_2ts_1659900258903.diff
GPR[ESUN]-1659900258904
GPR[SSUN]-1659900258904
-1052579291
GPR[ESUN]-1659900259121
GPR[SSUN]-1659900259121
-1052579291
GPR[SPVATF]-1659900259340
GPR[EPVATF]-1659900259511
GPR[SPS]-1659900259511
[133277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules:102.
GPR[EPS]-1659900259974
GPR[SPVATF]-1659900259974
GPR[EPVATF]-1659900260149
GPR[SPS]-1659900260149
[133915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules:102.
GPR[EPS]-1659900260612
GPR[ESUN]-1659900260612
GPR[SSUN]-1659900260612
-1052579291
GPR[SPVATF]-1659900260826
GPR[EPVATF]-1659900260998
GPR[SPS]-1659900260998
[134793] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules:100.
GPR[EPS]-1659900261490
GPR[ESUN]-1659900261490
GPR[SSUN]-1659900261490
-1052579291
GPR[SPVATF]-1659900261709
GPR[EPVATF]-1659900261881
GPR[SPS]-1659900261881
[135651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules:99.
GPR[EPS]-1659900262349
GPR[ESUN]-1659900262349
GPR[SSUN]-1659900262349
-1052579291
GPR[SPVATF]-1659900262564
GPR[EPVATF]-1659900262742
GPR[SPS]-1659900262742
[480915] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659900607612
GPR[SSUN]-1659900607612
-1052579291
GPR[SPVATF]-1659900608003
GPR[EPVATF]-1659900608176
GPR[SPS]-1659900608176
[481949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:236.
GPR[EPS]-1659900608646
GPR[ESUN]-1659900608646
GPR[SSUN]-1659900608646
-1052579291
GPR[SPVATF]-1659900608871
GPR[EPVATF]-1659900609184
GPR[SPS]-1659900609184
[482949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:235.
GPR[EPS]-1659900609646
GPR[SPVATF]-1659900609646
GPR[EPVATF]-1659900609817
GPR[SPS]-1659900609817
[483569] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:235.
GPR[EPS]-1659900610266
GPR[ESUN]-1659900610266
GPR[SSUN]-1659900610266
-1052579291
GPR[ESUN]-1659900610479
GPR[SSUN]-1659900610479
-1052579291
GPR[SPVATF]-1659900610693
GPR[EPVATF]-1659900610859
GPR[SPS]-1659900610859
[484617] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:165.
GPR[EPS]-1659900611314
GPR[ESUN]-1659900611314
GPR[SSUN]-1659900611314
-1052579291
GPR[SPVATF]-1659900611536
GPR[EPVATF]-1659900611703
GPR[SPS]-1659900611703
[485482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:162.
GPR[EPS]-1659900612179
GPR[ESUN]-1659900612179
GPR[SSUN]-1659900612179
-1052579291
GPR[SPVATF]-1659900612402
GPR[EPVATF]-1659900612571
GPR[SPS]-1659900612571
[486335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:158.
GPR[EPS]-1659900613032
GPR[SPVATF]-1659900613032
GPR[EPVATF]-1659900613203
GPR[SPS]-1659900613203
[486971] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:158.
GPR[EPS]-1659900613668
GPR[ESUN]-1659900613668
GPR[SSUN]-1659900613668
-1052579291
GPR[ESUN]-1659900613885
GPR[SSUN]-1659900613885
-1052579291
GPR[SPVATF]-1659900614100
GPR[EPVATF]-1659900614270
GPR[SPS]-1659900614270
[488052] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:156.
GPR[EPS]-1659900614750
GPR[ESUN]-1659900614750
GPR[SSUN]-1659900614750
-1052579291
GPR[ESUN]-1659900614968
GPR[SSUN]-1659900614968
-1052579291
GPR[ESUN]-1659900615182
GPR[SSUN]-1659900615182
-1052579291
GPR[SPVATF]-1659900615394
GPR[EPVATF]-1659900615568
GPR[SPS]-1659900615568
[489340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:134.
GPR[EPS]-1659900616037
GPR[ESUN]-1659900616037
GPR[SSUN]-1659900616037
80988634
GPR[ESUN]-1659900616215
GPR[SSUN]-1659900616215
2346
GPR[ESUN]-1659900616401
GPR[SSUN]-1659900616401
2346
GPR[SPVATF]-1659900616590
GPR[EPVATF]-1659900617762
GPR[SPS]-1659900617762
[491614] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:158.
GPR[EPS]-1659900618311
GPR[ESUN]-1659900618311
GPR[SSUN]-1659900618311
2346
GPR[SPVATF]-1659900618572
GPR[EPVATF]-1659900619689
GPR[SPS]-1659900619689
[493542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:157.
GPR[EPS]-1659900620239
GPR[ESUN]-1659900620239
GPR[SSUN]-1659900620239
-283827935
GPR[SPVATF]-1659900620437
GPR[EPVATF]-1659900620450
[493753] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900620450
GPR[SSUN]-1659900620450
-1712894512
GPR[SPVATF]-1659900620685
GPR[EPVATF]-1659900621793
GPR[SPS]-1659900621793
[496373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:688.
GPR[EPS]-1659900623071
GPR[ESUN]-1659900623071
GPR[SSUN]-1659900623071
-1712894512
GPR[SPVATF]-1659900623320
GPR[EPVATF]-1659900624464
GPR[SPS]-1659900624464
[498857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:683.
GPR[EPS]-1659900625554
GPR[SPVATF]-1659900625554
GPR[EPVATF]-1659900626729
GPR[SPS]-1659900626729
[501019] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:683.
GPR[EPS]-1659900627716
GPR[ESUN]-1659900627716
GPR[SSUN]-1659900627716
-1712894512
GPR[SPVATF]-1659900627950
GPR[EPVATF]-1659900629151
GPR[SPS]-1659900629151
[503478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:682.
GPR[EPS]-1659900630176
GPR[ESUN]-1659900630176
GPR[SSUN]-1659900630176
-1712894512
GPR[SPVATF]-1659900639024
GPR[EPVATF]-1659900640356
GPR[SPS]-1659900640356
[514718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:681.
GPR[EPS]-1659900641415
GPR[ESUN]-1659900641415
GPR[SSUN]-1659900641416
-1712894512
GPR[ESUN]-1659900641647
GPR[SSUN]-1659900641647
944853999
GPR[ESUN]-1659900641894
GPR[SSUN]-1659900641894
2346
GPR[ESUN]-1659900642080
GPR[SSUN]-1659900642080
2346
GPR[SPVATF]-1659900642260
GPR[EPVATF]-1659900643436
GPR[SPS]-1659900643436
[517291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:128.
GPR[EPS]-1659900643988
GPR[ESUN]-1659900643988
GPR[SSUN]-1659900643988
2346
GPR[SPVATF]-1659900644170
GPR[EPVATF]-1659900645346
GPR[SPS]-1659900645346
[519238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:127.
GPR[EPS]-1659900645935
GPR[ESUN]-1659900645935
GPR[SSUN]-1659900645935
2346
GPR[SPVATF]-1659900646120
GPR[EPVATF]-1659900647379
GPR[SPS]-1659900647379
[521241] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:126.
GPR[EPS]-1659900647938
GPR[ESUN]-1659900647938
GPR[SSUN]-1659900647938
2433571
GPR[ESUN]-1659900648173
GPR[SSUN]-1659900648173
2433571
GPR[ESUN]-1659900648402
GPR[SSUN]-1659900648402
-675467674
GPR[ESUN]-1659900648575
GPR[SSUN]-1659900648575
2346
GPR[ESUN]-1659900648755
GPR[SSUN]-1659900648755
2346
GPR[ESUN]-1659900648937
GPR[SSUN]-1659900648937
2346
GPR[SPVATF]-1659900649117
GPR[EPVATF]-1659900650352
GPR[SPS]-1659900650352
[524186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:97.
GPR[EPS]-1659900650883
GPR[ESUN]-1659900650883
GPR[SSUN]-1659900650883
80988634
GPR[ESUN]-1659900651059
GPR[SSUN]-1659900651059
1421663094
GPR[SPVATF]-1659900651262
GPR[EPVATF]-1659900652483
GPR[SPS]-1659900652483
[526126] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeRemoveDeadCode extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssignment(subtree);
            case com.google.javascript.rhino.Token.COMMA :
                return tryFoldComma(subtree);
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                return tryOptimizeBlock(subtree);
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                subtree = tryFoldExpr(subtree);
                return subtree;
            case com.google.javascript.rhino.Token.HOOK :
                return tryFoldHook(subtree);
            case com.google.javascript.rhino.Token.SWITCH :
                return tryOptimizeSwitch(subtree);
            case com.google.javascript.rhino.Token.IF :
                return tryFoldIf(subtree);
            case com.google.javascript.rhino.Token.WHILE :
                return tryFoldWhile(subtree);
            case com.google.javascript.rhino.Token.FOR :
                {
                    com.google.javascript.rhino.Node condition = com.google.javascript.jscomp.NodeUtil.getConditionExpression(subtree);
                    if (condition != null) {
                        tryFoldForCondition(condition);
                    }
                }
                return tryFoldFor(subtree);
            case com.google.javascript.rhino.Token.DO :
                return tryFoldDo(subtree);
            case com.google.javascript.rhino.Token.TRY :
                return tryFoldTry(subtree);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryFoldTry(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isTry());
        com.google.javascript.rhino.Node body = n.getFirstChild();
        com.google.javascript.rhino.Node catchBlock = body.getNext();
        com.google.javascript.rhino.Node finallyBlock = catchBlock.getNext();
        if ((!catchBlock.hasChildren()) && ((finallyBlock == null) || (!finallyBlock.hasChildren()))) {
            n.removeChild(body);
            n.getParent().replaceChild(n, body);
            reportCodeChange();
            return body;
        }
        if (!body.hasChildren()) {
            com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(catchBlock);
            if (finallyBlock != null) {
                n.removeChild(finallyBlock);
                n.getParent().replaceChild(n, finallyBlock);
            } else {
                n.getParent().removeChild(n);
            }
            reportCodeChange();
            return finallyBlock;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssignment(com.google.javascript.rhino.Node subtree) {
        com.google.common.base.Preconditions.checkState(subtree.isAssign());
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        com.google.javascript.rhino.Node right = subtree.getLastChild();
        if ((left.isName() && right.isName()) && left.getString().equals(right.getString())) {
            subtree.getParent().replaceChild(subtree, right.detachFromParent());
            reportCodeChange();
            return right;
        }
        return subtree;
    }

    private com.google.javascript.rhino.Node tryFoldExpr(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node result = trySimplifyUnusedResult(subtree.getFirstChild());
        if (result == null) {
            com.google.javascript.rhino.Node parent = subtree.getParent();
            if (parent.isLabel()) {
                com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.block().srcref(subtree);
                parent.replaceChild(subtree, replacement);
                subtree = replacement;
            } else {
                subtree.detachFromParent();
                subtree = null;
            }
        }
        return subtree;
    }

    private com.google.javascript.rhino.Node trySimplifyUnusedResult(com.google.javascript.rhino.Node n) {
        return trySimplifyUnusedResult(n, true);
    }

    private com.google.javascript.rhino.Node trySimplifyUnusedResult(com.google.javascript.rhino.Node n, boolean removeUnused) {
        com.google.javascript.rhino.Node result = n;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.HOOK :
                com.google.javascript.rhino.Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
                com.google.javascript.rhino.Node falseNode = trySimplifyUnusedResult(n.getLastChild());
                if ((trueNode == null) && (falseNode != null)) {
                    n.setType(com.google.javascript.rhino.Token.OR);
                    com.google.common.base.Preconditions.checkState(n.getChildCount() == 2);
                } else if ((trueNode != null) && (falseNode == null)) {
                    n.setType(com.google.javascript.rhino.Token.AND);
                    com.google.common.base.Preconditions.checkState(n.getChildCount() == 2);
                } else if ((trueNode == null) && (falseNode == null)) {
                    result = trySimplifyUnusedResult(n.getFirstChild());
                } else {
                    result = n;
                }
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                com.google.javascript.rhino.Node conditionalResultNode = trySimplifyUnusedResult(n.getLastChild());
                if (conditionalResultNode == null) {
                    com.google.common.base.Preconditions.checkState(n.hasOneChild());
                    result = trySimplifyUnusedResult(n.getFirstChild());
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                result = null;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node left = trySimplifyUnusedResult(n.getFirstChild());
                com.google.javascript.rhino.Node right = trySimplifyUnusedResult(n.getLastChild());
                if ((left == null) && (right == null)) {
                    result = null;
                } else if (left == null) {
                    result = right;
                } else if (right == null) {
                    result = left;
                } else {
                    result = n;
                }
                break;
            default :
                if (!com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n)) {
                    com.google.javascript.rhino.Node resultList = null;
                    for (com.google.javascript.rhino.Node next, c = n.getFirstChild(); c != null; c = next) {
                        next = c.getNext();
                        c = trySimplifyUnusedResult(c);
                        if (c != null) {
                            c.detachFromParent();
                            if (resultList == null) {
                                resultList = c;
                            } else {
                                resultList = com.google.javascript.rhino.IR.comma(resultList, c).srcref(c);
                            }
                        }
                    }
                    result = resultList;
                }
        }
        if (n != result) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (result == null) {
                if (removeUnused) {
                    parent.removeChild(n);
                } else {
                    result = com.google.javascript.rhino.IR.empty().srcref(n);
                    parent.replaceChild(n, result);
                }
            } else {
                if (result.getParent() != null) {
                    result.detachFromParent();
                }
                n.getParent().replaceChild(n, result);
            }
            reportCodeChange();
        }
        return result;
    }

    private com.google.javascript.rhino.Node tryOptimizeSwitch(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isSwitch());
        com.google.javascript.rhino.Node defaultCase = tryOptimizeDefaultCase(n);
        if (defaultCase == null) {
            com.google.javascript.rhino.Node next = null;
            com.google.javascript.rhino.Node prev = null;
            for (com.google.javascript.rhino.Node c = n.getFirstChild().getNext(); c != null; c = next) {
                next = c.getNext();
                if ((!mayHaveSideEffects(c.getFirstChild())) && isUselessCase(c, prev)) {
                    removeCase(n, c);
                } else {
                    prev = c;
                }
            }
        }
        if (n.hasOneChild()) {
            com.google.javascript.rhino.Node condition = n.removeFirstChild();
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.exprResult(condition).srcref(n);
            parent.replaceChild(n, replacement);
            reportCodeChange();
            return replacement;
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryOptimizeDefaultCase(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isSwitch());
        com.google.javascript.rhino.Node lastNonRemovable = n.getFirstChild();
        for (com.google.javascript.rhino.Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {
            if (c.isDefaultCase()) {
                com.google.javascript.rhino.Node caseToRemove = lastNonRemovable.getNext();
                for (com.google.javascript.rhino.Node next; caseToRemove != c; caseToRemove = next) {
                    next = caseToRemove.getNext();
                    removeCase(n, caseToRemove);
                }
                com.google.javascript.rhino.Node prevCase = (lastNonRemovable == n.getFirstChild()) ? null : lastNonRemovable;
                if (isUselessCase(c, prevCase)) {
                    removeCase(n, c);
                    return null;
                }
                return c;
            } else {
                com.google.common.base.Preconditions.checkState(c.isCase());
                if (c.getLastChild().hasChildren() || mayHaveSideEffects(c.getFirstChild())) {
                    lastNonRemovable = c;
                }
            }
        }
        return null;
    }

    private void removeCase(com.google.javascript.rhino.Node switchNode, com.google.javascript.rhino.Node caseNode) {
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(caseNode);
        switchNode.removeChild(caseNode);
        reportCodeChange();
    }

    private boolean isUselessCase(com.google.javascript.rhino.Node caseNode, @javax.annotation.Nullable
    com.google.javascript.rhino.Node previousCase) {
        com.google.common.base.Preconditions.checkState((previousCase == null) || (previousCase.getNext() == caseNode));
        com.google.javascript.rhino.Node switchNode = caseNode.getParent();
        if ((switchNode.getLastChild() != caseNode) && (previousCase != null)) {
            com.google.javascript.rhino.Node previousBlock = previousCase.getLastChild();
            if ((!previousBlock.hasChildren()) || (!isExit(previousBlock.getLastChild()))) {
                return false;
            }
        }
        com.google.javascript.rhino.Node executingCase = caseNode;
        while (executingCase != null) {
            com.google.common.base.Preconditions.checkState(executingCase.isDefaultCase() || executingCase.isCase());
            com.google.common.base.Preconditions.checkState((caseNode == executingCase) || (!executingCase.isDefaultCase()));
            com.google.javascript.rhino.Node block = executingCase.getLastChild();
            com.google.common.base.Preconditions.checkState(block.isBlock());
            if (block.hasChildren()) {
                for (com.google.javascript.rhino.Node blockChild : block.children()) {
                    switch (blockChild.getType()) {
                        case com.google.javascript.rhino.Token.BREAK :
                            return blockChild.getFirstChild() == null;
                        case com.google.javascript.rhino.Token.VAR :
                            if (blockChild.hasOneChild() && (blockChild.getFirstChild().getFirstChild() == null)) {
                                continue;
                            }
                            return false;
                        default :
                            return false;
                    }
                }
            } else {
                executingCase = executingCase.getNext();
            }
        } 
        return true;
    }

    private boolean isExit(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            default :
                return false;
        }
    }

    private com.google.javascript.rhino.Node tryFoldComma(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        left = trySimplifyUnusedResult(left);
        if ((left == null) || (!mayHaveSideEffects(left))) {
            n.removeChild(right);
            parent.replaceChild(n, right);
            reportCodeChange();
            return right;
        }
        return n;
    }

    com.google.javascript.rhino.Node tryOptimizeBlock(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null;) {
            com.google.javascript.rhino.Node next = c.getNext();
            if ((!mayHaveSideEffects(c)) && (!c.isSyntheticBlock())) {
                n.removeChild(c);
                reportCodeChange();
            } else {
                tryOptimizeConditionalAfterAssign(c);
            }
            c = next;
        }
        if (n.isSyntheticBlock() || (n.getParent() == null)) {
            return n;
        }
        if (com.google.javascript.jscomp.NodeUtil.tryMergeBlock(n)) {
            reportCodeChange();
            return null;
        }
        return n;
    }

    private void tryOptimizeConditionalAfterAssign(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next = n.getNext();
        if (isSimpleAssignment(n) && isConditionalStatement(next)) {
            com.google.javascript.rhino.Node lhsAssign = getSimpleAssignmentName(n);
            com.google.javascript.rhino.Node condition = getConditionalStatementCondition(next);
            if ((lhsAssign.isName() && condition.isName()) && lhsAssign.getString().equals(condition.getString())) {
                com.google.javascript.rhino.Node rhsAssign = getSimpleAssignmentValue(n);
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(rhsAssign);
                if (value != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    com.google.javascript.rhino.Node replacementConditionNode = com.google.javascript.jscomp.NodeUtil.booleanNode(value.toBoolean(true));
                    condition.getParent().replaceChild(condition, replacementConditionNode);
                    reportCodeChange();
                }
            }
        }
    }

    private boolean isSimpleAssignment(com.google.javascript.rhino.Node n) {
        if (com.google.javascript.jscomp.NodeUtil.isExprAssign(n) && n.getFirstChild().getFirstChild().isName()) {
            return true;
        } else if ((n.isVar() && n.hasOneChild()) && (n.getFirstChild().getFirstChild() != null)) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node getSimpleAssignmentName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(isSimpleAssignment(n));
        if (com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return n.getFirstChild().getFirstChild();
        } else {
            return n.getFirstChild();
        }
    }

    private com.google.javascript.rhino.Node getSimpleAssignmentValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(isSimpleAssignment(n));
        return n.getFirstChild().getLastChild();
    }

    private boolean isConditionalStatement(com.google.javascript.rhino.Node n) {
        return (n != null) && (n.isIf() || isExprConditional(n));
    }

    private boolean isExprConditional(com.google.javascript.rhino.Node n) {
        if (n.isExprResult()) {
            switch (n.getFirstChild().getType()) {
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    return true;
            }
        }
        return false;
    }

    private com.google.javascript.rhino.Node getConditionalStatementCondition(com.google.javascript.rhino.Node n) {
        if (n.isIf()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(61).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectionEnds();
            }
            if (runtimeAngelicValue)
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);

        } else {
            com.google.common.base.Preconditions.checkState(isExprConditional(n));
            return n.getFirstChild().getFirstChild();
        }
    }

    private com.google.javascript.rhino.Node tryFoldIf(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isIf());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkNotNull(parent);
        int type = n.getType();
        com.google.javascript.rhino.Node cond = n.getFirstChild();
        com.google.javascript.rhino.Node thenBody = cond.getNext();
        com.google.javascript.rhino.Node elseBody = thenBody.getNext();
        if ((elseBody != null) && (!mayHaveSideEffects(elseBody))) {
            n.removeChild(elseBody);
            elseBody = null;
            reportCodeChange();
        }
        if ((!mayHaveSideEffects(thenBody)) && (elseBody != null)) {
            n.removeChild(elseBody);
            n.replaceChild(thenBody, elseBody);
            com.google.javascript.rhino.Node notCond = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NOT);
            n.replaceChild(cond, notCond);
            notCond.addChildToFront(cond);
            cond = notCond;
            thenBody = cond.getNext();
            elseBody = null;
            reportCodeChange();
        }
        if ((!mayHaveSideEffects(thenBody)) && (elseBody == null)) {
            if (mayHaveSideEffects(cond)) {
                n.removeChild(cond);
                com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.newExpr(cond);
                parent.replaceChild(n, replacement);
                reportCodeChange();
                return replacement;
            } else {
                com.google.javascript.jscomp.NodeUtil.removeChild(parent, n);
                reportCodeChange();
                return null;
            }
        }
        com.google.javascript.rhino.jstype.TernaryValue condValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond);
        if (condValue == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        if (mayHaveSideEffects(cond)) {
            boolean newConditionValue = condValue == com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            if ((!newConditionValue) && (elseBody == null)) {
                elseBody = com.google.javascript.rhino.IR.block().srcref(n);
                n.addChildToBack(elseBody);
            }
            com.google.javascript.rhino.Node newCond = com.google.javascript.jscomp.NodeUtil.booleanNode(newConditionValue);
            n.replaceChild(cond, newCond);
            com.google.javascript.rhino.Node branchToKeep = (newConditionValue) ? thenBody : elseBody;
            branchToKeep.addChildToFront(com.google.javascript.rhino.IR.exprResult(cond).srcref(cond));
            reportCodeChange();
            cond = newCond;
        }
        boolean condTrue = condValue.toBoolean(true);
        if (n.getChildCount() == 2) {
            com.google.common.base.Preconditions.checkState(type == com.google.javascript.rhino.Token.IF);
            if (condTrue) {
                com.google.javascript.rhino.Node thenStmt = n.getFirstChild().getNext();
                n.removeChild(thenStmt);
                parent.replaceChild(n, thenStmt);
                reportCodeChange();
                return thenStmt;
            } else {
                com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent, n);
                reportCodeChange();
                return null;
            }
        } else {
            com.google.javascript.rhino.Node trueBranch = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node falseBranch = trueBranch.getNext();
            com.google.javascript.rhino.Node branchToKeep = (condTrue) ? trueBranch : falseBranch;
            com.google.javascript.rhino.Node branchToRemove = (condTrue) ? falseBranch : trueBranch;
            com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(branchToRemove);
            n.removeChild(branchToKeep);
            parent.replaceChild(n, branchToKeep);
            reportCodeChange();
            return branchToKeep;
        }
    }

    private com.google.javascript.rhino.Node tryFoldHook(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isHook());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.javascript.rhino.Node cond = n.getFirstChild();
        com.google.javascript.rhino.Node thenBody = cond.getNext();
        com.google.javascript.rhino.Node elseBody = thenBody.getNext();
        com.google.javascript.rhino.jstype.TernaryValue condValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond);
        if (condValue == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            if (!areNodesEqualForInlining(thenBody, elseBody)) {
                return n;
            }
        }
        n.detachChildren();
        com.google.javascript.rhino.Node branchToKeep = (condValue.toBoolean(true)) ? thenBody : elseBody;
        com.google.javascript.rhino.Node replacement;
        if (mayHaveSideEffects(cond)) {
            replacement = com.google.javascript.rhino.IR.comma(cond, branchToKeep).srcref(n);
        } else {
            replacement = branchToKeep;
        }
        parent.replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    com.google.javascript.rhino.Node tryFoldWhile(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isWhile());
        com.google.javascript.rhino.Node cond = com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        if (com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
        com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);
        reportCodeChange();
        return null;
    }

    com.google.javascript.rhino.Node tryFoldFor(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isFor());
        if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
            return n;
        }
        com.google.javascript.rhino.Node init = n.getFirstChild();
        com.google.javascript.rhino.Node cond = init.getNext();
        com.google.javascript.rhino.Node increment = cond.getNext();
        if ((!init.isEmpty()) && (!init.isVar())) {
            init = trySimplifyUnusedResult(init, false);
        }
        if (!increment.isEmpty()) {
            increment = trySimplifyUnusedResult(increment, false);
        }
        if (!n.getFirstChild().isEmpty()) {
            return n;
        }
        if (com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
        if (!mayHaveSideEffects(cond)) {
            com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);
        } else {
            com.google.javascript.rhino.Node statement = com.google.javascript.rhino.IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
            n.getParent().replaceChild(n, statement);
        }
        reportCodeChange();
        return null;
    }

    com.google.javascript.rhino.Node tryFoldDo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isDo());
        com.google.javascript.rhino.Node cond = com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        if (com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        if (hasBreakOrContinue(n)) {
            return n;
        }
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));
        com.google.javascript.rhino.Node block = n.removeFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        parent.replaceChild(n, block);
        if (mayHaveSideEffects(cond)) {
            com.google.javascript.rhino.Node condStatement = com.google.javascript.rhino.IR.exprResult(cond.detachFromParent()).srcref(cond);
            parent.addChildAfter(condStatement, block);
        }
        reportCodeChange();
        return n;
    }

    boolean hasBreakOrContinue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.has(n, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>or(new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.BREAK), new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.CONTINUE)), com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    private void tryFoldForCondition(com.google.javascript.rhino.Node forCondition) {
        if (com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(forCondition) == com.google.javascript.rhino.jstype.TernaryValue.TRUE) {
            forCondition.getParent().replaceChild(forCondition, com.google.javascript.rhino.IR.empty());
            reportCodeChange();
        }
    }
}
[526126] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900652823
GPR[SSUN]-1659900652823
214953636
GPR[SPVATF]-1659900653046
GPR[EPVATF]-1659900654247
GPR[SPS]-1659900654247
[528221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:650.
GPR[EPS]-1659900654918
GPR[ESUN]-1659900654918
GPR[SSUN]-1659900654918
80988634
GPR[ESUN]-1659900655095
GPR[SSUN]-1659900655095
2433571
GPR[ESUN]-1659900655325
GPR[SSUN]-1659900655325
GPR[ESUN]-1659900655325
GPR[SSUN]-1659900655325
80988634
GPR[ESUN]-1659900655500
GPR[SSUN]-1659900655500
-1052579291
GPR[ESUN]-1659900655714
GPR[SSUN]-1659900655714
-1052579291
GPR[SPVATF]-1659900655930
GPR[EPVATF]-1659900656076
GPR[SPS]-1659900656076
[529848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules:105.
GPR[EPS]-1659900656545
GPR[ESUN]-1659900656545
GPR[SSUN]-1659900656545
GPR[ESUN]-1659900656545
GPR[SSUN]-1659900656545
GPR[ESUN]-1659900656545
GPR[SSUN]-1659900656545
GPR[ESUN]-1659900656545
GPR[SSUN]-1659900656545
944853999
GPR[SPVATF]-1659900656795
GPR[EPVATF]-1659900658017
GPR[SPS]-1659900658017
GPR[EPS]-1659900674688
GPR[ESUN]-1659900674688
GPR[SSUN]-1659900674688
944853999
GPR[ESUN]-1659900675061
GPR[SSUN]-1659900675061
944853999
GPR[SPVATF]-1659900675306
GPR[EPVATF]-1659900676543
GPR[SPS]-1659900676543
[550235] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeFoldConstants extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    static final com.google.javascript.jscomp.DiagnosticType INVALID_GETELEM_INDEX_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}");

    static final com.google.javascript.jscomp.DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType NEGATING_A_NON_NUMBER_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = com.google.javascript.jscomp.DiagnosticType.error("JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}");

    static final com.google.javascript.jscomp.DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = com.google.javascript.jscomp.DiagnosticType.error("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType FRACTIONAL_BITWISE_OPERAND = com.google.javascript.jscomp.DiagnosticType.error("JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}");

    private static final double MAX_FOLD_NUMBER = java.lang.Math.pow(2, 53);

    private final boolean late;

    PeepholeFoldConstants(boolean late) {
        this.late = late;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.NEW :
                return tryFoldCtorCall(subtree);
            case com.google.javascript.rhino.Token.TYPEOF :
                return tryFoldTypeof(subtree);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.BITNOT :
                tryReduceOperandsForOp(subtree);
                return tryFoldUnaryOperator(subtree);
            case com.google.javascript.rhino.Token.VOID :
                return tryReduceVoid(subtree);
            default :
                tryReduceOperandsForOp(subtree);
                return tryFoldBinaryOperator(subtree);
        }
    }

    private com.google.javascript.rhino.Node tryFoldBinaryOperator(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        if (left == null) {
            return subtree;
        }
        com.google.javascript.rhino.Node right = left.getNext();
        if (right == null) {
            return subtree;
        }
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.GETPROP :
                return tryFoldGetProp(subtree, left, right);
            case com.google.javascript.rhino.Token.GETELEM :
                return tryFoldGetElem(subtree, left, right);
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return tryFoldInstanceof(subtree, left, right);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return tryFoldAndOr(subtree, left, right);
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return tryFoldShift(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssign(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return tryUnfoldAssignOp(subtree, left, right);
            case com.google.javascript.rhino.Token.ADD :
                return tryFoldAdd(subtree, left, right);
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
                return tryFoldArithmeticOp(subtree, left, right);
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
                com.google.javascript.rhino.Node result = tryFoldArithmeticOp(subtree, left, right);
                if (result != subtree) {
                    return result;
                }
                return tryFoldLeftChildOp(subtree, left, right);
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return tryFoldComparison(subtree, left, right);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryReduceVoid(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        if ((!child.isNumber()) || (child.getDouble() != 0.0)) {
            if (!mayHaveSideEffects(n)) {
                n.replaceChild(child, com.google.javascript.rhino.IR.number(0));
                reportCodeChange();
            }
        }
        return n;
    }

    private void tryReduceOperandsForOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                com.google.javascript.rhino.Node left = n.getFirstChild();
                com.google.javascript.rhino.Node right = n.getLastChild();
                if ((!com.google.javascript.jscomp.NodeUtil.mayBeString(left)) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(right))) {
                    tryConvertOperandsToNumber(n);
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                tryConvertToNumber(n.getLastChild());
                break;
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                tryConvertOperandsToNumber(n);
                break;
        }
    }

    private void tryConvertOperandsToNumber(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next;
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = next) {
            next = c.getNext();
            tryConvertToNumber(c);
        }
    }

    private void tryConvertToNumber(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NUMBER :
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.COMMA :
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.HOOK :
                tryConvertToNumber(n.getChildAtIndex(1));
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.NAME :
                if (!com.google.javascript.jscomp.NodeUtil.isUndefined(n)) {
                    return;
                }
                break;
        }
        java.lang.Double result = com.google.javascript.jscomp.NodeUtil.getNumberValue(n);
        if (result == null) {
            return;
        }
        double value = result;
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.numberNode(value, n);
        if (replacement.isEquivalentTo(n)) {
            return;
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
    }

    private com.google.javascript.rhino.Node tryFoldTypeof(com.google.javascript.rhino.Node originalTypeofNode) {
        com.google.common.base.Preconditions.checkArgument(originalTypeofNode.isTypeOf());
        com.google.javascript.rhino.Node argumentNode = originalTypeofNode.getFirstChild();
        if ((argumentNode == null) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(argumentNode, true))) {
            return originalTypeofNode;
        }
        java.lang.String typeNameString = null;
        switch (argumentNode.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                typeNameString = "function";
                break;
            case com.google.javascript.rhino.Token.STRING :
                typeNameString = "string";
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                typeNameString = "number";
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                typeNameString = "boolean";
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.ARRAYLIT :
                typeNameString = "object";
                break;
            case com.google.javascript.rhino.Token.VOID :
                typeNameString = "undefined";
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ("undefined".equals(argumentNode.getString())) {
                    typeNameString = "undefined";
                }
                break;
        }
        if (typeNameString != null) {
            com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.IR.string(typeNameString);
            originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);
            reportCodeChange();
            return newNode;
        }
        return originalTypeofNode;
    }

    private com.google.javascript.rhino.Node tryFoldUnaryOperator(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.hasOneChild());
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        if (left == null) {
            return n;
        }
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(left);
        if (leftVal == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NOT :
                if (late && left.isNumber()) {
                    double numValue = left.getDouble();
                    if ((numValue == 0) || (numValue == 1)) {
                        return n;
                    }
                }
                com.google.javascript.rhino.Node replacementNode = com.google.javascript.jscomp.NodeUtil.booleanNode(!leftVal.toBoolean(true));
                parent.replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            case com.google.javascript.rhino.Token.POS :
                if (com.google.javascript.jscomp.NodeUtil.isNumericResult(left)) {
                    parent.replaceChild(n, left.detachFromParent());
                    reportCodeChange();
                    return left;
                }
                return n;
            case com.google.javascript.rhino.Token.NEG :
                try {
                    if (left.isName()) {
                        if (left.getString().equals("Infinity")) {
                            return n;
                        } else if (left.getString().equals("NaN")) {
                            n.removeChild(left);
                            parent.replaceChild(n, left);
                            reportCodeChange();
                            return left;
                        }
                    }
                    double negNum = -left.getDouble();
                    com.google.javascript.rhino.Node negNumNode = com.google.javascript.rhino.IR.number(negNum);
                    parent.replaceChild(n, negNumNode);
                    reportCodeChange();
                    return negNumNode;
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            case com.google.javascript.rhino.Token.BITNOT :
                try {
                    double val = left.getDouble();
                    if ((val >= java.lang.Integer.MIN_VALUE) && (val <= java.lang.Integer.MAX_VALUE)) {
                        int intVal = ((int) (val));
                        if (intVal == val) {
                            com.google.javascript.rhino.Node notIntValNode = com.google.javascript.rhino.IR.number(~intVal);
                            parent.replaceChild(n, notIntValNode);
                            reportCodeChange();
                            return notIntValNode;
                        } else {
                            error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                            return n;
                        }
                    } else {
                        error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                        return n;
                    }
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            default :
                return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldInstanceof(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isInstanceOf());
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true) && (!mayHaveSideEffects(right))) {
            com.google.javascript.rhino.Node replacementNode = null;
            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(left)) {
                replacementNode = com.google.javascript.rhino.IR.falseNode();
            } else if (right.isName() && "Object".equals(right.getString())) {
                replacementNode = com.google.javascript.rhino.IR.trueNode();
            }
            if (replacementNode != null) {
                n.getParent().replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssign(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isAssign());
        if (!late) {
            return n;
        }
        if ((!right.hasChildren()) || (right.getFirstChild().getNext() != right.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        com.google.javascript.rhino.Node newRight;
        if (areNodesEqualForInlining(left, right.getFirstChild())) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(65).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.this.late",com.google.javascript.jscomp.PeepholeFoldConstants.this.late);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectionEnds();
            }
            if (runtimeAngelicValue)
                newRight = right.getLastChild();

        } else if (com.google.javascript.jscomp.NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) {
            newRight = right.getFirstChild();
        } else {
            return n;
        }
        int newType = -1;
        switch (right.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                newType = com.google.javascript.rhino.Token.ASSIGN_ADD;
                break;
            case com.google.javascript.rhino.Token.BITAND :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITAND;
                break;
            case com.google.javascript.rhino.Token.BITOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITOR;
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITXOR;
                break;
            case com.google.javascript.rhino.Token.DIV :
                newType = com.google.javascript.rhino.Token.ASSIGN_DIV;
                break;
            case com.google.javascript.rhino.Token.LSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_LSH;
                break;
            case com.google.javascript.rhino.Token.MOD :
                newType = com.google.javascript.rhino.Token.ASSIGN_MOD;
                break;
            case com.google.javascript.rhino.Token.MUL :
                newType = com.google.javascript.rhino.Token.ASSIGN_MUL;
                break;
            case com.google.javascript.rhino.Token.RSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_RSH;
                break;
            case com.google.javascript.rhino.Token.SUB :
                newType = com.google.javascript.rhino.Token.ASSIGN_SUB;
                break;
            case com.google.javascript.rhino.Token.URSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_URSH;
                break;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(newType, left.detachFromParent(), newRight.detachFromParent());
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.Node tryUnfoldAssignOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (late) {
            return n;
        }
        if ((!n.hasChildren()) || (n.getFirstChild().getNext() != n.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        int op = com.google.javascript.jscomp.NodeUtil.getOpFromAssignmentOp(n);
        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.assign(left.detachFromParent(), new com.google.javascript.rhino.Node(op, left.cloneTree(), right.detachFromParent()).srcref(n));
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    private com.google.javascript.rhino.Node tryFoldAndOr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node result = null;
        int type = n.getType();
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(left);
        if (leftVal != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            boolean lval = leftVal.toBoolean(true);
            if ((lval && (type == com.google.javascript.rhino.Token.OR)) || ((!lval) && (type == com.google.javascript.rhino.Token.AND))) {
                result = left;
            } else if (!mayHaveSideEffects(left)) {
                result = right;
            }
        }
        if (result != null) {
            n.removeChild(result);
            parent.replaceChild(n, result);
            reportCodeChange();
            return result;
        } else {
            return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldChildAddString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false) && left.isAdd()) {
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            if (lr.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(lr);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
                if ((leftString != null) && (rightString != null)) {
                    left.removeChild(ll);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(left, ll);
                    n.replaceChild(right, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && right.isAdd()) {
            com.google.javascript.rhino.Node rl = right.getFirstChild();
            com.google.javascript.rhino.Node rr = right.getLastChild();
            if (rl.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(rl);
                if ((leftString != null) && (rightString != null)) {
                    right.removeChild(rr);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(right, rr);
                    n.replaceChild(left, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAddConstantString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isString() || right.isString()) {
            java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
            java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
            if ((leftString != null) && (rightString != null)) {
                com.google.javascript.rhino.Node newStringNode = com.google.javascript.rhino.IR.string(leftString + rightString);
                n.getParent().replaceChild(n, newStringNode);
                reportCodeChange();
                return newStringNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldArithmeticOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node result = performArithmeticOp(n.getType(), left, right);
        if (result != null) {
            result.copyInformationFromForTree(n);
            n.getParent().replaceChild(n, result);
            reportCodeChange();
            return result;
        }
        return n;
    }

    private com.google.javascript.rhino.Node performArithmeticOp(int opType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if ((opType == com.google.javascript.rhino.Token.ADD) && (com.google.javascript.jscomp.NodeUtil.mayBeString(left, false) || com.google.javascript.jscomp.NodeUtil.mayBeString(right, false))) {
            return null;
        }
        double result;
        java.lang.Double lValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (lValObj == null) {
            return null;
        }
        java.lang.Double rValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rValObj == null) {
            return null;
        }
        double lval = lValObj;
        double rval = rValObj;
        switch (opType) {
            case com.google.javascript.rhino.Token.BITAND :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) & com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) | com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) ^ com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.ADD :
                result = lval + rval;
                break;
            case com.google.javascript.rhino.Token.SUB :
                result = lval - rval;
                break;
            case com.google.javascript.rhino.Token.MUL :
                result = lval * rval;
                break;
            case com.google.javascript.rhino.Token.MOD :
                if (rval == 0) {
                    return null;
                }
                result = lval % rval;
                break;
            case com.google.javascript.rhino.Token.DIV :
                if (rval == 0) {
                    return null;
                }
                result = lval / rval;
                break;
            default :
                throw new java.lang.Error("Unexpected arithmetic operator");
        }
        if (((((java.lang.String.valueOf(result).length() <= ((java.lang.String.valueOf(lval).length() + java.lang.String.valueOf(rval).length()) + 1)) && (java.lang.Math.abs(result) <= com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER)) || java.lang.Double.isNaN(result)) || (result == java.lang.Double.POSITIVE_INFINITY)) || (result == java.lang.Double.NEGATIVE_INFINITY)) {
            return com.google.javascript.jscomp.NodeUtil.numberNode(result, null);
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryFoldLeftChildOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        int opType = n.getType();
        com.google.common.base.Preconditions.checkState((com.google.javascript.jscomp.NodeUtil.isAssociative(opType) && com.google.javascript.jscomp.NodeUtil.isCommutative(opType)) || n.isAdd());
        com.google.common.base.Preconditions.checkState((!n.isAdd()) || (!com.google.javascript.jscomp.NodeUtil.mayBeString(n)));
        java.lang.Double rightValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if ((rightValObj != null) && (left.getType() == opType)) {
            com.google.common.base.Preconditions.checkState(left.getChildCount() == 2);
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            com.google.javascript.rhino.Node valueToCombine = ll;
            com.google.javascript.rhino.Node replacement = performArithmeticOp(opType, valueToCombine, right);
            if (replacement == null) {
                valueToCombine = lr;
                replacement = performArithmeticOp(opType, valueToCombine, right);
            }
            if (replacement != null) {
                left.removeChild(valueToCombine);
                n.replaceChild(left, left.removeFirstChild());
                replacement.copyInformationFromForTree(right);
                n.replaceChild(right, replacement);
                reportCodeChange();
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAdd(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(node.isAdd());
        if (com.google.javascript.jscomp.NodeUtil.mayBeString(node, true)) {
            if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false)) {
                return tryFoldAddConstantString(node, left, right);
            } else {
                return tryFoldChildAddString(node, left, right);
            }
        } else {
            com.google.javascript.rhino.Node result = tryFoldArithmeticOp(node, left, right);
            if (result != node) {
                return result;
            }
            return tryFoldLeftChildOp(node, left, right);
        }
    }

    private com.google.javascript.rhino.Node tryFoldShift(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isNumber() && right.isNumber()) {
            double result;
            double lval = left.getDouble();
            double rval = right.getDouble();
            if (!((lval >= java.lang.Integer.MIN_VALUE) && (lval <= java.lang.Integer.MAX_VALUE))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                return n;
            }
            if (!((rval >= 0) && (rval < 32))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
                return n;
            }
            int lvalInt = ((int) (lval));
            if (lvalInt != lval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                return n;
            }
            int rvalInt = ((int) (rval));
            if (rvalInt != rval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, right);
                return n;
            }
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.LSH :
                    result = lvalInt << rvalInt;
                    break;
                case com.google.javascript.rhino.Token.RSH :
                    result = lvalInt >> rvalInt;
                    break;
                case com.google.javascript.rhino.Token.URSH :
                    long lvalLong = lvalInt & 0xffffffffL;
                    result = lvalLong >>> rvalInt;
                    break;
                default :
                    throw new java.lang.AssertionError("Unknown shift operator: " + com.google.javascript.rhino.Token.name(n.getType()));
            }
            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.IR.number(result);
            n.getParent().replaceChild(n, newNumber);
            reportCodeChange();
            return newNumber;
        }
        return n;
    }

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.rhino.Node tryFoldComparison(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        boolean leftLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true);
        boolean rightLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, true);
        if ((!leftLiteral) || (!rightLiteral)) {
            if ((n.getType() != com.google.javascript.rhino.Token.GT) && (n.getType() != com.google.javascript.rhino.Token.LT)) {
                return n;
            }
        }
        int op = n.getType();
        boolean result;
        boolean undefinedRight = com.google.javascript.jscomp.NodeUtil.isUndefined(right) && rightLiteral;
        boolean nullRight = right.isNull();
        int lhType = getNormalizedNodeType(left);
        int rhType = getNormalizedNodeType(right);
        switch (lhType) {
            case com.google.javascript.rhino.Token.VOID :
                if (!leftLiteral) {
                    return n;
                } else if (!rightLiteral) {
                    return n;
                } else {
                    result = compareToUndefined(right, op);
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                if (rightLiteral && isEqualityOp(op)) {
                    result = compareToNull(right, op);
                    break;
                }
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (((rhType != com.google.javascript.rhino.Token.TRUE) && (rhType != com.google.javascript.rhino.Token.FALSE)) && (rhType != com.google.javascript.rhino.Token.NULL)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = lhType == rhType;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = lhType != rhType;
                        break;
                    case com.google.javascript.rhino.Token.GE :
                    case com.google.javascript.rhino.Token.LE :
                    case com.google.javascript.rhino.Token.GT :
                    case com.google.javascript.rhino.Token.LT :
                        java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                        if (compareResult != null) {
                            result = compareResult;
                        } else {
                            return n;
                        }
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.THIS :
                if (!right.isThis()) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = true;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.STRING != right.getType()) {
                    return n;
                }
                com.google.javascript.rhino.jstype.TernaryValue ternary = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        ternary = areStringsEqual(left.getString(), right.getString());
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        ternary = areStringsEqual(left.getString(), right.getString()).not();
                        break;
                }
                if (ternary == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return n;
                }
                result = ternary.toBoolean(true);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.NUMBER != right.getType()) {
                    return n;
                }
                java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                if (compareResult != null) {
                    result = compareResult;
                } else {
                    return null;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                if (leftLiteral && undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (rightLiteral) {
                    boolean undefinedLeft = left.getString().equals("undefined");
                    if (undefinedLeft) {
                        result = compareToUndefined(right, op);
                        break;
                    }
                    if ((leftLiteral && nullRight) && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                if (com.google.javascript.rhino.Token.NAME != right.getType()) {
                    return n;
                }
                java.lang.String ln = left.getString();
                java.lang.String rn = right.getString();
                if (!ln.equals(rn)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.LT :
                    case com.google.javascript.rhino.Token.GT :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.NEG :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.FUNCTION :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.booleanNode(result);
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.jstype.TernaryValue areStringsEqual(java.lang.String a, java.lang.String b) {
        if ((a.indexOf('\u000b') != (-1)) || (b.indexOf('\u000b') != (-1))) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        } else {
            return a.equals(b) ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.NOT) {
            com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
            switch (value) {
                case TRUE :
                    return com.google.javascript.rhino.Token.TRUE;
                case FALSE :
                    return com.google.javascript.rhino.Token.FALSE;
            }
        }
        return type;
    }

    private java.lang.Boolean compareAsNumbers(int op, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        java.lang.Double leftValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (leftValue == null) {
            return null;
        }
        java.lang.Double rightValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rightValue == null) {
            return null;
        }
        double lv = leftValue;
        double rv = rightValue;
        java.lang.Boolean result;
        switch (op) {
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.EQ :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv == rv;
                break;
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.NE :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv != rv;
                break;
            case com.google.javascript.rhino.Token.LE :
                result = lv <= rv;
                break;
            case com.google.javascript.rhino.Token.LT :
                result = lv < rv;
                break;
            case com.google.javascript.rhino.Token.GE :
                result = lv >= rv;
                break;
            case com.google.javascript.rhino.Token.GT :
                result = lv > rv;
                break;
            default :
                return null;
        }
        return result;
    }

    private boolean compareToUndefined(com.google.javascript.rhino.Node value, int op) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true));
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueUndefined;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueUndefined;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
                return false;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private boolean isEqualityOp(int op) {
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return true;
        }
        return false;
    }

    private boolean compareToNull(com.google.javascript.rhino.Node value, int op) {
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueNull;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueNull;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private com.google.javascript.rhino.Node tryFoldCtorCall(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        if (inForcedStringContext(n)) {
            return tryFoldInForcedStringContext(n);
        }
        return n;
    }

    private boolean inForcedStringContext(com.google.javascript.rhino.Node n) {
        if (n.getParent().isGetElem() && (n.getParent().getLastChild() == n)) {
            return true;
        }
        if (n.getParent().isAdd()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldInForcedStringContext(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        com.google.javascript.rhino.Node objectType = n.getFirstChild();
        if (!objectType.isName()) {
            return n;
        }
        if (objectType.getString().equals("String")) {
            com.google.javascript.rhino.Node value = objectType.getNext();
            java.lang.String stringValue = null;
            if (value == null) {
                stringValue = "";
            } else {
                if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return n;
                }
                stringValue = com.google.javascript.jscomp.NodeUtil.getStringValue(value);
            }
            if (stringValue == null) {
                return n;
            }
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node newString = com.google.javascript.rhino.IR.string(stringValue);
            parent.replaceChild(n, newString);
            newString.copyInformationFrom(parent);
            reportCodeChange();
            return newString;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetElem(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetElem());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (left.isArrayLit()) {
            return tryFoldArrayAccess(n, left, right);
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetProp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetProp());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (right.isString() && right.getString().equals("length")) {
            int knownLength = -1;
            switch (left.getType()) {
                case com.google.javascript.rhino.Token.ARRAYLIT :
                    if (mayHaveSideEffects(left)) {
                        return n;
                    }
                    knownLength = left.getChildCount();
                    break;
                case com.google.javascript.rhino.Token.STRING :
                    knownLength = left.getString().length();
                    break;
                default :
                    return n;
            }
            com.google.common.base.Preconditions.checkState(knownLength != (-1));
            com.google.javascript.rhino.Node lengthNode = com.google.javascript.rhino.IR.number(knownLength);
            n.getParent().replaceChild(n, lengthNode);
            reportCodeChange();
            return lengthNode;
        }
        return n;
    }

    private boolean isAssignmentTarget(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || parent.isInc()) || parent.isDec()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldArrayAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (isAssignmentTarget(n)) {
            return n;
        }
        if (!right.isNumber()) {
            return n;
        }
        double index = right.getDouble();
        int intIndex = ((int) (index));
        if (intIndex != index) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);
            return n;
        }
        if (intIndex < 0) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        com.google.javascript.rhino.Node elem = left.getFirstChild();
        for (int i = 0; (elem != null) && (i < intIndex); i++) {
            elem = elem.getNext();
        }
        if (elem == null) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        if (elem.isEmpty()) {
            elem = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(elem);
        } else {
            left.removeChild(elem);
        }
        n.getParent().replaceChild(n, elem);
        reportCodeChange();
        return elem;
    }

    private com.google.javascript.rhino.Node tryFoldObjectPropAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isGet(n));
        if ((!left.isObjectLit()) || (!right.isString())) {
            return n;
        }
        if (isAssignmentTarget(n)) {
            return n;
        }
        com.google.javascript.rhino.Node key = null;
        com.google.javascript.rhino.Node value = null;
        for (com.google.javascript.rhino.Node c = left.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getString().equals(right.getString())) {
                switch (c.getType()) {
                    case com.google.javascript.rhino.Token.SETTER_DEF :
                        continue;
                    case com.google.javascript.rhino.Token.GETTER_DEF :
                    case com.google.javascript.rhino.Token.STRING_KEY :
                        if ((value != null) && mayHaveSideEffects(value)) {
                            return n;
                        }
                        key = c;
                        value = key.getFirstChild();
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            } else if (mayHaveSideEffects(c.getFirstChild())) {
                return n;
            }
        }
        if (value == null) {
            return n;
        }
        if (value.isFunction() && com.google.javascript.jscomp.NodeUtil.referencesThis(value)) {
            return n;
        }
        com.google.javascript.rhino.Node replacement = value.detachFromParent();
        if (key.isGetterDef()) {
            replacement = com.google.javascript.rhino.IR.call(replacement);
            replacement.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return n;
    }
}
[550235] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900676932
GPR[SSUN]-1659900676932
-1009376944
GPR[SPVATF]-1659900677141
GPR[EPVATF]-1659900678416
GPR[SPS]-1659900678416
[552279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckAccidentalSemicolon:50.
GPR[EPS]-1659900678976
GPR[ESUN]-1659900678976
GPR[SSUN]-1659900678976
-1009376944
GPR[SPVATF]-1659900679180
GPR[EPVATF]-1659900680509
GPR[SPS]-1659900680509
[554096] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class CheckAccidentalSemicolon extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
    static final com.google.javascript.jscomp.DiagnosticType SUSPICIOUS_SEMICOLON = com.google.javascript.jscomp.DiagnosticType.warning("JSC_SUSPICIOUS_SEMICOLON", "If this if/for/while really shouldn't have a body, use {}");

    private final com.google.javascript.jscomp.CheckLevel level;

    CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel level) {
        this.level = level;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node child;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(67).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.google.javascript.jscomp.CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON",com.google.javascript.jscomp.CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("com.google.javascript.jscomp.CheckAccidentalSemicolon.this.level",com.google.javascript.jscomp.CheckAccidentalSemicolon.this.level);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionEnds();
                }
                if (runtimeAngelicValue)
                    child = n.getFirstChild().getNext();

                break;
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.FOR :
                child = com.google.javascript.jscomp.NodeUtil.getLoopCodeBlock(n);
                break;
            default :
                return;
        }
        for (; child != null; child = child.getNext()) {
            if (child.isBlock() && (!child.hasChildren())) {
                if (child.wasEmptyNode()) {
                    t.getCompiler().report(t.makeError(n, level, com.google.javascript.jscomp.CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON));
                }
            }
        }
    }
}
[554096] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900680793
GPR[SSUN]-1659900680793
2433571
GPR[SPVATF]-1659900681029
GPR[EPVATF]-1659900682401
GPR[SPS]-1659900682402
[556434] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1038.
GPR[EPS]-1659900683132
GPR[ESUN]-1659900683132
GPR[SSUN]-1659900683132
2433571
GPR[SPVATF]-1659900683395
GPR[EPVATF]-1659900684850
GPR[SPS]-1659900684850
[565197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1031.
GPR[EPS]-1659900691894
GPR[ESUN]-1659900691894
GPR[SSUN]-1659900691894
-1052579291
GPR[ESUN]-1659900692120
GPR[SSUN]-1659900692120
-534884160
GPR[ESUN]-1659900692498
GPR[SSUN]-1659900692498
-534884160
GPR[SPVATF]-1659900692829
GPR[EPVATF]-1659900694851
GPR[SPS]-1659900694851
[569086] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1490.
GPR[EPS]-1659900695783
GPR[ESUN]-1659900695783
GPR[SSUN]-1659900695783
-534884160
GPR[SPVATF]-1659900696118
GPR[EPVATF]-1659900697302
GPR[SPS]-1659900697302
[571499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1489.
GPR[EPS]-1659900698196
GPR[ESUN]-1659900698196
GPR[SSUN]-1659900698196
-534884160
GPR[ESUN]-1659900698528
GPR[SSUN]-1659900698528
-534884160
GPR[SPVATF]-1659900698856
GPR[EPVATF]-1659900700048
GPR[SPS]-1659900700048
[574227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1487.
GPR[EPS]-1659900700924
GPR[ESUN]-1659900700945
GPR[SSUN]-1659900700945
-534884160
GPR[SPVATF]-1659900701279
GPR[EPVATF]-1659900702482
GPR[SPS]-1659900702482
[576639] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1485.
GPR[EPS]-1659900703336
GPR[ESUN]-1659900703336
GPR[SSUN]-1659900703336
-534884160
GPR[SPVATF]-1659900703668
GPR[EPVATF]-1659900704874
GPR[SPS]-1659900704874
[579034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1484.
GPR[EPS]-1659900705731
GPR[ESUN]-1659900705731
GPR[SSUN]-1659900705731
-534884160
GPR[ESUN]-1659900706064
GPR[SSUN]-1659900706064
-534884160
GPR[ESUN]-1659900706398
GPR[SSUN]-1659900706398
-534884160
GPR[SPVATF]-1659900706725
GPR[EPVATF]-1659900707929
GPR[SPS]-1659900707929
[582088] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1473.
GPR[EPS]-1659900708785
GPR[ESUN]-1659900708785
GPR[SSUN]-1659900708785
-534884160
GPR[SPVATF]-1659900709132
GPR[EPVATF]-1659900710344
GPR[SPS]-1659900710344
[584522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1472.
GPR[EPS]-1659900711219
GPR[ESUN]-1659900711219
GPR[SSUN]-1659900711219
-534884160
GPR[SPVATF]-1659900711547
GPR[EPVATF]-1659900712744
GPR[SPS]-1659900712744
[586894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1471.
GPR[EPS]-1659900713591
GPR[ESUN]-1659900713591
GPR[SSUN]-1659900713591
-534884160
GPR[SPVATF]-1659900713916
GPR[EPVATF]-1659900715138
GPR[SPS]-1659900715138
[589292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1469.
GPR[EPS]-1659900715989
GPR[ESUN]-1659900715989
GPR[SSUN]-1659900715989
-534884160
GPR[SPVATF]-1659900716318
GPR[EPVATF]-1659900717540
GPR[SPS]-1659900717540
[591700] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1468.
GPR[EPS]-1659900718397
GPR[ESUN]-1659900718397
GPR[SSUN]-1659900718397
-534884160
GPR[SPVATF]-1659900718732
GPR[EPVATF]-1659900720008
GPR[SPS]-1659900720008
[594177] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1467.
GPR[EPS]-1659900720874
GPR[SPVATF]-1659900720875
GPR[EPVATF]-1659900722124
GPR[SPS]-1659900722124
[596281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1467.
GPR[EPS]-1659900722978
GPR[ESUN]-1659900722978
GPR[SSUN]-1659900722978
-534884160
GPR[ESUN]-1659900723305
GPR[SSUN]-1659900723305
-534884160
GPR[SPVATF]-1659900723627
GPR[EPVATF]-1659900728922
GPR[SPS]-1659900728922
[603098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1461.
GPR[EPS]-1659900729795
GPR[ESUN]-1659900729795
GPR[SSUN]-1659900729795
-534884160
GPR[SPVATF]-1659900730132
GPR[EPVATF]-1659900731261
GPR[SPS]-1659900731261
[605418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1460.
GPR[EPS]-1659900732115
GPR[ESUN]-1659900732115
GPR[SSUN]-1659900732115
-534884160
GPR[SPVATF]-1659900732439
GPR[EPVATF]-1659900733590
GPR[SPS]-1659900733590
[607751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1459.
GPR[EPS]-1659900734448
GPR[SPVATF]-1659900734449
GPR[EPVATF]-1659900735623
GPR[SPS]-1659900735623
[609906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1459.
GPR[EPS]-1659900736603
GPR[ESUN]-1659900736603
GPR[SSUN]-1659900736604
-534884160
GPR[ESUN]-1659900736933
GPR[SSUN]-1659900736933
-534884160
GPR[SPVATF]-1659900737263
GPR[EPVATF]-1659900738464
GPR[SPS]-1659900738464
[612615] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1457.
GPR[EPS]-1659900739312
GPR[ESUN]-1659900739312
GPR[SSUN]-1659900739312
-534884160
GPR[ESUN]-1659900739639
GPR[SSUN]-1659900739639
1350153804
GPR[ESUN]-1659900739853
GPR[SSUN]-1659900739853
1350153804
GPR[SPVATF]-1659900740068
GPR[EPVATF]-1659900741264
GPR[SPS]-1659900741264
[615180] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:333.
GPR[EPS]-1659900741877
GPR[ESUN]-1659900741877
GPR[SSUN]-1659900741877
1350153804
GPR[ESUN]-1659900742101
GPR[SSUN]-1659900742101
1350153804
GPR[SPVATF]-1659900742314
GPR[EPVATF]-1659900743526
GPR[SPS]-1659900743526
[617412] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:189.
GPR[EPS]-1659900744109
GPR[ESUN]-1659900744109
GPR[SSUN]-1659900744109
1350153804
GPR[SPVATF]-1659900744330
GPR[EPVATF]-1659900745535
GPR[SPS]-1659900745535
[619428] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:188.
GPR[EPS]-1659900746125
GPR[ESUN]-1659900746125
GPR[SSUN]-1659900746125
-1052579291
GPR[SPVATF]-1659900746345
GPR[EPVATF]-1659900747585
GPR[SPS]-1659900747585
[621480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:185.
GPR[EPS]-1659900748177
GPR[ESUN]-1659900748177
GPR[SSUN]-1659900748177
-1052579291
GPR[SPVATF]-1659900748395
GPR[EPVATF]-1659900749638
GPR[SPS]-1659900749638
[623524] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:184.
GPR[EPS]-1659900750221
GPR[ESUN]-1659900750221
GPR[SSUN]-1659900750221
-1052579291
GPR[ESUN]-1659900750439
GPR[SSUN]-1659900750439
-1052579291
GPR[SPVATF]-1659900750653
GPR[EPVATF]-1659900751890
GPR[SPS]-1659900751890
[625770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessCommonJSModules$ProcessCommonJsModulesCallback:182.
GPR[EPS]-1659900752467
GPR[ESUN]-1659900752467
GPR[SSUN]-1659900752467
-1052579291
GPR[ESUN]-1659900752685
GPR[SSUN]-1659900752685
-1217609450
GPR[ESUN]-1659900752889
GPR[SSUN]-1659900752889
-1217609450
GPR[SPVATF]-1659900753091
GPR[EPVATF]-1659900754323
GPR[SPS]-1659900754323
[628191] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModule:115.
GPR[EPS]-1659900754888
GPR[ESUN]-1659900754888
GPR[SSUN]-1659900754888
-1217609450
GPR[SPVATF]-1659900755093
GPR[EPVATF]-1659900756340
GPR[SPS]-1659900756340
[630237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModule:114.
GPR[EPS]-1659900756934
GPR[ESUN]-1659900756934
GPR[SSUN]-1659900756934
2433571
GPR[ESUN]-1659900757171
GPR[SSUN]-1659900757171
2433571
GPR[ESUN]-1659900757402
GPR[SSUN]-1659900757402
2433571
GPR[SPVATF]-1659900757630
GPR[EPVATF]-1659900758953
GPR[SPS]-1659900758953
[632968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1035.
GPR[EPS]-1659900759665
GPR[ESUN]-1659900759665
GPR[SSUN]-1659900759665
2433571
GPR[SPVATF]-1659900759897
GPR[EPVATF]-1659900766377
GPR[SPS]-1659900766377
[640421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1034.
GPR[EPS]-1659900767118
GPR[ESUN]-1659900767118
GPR[SSUN]-1659900767118
2433571
GPR[SPVATF]-1659900767348
GPR[EPVATF]-1659900768553
GPR[SPS]-1659900768553
[642577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1033.
GPR[EPS]-1659900769274
GPR[ESUN]-1659900769274
GPR[SSUN]-1659900769274
2433571
GPR[SPVATF]-1659900769508
GPR[EPVATF]-1659900770752
GPR[SPS]-1659900770753
[644768] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1030.
GPR[EPS]-1659900771465
GPR[ESUN]-1659900771465
GPR[SSUN]-1659900771465
2433571
GPR[ESUN]-1659900771703
GPR[SSUN]-1659900771703
2433571
GPR[SPVATF]-1659900771933
GPR[EPVATF]-1659900773210
GPR[SPS]-1659900773210
[647227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659900773924
GPR[ESUN]-1659900773924
GPR[SSUN]-1659900773924
2433571
GPR[ESUN]-1659900774155
GPR[SSUN]-1659900774155
2433571
GPR[SPVATF]-1659900774383
GPR[EPVATF]-1659900775615
GPR[SPS]-1659900775615
[649669] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659900776366
GPR[ESUN]-1659900776366
GPR[SSUN]-1659900776366
2433571
GPR[ESUN]-1659900776605
GPR[SSUN]-1659900776605
2433571
GPR[ESUN]-1659900776840
GPR[SSUN]-1659900776840
2433571
GPR[SPVATF]-1659900777073
GPR[EPVATF]-1659900778286
GPR[SPS]-1659900778286
[652353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:969.
GPR[EPS]-1659900779050
GPR[ESUN]-1659900779050
GPR[SSUN]-1659900779050
2433571
GPR[SPVATF]-1659900779288
GPR[EPVATF]-1659900780530
GPR[SPS]-1659900780530
[654565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659900781263
GPR[ESUN]-1659900781263
GPR[SSUN]-1659900781263
2433571
GPR[SPVATF]-1659900781495
GPR[EPVATF]-1659900782787
GPR[SPS]-1659900782787
[656880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:994.
GPR[EPS]-1659900783577
GPR[ESUN]-1659900783577
GPR[SSUN]-1659900783577
2433571
GPR[SPVATF]-1659900783808
GPR[EPVATF]-1659900785095
GPR[SPS]-1659900785095
[659166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:993.
GPR[EPS]-1659900785863
GPR[ESUN]-1659900785863
GPR[SSUN]-1659900785863
2433571
GPR[SPVATF]-1659900786094
GPR[EPVATF]-1659900787415
GPR[SPS]-1659900787415
[661317] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(105).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[661318] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900788015
GPR[SSUN]-1659900788015
2433571
GPR[SPVATF]-1659900788250
GPR[EPVATF]-1659900789581
GPR[SPS]-1659900789581
[663460] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(106).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(106).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[663461] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900790158
GPR[SSUN]-1659900790158
2433571
GPR[SPVATF]-1659900790393
GPR[EPVATF]-1659900791735
GPR[SPS]-1659900791735
[665833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659900792530
GPR[ESUN]-1659900792530
GPR[SSUN]-1659900792530
2433571
GPR[SPVATF]-1659900792760
GPR[EPVATF]-1659900794133
GPR[SPS]-1659900794133
[668205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659900794902
GPR[ESUN]-1659900794902
GPR[SSUN]-1659900794902
2433571
GPR[SPVATF]-1659900795136
GPR[EPVATF]-1659900796552
GPR[SPS]-1659900796552
[670761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659900797459
GPR[ESUN]-1659900797459
GPR[SSUN]-1659900797459
2433571
GPR[ESUN]-1659900797688
GPR[SSUN]-1659900797688
2433571
GPR[ESUN]-1659900797916
GPR[SSUN]-1659900797916
2433571
GPR[SPVATF]-1659900798145
GPR[EPVATF]-1659900799629
GPR[SPS]-1659900799629
[673710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:975.
GPR[EPS]-1659900800407
GPR[ESUN]-1659900800407
GPR[SSUN]-1659900800407
2433571
GPR[SPVATF]-1659900800639
GPR[EPVATF]-1659900803368
GPR[SPS]-1659900803368
[677476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659900804173
GPR[ESUN]-1659900804173
GPR[SSUN]-1659900804173
2433571
GPR[SPVATF]-1659900804403
GPR[EPVATF]-1659900805604
GPR[SPS]-1659900805604
[679645] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:887.
GPR[EPS]-1659900806342
GPR[ESUN]-1659900806342
GPR[SSUN]-1659900806342
2433571
GPR[SPVATF]-1659900806573
GPR[EPVATF]-1659900807779
GPR[SPS]-1659900807779
[681834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:886.
GPR[EPS]-1659900808531
GPR[ESUN]-1659900808531
GPR[SSUN]-1659900808531
2433571
GPR[SPVATF]-1659900808766
GPR[EPVATF]-1659900810019
GPR[SPS]-1659900810019
[684063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:881.
GPR[EPS]-1659900810760
GPR[ESUN]-1659900810760
GPR[SSUN]-1659900810760
2433571
GPR[ESUN]-1659900810990
GPR[SSUN]-1659900810990
2433571
GPR[ESUN]-1659900811216
GPR[SSUN]-1659900811216
2433571
GPR[ESUN]-1659900811442
GPR[SSUN]-1659900811442
881600600
GPR[ESUN]-1659900811633
GPR[SSUN]-1659900811633
80988634
GPR[ESUN]-1659900811810
GPR[SSUN]-1659900811810
2433571
GPR[SPVATF]-1659900812036
GPR[EPVATF]-1659900813308
GPR[SPS]-1659900813308
[687466] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659900814163
GPR[SPVATF]-1659900814163
GPR[EPVATF]-1659900815464
GPR[SPS]-1659900815464
[689522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659900816219
GPR[ESUN]-1659900816219
GPR[SSUN]-1659900816219
2433571
GPR[SPVATF]-1659900816453
GPR[EPVATF]-1659900817706
GPR[SPS]-1659900817706
[691778] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659900818475
GPR[ESUN]-1659900818475
GPR[SSUN]-1659900818475
2433571
GPR[ESUN]-1659900818706
GPR[SSUN]-1659900818706
2433571
GPR[SPVATF]-1659900818938
GPR[EPVATF]-1659900820213
GPR[SPS]-1659900820213
[694282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659900820979
GPR[SPVATF]-1659900820979
GPR[EPVATF]-1659900822278
GPR[SPS]-1659900822278
[696395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659900823092
GPR[ESUN]-1659900823092
GPR[SSUN]-1659900823092
2433571
GPR[ESUN]-1659900823324
GPR[SSUN]-1659900823324
2433571
GPR[ESUN]-1659900823554
GPR[SSUN]-1659900823554
2433571
GPR[ESUN]-1659900823786
GPR[SSUN]-1659900823786
2433571
GPR[SPVATF]-1659900824016
GPR[EPVATF]-1659900825355
GPR[SPS]-1659900825356
[699443] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:890.
GPR[EPS]-1659900826140
GPR[ESUN]-1659900826140
GPR[SSUN]-1659900826140
2433571
GPR[SPVATF]-1659900826374
GPR[EPVATF]-1659900827690
GPR[SPS]-1659900827690
[701722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:885.
GPR[EPS]-1659900828419
GPR[ESUN]-1659900828419
GPR[SSUN]-1659900828419
2433571
GPR[ESUN]-1659900828652
GPR[SSUN]-1659900828652
2433571
GPR[SPVATF]-1659900828882
GPR[EPVATF]-1659900830238
GPR[SPS]-1659900830238
[704288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:880.
GPR[EPS]-1659900830985
GPR[ESUN]-1659900830985
GPR[SSUN]-1659900830985
2433571
GPR[ESUN]-1659900831216
GPR[SSUN]-1659900831216
2433571
GPR[SPVATF]-1659900831443
GPR[EPVATF]-1659900832843
GPR[SPS]-1659900832843
[706901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659900833598
GPR[ESUN]-1659900833598
GPR[SSUN]-1659900833598
2433571
GPR[SPVATF]-1659900833833
GPR[EPVATF]-1659900835232
GPR[SPS]-1659900835232
[709272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659900835969
GPR[ESUN]-1659900835969
GPR[SSUN]-1659900835969
-1966087783
GPR[ESUN]-1659900836161
GPR[SSUN]-1659900836161
-1966087783
GPR[SPVATF]-1659900836348
GPR[EPVATF]-1659900836372
[709675] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900836372
GPR[SSUN]-1659900836372
GPR[ESUN]-1659900836372
GPR[SSUN]-1659900836372
-1009376944
GPR[ESUN]-1659900836569
GPR[SSUN]-1659900836569
-1009376944
GPR[SPVATF]-1659900836763
GPR[EPVATF]-1659900838201
GPR[SPS]-1659900838201
[712067] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckAccidentalSemicolon:64.
GPR[EPS]-1659900838764
GPR[SPVATF]-1659900838764
GPR[EPVATF]-1659900840212
GPR[SPS]-1659900840212
[718481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckAccidentalSemicolon:64.
GPR[EPS]-1659900845178
GPR[ESUN]-1659900845178
GPR[SSUN]-1659900845178
-1009376944
GPR[SPVATF]-1659900845382
GPR[EPVATF]-1659900847218
GPR[SPS]-1659900847218
[721139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckAccidentalSemicolon:63.
GPR[EPS]-1659900847836
GPR[ESUN]-1659900847836
GPR[SSUN]-1659900847836
80988634
GPR[ESUN]-1659900848011
GPR[SSUN]-1659900848011
1613130706
GPR[SPVATF]-1659900848217
GPR[EPVATF]-1659900849147
GPR[SPS]-1659900849147
[723025] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:106.
GPR[EPS]-1659900849722
GPR[SPVATF]-1659900849723
GPR[EPVATF]-1659900850643
GPR[SPS]-1659900850643
[724516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:106.
GPR[EPS]-1659900851213
GPR[ESUN]-1659900851213
GPR[SSUN]-1659900851213
1613130706
GPR[SPVATF]-1659900851421
GPR[EPVATF]-1659900852355
GPR[SPS]-1659900852355
[726221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:105.
GPR[EPS]-1659900852918
GPR[ESUN]-1659900852918
GPR[SSUN]-1659900852918
1421663094
GPR[SPVATF]-1659900853127
GPR[EPVATF]-1659900854350
GPR[SPS]-1659900854350
[728226] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeRemoveDeadCode:603.
GPR[EPS]-1659900854923
GPR[ESUN]-1659900854923
GPR[SSUN]-1659900854923
1421663094
GPR[SPVATF]-1659900855128
GPR[EPVATF]-1659900856371
GPR[SPS]-1659900856371
[730377] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeRemoveDeadCode:559.
GPR[EPS]-1659900857074
GPR[ESUN]-1659900857074
GPR[SSUN]-1659900857074
1421663094
GPR[SPVATF]-1659900857303
GPR[EPVATF]-1659900858515
GPR[SPS]-1659900858515
[732405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeRemoveDeadCode:558.
GPR[EPS]-1659900859102
GPR[ESUN]-1659900859102
GPR[SSUN]-1659900859102
1421663094
GPR[SPVATF]-1659900859308
GPR[EPVATF]-1659900860507
GPR[SPS]-1659900860507
[734383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeRemoveDeadCode:521.
GPR[EPS]-1659900861080
GPR[SPVATF]-1659900861081
GPR[EPVATF]-1659900862330
GPR[SPS]-1659900862330
[736210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeRemoveDeadCode:521.
GPR[EPS]-1659900862907
GPR[ESUN]-1659900862907
GPR[SSUN]-1659900862907
1421663094
GPR[ESUN]-1659900863109
GPR[SSUN]-1659900863109
1421663094
GPR[ESUN]-1659900863310
GPR[SSUN]-1659900863310
-534884160
GPR[ESUN]-1659900863639
GPR[SSUN]-1659900863639
-534884160
GPR[SPVATF]-1659900863965
GPR[EPVATF]-1659900865225
GPR[SPS]-1659900865225
[739377] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1465.
GPR[EPS]-1659900866074
GPR[SPVATF]-1659900866074
GPR[EPVATF]-1659900867326
GPR[SPS]-1659900867326
[741493] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1465.
GPR[EPS]-1659900868190
GPR[ESUN]-1659900868190
GPR[SSUN]-1659900868190
-534884160
GPR[ESUN]-1659900868519
GPR[SSUN]-1659900868519
-534884160
GPR[SPVATF]-1659900868844
GPR[EPVATF]-1659900870130
GPR[SPS]-1659900870130
[744276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1454.
GPR[EPS]-1659900870973
GPR[SPVATF]-1659900870973
GPR[EPVATF]-1659900872272
GPR[SPS]-1659900872272
[746417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1454.
GPR[EPS]-1659900873114
GPR[ESUN]-1659900873114
GPR[SSUN]-1659900873114
-534884160
GPR[SPVATF]-1659900873442
GPR[EPVATF]-1659900874746
GPR[SPS]-1659900874746
[748894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1451.
GPR[EPS]-1659900875591
GPR[SPVATF]-1659900875592
GPR[EPVATF]-1659900876920
GPR[SPS]-1659900876920
[751084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1451.
GPR[EPS]-1659900877781
GPR[ESUN]-1659900877781
GPR[SSUN]-1659900877781
-534884160
GPR[SPVATF]-1659900878114
GPR[EPVATF]-1659900883500
GPR[SPS]-1659900883500
[757851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1448.
GPR[EPS]-1659900884548
GPR[SPVATF]-1659900884548
GPR[EPVATF]-1659900885740
GPR[SPS]-1659900885740
[759867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1448.
GPR[EPS]-1659900886564
GPR[ESUN]-1659900886564
GPR[SSUN]-1659900886564
-534884160
GPR[ESUN]-1659900886899
GPR[SSUN]-1659900886899
-534884160
GPR[SPVATF]-1659900887213
GPR[EPVATF]-1659900888392
GPR[SPS]-1659900888392
[762541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1446.
GPR[EPS]-1659900889238
GPR[ESUN]-1659900889239
GPR[SSUN]-1659900889239
-534884160
GPR[SPVATF]-1659900889577
GPR[EPVATF]-1659900890820
GPR[SPS]-1659900890820
[764953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1445.
GPR[EPS]-1659900891650
GPR[ESUN]-1659900891650
GPR[SSUN]-1659900891650
-534884160
GPR[ESUN]-1659900891973
GPR[SSUN]-1659900891973
-534884160
GPR[ESUN]-1659900892296
GPR[SSUN]-1659900892296
-534884160
GPR[SPVATF]-1659900892638
GPR[EPVATF]-1659900893855
GPR[SPS]-1659900893855
[768000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1277.
GPR[EPS]-1659900894697
GPR[ESUN]-1659900894697
GPR[SSUN]-1659900894697
80988634
GPR[ESUN]-1659900894873
GPR[SSUN]-1659900894873
2433571
GPR[SPVATF]-1659900895104
GPR[EPVATF]-1659900896334
GPR[SPS]-1659900896334
[770403] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659900897100
GPR[SPVATF]-1659900897100
GPR[EPVATF]-1659900898328
GPR[SPS]-1659900898328
[772463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659900899160
GPR[ESUN]-1659900899160
GPR[SSUN]-1659900899160
2433571
GPR[SPVATF]-1659900899392
GPR[EPVATF]-1659900900668
GPR[SPS]-1659900900668
[774747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659900901444
GPR[SPVATF]-1659900901444
GPR[EPVATF]-1659900902729
GPR[SPS]-1659900902729
[776783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659900903480
GPR[ESUN]-1659900903480
GPR[SSUN]-1659900903480
2433571
GPR[ESUN]-1659900903717
GPR[SSUN]-1659900903717
2433571
GPR[SPVATF]-1659900903949
GPR[EPVATF]-1659900905237
GPR[SPS]-1659900905237
[779322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659900906019
GPR[SPVATF]-1659900906020
GPR[EPVATF]-1659900907318
GPR[SPS]-1659900907318
[781416] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659900908113
GPR[ESUN]-1659900908114
GPR[SSUN]-1659900908114
2433571
GPR[SPVATF]-1659900908348
GPR[EPVATF]-1659900909657
GPR[SPS]-1659900909657
[783741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659900910438
GPR[SPVATF]-1659900910439
GPR[EPVATF]-1659900911781
GPR[SPS]-1659900911781
[785846] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659900912543
GPR[ESUN]-1659900912543
GPR[SSUN]-1659900912544
2433571
GPR[SPVATF]-1659900912774
GPR[EPVATF]-1659900914189
GPR[SPS]-1659900914189
[788263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659900914960
GPR[SPVATF]-1659900914960
GPR[EPVATF]-1659900916369
GPR[SPS]-1659900916369
[790463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659900917160
GPR[ESUN]-1659900917160
GPR[SSUN]-1659900917160
2433571
GPR[SPVATF]-1659900917495
GPR[EPVATF]-1659900918949
GPR[SPS]-1659900918949
[793031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659900919728
GPR[SPVATF]-1659900919728
GPR[EPVATF]-1659900922346
GPR[SPS]-1659900922346
[996482] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659901123179
GPR[SSUN]-1659901123179
2433571
GPR[SPVATF]-1659901123594
GPR[EPVATF]-1659901124822
GPR[SPS]-1659901124822
[998905] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:953.
GPR[EPS]-1659901125602
GPR[ESUN]-1659901125602
GPR[SSUN]-1659901125602
2433571
GPR[ESUN]-1659901125838
GPR[SSUN]-1659901125838
2433571
GPR[SPVATF]-1659901126067
GPR[EPVATF]-1659901127289
GPR[SPS]-1659901127289
[1001400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659901128097
GPR[ESUN]-1659901128097
GPR[SSUN]-1659901128097
2433571
GPR[ESUN]-1659901128332
GPR[SSUN]-1659901128332
944853999
GPR[SPVATF]-1659901128581
GPR[EPVATF]-1659901129832
GPR[SPS]-1659901129832
[1003514] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeFoldConstants extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    static final com.google.javascript.jscomp.DiagnosticType INVALID_GETELEM_INDEX_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}");

    static final com.google.javascript.jscomp.DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType NEGATING_A_NON_NUMBER_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = com.google.javascript.jscomp.DiagnosticType.error("JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}");

    static final com.google.javascript.jscomp.DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = com.google.javascript.jscomp.DiagnosticType.error("JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}");

    static final com.google.javascript.jscomp.DiagnosticType FRACTIONAL_BITWISE_OPERAND = com.google.javascript.jscomp.DiagnosticType.error("JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}");

    private static final double MAX_FOLD_NUMBER = java.lang.Math.pow(2, 53);

    private final boolean late;

    PeepholeFoldConstants(boolean late) {
        this.late = late;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.NEW :
                return tryFoldCtorCall(subtree);
            case com.google.javascript.rhino.Token.TYPEOF :
                return tryFoldTypeof(subtree);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.BITNOT :
                tryReduceOperandsForOp(subtree);
                return tryFoldUnaryOperator(subtree);
            case com.google.javascript.rhino.Token.VOID :
                return tryReduceVoid(subtree);
            default :
                tryReduceOperandsForOp(subtree);
                return tryFoldBinaryOperator(subtree);
        }
    }

    private com.google.javascript.rhino.Node tryFoldBinaryOperator(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        if (left == null) {
            return subtree;
        }
        com.google.javascript.rhino.Node right = left.getNext();
        if (right == null) {
            return subtree;
        }
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.GETPROP :
                return tryFoldGetProp(subtree, left, right);
            case com.google.javascript.rhino.Token.GETELEM :
                return tryFoldGetElem(subtree, left, right);
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return tryFoldInstanceof(subtree, left, right);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return tryFoldAndOr(subtree, left, right);
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return tryFoldShift(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssign(subtree, left, right);
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return tryUnfoldAssignOp(subtree, left, right);
            case com.google.javascript.rhino.Token.ADD :
                return tryFoldAdd(subtree, left, right);
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
                return tryFoldArithmeticOp(subtree, left, right);
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
                com.google.javascript.rhino.Node result = tryFoldArithmeticOp(subtree, left, right);
                if (result != subtree) {
                    return result;
                }
                return tryFoldLeftChildOp(subtree, left, right);
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return tryFoldComparison(subtree, left, right);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryReduceVoid(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        if ((!child.isNumber()) || (child.getDouble() != 0.0)) {
            if (!mayHaveSideEffects(n)) {
                n.replaceChild(child, com.google.javascript.rhino.IR.number(0));
                reportCodeChange();
            }
        }
        return n;
    }

    private void tryReduceOperandsForOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                com.google.javascript.rhino.Node left = n.getFirstChild();
                com.google.javascript.rhino.Node right = n.getLastChild();
                if ((!com.google.javascript.jscomp.NodeUtil.mayBeString(left)) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(right))) {
                    tryConvertOperandsToNumber(n);
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                tryConvertToNumber(n.getLastChild());
                break;
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                tryConvertOperandsToNumber(n);
                break;
        }
    }

    private void tryConvertOperandsToNumber(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next;
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = next) {
            next = c.getNext();
            tryConvertToNumber(c);
        }
    }

    private void tryConvertToNumber(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NUMBER :
                return;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.COMMA :
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.HOOK :
                tryConvertToNumber(n.getChildAtIndex(1));
                tryConvertToNumber(n.getLastChild());
                return;
            case com.google.javascript.rhino.Token.NAME :
                if (!com.google.javascript.jscomp.NodeUtil.isUndefined(n)) {
                    return;
                }
                break;
        }
        java.lang.Double result = com.google.javascript.jscomp.NodeUtil.getNumberValue(n);
        if (result == null) {
            return;
        }
        double value = result;
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.numberNode(value, n);
        if (replacement.isEquivalentTo(n)) {
            return;
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
    }

    private com.google.javascript.rhino.Node tryFoldTypeof(com.google.javascript.rhino.Node originalTypeofNode) {
        com.google.common.base.Preconditions.checkArgument(originalTypeofNode.isTypeOf());
        com.google.javascript.rhino.Node argumentNode = originalTypeofNode.getFirstChild();
        if ((argumentNode == null) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(argumentNode, true))) {
            return originalTypeofNode;
        }
        java.lang.String typeNameString = null;
        switch (argumentNode.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                typeNameString = "function";
                break;
            case com.google.javascript.rhino.Token.STRING :
                typeNameString = "string";
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                typeNameString = "number";
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                typeNameString = "boolean";
                break;
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.ARRAYLIT :
                typeNameString = "object";
                break;
            case com.google.javascript.rhino.Token.VOID :
                typeNameString = "undefined";
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ("undefined".equals(argumentNode.getString())) {
                    typeNameString = "undefined";
                }
                break;
        }
        if (typeNameString != null) {
            com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.IR.string(typeNameString);
            originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);
            reportCodeChange();
            return newNode;
        }
        return originalTypeofNode;
    }

    private com.google.javascript.rhino.Node tryFoldUnaryOperator(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.hasOneChild());
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        if (left == null) {
            return n;
        }
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(left);
        if (leftVal == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NOT :
                if (late && left.isNumber()) {
                    double numValue = left.getDouble();
                    if ((numValue == 0) || (numValue == 1)) {
                        return n;
                    }
                }
                com.google.javascript.rhino.Node replacementNode = com.google.javascript.jscomp.NodeUtil.booleanNode(!leftVal.toBoolean(true));
                parent.replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            case com.google.javascript.rhino.Token.POS :
                if (com.google.javascript.jscomp.NodeUtil.isNumericResult(left)) {
                    parent.replaceChild(n, left.detachFromParent());
                    reportCodeChange();
                    return left;
                }
                return n;
            case com.google.javascript.rhino.Token.NEG :
                try {
                    if (left.isName()) {
                        if (left.getString().equals("Infinity")) {
                            return n;
                        } else if (left.getString().equals("NaN")) {
                            n.removeChild(left);
                            parent.replaceChild(n, left);
                            reportCodeChange();
                            return left;
                        }
                    }
                    double negNum = -left.getDouble();
                    com.google.javascript.rhino.Node negNumNode = com.google.javascript.rhino.IR.number(negNum);
                    parent.replaceChild(n, negNumNode);
                    reportCodeChange();
                    return negNumNode;
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            case com.google.javascript.rhino.Token.BITNOT :
                try {
                    double val = left.getDouble();
                    if ((val >= java.lang.Integer.MIN_VALUE) && (val <= java.lang.Integer.MAX_VALUE)) {
                        int intVal = ((int) (val));
                        if (intVal == val) {
                            com.google.javascript.rhino.Node notIntValNode = com.google.javascript.rhino.IR.number(~intVal);
                            parent.replaceChild(n, notIntValNode);
                            reportCodeChange();
                            return notIntValNode;
                        } else {
                            error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                            return n;
                        }
                    } else {
                        error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                        return n;
                    }
                } catch (java.lang.UnsupportedOperationException ex) {
                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);
                    return n;
                }
            default :
                return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldInstanceof(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isInstanceOf());
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true) && (!mayHaveSideEffects(right))) {
            com.google.javascript.rhino.Node replacementNode = null;
            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(left)) {
                replacementNode = com.google.javascript.rhino.IR.falseNode();
            } else if (right.isName() && "Object".equals(right.getString())) {
                replacementNode = com.google.javascript.rhino.IR.trueNode();
            }
            if (replacementNode != null) {
                n.getParent().replaceChild(n, replacementNode);
                reportCodeChange();
                return replacementNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssign(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isAssign());
        if (!late) {
            return n;
        }
        if ((!right.hasChildren()) || (right.getFirstChild().getNext() != right.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        com.google.javascript.rhino.Node newRight;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(161).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.this.late",com.google.javascript.jscomp.PeepholeFoldConstants.this.late);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(161).collectionEnds();
        }
        if (runtimeAngelicValue) if (areNodesEqualForInlining(left, right.getFirstChild())) {
            newRight = right.getLastChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) {
            newRight = right.getFirstChild();
        } else {
            return n;
        }
        int newType = -1;
        switch (right.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                newType = com.google.javascript.rhino.Token.ASSIGN_ADD;
                break;
            case com.google.javascript.rhino.Token.BITAND :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITAND;
                break;
            case com.google.javascript.rhino.Token.BITOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITOR;
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                newType = com.google.javascript.rhino.Token.ASSIGN_BITXOR;
                break;
            case com.google.javascript.rhino.Token.DIV :
                newType = com.google.javascript.rhino.Token.ASSIGN_DIV;
                break;
            case com.google.javascript.rhino.Token.LSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_LSH;
                break;
            case com.google.javascript.rhino.Token.MOD :
                newType = com.google.javascript.rhino.Token.ASSIGN_MOD;
                break;
            case com.google.javascript.rhino.Token.MUL :
                newType = com.google.javascript.rhino.Token.ASSIGN_MUL;
                break;
            case com.google.javascript.rhino.Token.RSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_RSH;
                break;
            case com.google.javascript.rhino.Token.SUB :
                newType = com.google.javascript.rhino.Token.ASSIGN_SUB;
                break;
            case com.google.javascript.rhino.Token.URSH :
                newType = com.google.javascript.rhino.Token.ASSIGN_URSH;
                break;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(newType, left.detachFromParent(), newRight.detachFromParent());
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.Node tryUnfoldAssignOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (late) {
            return n;
        }
        if ((!n.hasChildren()) || (n.getFirstChild().getNext() != n.getLastChild())) {
            return n;
        }
        if (mayHaveSideEffects(left)) {
            return n;
        }
        int op = com.google.javascript.jscomp.NodeUtil.getOpFromAssignmentOp(n);
        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.assign(left.detachFromParent(), new com.google.javascript.rhino.Node(op, left.cloneTree(), right.detachFromParent()).srcref(n));
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    private com.google.javascript.rhino.Node tryFoldAndOr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node result = null;
        int type = n.getType();
        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(left);
        if (leftVal != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            boolean lval = leftVal.toBoolean(true);
            if ((lval && (type == com.google.javascript.rhino.Token.OR)) || ((!lval) && (type == com.google.javascript.rhino.Token.AND))) {
                result = left;
            } else if (!mayHaveSideEffects(left)) {
                result = right;
            }
        }
        if (result != null) {
            n.removeChild(result);
            parent.replaceChild(n, result);
            reportCodeChange();
            return result;
        } else {
            return n;
        }
    }

    private com.google.javascript.rhino.Node tryFoldChildAddString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false) && left.isAdd()) {
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            if (lr.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(lr);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
                if ((leftString != null) && (rightString != null)) {
                    left.removeChild(ll);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(left, ll);
                    n.replaceChild(right, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && right.isAdd()) {
            com.google.javascript.rhino.Node rl = right.getFirstChild();
            com.google.javascript.rhino.Node rr = right.getLastChild();
            if (rl.isString()) {
                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(rl);
                if ((leftString != null) && (rightString != null)) {
                    right.removeChild(rr);
                    java.lang.String result = leftString + rightString;
                    n.replaceChild(right, rr);
                    n.replaceChild(left, com.google.javascript.rhino.IR.string(result));
                    reportCodeChange();
                    return n;
                }
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAddConstantString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isString() || right.isString()) {
            java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);
            java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);
            if ((leftString != null) && (rightString != null)) {
                com.google.javascript.rhino.Node newStringNode = com.google.javascript.rhino.IR.string(leftString + rightString);
                n.getParent().replaceChild(n, newStringNode);
                reportCodeChange();
                return newStringNode;
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldArithmeticOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node result = performArithmeticOp(n.getType(), left, right);
        if (result != null) {
            result.copyInformationFromForTree(n);
            n.getParent().replaceChild(n, result);
            reportCodeChange();
            return result;
        }
        return n;
    }

    private com.google.javascript.rhino.Node performArithmeticOp(int opType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if ((opType == com.google.javascript.rhino.Token.ADD) && (com.google.javascript.jscomp.NodeUtil.mayBeString(left, false) || com.google.javascript.jscomp.NodeUtil.mayBeString(right, false))) {
            return null;
        }
        double result;
        java.lang.Double lValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (lValObj == null) {
            return null;
        }
        java.lang.Double rValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rValObj == null) {
            return null;
        }
        double lval = lValObj;
        double rval = rValObj;
        switch (opType) {
            case com.google.javascript.rhino.Token.BITAND :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) & com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) | com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.BITXOR :
                result = com.google.javascript.rhino.head.ScriptRuntime.toInt32(lval) ^ com.google.javascript.rhino.head.ScriptRuntime.toInt32(rval);
                break;
            case com.google.javascript.rhino.Token.ADD :
                result = lval + rval;
                break;
            case com.google.javascript.rhino.Token.SUB :
                result = lval - rval;
                break;
            case com.google.javascript.rhino.Token.MUL :
                result = lval * rval;
                break;
            case com.google.javascript.rhino.Token.MOD :
                if (rval == 0) {
                    return null;
                }
                result = lval % rval;
                break;
            case com.google.javascript.rhino.Token.DIV :
                if (rval == 0) {
                    return null;
                }
                result = lval / rval;
                break;
            default :
                throw new java.lang.Error("Unexpected arithmetic operator");
        }
        if (((((java.lang.String.valueOf(result).length() <= ((java.lang.String.valueOf(lval).length() + java.lang.String.valueOf(rval).length()) + 1)) && (java.lang.Math.abs(result) <= com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER)) || java.lang.Double.isNaN(result)) || (result == java.lang.Double.POSITIVE_INFINITY)) || (result == java.lang.Double.NEGATIVE_INFINITY)) {
            return com.google.javascript.jscomp.NodeUtil.numberNode(result, null);
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryFoldLeftChildOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        int opType = n.getType();
        com.google.common.base.Preconditions.checkState((com.google.javascript.jscomp.NodeUtil.isAssociative(opType) && com.google.javascript.jscomp.NodeUtil.isCommutative(opType)) || n.isAdd());
        com.google.common.base.Preconditions.checkState((!n.isAdd()) || (!com.google.javascript.jscomp.NodeUtil.mayBeString(n)));
        java.lang.Double rightValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if ((rightValObj != null) && (left.getType() == opType)) {
            com.google.common.base.Preconditions.checkState(left.getChildCount() == 2);
            com.google.javascript.rhino.Node ll = left.getFirstChild();
            com.google.javascript.rhino.Node lr = ll.getNext();
            com.google.javascript.rhino.Node valueToCombine = ll;
            com.google.javascript.rhino.Node replacement = performArithmeticOp(opType, valueToCombine, right);
            if (replacement == null) {
                valueToCombine = lr;
                replacement = performArithmeticOp(opType, valueToCombine, right);
            }
            if (replacement != null) {
                left.removeChild(valueToCombine);
                n.replaceChild(left, left.removeFirstChild());
                replacement.copyInformationFromForTree(right);
                n.replaceChild(right, replacement);
                reportCodeChange();
            }
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAdd(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(node.isAdd());
        if (com.google.javascript.jscomp.NodeUtil.mayBeString(node, true)) {
            if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false)) {
                return tryFoldAddConstantString(node, left, right);
            } else {
                return tryFoldChildAddString(node, left, right);
            }
        } else {
            com.google.javascript.rhino.Node result = tryFoldArithmeticOp(node, left, right);
            if (result != node) {
                return result;
            }
            return tryFoldLeftChildOp(node, left, right);
        }
    }

    private com.google.javascript.rhino.Node tryFoldShift(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        if (left.isNumber() && right.isNumber()) {
            double result;
            double lval = left.getDouble();
            double rval = right.getDouble();
            if (!((lval >= java.lang.Integer.MIN_VALUE) && (lval <= java.lang.Integer.MAX_VALUE))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);
                return n;
            }
            if (!((rval >= 0) && (rval < 32))) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
                return n;
            }
            int lvalInt = ((int) (lval));
            if (lvalInt != lval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);
                return n;
            }
            int rvalInt = ((int) (rval));
            if (rvalInt != rval) {
                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, right);
                return n;
            }
            switch (n.getType()) {
                case com.google.javascript.rhino.Token.LSH :
                    result = lvalInt << rvalInt;
                    break;
                case com.google.javascript.rhino.Token.RSH :
                    result = lvalInt >> rvalInt;
                    break;
                case com.google.javascript.rhino.Token.URSH :
                    long lvalLong = lvalInt & 0xffffffffL;
                    result = lvalLong >>> rvalInt;
                    break;
                default :
                    throw new java.lang.AssertionError("Unknown shift operator: " + com.google.javascript.rhino.Token.name(n.getType()));
            }
            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.IR.number(result);
            n.getParent().replaceChild(n, newNumber);
            reportCodeChange();
            return newNumber;
        }
        return n;
    }

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.rhino.Node tryFoldComparison(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        boolean leftLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true);
        boolean rightLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, true);
        if ((!leftLiteral) || (!rightLiteral)) {
            if ((n.getType() != com.google.javascript.rhino.Token.GT) && (n.getType() != com.google.javascript.rhino.Token.LT)) {
                return n;
            }
        }
        int op = n.getType();
        boolean result;
        boolean undefinedRight = com.google.javascript.jscomp.NodeUtil.isUndefined(right) && rightLiteral;
        boolean nullRight = right.isNull();
        int lhType = getNormalizedNodeType(left);
        int rhType = getNormalizedNodeType(right);
        switch (lhType) {
            case com.google.javascript.rhino.Token.VOID :
                if (!leftLiteral) {
                    return n;
                } else if (!rightLiteral) {
                    return n;
                } else {
                    result = compareToUndefined(right, op);
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                if (rightLiteral && isEqualityOp(op)) {
                    result = compareToNull(right, op);
                    break;
                }
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (((rhType != com.google.javascript.rhino.Token.TRUE) && (rhType != com.google.javascript.rhino.Token.FALSE)) && (rhType != com.google.javascript.rhino.Token.NULL)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = lhType == rhType;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = lhType != rhType;
                        break;
                    case com.google.javascript.rhino.Token.GE :
                    case com.google.javascript.rhino.Token.LE :
                    case com.google.javascript.rhino.Token.GT :
                    case com.google.javascript.rhino.Token.LT :
                        java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                        if (compareResult != null) {
                            result = compareResult;
                        } else {
                            return n;
                        }
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.THIS :
                if (!right.isThis()) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        result = true;
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.STRING != right.getType()) {
                    return n;
                }
                com.google.javascript.rhino.jstype.TernaryValue ternary = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                switch (op) {
                    case com.google.javascript.rhino.Token.SHEQ :
                    case com.google.javascript.rhino.Token.EQ :
                        ternary = areStringsEqual(left.getString(), right.getString());
                        break;
                    case com.google.javascript.rhino.Token.SHNE :
                    case com.google.javascript.rhino.Token.NE :
                        ternary = areStringsEqual(left.getString(), right.getString()).not();
                        break;
                }
                if (ternary == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return n;
                }
                result = ternary.toBoolean(true);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                if (undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (nullRight && isEqualityOp(op)) {
                    result = compareToNull(left, op);
                    break;
                }
                if (com.google.javascript.rhino.Token.NUMBER != right.getType()) {
                    return n;
                }
                java.lang.Boolean compareResult = compareAsNumbers(op, left, right);
                if (compareResult != null) {
                    result = compareResult;
                } else {
                    return null;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                if (leftLiteral && undefinedRight) {
                    result = compareToUndefined(left, op);
                    break;
                }
                if (rightLiteral) {
                    boolean undefinedLeft = left.getString().equals("undefined");
                    if (undefinedLeft) {
                        result = compareToUndefined(right, op);
                        break;
                    }
                    if ((leftLiteral && nullRight) && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                if (com.google.javascript.rhino.Token.NAME != right.getType()) {
                    return n;
                }
                java.lang.String ln = left.getString();
                java.lang.String rn = right.getString();
                if (!ln.equals(rn)) {
                    return n;
                }
                switch (op) {
                    case com.google.javascript.rhino.Token.LT :
                    case com.google.javascript.rhino.Token.GT :
                        result = false;
                        break;
                    default :
                        return n;
                }
                break;
            case com.google.javascript.rhino.Token.NEG :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.FUNCTION :
                if (leftLiteral) {
                    if (undefinedRight) {
                        result = compareToUndefined(left, op);
                        break;
                    }
                    if (nullRight && isEqualityOp(op)) {
                        result = compareToNull(left, op);
                        break;
                    }
                }
                return n;
            default :
                return n;
        }
        com.google.javascript.rhino.Node newNode = com.google.javascript.jscomp.NodeUtil.booleanNode(result);
        n.getParent().replaceChild(n, newNode);
        reportCodeChange();
        return newNode;
    }

    private com.google.javascript.rhino.jstype.TernaryValue areStringsEqual(java.lang.String a, java.lang.String b) {
        if ((a.indexOf('\u000b') != (-1)) || (b.indexOf('\u000b') != (-1))) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        } else {
            return a.equals(b) ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.NOT) {
            com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
            switch (value) {
                case TRUE :
                    return com.google.javascript.rhino.Token.TRUE;
                case FALSE :
                    return com.google.javascript.rhino.Token.FALSE;
            }
        }
        return type;
    }

    private java.lang.Boolean compareAsNumbers(int op, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        java.lang.Double leftValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);
        if (leftValue == null) {
            return null;
        }
        java.lang.Double rightValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);
        if (rightValue == null) {
            return null;
        }
        double lv = leftValue;
        double rv = rightValue;
        java.lang.Boolean result;
        switch (op) {
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.EQ :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv == rv;
                break;
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.NE :
                com.google.common.base.Preconditions.checkState(left.isNumber() && right.isNumber());
                result = lv != rv;
                break;
            case com.google.javascript.rhino.Token.LE :
                result = lv <= rv;
                break;
            case com.google.javascript.rhino.Token.LT :
                result = lv < rv;
                break;
            case com.google.javascript.rhino.Token.GE :
                result = lv >= rv;
                break;
            case com.google.javascript.rhino.Token.GT :
                result = lv > rv;
                break;
            default :
                return null;
        }
        return result;
    }

    private boolean compareToUndefined(com.google.javascript.rhino.Node value, int op) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true));
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueUndefined;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueUndefined;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
                return false;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private boolean isEqualityOp(int op) {
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return true;
        }
        return false;
    }

    private boolean compareToNull(com.google.javascript.rhino.Node value, int op) {
        boolean valueUndefined = com.google.javascript.jscomp.NodeUtil.isUndefined(value);
        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();
        boolean equivalent = valueUndefined || valueNull;
        switch (op) {
            case com.google.javascript.rhino.Token.EQ :
                return equivalent;
            case com.google.javascript.rhino.Token.NE :
                return !equivalent;
            case com.google.javascript.rhino.Token.SHEQ :
                return valueNull;
            case com.google.javascript.rhino.Token.SHNE :
                return !valueNull;
            default :
                throw new java.lang.IllegalStateException("unexpected.");
        }
    }

    private com.google.javascript.rhino.Node tryFoldCtorCall(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        if (inForcedStringContext(n)) {
            return tryFoldInForcedStringContext(n);
        }
        return n;
    }

    private boolean inForcedStringContext(com.google.javascript.rhino.Node n) {
        if (n.getParent().isGetElem() && (n.getParent().getLastChild() == n)) {
            return true;
        }
        if (n.getParent().isAdd()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldInForcedStringContext(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isNew());
        com.google.javascript.rhino.Node objectType = n.getFirstChild();
        if (!objectType.isName()) {
            return n;
        }
        if (objectType.getString().equals("String")) {
            com.google.javascript.rhino.Node value = objectType.getNext();
            java.lang.String stringValue = null;
            if (value == null) {
                stringValue = "";
            } else {
                if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return n;
                }
                stringValue = com.google.javascript.jscomp.NodeUtil.getStringValue(value);
            }
            if (stringValue == null) {
                return n;
            }
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node newString = com.google.javascript.rhino.IR.string(stringValue);
            parent.replaceChild(n, newString);
            newString.copyInformationFrom(parent);
            reportCodeChange();
            return newString;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetElem(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetElem());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (left.isArrayLit()) {
            return tryFoldArrayAccess(n, left, right);
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldGetProp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(n.isGetProp());
        if (left.isObjectLit()) {
            return tryFoldObjectPropAccess(n, left, right);
        }
        if (right.isString() && right.getString().equals("length")) {
            int knownLength = -1;
            switch (left.getType()) {
                case com.google.javascript.rhino.Token.ARRAYLIT :
                    if (mayHaveSideEffects(left)) {
                        return n;
                    }
                    knownLength = left.getChildCount();
                    break;
                case com.google.javascript.rhino.Token.STRING :
                    knownLength = left.getString().length();
                    break;
                default :
                    return n;
            }
            com.google.common.base.Preconditions.checkState(knownLength != (-1));
            com.google.javascript.rhino.Node lengthNode = com.google.javascript.rhino.IR.number(knownLength);
            n.getParent().replaceChild(n, lengthNode);
            reportCodeChange();
            return lengthNode;
        }
        return n;
    }

    private boolean isAssignmentTarget(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || parent.isInc()) || parent.isDec()) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node tryFoldArrayAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.javascript.rhino.Node parent = n.getParent();
        if (isAssignmentTarget(n)) {
            return n;
        }
        if (!right.isNumber()) {
            return n;
        }
        double index = right.getDouble();
        int intIndex = ((int) (index));
        if (intIndex != index) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);
            return n;
        }
        if (intIndex < 0) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        com.google.javascript.rhino.Node elem = left.getFirstChild();
        for (int i = 0; (elem != null) && (i < intIndex); i++) {
            elem = elem.getNext();
        }
        if (elem == null) {
            error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);
            return n;
        }
        if (elem.isEmpty()) {
            elem = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(elem);
        } else {
            left.removeChild(elem);
        }
        n.getParent().replaceChild(n, elem);
        reportCodeChange();
        return elem;
    }

    private com.google.javascript.rhino.Node tryFoldObjectPropAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isGet(n));
        if ((!left.isObjectLit()) || (!right.isString())) {
            return n;
        }
        if (isAssignmentTarget(n)) {
            return n;
        }
        com.google.javascript.rhino.Node key = null;
        com.google.javascript.rhino.Node value = null;
        for (com.google.javascript.rhino.Node c = left.getFirstChild(); c != null; c = c.getNext()) {
            if (c.getString().equals(right.getString())) {
                switch (c.getType()) {
                    case com.google.javascript.rhino.Token.SETTER_DEF :
                        continue;
                    case com.google.javascript.rhino.Token.GETTER_DEF :
                    case com.google.javascript.rhino.Token.STRING_KEY :
                        if ((value != null) && mayHaveSideEffects(value)) {
                            return n;
                        }
                        key = c;
                        value = key.getFirstChild();
                        break;
                    default :
                        throw new java.lang.IllegalStateException();
                }
            } else if (mayHaveSideEffects(c.getFirstChild())) {
                return n;
            }
        }
        if (value == null) {
            return n;
        }
        if (value.isFunction() && com.google.javascript.jscomp.NodeUtil.referencesThis(value)) {
            return n;
        }
        com.google.javascript.rhino.Node replacement = value.detachFromParent();
        if (key.isGetterDef()) {
            replacement = com.google.javascript.rhino.IR.call(replacement);
            replacement.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, true);
        }
        n.getParent().replaceChild(n, replacement);
        reportCodeChange();
        return n;
    }
}
[1003514] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659901130211
GPR[EPVATF]-1659901131432
GPR[SPS]-1659901131432
[1005366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:477.
GPR[EPS]-1659901132063
GPR[ESUN]-1659901132063
GPR[SSUN]-1659901132063
944853999
GPR[SPVATF]-1659901132315
GPR[EPVATF]-1659901133536
GPR[SPS]-1659901133536
[1007479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:472.
GPR[EPS]-1659901134176
GPR[SPVATF]-1659901134177
GPR[EPVATF]-1659901135418
GPR[SPS]-1659901135418
[1009434] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:472.
GPR[EPS]-1659901136131
GPR[ESUN]-1659901136131
GPR[SSUN]-1659901136131
2346
GPR[SPVATF]-1659901136327
GPR[EPVATF]-1659901137649
GPR[SPS]-1659901137649
[1011371] WARN SpoonReferenceLibrary - spoon.SpoonException: spoon.support.compiler.SnippetCompilationError: Node cannot be resolved to a type at Foo.java:2
[1011710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:281.
GPR[EPS]-1659901138407
GPR[ESUN]-1659901138407
GPR[SSUN]-1659901138407
2346
GPR[SPVATF]-1659901138598
GPR[EPVATF]-1659901139893
GPR[SPS]-1659901139893
[1013511] WARN SpoonReferenceLibrary - spoon.SpoonException: spoon.support.compiler.SnippetCompilationError: Node cannot be resolved to a type at Foo.java:2
[1013851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:280.
GPR[EPS]-1659901140548
GPR[ESUN]-1659901140548
GPR[SSUN]-1659901140548
80988634
GPR[ESUN]-1659901140727
GPR[SSUN]-1659901140727
2433571
GPR[ESUN]-1659901140958
GPR[SSUN]-1659901140958
-1659631726
GPR[ESUN]-1659901141146
GPR[SSUN]-1659901141146
130004992
GPR[ESUN]-1659901141334
GPR[SSUN]-1659901141334
130004992
GPR[SPVATF]-1659901141514
GPR[EPVATF]-1659901141537
[1014840] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901141537
GPR[SSUN]-1659901141537
130004992
GPR[ESUN]-1659901141718
GPR[SSUN]-1659901141718
-534884160
GPR[SPVATF]-1659901142057
GPR[EPVATF]-1659901143011
GPR[SPS]-1659901143011
[1017191] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1452.
GPR[EPS]-1659901143888
GPR[ESUN]-1659901143888
GPR[SSUN]-1659901143888
1211422348
GPR[SPVATF]-1659901144090
GPR[EPVATF]-1659901145390
GPR[SPS]-1659901145390
[1019253] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ConvertToDottedProperties:52.
GPR[EPS]-1659901145950
GPR[ESUN]-1659901145950
GPR[SSUN]-1659901145950
1211422348
GPR[SPVATF]-1659901146155
GPR[EPVATF]-1659901147445
GPR[SPS]-1659901147445
[1021314] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ConvertToDottedProperties:51.
GPR[EPS]-1659901148011
GPR[ESUN]-1659901148011
GPR[SSUN]-1659901148011
-916891069
GPR[SPVATF]-1659901148235
GPR[EPVATF]-1659901149211
GPR[SPS]-1659901149211
[1023095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseVariableDeclarations:240.
GPR[EPS]-1659901149792
GPR[ESUN]-1659901149792
GPR[SSUN]-1659901149792
-916891069
GPR[SPVATF]-1659901150016
GPR[EPVATF]-1659901150985
GPR[SPS]-1659901150985
[1024867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseVariableDeclarations:239.
GPR[EPS]-1659901151564
GPR[ESUN]-1659901151564
GPR[SSUN]-1659901151564
-916891069
GPR[ESUN]-1659901151789
GPR[SSUN]-1659901151789
-916891069
GPR[SPVATF]-1659901152006
GPR[EPVATF]-1659901153008
GPR[SPS]-1659901153008
[1026900] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseVariableDeclarations:232.
GPR[EPS]-1659901153598
GPR[ESUN]-1659901153598
GPR[SSUN]-1659901153598
-916891069
GPR[SPVATF]-1659901153822
GPR[EPVATF]-1659901154824
GPR[SPS]-1659901154824
[1028712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseVariableDeclarations:231.
GPR[EPS]-1659901155409
GPR[ESUN]-1659901155409
GPR[SSUN]-1659901155409
-916891069
GPR[SPVATF]-1659901155635
GPR[EPVATF]-1659901161094
GPR[SPS]-1659901161094
[1035407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseVariableDeclarations:230.
GPR[EPS]-1659901162104
GPR[ESUN]-1659901162104
GPR[SSUN]-1659901162104
-916891069
GPR[ESUN]-1659901162364
GPR[SSUN]-1659901162364
-916891069
GPR[SPVATF]-1659901162583
GPR[EPVATF]-1659901163513
GPR[SPS]-1659901163513
[1037401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CollapseVariableDeclarations:228.
GPR[EPS]-1659901164098
GPR[ESUN]-1659901164098
GPR[SSUN]-1659901164098
-916891069
GPR[ESUN]-1659901164321
GPR[SSUN]-1659901164321
-916891069
GPR[ESUN]-1659901164538
GPR[SSUN]-1659901164538
1613130706
GPR[SPVATF]-1659901164759
GPR[EPVATF]-1659901165674
GPR[SPS]-1659901165675
[1039549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:104.
GPR[EPS]-1659901166246
GPR[SPVATF]-1659901166246
GPR[EPVATF]-1659901167198
GPR[SPS]-1659901167198
[1041078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:104.
GPR[EPS]-1659901167775
GPR[ESUN]-1659901167775
GPR[SSUN]-1659901167775
1613130706
GPR[SPVATF]-1659901167987
GPR[EPVATF]-1659901168916
GPR[SPS]-1659901168916
[1042786] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:101.
GPR[EPS]-1659901169483
GPR[SPVATF]-1659901169483
GPR[EPVATF]-1659901170449
GPR[SPS]-1659901170449
[1044326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:101.
GPR[EPS]-1659901171023
GPR[ESUN]-1659901171023
GPR[SSUN]-1659901171023
1613130706
GPR[ESUN]-1659901171234
GPR[SSUN]-1659901171234
1613130706
GPR[ESUN]-1659901171443
GPR[SSUN]-1659901171443
1613130706
GPR[ESUN]-1659901171649
GPR[SSUN]-1659901171649
1613130706
GPR[ESUN]-1659901171855
GPR[SSUN]-1659901171855
1613130706
GPR[SPVATF]-1659901172063
GPR[EPVATF]-1659901173020
GPR[SPS]-1659901173020
[1046904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:93.
GPR[EPS]-1659901173601
GPR[SPVATF]-1659901173633
GPR[EPVATF]-1659901174608
GPR[SPS]-1659901174608
[1048485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:93.
GPR[EPS]-1659901175182
GPR[ESUN]-1659901175182
GPR[SSUN]-1659901175182
2346
GPR[ESUN]-1659901175371
GPR[SSUN]-1659901175371
2346
GPR[SPVATF]-1659901175554
GPR[EPVATF]-1659901176896
GPR[SPS]-1659901176896
[1050533] WARN SpoonReferenceLibrary - spoon.SpoonException: spoon.support.compiler.SnippetCompilationError: Node cannot be resolved to a type at Foo.java:2
[1050863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:279.
GPR[EPS]-1659901177560
GPR[ESUN]-1659901177561
GPR[SSUN]-1659901177561
2346
GPR[ESUN]-1659901177749
GPR[SSUN]-1659901177749
1613130706
GPR[SPVATF]-1659901177956
GPR[EPVATF]-1659901178920
GPR[SPS]-1659901178920
[1052804] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule:60.
GPR[EPS]-1659901179501
GPR[ESUN]-1659901179501
GPR[SSUN]-1659901179501
1613130706
GPR[ESUN]-1659901179712
GPR[SSUN]-1659901179712
1613130706
GPR[SPVATF]-1659901179919
GPR[EPVATF]-1659901180914
GPR[SPS]-1659901180914
[1054790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:89.
GPR[EPS]-1659901181487
GPR[SPVATF]-1659901181487
GPR[EPVATF]-1659901182457
GPR[SPS]-1659901182457
[1056363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:89.
GPR[EPS]-1659901183060
GPR[ESUN]-1659901183060
GPR[SSUN]-1659901183060
1613130706
GPR[ESUN]-1659901183275
GPR[SSUN]-1659901183275
1613130706
GPR[SPVATF]-1659901183595
GPR[EPVATF]-1659901184573
GPR[SPS]-1659901184573
[1058460] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:84.
GPR[EPS]-1659901185157
GPR[SPVATF]-1659901185157
GPR[EPVATF]-1659901186155
GPR[SPS]-1659901186155
[1060054] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:84.
GPR[EPS]-1659901186752
GPR[ESUN]-1659901186752
GPR[SSUN]-1659901186752
1211422348
GPR[SPVATF]-1659901186958
GPR[EPVATF]-1659901188279
GPR[SPS]-1659901188279
[1062139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ConvertToDottedProperties:50.
GPR[EPS]-1659901188836
GPR[SPVATF]-1659901188837
GPR[EPVATF]-1659901190181
GPR[SPS]-1659901190181
[1064047] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ConvertToDottedProperties:50.
GPR[EPS]-1659901190744
GPR[ESUN]-1659901190745
GPR[SSUN]-1659901190745
707639929
GPR[SPVATF]-1659901190991
GPR[EPVATF]-1659901193385
GPR[SPS]-1659901193385
[1067435] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:873.
GPR[EPS]-1659901194132
GPR[ESUN]-1659901194132
GPR[SSUN]-1659901194132
-916891069
GPR[ESUN]-1659901194352
GPR[SSUN]-1659901194352
-916891069
GPR[ESUN]-1659901194572
GPR[SSUN]-1659901194572
-1966087783
GPR[SPVATF]-1659901194764
GPR[EPVATF]-1659901194783
[1068086] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901194783
GPR[SSUN]-1659901194783
-1966087783
GPR[SPVATF]-1659901194973
GPR[EPVATF]-1659901194991
[1068295] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901194992
GPR[SSUN]-1659901194992
80988634
GPR[ESUN]-1659901195168
GPR[SSUN]-1659901195168
1421663094
GPR[SPVATF]-1659901195373
GPR[EPVATF]-1659901196269
GPR[SPS]-1659901196269
[1069888] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeRemoveDeadCode extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssignment(subtree);
            case com.google.javascript.rhino.Token.COMMA :
                return tryFoldComma(subtree);
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                return tryOptimizeBlock(subtree);
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                subtree = tryFoldExpr(subtree);
                return subtree;
            case com.google.javascript.rhino.Token.HOOK :
                return tryFoldHook(subtree);
            case com.google.javascript.rhino.Token.SWITCH :
                return tryOptimizeSwitch(subtree);
            case com.google.javascript.rhino.Token.IF :
                return tryFoldIf(subtree);
            case com.google.javascript.rhino.Token.WHILE :
                return tryFoldWhile(subtree);
            case com.google.javascript.rhino.Token.FOR :
                {
                    com.google.javascript.rhino.Node condition = com.google.javascript.jscomp.NodeUtil.getConditionExpression(subtree);
                    if (condition != null) {
                        tryFoldForCondition(condition);
                    }
                }
                return tryFoldFor(subtree);
            case com.google.javascript.rhino.Token.DO :
                return tryFoldDo(subtree);
            case com.google.javascript.rhino.Token.TRY :
                return tryFoldTry(subtree);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryFoldTry(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isTry());
        com.google.javascript.rhino.Node body = n.getFirstChild();
        com.google.javascript.rhino.Node catchBlock = body.getNext();
        com.google.javascript.rhino.Node finallyBlock = catchBlock.getNext();
        if ((!catchBlock.hasChildren()) && ((finallyBlock == null) || (!finallyBlock.hasChildren()))) {
            n.removeChild(body);
            n.getParent().replaceChild(n, body);
            reportCodeChange();
            return body;
        }
        if (!body.hasChildren()) {
            com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(catchBlock);
            if (finallyBlock != null) {
                n.removeChild(finallyBlock);
                n.getParent().replaceChild(n, finallyBlock);
            } else {
                n.getParent().removeChild(n);
            }
            reportCodeChange();
            return finallyBlock;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssignment(com.google.javascript.rhino.Node subtree) {
        com.google.common.base.Preconditions.checkState(subtree.isAssign());
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        com.google.javascript.rhino.Node right = subtree.getLastChild();
        if ((left.isName() && right.isName()) && left.getString().equals(right.getString())) {
            subtree.getParent().replaceChild(subtree, right.detachFromParent());
            reportCodeChange();
            return right;
        }
        return subtree;
    }

    private com.google.javascript.rhino.Node tryFoldExpr(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node result = trySimplifyUnusedResult(subtree.getFirstChild());
        if (result == null) {
            com.google.javascript.rhino.Node parent = subtree.getParent();
            if (parent.isLabel()) {
                com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.block().srcref(subtree);
                parent.replaceChild(subtree, replacement);
                subtree = replacement;
            } else {
                subtree.detachFromParent();
                subtree = null;
            }
        }
        return subtree;
    }

    private com.google.javascript.rhino.Node trySimplifyUnusedResult(com.google.javascript.rhino.Node n) {
        return trySimplifyUnusedResult(n, true);
    }

    private com.google.javascript.rhino.Node trySimplifyUnusedResult(com.google.javascript.rhino.Node n, boolean removeUnused) {
        com.google.javascript.rhino.Node result = n;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.HOOK :
                com.google.javascript.rhino.Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
                com.google.javascript.rhino.Node falseNode = trySimplifyUnusedResult(n.getLastChild());
                if ((trueNode == null) && (falseNode != null)) {
                    n.setType(com.google.javascript.rhino.Token.OR);
                    com.google.common.base.Preconditions.checkState(n.getChildCount() == 2);
                } else if ((trueNode != null) && (falseNode == null)) {
                    n.setType(com.google.javascript.rhino.Token.AND);
                    com.google.common.base.Preconditions.checkState(n.getChildCount() == 2);
                } else if ((trueNode == null) && (falseNode == null)) {
                    result = trySimplifyUnusedResult(n.getFirstChild());
                } else {
                    result = n;
                }
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                com.google.javascript.rhino.Node conditionalResultNode = trySimplifyUnusedResult(n.getLastChild());
                if (conditionalResultNode == null) {
                    com.google.common.base.Preconditions.checkState(n.hasOneChild());
                    result = trySimplifyUnusedResult(n.getFirstChild());
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                result = null;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node left = trySimplifyUnusedResult(n.getFirstChild());
                com.google.javascript.rhino.Node right = trySimplifyUnusedResult(n.getLastChild());
                if ((left == null) && (right == null)) {
                    result = null;
                } else if (left == null) {
                    result = right;
                } else if (right == null) {
                    result = left;
                } else {
                    result = n;
                }
                break;
            default :
                if (!com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n)) {
                    com.google.javascript.rhino.Node resultList = null;
                    for (com.google.javascript.rhino.Node next, c = n.getFirstChild(); c != null; c = next) {
                        next = c.getNext();
                        c = trySimplifyUnusedResult(c);
                        if (c != null) {
                            c.detachFromParent();
                            if (resultList == null) {
                                resultList = c;
                            } else {
                                resultList = com.google.javascript.rhino.IR.comma(resultList, c).srcref(c);
                            }
                        }
                    }
                    result = resultList;
                }
        }
        if (n != result) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (result == null) {
                if (removeUnused) {
                    parent.removeChild(n);
                } else {
                    result = com.google.javascript.rhino.IR.empty().srcref(n);
                    parent.replaceChild(n, result);
                }
            } else {
                if (result.getParent() != null) {
                    result.detachFromParent();
                }
                n.getParent().replaceChild(n, result);
            }
            reportCodeChange();
        }
        return result;
    }

    private com.google.javascript.rhino.Node tryOptimizeSwitch(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isSwitch());
        com.google.javascript.rhino.Node defaultCase = tryOptimizeDefaultCase(n);
        if (defaultCase == null) {
            com.google.javascript.rhino.Node next = null;
            com.google.javascript.rhino.Node prev = null;
            for (com.google.javascript.rhino.Node c = n.getFirstChild().getNext(); c != null; c = next) {
                next = c.getNext();
                if ((!mayHaveSideEffects(c.getFirstChild())) && isUselessCase(c, prev)) {
                    removeCase(n, c);
                } else {
                    prev = c;
                }
            }
        }
        if (n.hasOneChild()) {
            com.google.javascript.rhino.Node condition = n.removeFirstChild();
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.exprResult(condition).srcref(n);
            parent.replaceChild(n, replacement);
            reportCodeChange();
            return replacement;
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryOptimizeDefaultCase(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isSwitch());
        com.google.javascript.rhino.Node lastNonRemovable = n.getFirstChild();
        for (com.google.javascript.rhino.Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {
            if (c.isDefaultCase()) {
                com.google.javascript.rhino.Node caseToRemove = lastNonRemovable.getNext();
                for (com.google.javascript.rhino.Node next; caseToRemove != c; caseToRemove = next) {
                    next = caseToRemove.getNext();
                    removeCase(n, caseToRemove);
                }
                com.google.javascript.rhino.Node prevCase = (lastNonRemovable == n.getFirstChild()) ? null : lastNonRemovable;
                if (isUselessCase(c, prevCase)) {
                    removeCase(n, c);
                    return null;
                }
                return c;
            } else {
                com.google.common.base.Preconditions.checkState(c.isCase());
                if (c.getLastChild().hasChildren() || mayHaveSideEffects(c.getFirstChild())) {
                    lastNonRemovable = c;
                }
            }
        }
        return null;
    }

    private void removeCase(com.google.javascript.rhino.Node switchNode, com.google.javascript.rhino.Node caseNode) {
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(caseNode);
        switchNode.removeChild(caseNode);
        reportCodeChange();
    }

    private boolean isUselessCase(com.google.javascript.rhino.Node caseNode, @javax.annotation.Nullable
    com.google.javascript.rhino.Node previousCase) {
        com.google.common.base.Preconditions.checkState((previousCase == null) || (previousCase.getNext() == caseNode));
        com.google.javascript.rhino.Node switchNode = caseNode.getParent();
        if ((switchNode.getLastChild() != caseNode) && (previousCase != null)) {
            com.google.javascript.rhino.Node previousBlock = previousCase.getLastChild();
            if ((!previousBlock.hasChildren()) || (!isExit(previousBlock.getLastChild()))) {
                return false;
            }
        }
        com.google.javascript.rhino.Node executingCase = caseNode;
        while (executingCase != null) {
            com.google.common.base.Preconditions.checkState(executingCase.isDefaultCase() || executingCase.isCase());
            com.google.common.base.Preconditions.checkState((caseNode == executingCase) || (!executingCase.isDefaultCase()));
            com.google.javascript.rhino.Node block = executingCase.getLastChild();
            com.google.common.base.Preconditions.checkState(block.isBlock());
            if (block.hasChildren()) {
                for (com.google.javascript.rhino.Node blockChild : block.children()) {
                    switch (blockChild.getType()) {
                        case com.google.javascript.rhino.Token.BREAK :
                            return blockChild.getFirstChild() == null;
                        case com.google.javascript.rhino.Token.VAR :
                            if (blockChild.hasOneChild() && (blockChild.getFirstChild().getFirstChild() == null)) {
                                continue;
                            }
                            return false;
                        default :
                            return false;
                    }
                }
            } else {
                executingCase = executingCase.getNext();
            }
        } 
        return true;
    }

    private boolean isExit(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            default :
                return false;
        }
    }

    private com.google.javascript.rhino.Node tryFoldComma(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        left = trySimplifyUnusedResult(left);
        if ((left == null) || (!mayHaveSideEffects(left))) {
            n.removeChild(right);
            parent.replaceChild(n, right);
            reportCodeChange();
            return right;
        }
        return n;
    }

    com.google.javascript.rhino.Node tryOptimizeBlock(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null;) {
            com.google.javascript.rhino.Node next = c.getNext();
            if ((!mayHaveSideEffects(c)) && (!c.isSyntheticBlock())) {
                n.removeChild(c);
                reportCodeChange();
            } else {
                tryOptimizeConditionalAfterAssign(c);
            }
            c = next;
        }
        if (n.isSyntheticBlock() || (n.getParent() == null)) {
            return n;
        }
        if (com.google.javascript.jscomp.NodeUtil.tryMergeBlock(n)) {
            reportCodeChange();
            return null;
        }
        return n;
    }

    private void tryOptimizeConditionalAfterAssign(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next = n.getNext();
        if (isSimpleAssignment(n) && isConditionalStatement(next)) {
            com.google.javascript.rhino.Node lhsAssign = getSimpleAssignmentName(n);
            com.google.javascript.rhino.Node condition = getConditionalStatementCondition(next);
            if ((lhsAssign.isName() && condition.isName()) && lhsAssign.getString().equals(condition.getString())) {
                com.google.javascript.rhino.Node rhsAssign = getSimpleAssignmentValue(n);
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(rhsAssign);
                if (value != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    com.google.javascript.rhino.Node replacementConditionNode = com.google.javascript.jscomp.NodeUtil.booleanNode(value.toBoolean(true));
                    condition.getParent().replaceChild(condition, replacementConditionNode);
                    reportCodeChange();
                }
            }
        }
    }

    private boolean isSimpleAssignment(com.google.javascript.rhino.Node n) {
        if (com.google.javascript.jscomp.NodeUtil.isExprAssign(n) && n.getFirstChild().getFirstChild().isName()) {
            return true;
        } else if ((n.isVar() && n.hasOneChild()) && (n.getFirstChild().getFirstChild() != null)) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node getSimpleAssignmentName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(isSimpleAssignment(n));
        if (com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return n.getFirstChild().getFirstChild();
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(191).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.getFirstChild();

        }
    }

    private com.google.javascript.rhino.Node getSimpleAssignmentValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(isSimpleAssignment(n));
        return n.getFirstChild().getLastChild();
    }

    private boolean isConditionalStatement(com.google.javascript.rhino.Node n) {
        return (n != null) && (n.isIf() || isExprConditional(n));
    }

    private boolean isExprConditional(com.google.javascript.rhino.Node n) {
        if (n.isExprResult()) {
            switch (n.getFirstChild().getType()) {
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    return true;
            }
        }
        return false;
    }

    private com.google.javascript.rhino.Node getConditionalStatementCondition(com.google.javascript.rhino.Node n) {
        if (n.isIf()) {
            return com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        } else {
            com.google.common.base.Preconditions.checkState(isExprConditional(n));
            return n.getFirstChild().getFirstChild();
        }
    }

    private com.google.javascript.rhino.Node tryFoldIf(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isIf());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkNotNull(parent);
        int type = n.getType();
        com.google.javascript.rhino.Node cond = n.getFirstChild();
        com.google.javascript.rhino.Node thenBody = cond.getNext();
        com.google.javascript.rhino.Node elseBody = thenBody.getNext();
        if ((elseBody != null) && (!mayHaveSideEffects(elseBody))) {
            n.removeChild(elseBody);
            elseBody = null;
            reportCodeChange();
        }
        if ((!mayHaveSideEffects(thenBody)) && (elseBody != null)) {
            n.removeChild(elseBody);
            n.replaceChild(thenBody, elseBody);
            com.google.javascript.rhino.Node notCond = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NOT);
            n.replaceChild(cond, notCond);
            notCond.addChildToFront(cond);
            cond = notCond;
            thenBody = cond.getNext();
            elseBody = null;
            reportCodeChange();
        }
        if ((!mayHaveSideEffects(thenBody)) && (elseBody == null)) {
            if (mayHaveSideEffects(cond)) {
                n.removeChild(cond);
                com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.newExpr(cond);
                parent.replaceChild(n, replacement);
                reportCodeChange();
                return replacement;
            } else {
                com.google.javascript.jscomp.NodeUtil.removeChild(parent, n);
                reportCodeChange();
                return null;
            }
        }
        com.google.javascript.rhino.jstype.TernaryValue condValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond);
        if (condValue == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        if (mayHaveSideEffects(cond)) {
            boolean newConditionValue = condValue == com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            if ((!newConditionValue) && (elseBody == null)) {
                elseBody = com.google.javascript.rhino.IR.block().srcref(n);
                n.addChildToBack(elseBody);
            }
            com.google.javascript.rhino.Node newCond = com.google.javascript.jscomp.NodeUtil.booleanNode(newConditionValue);
            n.replaceChild(cond, newCond);
            com.google.javascript.rhino.Node branchToKeep = (newConditionValue) ? thenBody : elseBody;
            branchToKeep.addChildToFront(com.google.javascript.rhino.IR.exprResult(cond).srcref(cond));
            reportCodeChange();
            cond = newCond;
        }
        boolean condTrue = condValue.toBoolean(true);
        if (n.getChildCount() == 2) {
            com.google.common.base.Preconditions.checkState(type == com.google.javascript.rhino.Token.IF);
            if (condTrue) {
                com.google.javascript.rhino.Node thenStmt = n.getFirstChild().getNext();
                n.removeChild(thenStmt);
                parent.replaceChild(n, thenStmt);
                reportCodeChange();
                return thenStmt;
            } else {
                com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent, n);
                reportCodeChange();
                return null;
            }
        } else {
            com.google.javascript.rhino.Node trueBranch = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node falseBranch = trueBranch.getNext();
            com.google.javascript.rhino.Node branchToKeep = (condTrue) ? trueBranch : falseBranch;
            com.google.javascript.rhino.Node branchToRemove = (condTrue) ? falseBranch : trueBranch;
            com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(branchToRemove);
            n.removeChild(branchToKeep);
            parent.replaceChild(n, branchToKeep);
            reportCodeChange();
            return branchToKeep;
        }
    }

    private com.google.javascript.rhino.Node tryFoldHook(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isHook());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.javascript.rhino.Node cond = n.getFirstChild();
        com.google.javascript.rhino.Node thenBody = cond.getNext();
        com.google.javascript.rhino.Node elseBody = thenBody.getNext();
        com.google.javascript.rhino.jstype.TernaryValue condValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond);
        if (condValue == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            if (!areNodesEqualForInlining(thenBody, elseBody)) {
                return n;
            }
        }
        n.detachChildren();
        com.google.javascript.rhino.Node branchToKeep = (condValue.toBoolean(true)) ? thenBody : elseBody;
        com.google.javascript.rhino.Node replacement;
        if (mayHaveSideEffects(cond)) {
            replacement = com.google.javascript.rhino.IR.comma(cond, branchToKeep).srcref(n);
        } else {
            replacement = branchToKeep;
        }
        parent.replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    com.google.javascript.rhino.Node tryFoldWhile(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isWhile());
        com.google.javascript.rhino.Node cond = com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        if (com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
        com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);
        reportCodeChange();
        return null;
    }

    com.google.javascript.rhino.Node tryFoldFor(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isFor());
        if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
            return n;
        }
        com.google.javascript.rhino.Node init = n.getFirstChild();
        com.google.javascript.rhino.Node cond = init.getNext();
        com.google.javascript.rhino.Node increment = cond.getNext();
        if ((!init.isEmpty()) && (!init.isVar())) {
            init = trySimplifyUnusedResult(init, false);
        }
        if (!increment.isEmpty()) {
            increment = trySimplifyUnusedResult(increment, false);
        }
        if (!n.getFirstChild().isEmpty()) {
            return n;
        }
        if (com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
        if (!mayHaveSideEffects(cond)) {
            com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);
        } else {
            com.google.javascript.rhino.Node statement = com.google.javascript.rhino.IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
            n.getParent().replaceChild(n, statement);
        }
        reportCodeChange();
        return null;
    }

    com.google.javascript.rhino.Node tryFoldDo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isDo());
        com.google.javascript.rhino.Node cond = com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        if (com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        if (hasBreakOrContinue(n)) {
            return n;
        }
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));
        com.google.javascript.rhino.Node block = n.removeFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        parent.replaceChild(n, block);
        if (mayHaveSideEffects(cond)) {
            com.google.javascript.rhino.Node condStatement = com.google.javascript.rhino.IR.exprResult(cond.detachFromParent()).srcref(cond);
            parent.addChildAfter(condStatement, block);
        }
        reportCodeChange();
        return n;
    }

    boolean hasBreakOrContinue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.has(n, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>or(new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.BREAK), new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.CONTINUE)), com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    private void tryFoldForCondition(com.google.javascript.rhino.Node forCondition) {
        if (com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(forCondition) == com.google.javascript.rhino.jstype.TernaryValue.TRUE) {
            forCondition.getParent().replaceChild(forCondition, com.google.javascript.rhino.IR.empty());
            reportCodeChange();
        }
    }
}
[1069889] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901196586
GPR[SSUN]-1659901196586
890942016
GPR[ESUN]-1659901196786
GPR[SSUN]-1659901196786
890942016
GPR[SPVATF]-1659901196979
GPR[EPVATF]-1659901196999
[1070302] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901196999
GPR[SSUN]-1659901196999
890942016
GPR[SPVATF]-1659901197193
GPR[EPVATF]-1659901197211
[1070514] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901197211
GPR[EPVATF]-1659901197228
[1070531] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901197228
GPR[SSUN]-1659901197228
890942016
GPR[ESUN]-1659901197421
GPR[SSUN]-1659901197421
890942016
GPR[ESUN]-1659901197612
GPR[SSUN]-1659901197612
-1966087783
GPR[ESUN]-1659901197801
GPR[SSUN]-1659901197801
-1966087783
GPR[SPVATF]-1659901197990
GPR[EPVATF]-1659901198008
[1071311] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901198009
GPR[EPVATF]-1659901198025
[1071328] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901198026
GPR[SSUN]-1659901198026
-1966087783
GPR[ESUN]-1659901198216
GPR[SSUN]-1659901198216
-1966087783
GPR[SPVATF]-1659901198406
GPR[EPVATF]-1659901198424
[1071728] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901198425
GPR[EPVATF]-1659901198442
[1071745] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901198442
GPR[SSUN]-1659901198442
-1966087783
GPR[ESUN]-1659901198633
GPR[SSUN]-1659901198633
-1966087783
GPR[ESUN]-1659901198823
GPR[SSUN]-1659901198823
-1966087783
GPR[ESUN]-1659901199013
GPR[SSUN]-1659901199013
175865530
GPR[SPVATF]-1659901199191
GPR[EPVATF]-1659901200093
GPR[SPS]-1659901200093
[1073885] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:119.
GPR[EPS]-1659901200582
GPR[SPVATF]-1659901200582
GPR[EPVATF]-1659901201484
GPR[SPS]-1659901201484
[1075266] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:119.
GPR[EPS]-1659901201963
GPR[ESUN]-1659901201963
GPR[SSUN]-1659901201963
1613130706
GPR[ESUN]-1659901202174
GPR[SSUN]-1659901202174
1613130706
GPR[SPVATF]-1659901202383
GPR[EPVATF]-1659901203303
GPR[SPS]-1659901203303
[1077182] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:145.
GPR[EPS]-1659901203879
GPR[ESUN]-1659901203879
GPR[SSUN]-1659901203879
1613130706
GPR[SPVATF]-1659901204087
GPR[EPVATF]-1659901204999
GPR[SPS]-1659901204999
[1078913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:142.
GPR[EPS]-1659901205610
GPR[ESUN]-1659901205610
GPR[SSUN]-1659901205610
1613130706
GPR[SPVATF]-1659901205822
GPR[EPVATF]-1659901206736
GPR[SPS]-1659901206736
[1080608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:141.
GPR[EPS]-1659901207305
GPR[ESUN]-1659901207305
GPR[SSUN]-1659901207305
1613130706
GPR[SPVATF]-1659901207529
GPR[EPVATF]-1659901208454
GPR[SPS]-1659901208454
[1082365] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:108.
GPR[EPS]-1659901209062
GPR[ESUN]-1659901209062
GPR[SSUN]-1659901209062
1613130706
GPR[SPVATF]-1659901209274
GPR[EPVATF]-1659901210200
GPR[SPS]-1659901210200
[1084087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TransformAMDToCJSModule$TransformAMDModulesCallback:107.
GPR[EPS]-1659901210784
GPR[ESUN]-1659901210784
GPR[SSUN]-1659901210784
1421663094
GPR[SPVATF]-1659901211026
GPR[EPVATF]-1659901211953
GPR[SPS]-1659901211953
[1085582] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeRemoveDeadCode extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssignment(subtree);
            case com.google.javascript.rhino.Token.COMMA :
                return tryFoldComma(subtree);
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                return tryOptimizeBlock(subtree);
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                subtree = tryFoldExpr(subtree);
                return subtree;
            case com.google.javascript.rhino.Token.HOOK :
                return tryFoldHook(subtree);
            case com.google.javascript.rhino.Token.SWITCH :
                return tryOptimizeSwitch(subtree);
            case com.google.javascript.rhino.Token.IF :
                return tryFoldIf(subtree);
            case com.google.javascript.rhino.Token.WHILE :
                return tryFoldWhile(subtree);
            case com.google.javascript.rhino.Token.FOR :
                {
                    com.google.javascript.rhino.Node condition = com.google.javascript.jscomp.NodeUtil.getConditionExpression(subtree);
                    if (condition != null) {
                        tryFoldForCondition(condition);
                    }
                }
                return tryFoldFor(subtree);
            case com.google.javascript.rhino.Token.DO :
                return tryFoldDo(subtree);
            case com.google.javascript.rhino.Token.TRY :
                return tryFoldTry(subtree);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryFoldTry(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isTry());
        com.google.javascript.rhino.Node body = n.getFirstChild();
        com.google.javascript.rhino.Node catchBlock = body.getNext();
        com.google.javascript.rhino.Node finallyBlock = catchBlock.getNext();
        if ((!catchBlock.hasChildren()) && ((finallyBlock == null) || (!finallyBlock.hasChildren()))) {
            n.removeChild(body);
            n.getParent().replaceChild(n, body);
            reportCodeChange();
            return body;
        }
        if (!body.hasChildren()) {
            com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(catchBlock);
            if (finallyBlock != null) {
                n.removeChild(finallyBlock);
                n.getParent().replaceChild(n, finallyBlock);
            } else {
                n.getParent().removeChild(n);
            }
            reportCodeChange();
            return finallyBlock;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssignment(com.google.javascript.rhino.Node subtree) {
        com.google.common.base.Preconditions.checkState(subtree.isAssign());
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        com.google.javascript.rhino.Node right = subtree.getLastChild();
        if ((left.isName() && right.isName()) && left.getString().equals(right.getString())) {
            subtree.getParent().replaceChild(subtree, right.detachFromParent());
            reportCodeChange();
            return right;
        }
        return subtree;
    }

    private com.google.javascript.rhino.Node tryFoldExpr(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node result = trySimplifyUnusedResult(subtree.getFirstChild());
        if (result == null) {
            com.google.javascript.rhino.Node parent = subtree.getParent();
            if (parent.isLabel()) {
                com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.block().srcref(subtree);
                parent.replaceChild(subtree, replacement);
                subtree = replacement;
            } else {
                subtree.detachFromParent();
                subtree = null;
            }
        }
        return subtree;
    }

    private com.google.javascript.rhino.Node trySimplifyUnusedResult(com.google.javascript.rhino.Node n) {
        return trySimplifyUnusedResult(n, true);
    }

    private com.google.javascript.rhino.Node trySimplifyUnusedResult(com.google.javascript.rhino.Node n, boolean removeUnused) {
        com.google.javascript.rhino.Node result = n;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.HOOK :
                com.google.javascript.rhino.Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
                com.google.javascript.rhino.Node falseNode = trySimplifyUnusedResult(n.getLastChild());
                if ((trueNode == null) && (falseNode != null)) {
                    n.setType(com.google.javascript.rhino.Token.OR);
                    com.google.common.base.Preconditions.checkState(n.getChildCount() == 2);
                } else if ((trueNode != null) && (falseNode == null)) {
                    n.setType(com.google.javascript.rhino.Token.AND);
                    com.google.common.base.Preconditions.checkState(n.getChildCount() == 2);
                } else if ((trueNode == null) && (falseNode == null)) {
                    result = trySimplifyUnusedResult(n.getFirstChild());
                } else {
                    result = n;
                }
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                com.google.javascript.rhino.Node conditionalResultNode = trySimplifyUnusedResult(n.getLastChild());
                if (conditionalResultNode == null) {
                    com.google.common.base.Preconditions.checkState(n.hasOneChild());
                    result = trySimplifyUnusedResult(n.getFirstChild());
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                result = null;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node left = trySimplifyUnusedResult(n.getFirstChild());
                com.google.javascript.rhino.Node right = trySimplifyUnusedResult(n.getLastChild());
                if ((left == null) && (right == null)) {
                    result = null;
                } else if (left == null) {
                    result = right;
                } else if (right == null) {
                    result = left;
                } else {
                    result = n;
                }
                break;
            default :
                if (!com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n)) {
                    com.google.javascript.rhino.Node resultList = null;
                    for (com.google.javascript.rhino.Node next, c = n.getFirstChild(); c != null; c = next) {
                        next = c.getNext();
                        c = trySimplifyUnusedResult(c);
                        if (c != null) {
                            c.detachFromParent();
                            if (resultList == null) {
                                resultList = c;
                            } else {
                                resultList = com.google.javascript.rhino.IR.comma(resultList, c).srcref(c);
                            }
                        }
                    }
                    result = resultList;
                }
        }
        if (n != result) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (result == null) {
                if (removeUnused) {
                    parent.removeChild(n);
                } else {
                    result = com.google.javascript.rhino.IR.empty().srcref(n);
                    parent.replaceChild(n, result);
                }
            } else {
                if (result.getParent() != null) {
                    result.detachFromParent();
                }
                n.getParent().replaceChild(n, result);
            }
            reportCodeChange();
        }
        return result;
    }

    private com.google.javascript.rhino.Node tryOptimizeSwitch(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isSwitch());
        com.google.javascript.rhino.Node defaultCase = tryOptimizeDefaultCase(n);
        if (defaultCase == null) {
            com.google.javascript.rhino.Node next = null;
            com.google.javascript.rhino.Node prev = null;
            for (com.google.javascript.rhino.Node c = n.getFirstChild().getNext(); c != null; c = next) {
                next = c.getNext();
                if ((!mayHaveSideEffects(c.getFirstChild())) && isUselessCase(c, prev)) {
                    removeCase(n, c);
                } else {
                    prev = c;
                }
            }
        }
        if (n.hasOneChild()) {
            com.google.javascript.rhino.Node condition = n.removeFirstChild();
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.exprResult(condition).srcref(n);
            parent.replaceChild(n, replacement);
            reportCodeChange();
            return replacement;
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryOptimizeDefaultCase(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isSwitch());
        com.google.javascript.rhino.Node lastNonRemovable = n.getFirstChild();
        for (com.google.javascript.rhino.Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {
            if (c.isDefaultCase()) {
                com.google.javascript.rhino.Node caseToRemove = lastNonRemovable.getNext();
                for (com.google.javascript.rhino.Node next; caseToRemove != c; caseToRemove = next) {
                    next = caseToRemove.getNext();
                    removeCase(n, caseToRemove);
                }
                com.google.javascript.rhino.Node prevCase = (lastNonRemovable == n.getFirstChild()) ? null : lastNonRemovable;
                if (isUselessCase(c, prevCase)) {
                    removeCase(n, c);
                    return null;
                }
                return c;
            } else {
                com.google.common.base.Preconditions.checkState(c.isCase());
                if (c.getLastChild().hasChildren() || mayHaveSideEffects(c.getFirstChild())) {
                    lastNonRemovable = c;
                }
            }
        }
        return null;
    }

    private void removeCase(com.google.javascript.rhino.Node switchNode, com.google.javascript.rhino.Node caseNode) {
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(caseNode);
        switchNode.removeChild(caseNode);
        reportCodeChange();
    }

    private boolean isUselessCase(com.google.javascript.rhino.Node caseNode, @javax.annotation.Nullable
    com.google.javascript.rhino.Node previousCase) {
        com.google.common.base.Preconditions.checkState((previousCase == null) || (previousCase.getNext() == caseNode));
        com.google.javascript.rhino.Node switchNode = caseNode.getParent();
        if ((switchNode.getLastChild() != caseNode) && (previousCase != null)) {
            com.google.javascript.rhino.Node previousBlock = previousCase.getLastChild();
            if ((!previousBlock.hasChildren()) || (!isExit(previousBlock.getLastChild()))) {
                return false;
            }
        }
        com.google.javascript.rhino.Node executingCase = caseNode;
        while (executingCase != null) {
            com.google.common.base.Preconditions.checkState(executingCase.isDefaultCase() || executingCase.isCase());
            com.google.common.base.Preconditions.checkState((caseNode == executingCase) || (!executingCase.isDefaultCase()));
            com.google.javascript.rhino.Node block = executingCase.getLastChild();
            com.google.common.base.Preconditions.checkState(block.isBlock());
            if (block.hasChildren()) {
                for (com.google.javascript.rhino.Node blockChild : block.children()) {
                    switch (blockChild.getType()) {
                        case com.google.javascript.rhino.Token.BREAK :
                            return blockChild.getFirstChild() == null;
                        case com.google.javascript.rhino.Token.VAR :
                            if (blockChild.hasOneChild() && (blockChild.getFirstChild().getFirstChild() == null)) {
                                continue;
                            }
                            return false;
                        default :
                            return false;
                    }
                }
            } else {
                executingCase = executingCase.getNext();
            }
        } 
        return true;
    }

    private boolean isExit(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            default :
                return false;
        }
    }

    private com.google.javascript.rhino.Node tryFoldComma(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        left = trySimplifyUnusedResult(left);
        if ((left == null) || (!mayHaveSideEffects(left))) {
            n.removeChild(right);
            parent.replaceChild(n, right);
            reportCodeChange();
            return right;
        }
        return n;
    }

    com.google.javascript.rhino.Node tryOptimizeBlock(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null;) {
            com.google.javascript.rhino.Node next = c.getNext();
            if ((!mayHaveSideEffects(c)) && (!c.isSyntheticBlock())) {
                n.removeChild(c);
                reportCodeChange();
            } else {
                tryOptimizeConditionalAfterAssign(c);
            }
            c = next;
        }
        if (n.isSyntheticBlock() || (n.getParent() == null)) {
            return n;
        }
        if (com.google.javascript.jscomp.NodeUtil.tryMergeBlock(n)) {
            reportCodeChange();
            return null;
        }
        return n;
    }

    private void tryOptimizeConditionalAfterAssign(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next = n.getNext();
        if (isSimpleAssignment(n) && isConditionalStatement(next)) {
            com.google.javascript.rhino.Node lhsAssign = getSimpleAssignmentName(n);
            com.google.javascript.rhino.Node condition = getConditionalStatementCondition(next);
            if ((lhsAssign.isName() && condition.isName()) && lhsAssign.getString().equals(condition.getString())) {
                com.google.javascript.rhino.Node rhsAssign = getSimpleAssignmentValue(n);
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(rhsAssign);
                if (value != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    com.google.javascript.rhino.Node replacementConditionNode = com.google.javascript.jscomp.NodeUtil.booleanNode(value.toBoolean(true));
                    condition.getParent().replaceChild(condition, replacementConditionNode);
                    reportCodeChange();
                }
            }
        }
    }

    private boolean isSimpleAssignment(com.google.javascript.rhino.Node n) {
        if (com.google.javascript.jscomp.NodeUtil.isExprAssign(n) && n.getFirstChild().getFirstChild().isName()) {
            return true;
        } else if ((n.isVar() && n.hasOneChild()) && (n.getFirstChild().getFirstChild() != null)) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node getSimpleAssignmentName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(isSimpleAssignment(n));
        if (com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return n.getFirstChild().getFirstChild();
        } else {
            return n.getFirstChild();
        }
    }

    private com.google.javascript.rhino.Node getSimpleAssignmentValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(isSimpleAssignment(n));
        return n.getFirstChild().getLastChild();
    }

    private boolean isConditionalStatement(com.google.javascript.rhino.Node n) {
        return (n != null) && (n.isIf() || isExprConditional(n));
    }

    private boolean isExprConditional(com.google.javascript.rhino.Node n) {
        if (n.isExprResult()) {
            switch (n.getFirstChild().getType()) {
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    return true;
            }
        }
        return false;
    }

    private com.google.javascript.rhino.Node getConditionalStatementCondition(com.google.javascript.rhino.Node n) {
        if (n.isIf()) {
            return com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        } else {
            com.google.common.base.Preconditions.checkState(isExprConditional(n));
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(199).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(199).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(199).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(199).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(199).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.getFirstChild().getFirstChild();

        }
    }

    private com.google.javascript.rhino.Node tryFoldIf(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isIf());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkNotNull(parent);
        int type = n.getType();
        com.google.javascript.rhino.Node cond = n.getFirstChild();
        com.google.javascript.rhino.Node thenBody = cond.getNext();
        com.google.javascript.rhino.Node elseBody = thenBody.getNext();
        if ((elseBody != null) && (!mayHaveSideEffects(elseBody))) {
            n.removeChild(elseBody);
            elseBody = null;
            reportCodeChange();
        }
        if ((!mayHaveSideEffects(thenBody)) && (elseBody != null)) {
            n.removeChild(elseBody);
            n.replaceChild(thenBody, elseBody);
            com.google.javascript.rhino.Node notCond = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NOT);
            n.replaceChild(cond, notCond);
            notCond.addChildToFront(cond);
            cond = notCond;
            thenBody = cond.getNext();
            elseBody = null;
            reportCodeChange();
        }
        if ((!mayHaveSideEffects(thenBody)) && (elseBody == null)) {
            if (mayHaveSideEffects(cond)) {
                n.removeChild(cond);
                com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.newExpr(cond);
                parent.replaceChild(n, replacement);
                reportCodeChange();
                return replacement;
            } else {
                com.google.javascript.jscomp.NodeUtil.removeChild(parent, n);
                reportCodeChange();
                return null;
            }
        }
        com.google.javascript.rhino.jstype.TernaryValue condValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond);
        if (condValue == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        if (mayHaveSideEffects(cond)) {
            boolean newConditionValue = condValue == com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            if ((!newConditionValue) && (elseBody == null)) {
                elseBody = com.google.javascript.rhino.IR.block().srcref(n);
                n.addChildToBack(elseBody);
            }
            com.google.javascript.rhino.Node newCond = com.google.javascript.jscomp.NodeUtil.booleanNode(newConditionValue);
            n.replaceChild(cond, newCond);
            com.google.javascript.rhino.Node branchToKeep = (newConditionValue) ? thenBody : elseBody;
            branchToKeep.addChildToFront(com.google.javascript.rhino.IR.exprResult(cond).srcref(cond));
            reportCodeChange();
            cond = newCond;
        }
        boolean condTrue = condValue.toBoolean(true);
        if (n.getChildCount() == 2) {
            com.google.common.base.Preconditions.checkState(type == com.google.javascript.rhino.Token.IF);
            if (condTrue) {
                com.google.javascript.rhino.Node thenStmt = n.getFirstChild().getNext();
                n.removeChild(thenStmt);
                parent.replaceChild(n, thenStmt);
                reportCodeChange();
                return thenStmt;
            } else {
                com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent, n);
                reportCodeChange();
                return null;
            }
        } else {
            com.google.javascript.rhino.Node trueBranch = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node falseBranch = trueBranch.getNext();
            com.google.javascript.rhino.Node branchToKeep = (condTrue) ? trueBranch : falseBranch;
            com.google.javascript.rhino.Node branchToRemove = (condTrue) ? falseBranch : trueBranch;
            com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(branchToRemove);
            n.removeChild(branchToKeep);
            parent.replaceChild(n, branchToKeep);
            reportCodeChange();
            return branchToKeep;
        }
    }

    private com.google.javascript.rhino.Node tryFoldHook(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isHook());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.javascript.rhino.Node cond = n.getFirstChild();
        com.google.javascript.rhino.Node thenBody = cond.getNext();
        com.google.javascript.rhino.Node elseBody = thenBody.getNext();
        com.google.javascript.rhino.jstype.TernaryValue condValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond);
        if (condValue == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            if (!areNodesEqualForInlining(thenBody, elseBody)) {
                return n;
            }
        }
        n.detachChildren();
        com.google.javascript.rhino.Node branchToKeep = (condValue.toBoolean(true)) ? thenBody : elseBody;
        com.google.javascript.rhino.Node replacement;
        if (mayHaveSideEffects(cond)) {
            replacement = com.google.javascript.rhino.IR.comma(cond, branchToKeep).srcref(n);
        } else {
            replacement = branchToKeep;
        }
        parent.replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    com.google.javascript.rhino.Node tryFoldWhile(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isWhile());
        com.google.javascript.rhino.Node cond = com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        if (com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
        com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);
        reportCodeChange();
        return null;
    }

    com.google.javascript.rhino.Node tryFoldFor(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isFor());
        if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
            return n;
        }
        com.google.javascript.rhino.Node init = n.getFirstChild();
        com.google.javascript.rhino.Node cond = init.getNext();
        com.google.javascript.rhino.Node increment = cond.getNext();
        if ((!init.isEmpty()) && (!init.isVar())) {
            init = trySimplifyUnusedResult(init, false);
        }
        if (!increment.isEmpty()) {
            increment = trySimplifyUnusedResult(increment, false);
        }
        if (!n.getFirstChild().isEmpty()) {
            return n;
        }
        if (com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
        if (!mayHaveSideEffects(cond)) {
            com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);
        } else {
            com.google.javascript.rhino.Node statement = com.google.javascript.rhino.IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
            n.getParent().replaceChild(n, statement);
        }
        reportCodeChange();
        return null;
    }

    com.google.javascript.rhino.Node tryFoldDo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isDo());
        com.google.javascript.rhino.Node cond = com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        if (com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        if (hasBreakOrContinue(n)) {
            return n;
        }
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));
        com.google.javascript.rhino.Node block = n.removeFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        parent.replaceChild(n, block);
        if (mayHaveSideEffects(cond)) {
            com.google.javascript.rhino.Node condStatement = com.google.javascript.rhino.IR.exprResult(cond.detachFromParent()).srcref(cond);
            parent.addChildAfter(condStatement, block);
        }
        reportCodeChange();
        return n;
    }

    boolean hasBreakOrContinue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.has(n, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>or(new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.BREAK), new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.CONTINUE)), com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    private void tryFoldForCondition(com.google.javascript.rhino.Node forCondition) {
        if (com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(forCondition) == com.google.javascript.rhino.jstype.TernaryValue.TRUE) {
            forCondition.getParent().replaceChild(forCondition, com.google.javascript.rhino.IR.empty());
            reportCodeChange();
        }
    }
}
[1085582] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901212279
GPR[SSUN]-1659901212279
1421663094
GPR[SPVATF]-1659901212484
GPR[EPVATF]-1659901213454
GPR[SPS]-1659901213454
[1087343] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeRemoveDeadCode:606.
GPR[EPS]-1659901214040
GPR[ESUN]-1659901214040
GPR[SSUN]-1659901214040
1421663094
GPR[ESUN]-1659901214250
GPR[SSUN]-1659901214250
214953636
GPR[ESUN]-1659901214474
GPR[SSUN]-1659901214474
214953636
GPR[ESUN]-1659901214698
GPR[SSUN]-1659901214698
-1957202630
GPR[ESUN]-1659901214945
GPR[SSUN]-1659901214945
1322642599
GPR[SPVATF]-1659901215168
GPR[EPVATF]-1659901216454
GPR[SPS]-1659901216454
[1090359] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.SortedDependencies:118.
GPR[EPS]-1659901217056
GPR[ESUN]-1659901217056
GPR[SSUN]-1659901217056
2346
GPR[ESUN]-1659901217243
GPR[SSUN]-1659901217243
2346
GPR[SPVATF]-1659901217426
GPR[EPVATF]-1659901218746
GPR[SPS]-1659901218746
[1092457] WARN SpoonReferenceLibrary - spoon.SpoonException: spoon.support.compiler.SnippetCompilationError: Node cannot be resolved to a type at Foo.java:2
[1092811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:379.
GPR[EPS]-1659901219508
GPR[ESUN]-1659901219508
GPR[SSUN]-1659901219508
2346
GPR[ESUN]-1659901219701
GPR[SSUN]-1659901219701
-839544615
GPR[SPVATF]-1659901219947
GPR[EPVATF]-1659901221231
GPR[SPS]-1659901221231
[1095803] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GlobalNamespace$BuildGlobalNamespace:656.
GPR[EPS]-1659901222500
GPR[ESUN]-1659901222500
GPR[SSUN]-1659901222500
214953636
GPR[SPVATF]-1659901222725
GPR[EPVATF]-1659901224055
GPR[SPS]-1659901224055
[1097998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:689.
GPR[EPS]-1659901224695
GPR[ESUN]-1659901224695
GPR[SSUN]-1659901224695
214953636
GPR[SPVATF]-1659901224920
GPR[EPVATF]-1659901226249
GPR[SPS]-1659901226249
[1100203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:687.
GPR[EPS]-1659901226900
GPR[ESUN]-1659901226900
GPR[SSUN]-1659901226900
214953636
GPR[SPVATF]-1659901227128
GPR[EPVATF]-1659901228505
GPR[SPS]-1659901228505
[1102514] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:686.
GPR[EPS]-1659901229211
GPR[ESUN]-1659901229211
GPR[SSUN]-1659901229211
214953636
GPR[ESUN]-1659901229434
GPR[SSUN]-1659901229434
214953636
GPR[ESUN]-1659901229654
GPR[SSUN]-1659901229654
214953636
GPR[SPVATF]-1659901229873
GPR[EPVATF]-1659901236019
GPR[SPS]-1659901236019
[1109994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:683.
GPR[EPS]-1659901236691
GPR[ESUN]-1659901236691
GPR[SSUN]-1659901236691
-1957202630
GPR[SPVATF]-1659901236915
GPR[EPVATF]-1659901238122
GPR[SPS]-1659901238122
[1112018] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModuleGraph:325.
GPR[EPS]-1659901238715
GPR[ESUN]-1659901238715
GPR[SSUN]-1659901238715
1322642599
GPR[SPVATF]-1659901238943
GPR[EPVATF]-1659901240168
GPR[SPS]-1659901240168
[1114065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.SortedDependencies:117.
GPR[EPS]-1659901240762
GPR[SPVATF]-1659901240762
GPR[EPVATF]-1659901242014
GPR[SPS]-1659901242014
[1115906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.SortedDependencies:117.
GPR[EPS]-1659901242603
GPR[ESUN]-1659901242603
GPR[SSUN]-1659901242603
-418265650
GPR[SPVATF]-1659901242889
GPR[EPVATF]-1659901244139
GPR[SPS]-1659901244139
[1118544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:243.
GPR[EPS]-1659901245241
GPR[ESUN]-1659901245259
GPR[SSUN]-1659901245259
214953636
GPR[SPVATF]-1659901245482
GPR[EPVATF]-1659901246716
GPR[SPS]-1659901246716
[1120661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:673.
GPR[EPS]-1659901247358
GPR[SPVATF]-1659901247358
GPR[EPVATF]-1659901248615
GPR[SPS]-1659901248615
[1122555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:673.
GPR[EPS]-1659901249253
GPR[ESUN]-1659901249268
GPR[SSUN]-1659901249268
-477084294
GPR[ESUN]-1659901249467
GPR[SSUN]-1659901249467
2433571
GPR[ESUN]-1659901249698
GPR[SSUN]-1659901249698
1508981886
GPR[ESUN]-1659901249908
GPR[SSUN]-1659901249908
175865530
GPR[SPVATF]-1659901250083
GPR[EPVATF]-1659901250998
GPR[SPS]-1659901250998
[1124787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:117.
GPR[EPS]-1659901251484
GPR[SPVATF]-1659901251484
GPR[EPVATF]-1659901252437
GPR[SPS]-1659901252437
[1126238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.TokenStream:117.
GPR[EPS]-1659901252935
GPR[ESUN]-1659901252935
GPR[SSUN]-1659901252935
175865530
GPR[SPVATF]-1659901253116
GPR[EPVATF]-1659901254054
GPR[SPS]-1659901254054
[1127559] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TokenStream {
    public static boolean isKeyword(java.lang.String name) {
        boolean id = false;
        java.lang.String s = name;
        complete : {
            java.lang.String X = null;
            int c;
            partial : switch (s.length()) {
                case 2 :
                    c = s.charAt(1);
                    if (c == 'f') {
                        if (s.charAt(0) == 'i') {
                            id = true;
                            break complete;
                        }
                    } else if (c == 'n') {
                        if (s.charAt(0) == 'i') {
                            id = true;
                            break complete;
                        }
                    } else if (c == 'o') {
                        if (s.charAt(0) == 'd') {
                            id = true;
                            break complete;
                        }
                    }
                    break partial;
                case 3 :
                    switch (s.charAt(0)) {
                        case 'f' :
                            if ((s.charAt(2) == 'r') && (s.charAt(1) == 'o')) {
                                id = true;
                                break complete;
                            }
                            break partial;
                        case 'i' :
                            if ((s.charAt(2) == 't') && (s.charAt(1) == 'n')) {
                                id = true;
                                break complete;
                            }
                            break partial;
                        case 'n' :
                            if ((s.charAt(2) == 'w') && (s.charAt(1) == 'e')) {
                                id = true;
                                break complete;
                            }
                            break partial;
                        case 't' :
                            if ((s.charAt(2) == 'y') && (s.charAt(1) == 'r')) {
                                id = true;
                                break complete;
                            }
                            break partial;
                        case 'v' :
                            if ((s.charAt(2) == 'r') && (s.charAt(1) == 'a')) {
                                id = true;
                                break complete;
                            }
                            break partial;
                    }
                    break partial;
                case 4 :
                    switch (s.charAt(0)) {
                        case 'b' :
                            X = "byte";
                            id = true;
                            break partial;
                        case 'c' :
                            c = s.charAt(3);
                            if (c == 'e') {
                                if ((s.charAt(2) == 's') && (s.charAt(1) == 'a')) {
                                    id = true;
                                    break complete;
                                }
                            } else if (c == 'r') {
                                if ((s.charAt(2) == 'a') && (s.charAt(1) == 'h')) {
                                    id = true;
                                    break complete;
                                }
                            }
                            break partial;
                        case 'e' :
                            c = s.charAt(3);
                            if (c == 'e') {
                                if ((s.charAt(2) == 's') && (s.charAt(1) == 'l')) {
                                    id = true;
                                    break complete;
                                }
                            } else if (c == 'm') {
                                if ((s.charAt(2) == 'u') && (s.charAt(1) == 'n')) {
                                    id = true;
                                    break complete;
                                }
                            }
                            break partial;
                        case 'g' :
                            X = "goto";
                            id = true;
                            break partial;
                        case 'l' :
                            X = "long";
                            id = true;
                            break partial;
                        case 'n' :
                            X = "null";
                            id = true;
                            break partial;
                        case 't' :
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(216).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("X",X);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("id",id);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                                fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                c = s.charAt(3);

                            if (c == 'e') {
                                if ((s.charAt(2) == 'u') && (s.charAt(1) == 'r')) {
                                    id = true;
                                    break complete;
                                }
                            } else if (c == 's') {
                                if ((s.charAt(2) == 'i') && (s.charAt(1) == 'h')) {
                                    id = true;
                                    break complete;
                                }
                            }
                            break partial;
                        case 'v' :
                            X = "void";
                            id = true;
                            break partial;
                        case 'w' :
                            X = "with";
                            id = true;
                            break partial;
                    }
                    break partial;
                case 5 :
                    switch (s.charAt(2)) {
                        case 'a' :
                            X = "class";
                            id = true;
                            break partial;
                        case 'e' :
                            X = "break";
                            id = true;
                            break partial;
                        case 'i' :
                            X = "while";
                            id = true;
                            break partial;
                        case 'l' :
                            X = "false";
                            id = true;
                            break partial;
                        case 'n' :
                            c = s.charAt(0);
                            if (c == 'c') {
                                X = "const";
                                id = true;
                            } else if (c == 'f') {
                                X = "final";
                                id = true;
                            }
                            break partial;
                        case 'o' :
                            c = s.charAt(0);
                            if (c == 'f') {
                                X = "float";
                                id = true;
                            } else if (c == 's') {
                                X = "short";
                                id = true;
                            }
                            break partial;
                        case 'p' :
                            X = "super";
                            id = true;
                            break partial;
                        case 'r' :
                            X = "throw";
                            id = true;
                            break partial;
                        case 't' :
                            X = "catch";
                            id = true;
                            break partial;
                    }
                    break partial;
                case 6 :
                    switch (s.charAt(1)) {
                        case 'a' :
                            X = "native";
                            id = true;
                            break partial;
                        case 'e' :
                            c = s.charAt(0);
                            if (c == 'd') {
                                X = "delete";
                                id = true;
                            } else if (c == 'r') {
                                X = "return";
                                id = true;
                            }
                            break partial;
                        case 'h' :
                            X = "throws";
                            id = true;
                            break partial;
                        case 'm' :
                            X = "import";
                            id = true;
                            break partial;
                        case 'o' :
                            X = "double";
                            id = true;
                            break partial;
                        case 't' :
                            X = "static";
                            id = true;
                            break partial;
                        case 'u' :
                            X = "public";
                            id = true;
                            break partial;
                        case 'w' :
                            X = "switch";
                            id = true;
                            break partial;
                        case 'x' :
                            X = "export";
                            id = true;
                            break partial;
                        case 'y' :
                            X = "typeof";
                            id = true;
                            break partial;
                    }
                    break partial;
                case 7 :
                    switch (s.charAt(1)) {
                        case 'a' :
                            X = "package";
                            id = true;
                            break partial;
                        case 'e' :
                            X = "default";
                            id = true;
                            break partial;
                        case 'i' :
                            X = "finally";
                            id = true;
                            break partial;
                        case 'o' :
                            X = "boolean";
                            id = true;
                            break partial;
                        case 'r' :
                            X = "private";
                            id = true;
                            break partial;
                        case 'x' :
                            X = "extends";
                            id = true;
                            break partial;
                    }
                    break partial;
                case 8 :
                    switch (s.charAt(0)) {
                        case 'a' :
                            X = "abstract";
                            id = true;
                            break partial;
                        case 'c' :
                            X = "continue";
                            id = true;
                            break partial;
                        case 'd' :
                            X = "debugger";
                            id = true;
                            break partial;
                        case 'f' :
                            X = "function";
                            id = true;
                            break partial;
                        case 'v' :
                            X = "volatile";
                            id = true;
                            break partial;
                    }
                    break partial;
                case 9 :
                    c = s.charAt(0);
                    if (c == 'i') {
                        X = "interface";
                        id = true;
                    } else if (c == 'p') {
                        X = "protected";
                        id = true;
                    } else if (c == 't') {
                        X = "transient";
                        id = true;
                    }
                    break partial;
                case 10 :
                    c = s.charAt(1);
                    if (c == 'm') {
                        X = "implements";
                        id = true;
                    } else if (c == 'n') {
                        X = "instanceof";
                        id = true;
                    }
                    break partial;
                case 12 :
                    X = "synchronized";
                    id = true;
                    break partial;
            }
            if (((X != null) && (X != s)) && (!X.equals(s))) {
                return false;
            }
        }
        return id;
    }

    public static boolean isJSIdentifier(java.lang.String s) {
        int length = s.length();
        if ((length == 0) || (!java.lang.Character.isJavaIdentifierStart(s.charAt(0)))) {
            return false;
        }
        for (int i = 1; i < length; i++) {
            if (!java.lang.Character.isJavaIdentifierPart(s.charAt(i))) {
                return false;
            }
        }
        return true;
    }
}
[1127560] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901254257
GPR[SSUN]-1659901254257
1613130706
GPR[ESUN]-1659901254467
GPR[SSUN]-1659901254467
1613130706
GPR[ESUN]-1659901254673
GPR[SSUN]-1659901254673
1613130706
GPR[SPVATF]-1659901254878
GPR[EPVATF]-1659901255062
[1128365] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901255062
GPR[SSUN]-1659901255062
1421663094
GPR[SPVATF]-1659901255275
GPR[EPVATF]-1659901256210
GPR[SPS]-1659901256210
[1129827] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PeepholeRemoveDeadCode extends com.google.javascript.jscomp.AbstractPeepholeOptimization {
    @java.lang.Override
    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {
        switch (subtree.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return tryFoldAssignment(subtree);
            case com.google.javascript.rhino.Token.COMMA :
                return tryFoldComma(subtree);
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                return tryOptimizeBlock(subtree);
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                subtree = tryFoldExpr(subtree);
                return subtree;
            case com.google.javascript.rhino.Token.HOOK :
                return tryFoldHook(subtree);
            case com.google.javascript.rhino.Token.SWITCH :
                return tryOptimizeSwitch(subtree);
            case com.google.javascript.rhino.Token.IF :
                return tryFoldIf(subtree);
            case com.google.javascript.rhino.Token.WHILE :
                return tryFoldWhile(subtree);
            case com.google.javascript.rhino.Token.FOR :
                {
                    com.google.javascript.rhino.Node condition = com.google.javascript.jscomp.NodeUtil.getConditionExpression(subtree);
                    if (condition != null) {
                        tryFoldForCondition(condition);
                    }
                }
                return tryFoldFor(subtree);
            case com.google.javascript.rhino.Token.DO :
                return tryFoldDo(subtree);
            case com.google.javascript.rhino.Token.TRY :
                return tryFoldTry(subtree);
            default :
                return subtree;
        }
    }

    private com.google.javascript.rhino.Node tryFoldTry(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isTry());
        com.google.javascript.rhino.Node body = n.getFirstChild();
        com.google.javascript.rhino.Node catchBlock = body.getNext();
        com.google.javascript.rhino.Node finallyBlock = catchBlock.getNext();
        if ((!catchBlock.hasChildren()) && ((finallyBlock == null) || (!finallyBlock.hasChildren()))) {
            n.removeChild(body);
            n.getParent().replaceChild(n, body);
            reportCodeChange();
            return body;
        }
        if (!body.hasChildren()) {
            com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(catchBlock);
            if (finallyBlock != null) {
                n.removeChild(finallyBlock);
                n.getParent().replaceChild(n, finallyBlock);
            } else {
                n.getParent().removeChild(n);
            }
            reportCodeChange();
            return finallyBlock;
        }
        return n;
    }

    private com.google.javascript.rhino.Node tryFoldAssignment(com.google.javascript.rhino.Node subtree) {
        com.google.common.base.Preconditions.checkState(subtree.isAssign());
        com.google.javascript.rhino.Node left = subtree.getFirstChild();
        com.google.javascript.rhino.Node right = subtree.getLastChild();
        if ((left.isName() && right.isName()) && left.getString().equals(right.getString())) {
            subtree.getParent().replaceChild(subtree, right.detachFromParent());
            reportCodeChange();
            return right;
        }
        return subtree;
    }

    private com.google.javascript.rhino.Node tryFoldExpr(com.google.javascript.rhino.Node subtree) {
        com.google.javascript.rhino.Node result = trySimplifyUnusedResult(subtree.getFirstChild());
        if (result == null) {
            com.google.javascript.rhino.Node parent = subtree.getParent();
            if (parent.isLabel()) {
                com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.block().srcref(subtree);
                parent.replaceChild(subtree, replacement);
                subtree = replacement;
            } else {
                subtree.detachFromParent();
                subtree = null;
            }
        }
        return subtree;
    }

    private com.google.javascript.rhino.Node trySimplifyUnusedResult(com.google.javascript.rhino.Node n) {
        return trySimplifyUnusedResult(n, true);
    }

    private com.google.javascript.rhino.Node trySimplifyUnusedResult(com.google.javascript.rhino.Node n, boolean removeUnused) {
        com.google.javascript.rhino.Node result = n;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.HOOK :
                com.google.javascript.rhino.Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext());
                com.google.javascript.rhino.Node falseNode = trySimplifyUnusedResult(n.getLastChild());
                if ((trueNode == null) && (falseNode != null)) {
                    n.setType(com.google.javascript.rhino.Token.OR);
                    com.google.common.base.Preconditions.checkState(n.getChildCount() == 2);
                } else if ((trueNode != null) && (falseNode == null)) {
                    n.setType(com.google.javascript.rhino.Token.AND);
                    com.google.common.base.Preconditions.checkState(n.getChildCount() == 2);
                } else if ((trueNode == null) && (falseNode == null)) {
                    result = trySimplifyUnusedResult(n.getFirstChild());
                } else {
                    result = n;
                }
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                com.google.javascript.rhino.Node conditionalResultNode = trySimplifyUnusedResult(n.getLastChild());
                if (conditionalResultNode == null) {
                    com.google.common.base.Preconditions.checkState(n.hasOneChild());
                    result = trySimplifyUnusedResult(n.getFirstChild());
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                result = null;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node left = trySimplifyUnusedResult(n.getFirstChild());
                com.google.javascript.rhino.Node right = trySimplifyUnusedResult(n.getLastChild());
                if ((left == null) && (right == null)) {
                    result = null;
                } else if (left == null) {
                    result = right;
                } else if (right == null) {
                    result = left;
                } else {
                    result = n;
                }
                break;
            default :
                if (!com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n)) {
                    com.google.javascript.rhino.Node resultList = null;
                    for (com.google.javascript.rhino.Node next, c = n.getFirstChild(); c != null; c = next) {
                        next = c.getNext();
                        c = trySimplifyUnusedResult(c);
                        if (c != null) {
                            c.detachFromParent();
                            if (resultList == null) {
                                resultList = c;
                            } else {
                                resultList = com.google.javascript.rhino.IR.comma(resultList, c).srcref(c);
                            }
                        }
                    }
                    result = resultList;
                }
        }
        if (n != result) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (result == null) {
                if (removeUnused) {
                    parent.removeChild(n);
                } else {
                    result = com.google.javascript.rhino.IR.empty().srcref(n);
                    parent.replaceChild(n, result);
                }
            } else {
                if (result.getParent() != null) {
                    result.detachFromParent();
                }
                n.getParent().replaceChild(n, result);
            }
            reportCodeChange();
        }
        return result;
    }

    private com.google.javascript.rhino.Node tryOptimizeSwitch(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isSwitch());
        com.google.javascript.rhino.Node defaultCase = tryOptimizeDefaultCase(n);
        if (defaultCase == null) {
            com.google.javascript.rhino.Node next = null;
            com.google.javascript.rhino.Node prev = null;
            for (com.google.javascript.rhino.Node c = n.getFirstChild().getNext(); c != null; c = next) {
                next = c.getNext();
                if ((!mayHaveSideEffects(c.getFirstChild())) && isUselessCase(c, prev)) {
                    removeCase(n, c);
                } else {
                    prev = c;
                }
            }
        }
        if (n.hasOneChild()) {
            com.google.javascript.rhino.Node condition = n.removeFirstChild();
            com.google.javascript.rhino.Node parent = n.getParent();
            com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.exprResult(condition).srcref(n);
            parent.replaceChild(n, replacement);
            reportCodeChange();
            return replacement;
        }
        return null;
    }

    private com.google.javascript.rhino.Node tryOptimizeDefaultCase(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isSwitch());
        com.google.javascript.rhino.Node lastNonRemovable = n.getFirstChild();
        for (com.google.javascript.rhino.Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {
            if (c.isDefaultCase()) {
                com.google.javascript.rhino.Node caseToRemove = lastNonRemovable.getNext();
                for (com.google.javascript.rhino.Node next; caseToRemove != c; caseToRemove = next) {
                    next = caseToRemove.getNext();
                    removeCase(n, caseToRemove);
                }
                com.google.javascript.rhino.Node prevCase = (lastNonRemovable == n.getFirstChild()) ? null : lastNonRemovable;
                if (isUselessCase(c, prevCase)) {
                    removeCase(n, c);
                    return null;
                }
                return c;
            } else {
                com.google.common.base.Preconditions.checkState(c.isCase());
                if (c.getLastChild().hasChildren() || mayHaveSideEffects(c.getFirstChild())) {
                    lastNonRemovable = c;
                }
            }
        }
        return null;
    }

    private void removeCase(com.google.javascript.rhino.Node switchNode, com.google.javascript.rhino.Node caseNode) {
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(caseNode);
        switchNode.removeChild(caseNode);
        reportCodeChange();
    }

    private boolean isUselessCase(com.google.javascript.rhino.Node caseNode, @javax.annotation.Nullable
    com.google.javascript.rhino.Node previousCase) {
        com.google.common.base.Preconditions.checkState((previousCase == null) || (previousCase.getNext() == caseNode));
        com.google.javascript.rhino.Node switchNode = caseNode.getParent();
        if ((switchNode.getLastChild() != caseNode) && (previousCase != null)) {
            com.google.javascript.rhino.Node previousBlock = previousCase.getLastChild();
            if ((!previousBlock.hasChildren()) || (!isExit(previousBlock.getLastChild()))) {
                return false;
            }
        }
        com.google.javascript.rhino.Node executingCase = caseNode;
        while (executingCase != null) {
            com.google.common.base.Preconditions.checkState(executingCase.isDefaultCase() || executingCase.isCase());
            com.google.common.base.Preconditions.checkState((caseNode == executingCase) || (!executingCase.isDefaultCase()));
            com.google.javascript.rhino.Node block = executingCase.getLastChild();
            com.google.common.base.Preconditions.checkState(block.isBlock());
            if (block.hasChildren()) {
                for (com.google.javascript.rhino.Node blockChild : block.children()) {
                    switch (blockChild.getType()) {
                        case com.google.javascript.rhino.Token.BREAK :
                            return blockChild.getFirstChild() == null;
                        case com.google.javascript.rhino.Token.VAR :
                            if (blockChild.hasOneChild() && (blockChild.getFirstChild().getFirstChild() == null)) {
                                continue;
                            }
                            return false;
                        default :
                            return false;
                    }
                }
            } else {
                executingCase = executingCase.getNext();
            }
        } 
        return true;
    }

    private boolean isExit(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.RETURN :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            default :
                return false;
        }
    }

    private com.google.javascript.rhino.Node tryFoldComma(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        left = trySimplifyUnusedResult(left);
        if ((left == null) || (!mayHaveSideEffects(left))) {
            n.removeChild(right);
            parent.replaceChild(n, right);
            reportCodeChange();
            return right;
        }
        return n;
    }

    com.google.javascript.rhino.Node tryOptimizeBlock(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null;) {
            com.google.javascript.rhino.Node next = c.getNext();
            if ((!mayHaveSideEffects(c)) && (!c.isSyntheticBlock())) {
                n.removeChild(c);
                reportCodeChange();
            } else {
                tryOptimizeConditionalAfterAssign(c);
            }
            c = next;
        }
        if (n.isSyntheticBlock() || (n.getParent() == null)) {
            return n;
        }
        if (com.google.javascript.jscomp.NodeUtil.tryMergeBlock(n)) {
            reportCodeChange();
            return null;
        }
        return n;
    }

    private void tryOptimizeConditionalAfterAssign(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node next = n.getNext();
        if (isSimpleAssignment(n) && isConditionalStatement(next)) {
            com.google.javascript.rhino.Node lhsAssign = getSimpleAssignmentName(n);
            com.google.javascript.rhino.Node condition = getConditionalStatementCondition(next);
            if ((lhsAssign.isName() && condition.isName()) && lhsAssign.getString().equals(condition.getString())) {
                com.google.javascript.rhino.Node rhsAssign = getSimpleAssignmentValue(n);
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(rhsAssign);
                if (value != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    com.google.javascript.rhino.Node replacementConditionNode = com.google.javascript.jscomp.NodeUtil.booleanNode(value.toBoolean(true));
                    condition.getParent().replaceChild(condition, replacementConditionNode);
                    reportCodeChange();
                }
            }
        }
    }

    private boolean isSimpleAssignment(com.google.javascript.rhino.Node n) {
        if (com.google.javascript.jscomp.NodeUtil.isExprAssign(n) && n.getFirstChild().getFirstChild().isName()) {
            return true;
        } else if ((n.isVar() && n.hasOneChild()) && (n.getFirstChild().getFirstChild() != null)) {
            return true;
        }
        return false;
    }

    private com.google.javascript.rhino.Node getSimpleAssignmentName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(isSimpleAssignment(n));
        if (com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(217).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(217).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(217).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(217).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(217).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.getFirstChild().getFirstChild();

        } else {
            return n.getFirstChild();
        }
    }

    private com.google.javascript.rhino.Node getSimpleAssignmentValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(isSimpleAssignment(n));
        return n.getFirstChild().getLastChild();
    }

    private boolean isConditionalStatement(com.google.javascript.rhino.Node n) {
        return (n != null) && (n.isIf() || isExprConditional(n));
    }

    private boolean isExprConditional(com.google.javascript.rhino.Node n) {
        if (n.isExprResult()) {
            switch (n.getFirstChild().getType()) {
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    return true;
            }
        }
        return false;
    }

    private com.google.javascript.rhino.Node getConditionalStatementCondition(com.google.javascript.rhino.Node n) {
        if (n.isIf()) {
            return com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        } else {
            com.google.common.base.Preconditions.checkState(isExprConditional(n));
            return n.getFirstChild().getFirstChild();
        }
    }

    private com.google.javascript.rhino.Node tryFoldIf(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isIf());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkNotNull(parent);
        int type = n.getType();
        com.google.javascript.rhino.Node cond = n.getFirstChild();
        com.google.javascript.rhino.Node thenBody = cond.getNext();
        com.google.javascript.rhino.Node elseBody = thenBody.getNext();
        if ((elseBody != null) && (!mayHaveSideEffects(elseBody))) {
            n.removeChild(elseBody);
            elseBody = null;
            reportCodeChange();
        }
        if ((!mayHaveSideEffects(thenBody)) && (elseBody != null)) {
            n.removeChild(elseBody);
            n.replaceChild(thenBody, elseBody);
            com.google.javascript.rhino.Node notCond = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NOT);
            n.replaceChild(cond, notCond);
            notCond.addChildToFront(cond);
            cond = notCond;
            thenBody = cond.getNext();
            elseBody = null;
            reportCodeChange();
        }
        if ((!mayHaveSideEffects(thenBody)) && (elseBody == null)) {
            if (mayHaveSideEffects(cond)) {
                n.removeChild(cond);
                com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.newExpr(cond);
                parent.replaceChild(n, replacement);
                reportCodeChange();
                return replacement;
            } else {
                com.google.javascript.jscomp.NodeUtil.removeChild(parent, n);
                reportCodeChange();
                return null;
            }
        }
        com.google.javascript.rhino.jstype.TernaryValue condValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond);
        if (condValue == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            return n;
        }
        if (mayHaveSideEffects(cond)) {
            boolean newConditionValue = condValue == com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            if ((!newConditionValue) && (elseBody == null)) {
                elseBody = com.google.javascript.rhino.IR.block().srcref(n);
                n.addChildToBack(elseBody);
            }
            com.google.javascript.rhino.Node newCond = com.google.javascript.jscomp.NodeUtil.booleanNode(newConditionValue);
            n.replaceChild(cond, newCond);
            com.google.javascript.rhino.Node branchToKeep = (newConditionValue) ? thenBody : elseBody;
            branchToKeep.addChildToFront(com.google.javascript.rhino.IR.exprResult(cond).srcref(cond));
            reportCodeChange();
            cond = newCond;
        }
        boolean condTrue = condValue.toBoolean(true);
        if (n.getChildCount() == 2) {
            com.google.common.base.Preconditions.checkState(type == com.google.javascript.rhino.Token.IF);
            if (condTrue) {
                com.google.javascript.rhino.Node thenStmt = n.getFirstChild().getNext();
                n.removeChild(thenStmt);
                parent.replaceChild(n, thenStmt);
                reportCodeChange();
                return thenStmt;
            } else {
                com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent, n);
                reportCodeChange();
                return null;
            }
        } else {
            com.google.javascript.rhino.Node trueBranch = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node falseBranch = trueBranch.getNext();
            com.google.javascript.rhino.Node branchToKeep = (condTrue) ? trueBranch : falseBranch;
            com.google.javascript.rhino.Node branchToRemove = (condTrue) ? falseBranch : trueBranch;
            com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(branchToRemove);
            n.removeChild(branchToKeep);
            parent.replaceChild(n, branchToKeep);
            reportCodeChange();
            return branchToKeep;
        }
    }

    private com.google.javascript.rhino.Node tryFoldHook(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isHook());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.javascript.rhino.Node cond = n.getFirstChild();
        com.google.javascript.rhino.Node thenBody = cond.getNext();
        com.google.javascript.rhino.Node elseBody = thenBody.getNext();
        com.google.javascript.rhino.jstype.TernaryValue condValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond);
        if (condValue == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
            if (!areNodesEqualForInlining(thenBody, elseBody)) {
                return n;
            }
        }
        n.detachChildren();
        com.google.javascript.rhino.Node branchToKeep = (condValue.toBoolean(true)) ? thenBody : elseBody;
        com.google.javascript.rhino.Node replacement;
        if (mayHaveSideEffects(cond)) {
            replacement = com.google.javascript.rhino.IR.comma(cond, branchToKeep).srcref(n);
        } else {
            replacement = branchToKeep;
        }
        parent.replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
    }

    com.google.javascript.rhino.Node tryFoldWhile(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isWhile());
        com.google.javascript.rhino.Node cond = com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        if (com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
        com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);
        reportCodeChange();
        return null;
    }

    com.google.javascript.rhino.Node tryFoldFor(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isFor());
        if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
            return n;
        }
        com.google.javascript.rhino.Node init = n.getFirstChild();
        com.google.javascript.rhino.Node cond = init.getNext();
        com.google.javascript.rhino.Node increment = cond.getNext();
        if ((!init.isEmpty()) && (!init.isVar())) {
            init = trySimplifyUnusedResult(init, false);
        }
        if (!increment.isEmpty()) {
            increment = trySimplifyUnusedResult(increment, false);
        }
        if (!n.getFirstChild().isEmpty()) {
            return n;
        }
        if (com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        com.google.javascript.jscomp.NodeUtil.redeclareVarsInsideBranch(n);
        if (!mayHaveSideEffects(cond)) {
            com.google.javascript.jscomp.NodeUtil.removeChild(n.getParent(), n);
        } else {
            com.google.javascript.rhino.Node statement = com.google.javascript.rhino.IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
            n.getParent().replaceChild(n, statement);
        }
        reportCodeChange();
        return null;
    }

    com.google.javascript.rhino.Node tryFoldDo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isDo());
        com.google.javascript.rhino.Node cond = com.google.javascript.jscomp.NodeUtil.getConditionExpression(n);
        if (com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(cond) != com.google.javascript.rhino.jstype.TernaryValue.FALSE) {
            return n;
        }
        if (hasBreakOrContinue(n)) {
            return n;
        }
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));
        com.google.javascript.rhino.Node block = n.removeFirstChild();
        com.google.javascript.rhino.Node parent = n.getParent();
        parent.replaceChild(n, block);
        if (mayHaveSideEffects(cond)) {
            com.google.javascript.rhino.Node condStatement = com.google.javascript.rhino.IR.exprResult(cond.detachFromParent()).srcref(cond);
            parent.addChildAfter(condStatement, block);
        }
        reportCodeChange();
        return n;
    }

    boolean hasBreakOrContinue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.has(n, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>or(new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.BREAK), new com.google.javascript.jscomp.NodeUtil.MatchNodeType(com.google.javascript.rhino.Token.CONTINUE)), com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    private void tryFoldForCondition(com.google.javascript.rhino.Node forCondition) {
        if (com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(forCondition) == com.google.javascript.rhino.jstype.TernaryValue.TRUE) {
            forCondition.getParent().replaceChild(forCondition, com.google.javascript.rhino.IR.empty());
            reportCodeChange();
        }
    }
}
[1129827] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901256524
GPR[SSUN]-1659901256524
-1957202630
GPR[SPVATF]-1659901256744
GPR[EPVATF]-1659901258071
GPR[SPS]-1659901258071
[1131994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModuleGraph:321.
GPR[EPS]-1659901258692
GPR[ESUN]-1659901258692
GPR[SSUN]-1659901258692
1322642599
GPR[ESUN]-1659901258915
GPR[SSUN]-1659901258915
2346
GPR[ESUN]-1659901259099
GPR[SSUN]-1659901259099
2346
GPR[SPVATF]-1659901259281
GPR[EPVATF]-1659901260633
GPR[SPS]-1659901260633
[1134485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:301.
GPR[EPS]-1659901261182
GPR[ESUN]-1659901261182
GPR[SSUN]-1659901261182
2346
GPR[SPVATF]-1659901261369
GPR[EPVATF]-1659901262761
GPR[SPS]-1659901262761
[1136600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:300.
GPR[EPS]-1659901263297
GPR[ESUN]-1659901263297
GPR[SSUN]-1659901263297
1508329696
GPR[ESUN]-1659901263543
GPR[SSUN]-1659901263543
1508329696
GPR[SPVATF]-1659901263786
GPR[EPVATF]-1659901265171
GPR[SPS]-1659901265171
[1139228] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1311.
GPR[EPS]-1659901265925
GPR[ESUN]-1659901265925
GPR[SSUN]-1659901265925
1508329696
GPR[SPVATF]-1659901266175
GPR[EPVATF]-1659901267595
GPR[SPS]-1659901267595
[1141652] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1310.
GPR[EPS]-1659901268349
GPR[ESUN]-1659901268349
GPR[SSUN]-1659901268349
2346
GPR[ESUN]-1659901268536
GPR[SSUN]-1659901268536
2346
GPR[ESUN]-1659901268721
GPR[SSUN]-1659901268721
2346
GPR[ESUN]-1659901268903
GPR[SSUN]-1659901268903
2346
GPR[SPVATF]-1659901269087
GPR[EPVATF]-1659901270605
GPR[SPS]-1659901270605
[1144458] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:313.
GPR[EPS]-1659901271155
GPR[ESUN]-1659901271155
GPR[SSUN]-1659901271155
2346
GPR[SPVATF]-1659901271343
GPR[EPVATF]-1659901272923
GPR[SPS]-1659901272923
[1146784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:312.
GPR[EPS]-1659901273481
GPR[ESUN]-1659901273481
GPR[SSUN]-1659901273481
-1957202630
GPR[ESUN]-1659901273706
GPR[SSUN]-1659901273706
-1957202630
GPR[SPVATF]-1659901273921
GPR[EPVATF]-1659901281873
GPR[SPS]-1659901281874
[1155819] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModuleGraph:329.
GPR[EPS]-1659901282516
GPR[SPVATF]-1659901282516
GPR[EPVATF]-1659901283739
GPR[SPS]-1659901283739
[1157631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModuleGraph:329.
GPR[EPS]-1659901284328
GPR[ESUN]-1659901284328
GPR[SSUN]-1659901284328
-1957202630
GPR[ESUN]-1659901284550
GPR[SSUN]-1659901284550
1322642599
GPR[ESUN]-1659901284770
GPR[SSUN]-1659901284770
-1957202630
GPR[SPVATF]-1659901285001
GPR[EPVATF]-1659901286212
GPR[SPS]-1659901286212
[1160109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModuleGraph:324.
GPR[EPS]-1659901286806
GPR[ESUN]-1659901286806
GPR[SSUN]-1659901286807
-1957202630
GPR[SPVATF]-1659901287027
GPR[EPVATF]-1659901288286
GPR[SPS]-1659901288286
[1162203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModuleGraph:320.
GPR[EPS]-1659901288900
GPR[SPVATF]-1659901288900
GPR[EPVATF]-1659901290151
GPR[SPS]-1659901290151
[1164049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModuleGraph:320.
GPR[EPS]-1659901290746
GPR[ESUN]-1659901290746
GPR[SSUN]-1659901290746
-1807134540
GPR[ESUN]-1659901290929
GPR[SSUN]-1659901290929
-1807134540
GPR[ESUN]-1659901291109
GPR[SSUN]-1659901291109
GPR[ESUN]-1659901291109
GPR[SSUN]-1659901291109
-477084294
GPR[ESUN]-1659901291305
GPR[SSUN]-1659901291305
-477084294
GPR[ESUN]-1659901291496
GPR[SSUN]-1659901291496
234947553
GPR[ESUN]-1659901291687
GPR[SSUN]-1659901291687
234947553
GPR[SPVATF]-1659901291876
GPR[EPVATF]-1659901291891
[1165195] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901291892
GPR[EPVATF]-1659901291907
[1165210] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901291907
GPR[SSUN]-1659901291907
234947553
GPR[ESUN]-1659901292098
GPR[SSUN]-1659901292098
234947553
GPR[SPVATF]-1659901292289
GPR[EPVATF]-1659901292304
[1165607] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901292304
GPR[EPVATF]-1659901292320
[1165623] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901292320
GPR[SSUN]-1659901292320
234947553
GPR[SPVATF]-1659901292511
GPR[EPVATF]-1659901292526
[1165829] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901292526
GPR[SSUN]-1659901292526
234947553
GPR[ESUN]-1659901292715
GPR[SSUN]-1659901292715
234947553
GPR[ESUN]-1659901292903
GPR[SSUN]-1659901292903
234947553
GPR[SPVATF]-1659901293093
GPR[EPVATF]-1659901293108
[1166411] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901293108
GPR[SSUN]-1659901293108
234947553
GPR[SPVATF]-1659901293300
GPR[EPVATF]-1659901293315
[1166618] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901293315
GPR[SSUN]-1659901293315
234947553
GPR[SPVATF]-1659901293504
GPR[EPVATF]-1659901293520
[1166823] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901293520
GPR[SSUN]-1659901293520
234947553
GPR[ESUN]-1659901293711
GPR[SSUN]-1659901293711
234947553
GPR[ESUN]-1659901293899
GPR[SSUN]-1659901293899
234947553
GPR[SPVATF]-1659901294088
GPR[EPVATF]-1659901294103
[1167406] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901294103
GPR[SSUN]-1659901294103
234947553
GPR[SPVATF]-1659901294313
GPR[EPVATF]-1659901294329
[1167632] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901294329
GPR[SSUN]-1659901294329
234947553
GPR[ESUN]-1659901294522
GPR[SSUN]-1659901294522
234947553
GPR[SPVATF]-1659901294711
GPR[EPVATF]-1659901294727
[1168030] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901294728
GPR[SSUN]-1659901294728
234947553
GPR[SPVATF]-1659901294917
GPR[EPVATF]-1659901294934
[1168238] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901294935
GPR[SSUN]-1659901294935
234947553
GPR[ESUN]-1659901295124
GPR[SSUN]-1659901295124
890942016
GPR[SPVATF]-1659901295316
GPR[EPVATF]-1659901295338
[1168641] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901295338
GPR[EPVATF]-1659901295357
[1168660] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901295357
GPR[SSUN]-1659901295357
890942016
GPR[SPVATF]-1659901295551
GPR[EPVATF]-1659901295569
[1168873] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901295570
GPR[SSUN]-1659901295570
890942016
GPR[ESUN]-1659901295760
GPR[SSUN]-1659901295760
890942016
GPR[SPVATF]-1659901295951
GPR[EPVATF]-1659901295970
[1169273] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901295970
GPR[SSUN]-1659901295970
890942016
GPR[SPVATF]-1659901296163
GPR[EPVATF]-1659901296181
[1169484] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901296181
GPR[EPVATF]-1659901296199
[1169502] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901296199
GPR[SSUN]-1659901296199
890942016
GPR[SPVATF]-1659901296390
GPR[EPVATF]-1659901296408
[1169711] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901296408
GPR[SSUN]-1659901296408
890942016
GPR[SPVATF]-1659901296601
GPR[EPVATF]-1659901296621
[1169924] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901296621
GPR[EPVATF]-1659901296639
[1169942] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901296639
GPR[SSUN]-1659901296639
890942016
GPR[ESUN]-1659901296833
GPR[SSUN]-1659901296833
890942016
GPR[SPVATF]-1659901297024
GPR[EPVATF]-1659901297043
[1170346] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901297043
GPR[SSUN]-1659901297043
890942016
GPR[SPVATF]-1659901297235
GPR[EPVATF]-1659901297254
[1170557] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901297254
GPR[SSUN]-1659901297254
890942016
GPR[SPVATF]-1659901297446
GPR[EPVATF]-1659901297464
[1170768] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901297465
GPR[SSUN]-1659901297465
890942016
GPR[ESUN]-1659901297656
GPR[SSUN]-1659901297656
1613130706
GPR[SPVATF]-1659901297863
GPR[EPVATF]-1659901298044
[1171347] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659901298044
GPR[EPVATF]-1659901298222
[1171525] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659901298222
GPR[SSUN]-1659901298222
-1807134540
GPR[ESUN]-1659901298401
GPR[SSUN]-1659901298401
-1807134540
GPR[SPVATF]-1659901298581
GPR[EPVATF]-1659901299798
GPR[SPS]-1659901299798
[1173662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DependencyOptions:96.
GPR[EPS]-1659901300359
GPR[ESUN]-1659901300359
GPR[SSUN]-1659901300359
-1966087783
GPR[SPVATF]-1659901300555
GPR[EPVATF]-1659901301809
GPR[SPS]-1659901301809
[1175678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.JsFileLineParser:176.
GPR[EPS]-1659901302375
GPR[SPVATF]-1659901302376
GPR[EPVATF]-1659901303627
GPR[SPS]-1659901303627
[1177214] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class JsFileLineParser {
    static final com.google.javascript.jscomp.DiagnosticType PARSE_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("DEPS_PARSE_WARNING", "{0}\n{1}");

    static final com.google.javascript.jscomp.DiagnosticType PARSE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("DEPS_PARSE_ERROR", "{0}\n{1}");

    boolean shortcutMode = false;

    static class ParseException extends java.lang.Exception {
        public static final long serialVersionUID = 1L;

        private boolean fatal;

        public ParseException(java.lang.String message, boolean fatal) {
            super(message);
            this.fatal = fatal;
        }

        public boolean isFatal() {
            return fatal;
        }
    }

    private static final java.util.regex.Pattern STRING_LITERAL_PATTERN = java.util.regex.Pattern.compile("\\s*(?:\'((?:\\\\\'|[^\'])*?)\'|\"((?:\\\\\"|[^\"])*?)\")\\s*");

    private java.util.regex.Matcher valueMatcher = com.google.javascript.jscomp.deps.JsFileLineParser.STRING_LITERAL_PATTERN.matcher("");

    java.lang.String filePath;

    int lineNum;

    com.google.javascript.jscomp.ErrorManager errorManager;

    boolean parseSucceeded;

    public JsFileLineParser(com.google.javascript.jscomp.ErrorManager errorManager) {
        this.errorManager = errorManager;
    }

    public void setShortcutMode(boolean mode) {
        this.shortcutMode = mode;
    }

    public boolean didParseSucceed() {
        return parseSucceeded;
    }

    void doParse(java.lang.String filePath, java.io.Reader fileContents) {
        this.filePath = filePath;
        parseSucceeded = true;
        java.io.BufferedReader lineBuffer = new java.io.BufferedReader(fileContents);
        java.lang.String line = null;
        lineNum = 0;
        boolean inMultilineComment = false;
        try {
            while (null != (line = lineBuffer.readLine())) {
                ++lineNum;
                try {
                    java.lang.String revisedLine = line;
                    if (inMultilineComment) {
                        int endOfComment = revisedLine.indexOf("*/");
                        if (endOfComment != (-1)) {
                            revisedLine = revisedLine.substring(endOfComment + 2);
                            inMultilineComment = false;
                        } else {
                            revisedLine = "";
                        }
                    }
                    if (!inMultilineComment) {
                        while (true) {
                            int startOfLineComment = revisedLine.indexOf("//");
                            int startOfMultilineComment = revisedLine.indexOf("/*");
                            if ((startOfLineComment != (-1)) && ((startOfMultilineComment == (-1)) || (startOfLineComment < startOfMultilineComment))) {
                                revisedLine = revisedLine.substring(0, startOfLineComment);
                                break;
                            } else if (startOfMultilineComment != (-1)) {
                                int endOfMultilineComment = revisedLine.indexOf("*/", startOfMultilineComment + 2);
                                if (endOfMultilineComment == (-1)) {
                                    revisedLine = revisedLine.substring(0, startOfMultilineComment);
                                    inMultilineComment = true;
                                    break;
                                } else {
                                    revisedLine = revisedLine.substring(0, startOfMultilineComment) + revisedLine.substring(endOfMultilineComment + 2);
                                }
                            } else {
                                break;
                            }
                        } 
                    }
                    if (!revisedLine.isEmpty()) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = (!parseLine(revisedLine)) && shortcutMode;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(232).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.filePath",com.google.javascript.jscomp.deps.JsFileLineParser.this.filePath);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("revisedLine",revisedLine);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("line",line);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("filePath",filePath);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("inMultilineComment",inMultilineComment);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("fileContents",fileContents);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.STRING_LITERAL_PATTERN",com.google.javascript.jscomp.deps.JsFileLineParser.STRING_LITERAL_PATTERN);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.lineNum",com.google.javascript.jscomp.deps.JsFileLineParser.this.lineNum);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("lineBuffer",lineBuffer);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_WARNING",com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.errorManager",com.google.javascript.jscomp.deps.JsFileLineParser.this.errorManager);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.valueMatcher",com.google.javascript.jscomp.deps.JsFileLineParser.this.valueMatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR",com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.parseSucceeded",com.google.javascript.jscomp.deps.JsFileLineParser.this.parseSucceeded);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.shortcutMode",com.google.javascript.jscomp.deps.JsFileLineParser.this.shortcutMode);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectionEnds();
                        }
                        if (runtimeAngelicValue) {
                            break;
                        }
                    }
                } catch (com.google.javascript.jscomp.deps.JsFileLineParser.ParseException e) {
                    errorManager.report(e.isFatal() ? com.google.javascript.jscomp.CheckLevel.ERROR : com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.JSError.make(filePath, lineNum, 0, e.isFatal() ? com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR : com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_WARNING, e.getMessage(), line));
                    parseSucceeded = parseSucceeded && (!e.isFatal());
                }
            } 
        } catch (java.io.IOException e) {
            errorManager.report(com.google.javascript.jscomp.CheckLevel.ERROR, com.google.javascript.jscomp.JSError.make(filePath, 0, 0, com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR, "Error reading file: " + filePath));
            parseSucceeded = false;
        }
    }

    abstract boolean parseLine(java.lang.String line) throws com.google.javascript.jscomp.deps.JsFileLineParser.ParseException;

    java.lang.String parseJsString(java.lang.String jsStringLiteral) throws com.google.javascript.jscomp.deps.JsFileLineParser.ParseException {
        valueMatcher.reset(jsStringLiteral);
        if (!valueMatcher.matches()) {
            throw new com.google.javascript.jscomp.deps.JsFileLineParser.ParseException("Syntax error in JS String literal", true);
        }
        return valueMatcher.group(1) != null ? valueMatcher.group(1) : valueMatcher.group(2);
    }

    java.util.List<java.lang.String> parseJsStringArray(java.lang.String input) throws com.google.javascript.jscomp.deps.JsFileLineParser.ParseException {
        java.util.List<java.lang.String> results = com.google.common.collect.Lists.newArrayList();
        int indexStart = input.indexOf('[');
        int indexEnd = input.lastIndexOf(']');
        if ((indexStart == (-1)) || (indexEnd == (-1))) {
            throw new com.google.javascript.jscomp.deps.JsFileLineParser.ParseException("Syntax error when parsing JS array", true);
        }
        java.lang.String innerValues = input.substring(indexStart + 1, indexEnd);
        if (!innerValues.trim().isEmpty()) {
            valueMatcher.reset(innerValues);
            for (; ;) {
                if (!valueMatcher.lookingAt()) {
                    throw new com.google.javascript.jscomp.deps.JsFileLineParser.ParseException("Syntax error in JS String literal", true);
                }
                results.add(valueMatcher.group(1) != null ? valueMatcher.group(1) : valueMatcher.group(2));
                if (valueMatcher.hitEnd()) {
                    break;
                }
                if (innerValues.charAt(valueMatcher.end()) != ',') {
                    throw new com.google.javascript.jscomp.deps.JsFileLineParser.ParseException("Missing comma in string array", true);
                }
                valueMatcher.region(valueMatcher.end() + 1, valueMatcher.regionEnd());
            }
        }
        return results;
    }
}
[1177214] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659901303911
GPR[SSUN]-1659901303911
-1966087783
GPR[SPVATF]-1659901304099
GPR[EPVATF]-1659901305346
GPR[SPS]-1659901305346
[1179345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.JsFileLineParser:173.
GPR[EPS]-1659901306042
GPR[SPVATF]-1659901306042
GPR[EPVATF]-1659901307327
GPR[SPS]-1659901307327
[1181193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.JsFileLineParser:173.
GPR[EPS]-1659901307890
GPR[ESUN]-1659901307890
GPR[SSUN]-1659901307890
-1966087783
GPR[SPVATF]-1659901308081
GPR[EPVATF]-1659901309359
GPR[SPS]-1659901309359
[1351968] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[SPVATF]-1659901506238
[1384391] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659901511088
GPR[SSUN]-1659901511088
\n\nNode: host-50\n
\n\nDate: Sun 07 Aug 2022 12:45:39 PM PDT\n
End running Nopol Closure/26 results at /experiment_home///results/Nopol/Closure/26/seed_264/
Removing checked out dir script/workingdir/Nopol/Closure_26
GPR[SSLE]-1659901540071
GPR[ESLE]-1659901600076
