Sleep 1m start
GPR[SSLI]-1659906227443
GPR[ESLI]-1659906287449
Running Nopol Closure 31b with approach: smt
Timezone: America/Los_Angeles
Seed 263
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/31/seed_263/
The file script/workingdir/Nopol/Closure_31 does not exist!
script/workingdir/Nopol/Closure_31
script/workingdir/Nopol/Closure_31
classpath:  script/workingdir/Nopol/Closure_31/build/classes:script/workingdir/Nopol/Closure_31/lib/args4j.jar:script/workingdir/Nopol/Closure_31/lib/guava.jar:script/workingdir/Nopol/Closure_31/lib/json.jar:script/workingdir/Nopol/Closure_31/lib/jsr305.jar:script/workingdir/Nopol/Closure_31/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_31/build/lib/rhino.jar:script/workingdir/Nopol/Closure_31/lib/ant.jar:script/workingdir/Nopol/Closure_31/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_31/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_31/lib/jarjar.jar:script/workingdir/Nopol/Closure_31/lib/junit.jar:script/workingdir/Nopol/Closure_31/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659906306504
GPR[ESLB]-1659906366510
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_31//build/classes:script/workingdir/Nopol/Closure_31//build/test:script/workingdir/Nopol/Closure_31/build/classes:script/workingdir/Nopol/Closure_31/lib/args4j.jar:script/workingdir/Nopol/Closure_31/lib/guava.jar:script/workingdir/Nopol/Closure_31/lib/json.jar:script/workingdir/Nopol/Closure_31/lib/jsr305.jar:script/workingdir/Nopol/Closure_31/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_31/build/lib/rhino.jar:script/workingdir/Nopol/Closure_31/lib/ant.jar:script/workingdir/Nopol/Closure_31/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_31/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_31/lib/jarjar.jar:script/workingdir/Nopol/Closure_31/lib/junit.jar:script/workingdir/Nopol/Closure_31/build/test
Node: host-51
Date init: Sun 07 Aug 2022 02:06:06 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_31/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_31/build/classes/, file:script/workingdir/Nopol/Closure_31/build/test/, file:script/workingdir/Nopol/Closure_31/build/classes/, file:script/workingdir/Nopol/Closure_31/lib/args4j.jar, file:script/workingdir/Nopol/Closure_31/lib/guava.jar, file:script/workingdir/Nopol/Closure_31/lib/json.jar, file:script/workingdir/Nopol/Closure_31/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_31/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_31/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_31/lib/ant.jar, file:script/workingdir/Nopol/Closure_31/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_31/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_31/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_31/lib/junit.jar, file:script/workingdir/Nopol/Closure_31/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_31/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/31/seed_263/, json=true}
[4] INFO NoPol - Available processors (cores): 36
[8] INFO NoPol - Free memory: 1 GB
[8] INFO NoPol - Maximum memory: 7 GB
[8] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[10] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659906371783
GPR[ESUP]-1659906371783
GPR[SFL]-1659906371783
GPR[EFL]-1659906411004
GPR[SFP]-1659906411004
GPR[SSUN]-1659906412661
-283827935
GPR[SPVATF]-1659906413221
GPR[EPVATF]-1659906413257
[45958] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906413258
GPR[SSUN]-1659906413258
-1966087783
GPR[ESUN]-1659906413470
GPR[SSUN]-1659906413470
-1966087783
GPR[SPVATF]-1659906413682
GPR[EPVATF]-1659906413713
[46414] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906413714
GPR[SSUN]-1659906413714
-1966087783
GPR[SPVATF]-1659906413908
GPR[EPVATF]-1659906413930
[46630] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906413930
GPR[SSUN]-1659906413930
-1966087783
GPR[SPVATF]-1659906414134
GPR[EPVATF]-1659906414156
[46856] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906414156
GPR[SSUN]-1659906414156
-1659631726
GPR[ESUN]-1659906414459
GPR[SSUN]-1659906414459
130004992
GPR[ESUN]-1659906414645
GPR[SSUN]-1659906414645
130004992
GPR[SPVATF]-1659906415253
GPR[EPVATF]-1659906415277
[47977] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906415277
GPR[SSUN]-1659906415277
130004992
GPR[ESUN]-1659906415460
GPR[SSUN]-1659906415460
2433571
GPR[SPVATF]-1659906415712
GPR[EPVATF]-1659906416680
GPR[SPS]-1659906416680
[50667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1459.
GPR[EPS]-1659906417967
GPR[ESUN]-1659906417967
GPR[SSUN]-1659906417967
2433571
GPR[SPVATF]-1659906418221
GPR[EPVATF]-1659906421559
GPR[SPS]-1659906421559
GPR[EPS]-1659906422915
GPR[SPVATR]-1659906422915
[55615] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION com.google.javascript.rhino.Node.this.type <= 52
[56048] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.type <= 52" is working
GPR[EPVATR]-1659906423551
[56251] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659906423551
[56285] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (com.google.javascript.rhino.Node.this.type <= 52) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/31/seed_263/patch_51802_1ts_1659906423585.diff
GPR[ESUN]-1659906423586
GPR[SSUN]-1659906423586
-2038230110
GPR[ESUN]-1659906423801
GPR[SSUN]-1659906423801
-2038230110
GPR[SPVATF]-1659906423992
GPR[EPVATF]-1659906424772
GPR[SPS]-1659906424772
[57955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilationLevel:85.
GPR[EPS]-1659906425256
GPR[ESUN]-1659906425256
GPR[SSUN]-1659906425256
-2038230110
GPR[SPVATF]-1659906425454
GPR[EPVATF]-1659906426247
GPR[SPS]-1659906426247
[60116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilationLevel:82.
GPR[EPS]-1659906427416
GPR[ESUN]-1659906427416
GPR[SSUN]-1659906427416
-2038230110
GPR[SPVATF]-1659906427617
GPR[EPVATF]-1659906428405
GPR[SPS]-1659906428405
[61583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilationLevel:57.
GPR[EPS]-1659906428883
GPR[ESUN]-1659906428883
GPR[SSUN]-1659906428883
-2038230110
GPR[SPVATF]-1659906429080
GPR[EPVATF]-1659906429871
GPR[SPS]-1659906429871
[63103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilationLevel:56.
GPR[EPS]-1659906430403
GPR[ESUN]-1659906430403
GPR[SSUN]-1659906430403
1508329696
GPR[ESUN]-1659906430661
GPR[SSUN]-1659906430661
1508329696
GPR[SPVATF]-1659906430907
GPR[EPVATF]-1659906431717
GPR[SPS]-1659906431717
[65177] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1019.
GPR[EPS]-1659906432477
GPR[ESUN]-1659906432477
GPR[SSUN]-1659906432477
890942016
GPR[ESUN]-1659906432670
GPR[SSUN]-1659906432670
890942016
GPR[SPVATF]-1659906432855
GPR[EPVATF]-1659906432874
[65574] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906432874
GPR[SSUN]-1659906432874
890942016
GPR[SPVATF]-1659906433067
GPR[EPVATF]-1659906433086
[65786] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906433086
GPR[EPVATF]-1659906433106
[65806] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906433106
GPR[SSUN]-1659906433106
890942016
GPR[ESUN]-1659906433298
GPR[SSUN]-1659906433298
890942016
GPR[ESUN]-1659906433486
GPR[SSUN]-1659906433486
-1966087783
GPR[ESUN]-1659906433687
GPR[SSUN]-1659906433687
-1966087783
GPR[SPVATF]-1659906433873
GPR[EPVATF]-1659906433892
[66593] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906433893
GPR[EPVATF]-1659906433910
[66610] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906433910
GPR[SSUN]-1659906433910
-1966087783
GPR[ESUN]-1659906434099
GPR[SSUN]-1659906434099
-1966087783
GPR[SPVATF]-1659906434285
GPR[EPVATF]-1659906434304
[67004] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906434304
GPR[EPVATF]-1659906434323
[67023] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906434323
GPR[SSUN]-1659906434323
-1966087783
GPR[ESUN]-1659906434520
GPR[SSUN]-1659906434520
-1966087783
GPR[ESUN]-1659906434703
GPR[SSUN]-1659906434703
-1966087783
GPR[ESUN]-1659906434891
GPR[SSUN]-1659906434891
1613130706
GPR[ESUN]-1659906435099
GPR[SSUN]-1659906435099
1613130706
GPR[ESUN]-1659906435307
GPR[SSUN]-1659906435307
1613130706
GPR[SPVATF]-1659906435511
GPR[EPVATF]-1659906435695
[68395] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906435695
GPR[SSUN]-1659906435695
234947553
GPR[ESUN]-1659906435883
GPR[SSUN]-1659906435883
234947553
GPR[SPVATF]-1659906436071
GPR[EPVATF]-1659906436087
[68787] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906436087
GPR[EPVATF]-1659906436101
[68801] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906436101
GPR[SSUN]-1659906436101
234947553
GPR[ESUN]-1659906436287
GPR[SSUN]-1659906436287
234947553
GPR[SPVATF]-1659906436473
GPR[EPVATF]-1659906436488
[69188] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906436489
GPR[EPVATF]-1659906436503
[69203] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906436503
GPR[SSUN]-1659906436503
234947553
GPR[SPVATF]-1659906436708
GPR[EPVATF]-1659906436724
[69424] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906436724
GPR[SSUN]-1659906436724
234947553
GPR[ESUN]-1659906437029
GPR[SSUN]-1659906437029
234947553
GPR[ESUN]-1659906437215
GPR[SSUN]-1659906437215
234947553
GPR[SPVATF]-1659906437407
GPR[EPVATF]-1659906437424
[70124] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906437424
GPR[SSUN]-1659906437424
234947553
GPR[SPVATF]-1659906437611
GPR[EPVATF]-1659906437627
[70327] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906437627
GPR[SSUN]-1659906437627
234947553
GPR[SPVATF]-1659906437814
GPR[EPVATF]-1659906437832
[70532] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906437832
GPR[SSUN]-1659906437832
234947553
GPR[ESUN]-1659906438019
GPR[SSUN]-1659906438019
234947553
GPR[ESUN]-1659906438203
GPR[SSUN]-1659906438203
234947553
GPR[SPVATF]-1659906438390
GPR[EPVATF]-1659906438405
[71106] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906438406
GPR[SSUN]-1659906438406
234947553
GPR[SPVATF]-1659906438592
GPR[EPVATF]-1659906438608
[71308] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906438608
GPR[SSUN]-1659906438608
234947553
GPR[ESUN]-1659906438796
GPR[SSUN]-1659906438796
234947553
GPR[SPVATF]-1659906438980
GPR[EPVATF]-1659906438996
[71696] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906438996
GPR[SSUN]-1659906438996
234947553
GPR[SPVATF]-1659906439183
GPR[EPVATF]-1659906439199
[71899] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906439199
GPR[SSUN]-1659906439199
234947553
GPR[ESUN]-1659906439387
GPR[SSUN]-1659906439387
890942016
GPR[SPVATF]-1659906439589
GPR[EPVATF]-1659906439608
[72308] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906439608
GPR[EPVATF]-1659906439626
[72326] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906439626
GPR[SSUN]-1659906439626
890942016
GPR[SPVATF]-1659906439816
GPR[EPVATF]-1659906439835
[72535] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906439835
GPR[SSUN]-1659906439835
890942016
GPR[ESUN]-1659906440025
GPR[SSUN]-1659906440025
890942016
GPR[SPVATF]-1659906440217
GPR[EPVATF]-1659906440236
[72936] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906440236
GPR[SSUN]-1659906440236
890942016
GPR[SPVATF]-1659906440426
GPR[EPVATF]-1659906440444
[73144] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906440444
GPR[EPVATF]-1659906440463
[73163] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906440463
GPR[SSUN]-1659906440463
890942016
GPR[SPVATF]-1659906440652
GPR[EPVATF]-1659906440671
[73371] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906440671
GPR[SSUN]-1659906440671
890942016
GPR[SPVATF]-1659906440861
GPR[EPVATF]-1659906440880
[73580] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906440880
GPR[EPVATF]-1659906440898
[73598] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906440898
GPR[SSUN]-1659906440898
890942016
GPR[ESUN]-1659906441087
GPR[SSUN]-1659906441087
890942016
GPR[SPVATF]-1659906441273
GPR[EPVATF]-1659906441294
[73994] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906441294
GPR[SSUN]-1659906441294
890942016
GPR[SPVATF]-1659906441481
GPR[EPVATF]-1659906441498
[74198] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906441498
GPR[SSUN]-1659906441498
890942016
GPR[SPVATF]-1659906441685
GPR[EPVATF]-1659906441703
[74403] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906441703
GPR[SSUN]-1659906441703
890942016
GPR[ESUN]-1659906441889
GPR[SSUN]-1659906441889
1613130706
GPR[SPVATF]-1659906442095
GPR[EPVATF]-1659906442266
[74966] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906442266
GPR[EPVATF]-1659906442437
[75137] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906442437
GPR[SSUN]-1659906442437
1613130706
GPR[SPVATF]-1659906442664
GPR[EPVATF]-1659906443439
[76139] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906443439
GPR[SSUN]-1659906443439
1613130706
GPR[SPVATF]-1659906443654
GPR[EPVATF]-1659906443821
[76521] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906443822
GPR[EPVATF]-1659906444053
[76753] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906444053
GPR[SSUN]-1659906444053
-1712894512
GPR[SPVATF]-1659906444289
GPR[EPVATF]-1659906445069
GPR[SPS]-1659906445069
[78488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:461.
GPR[EPS]-1659906445788
GPR[ESUN]-1659906445789
GPR[SSUN]-1659906445789
-1712894512
GPR[SPVATF]-1659906446017
GPR[EPVATF]-1659906446792
GPR[SPS]-1659906446792
[80074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:460.
GPR[EPS]-1659906447374
GPR[ESUN]-1659906447374
GPR[SSUN]-1659906447374
2433571
GPR[SPVATF]-1659906447623
GPR[EPVATF]-1659906448422
GPR[SPS]-1659906448422
GPR[EPS]-1659906449499
GPR[SPVATR]-1659906449499
[82199] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1446: PRECONDITION com.google.javascript.rhino.Node.this.sourcePosition <= -1
[82603] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.sourcePosition <= -1" is working
GPR[EPVATR]-1659906450091
[82791] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659906450091
[82808] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1445,3 +1445,5 @@
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (com.google.javascript.rhino.Node.this.sourcePosition <= -1) {
+        return new NodeMismatch(this, node2);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/31/seed_263/patch_78325_2ts_1659906450108.diff
GPR[ESUN]-1659906450109
GPR[SSUN]-1659906450109
1613130706
GPR[SPVATF]-1659906450317
GPR[EPVATF]-1659906450491
[83191] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906450491
GPR[EPVATF]-1659906450665
[83365] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906450665
GPR[SSUN]-1659906450665
1613130706
GPR[SPVATF]-1659906450890
GPR[EPVATF]-1659906451058
[83758] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906451058
GPR[EPVATF]-1659906451233
[83933] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906451233
GPR[SSUN]-1659906451233
1613130706
GPR[ESUN]-1659906451443
GPR[SSUN]-1659906451443
1613130706
GPR[ESUN]-1659906451650
GPR[SSUN]-1659906451650
1613130706
GPR[ESUN]-1659906451850
GPR[SSUN]-1659906451850
1613130706
GPR[ESUN]-1659906452051
GPR[SSUN]-1659906452051
1613130706
GPR[SPVATF]-1659906452253
GPR[EPVATF]-1659906452428
[85129] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906452429
GPR[EPVATF]-1659906452603
[85303] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906452603
GPR[SSUN]-1659906452603
-1712894512
GPR[SPVATF]-1659906452830
GPR[EPVATF]-1659906453619
GPR[SPS]-1659906453619
[86975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:457.
GPR[EPS]-1659906454275
GPR[SPVATF]-1659906454275
GPR[EPVATF]-1659906455078
GPR[SPS]-1659906455078
[88416] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:457.
GPR[EPS]-1659906455716
GPR[ESUN]-1659906455738
GPR[SSUN]-1659906455738
1613130706
GPR[SPVATF]-1659906455950
GPR[EPVATF]-1659906456124
[88824] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906456124
GPR[SSUN]-1659906456124
1613130706
GPR[ESUN]-1659906456337
GPR[SSUN]-1659906456337
1613130706
GPR[SPVATF]-1659906456549
GPR[EPVATF]-1659906456725
[89426] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906456726
GPR[EPVATF]-1659906456912
[89613] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906456913
GPR[SSUN]-1659906456913
1613130706
GPR[ESUN]-1659906457120
GPR[SSUN]-1659906457120
1613130706
GPR[SPVATF]-1659906458024
GPR[EPVATF]-1659906458194
[90894] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906458194
GPR[EPVATF]-1659906458371
[91071] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906458371
GPR[SSUN]-1659906458371
-418265650
GPR[SPVATF]-1659906458667
GPR[EPVATF]-1659906459622
GPR[SPS]-1659906459622
[93272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:243.
GPR[EPS]-1659906460572
GPR[ESUN]-1659906460572
GPR[SSUN]-1659906460572
1508329696
GPR[ESUN]-1659906460822
GPR[SSUN]-1659906460822
1508329696
GPR[SPVATF]-1659906461073
GPR[EPVATF]-1659906461850
GPR[SPS]-1659906461850
[95247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1279.
GPR[EPS]-1659906462547
GPR[ESUN]-1659906462547
GPR[SSUN]-1659906462547
1508329696
GPR[SPVATF]-1659906462790
GPR[EPVATF]-1659906463582
GPR[SPS]-1659906463582
[96931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1278.
GPR[EPS]-1659906464231
GPR[ESUN]-1659906464231
GPR[SSUN]-1659906464231
-1807134540
GPR[ESUN]-1659906464408
GPR[SSUN]-1659906464408
-1807134540
GPR[SPVATF]-1659906464579
GPR[EPVATF]-1659906465398
GPR[SPS]-1659906465398
[98520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DependencyOptions:96.
GPR[EPS]-1659906465821
GPR[ESUN]-1659906465821
GPR[SSUN]-1659906465821
-1807134540
GPR[ESUN]-1659906465998
GPR[SSUN]-1659906465998
-1807134540
GPR[SPVATF]-1659906466171
GPR[EPVATF]-1659906466966
GPR[SPS]-1659906466966
[100120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DependencyOptions:114.
GPR[EPS]-1659906467420
GPR[ESUN]-1659906467420
GPR[SSUN]-1659906467420
-1807134540
GPR[SPVATF]-1659906467600
GPR[EPVATF]-1659906468409
GPR[SPS]-1659906468409
[101537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DependencyOptions:113.
GPR[EPS]-1659906468837
GPR[ESUN]-1659906468837
GPR[SSUN]-1659906468837
-1966087783
GPR[SPVATF]-1659906469030
GPR[EPVATF]-1659906469052
[101752] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906469052
GPR[EPVATF]-1659906469072
[101772] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906469072
GPR[SSUN]-1659906469072
-1966087783
GPR[SPVATF]-1659906469258
GPR[EPVATF]-1659906469278
[101979] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906469279
GPR[EPVATF]-1659906469300
[102000] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906469300
GPR[SSUN]-1659906469300
-1966087783
GPR[SPVATF]-1659906469489
GPR[EPVATF]-1659906469509
[102209] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906469509
GPR[EPVATF]-1659906469529
[102229] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906469529
GPR[SSUN]-1659906469529
-1966087783
GPR[ESUN]-1659906469753
GPR[SSUN]-1659906469753
-1966087783
GPR[ESUN]-1659906469935
GPR[SSUN]-1659906469935
-1966087783
GPR[SPVATF]-1659906470121
GPR[EPVATF]-1659906470142
[102843] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906470143
GPR[EPVATF]-1659906470165
[102865] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906470165
GPR[SSUN]-1659906470165
-1966087783
GPR[SPVATF]-1659906470349
GPR[EPVATF]-1659906470371
[103071] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906470372
GPR[EPVATF]-1659906470391
[103091] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906470391
GPR[SSUN]-1659906470391
-1966087783
GPR[ESUN]-1659906470578
GPR[SSUN]-1659906470578
-1966087783
GPR[SPVATF]-1659906470769
GPR[EPVATF]-1659906470791
[103491] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906470791
GPR[SSUN]-1659906470791
-1807134540
GPR[ESUN]-1659906470965
GPR[SSUN]-1659906470965
-1807134540
GPR[SPVATF]-1659906471138
GPR[EPVATF]-1659906471977
GPR[SPS]-1659906471977
[105116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DependencyOptions:73.
GPR[EPS]-1659906472416
GPR[ESUN]-1659906472416
GPR[SSUN]-1659906472416
-1966087783
GPR[SPVATF]-1659906472610
GPR[EPVATF]-1659906472631
[105331] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906472631
GPR[SSUN]-1659906472631
-1966087783
GPR[ESUN]-1659906472817
GPR[SSUN]-1659906472817
-1966087783
GPR[SPVATF]-1659906473005
GPR[EPVATF]-1659906473026
[105726] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906473026
GPR[SSUN]-1659906473026
-1966087783
GPR[ESUN]-1659906473213
GPR[SSUN]-1659906473214
-1966087783
GPR[ESUN]-1659906473427
GPR[SSUN]-1659906473427
-1966087783
GPR[SPVATF]-1659906473618
GPR[EPVATF]-1659906473639
[106339] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906473639
GPR[SSUN]-1659906473639
-1966087783
GPR[SPVATF]-1659906473831
GPR[EPVATF]-1659906473854
[106554] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906473854
GPR[SSUN]-1659906473854
-1712894512
GPR[SPVATF]-1659906474081
GPR[EPVATF]-1659906474879
GPR[SPS]-1659906474879
[108225] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:455.
GPR[EPS]-1659906475525
GPR[SPVATF]-1659906475525
GPR[EPVATF]-1659906476367
GPR[SPS]-1659906476367
[109703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:455.
GPR[EPS]-1659906477003
GPR[ESUN]-1659906477003
GPR[SSUN]-1659906477003
-1712894512
GPR[ESUN]-1659906477229
GPR[SSUN]-1659906477229
-1712894512
GPR[ESUN]-1659906477453
GPR[SSUN]-1659906477453
80988634
GPR[ESUN]-1659906477624
GPR[SSUN]-1659906477624
2433571
GPR[ESUN]-1659906477854
GPR[SSUN]-1659906477854
2433571
GPR[ESUN]-1659906478085
GPR[SSUN]-1659906478085
-675467674
GPR[ESUN]-1659906478259
GPR[SSUN]-1659906478259
-1712894512
GPR[SPVATF]-1659906478485
GPR[EPVATF]-1659906479360
GPR[SPS]-1659906479360
[112625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:450.
GPR[EPS]-1659906479925
GPR[ESUN]-1659906479925
GPR[SSUN]-1659906479925
-1712894512
GPR[SPVATF]-1659906480154
GPR[EPVATF]-1659906480973
GPR[SPS]-1659906480974
[114239] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner$Flags$BooleanOptionHandler:447.
GPR[EPS]-1659906481539
GPR[ESUN]-1659906481539
GPR[SSUN]-1659906481540
-1712894512
GPR[ESUN]-1659906481793
GPR[SSUN]-1659906481793
-1966087783
GPR[ESUN]-1659906481980
GPR[SSUN]-1659906481980
-1966087783
GPR[SPVATF]-1659906482166
GPR[EPVATF]-1659906482185
[114885] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659906482186
GPR[EPVATF]-1659906482887
[115587] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906482887
GPR[SSUN]-1659906482887
-1966087783
GPR[SPVATF]-1659906483081
GPR[EPVATF]-1659906483099
[115799] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659906483099
GPR[SSUN]-1659906483099
2433571
GPR[SPVATF]-1659906483330
GPR[EPVATF]-1659906484357
GPR[SPS]-1659906484357
[117648] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1038.
GPR[EPS]-1659906484948
GPR[ESUN]-1659906484948
GPR[SSUN]-1659906484948
2433571
GPR[SPVATF]-1659906485323
GPR[EPVATF]-1659906486099
GPR[SPS]-1659906486099
[119383] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1031.
GPR[EPS]-1659906486683
GPR[ESUN]-1659906486683
GPR[SSUN]-1659906486683
2433571
GPR[ESUN]-1659906486909
GPR[SSUN]-1659906486909
GPR[ESUN]-1659906486909
GPR[SSUN]-1659906486909
2433571
GPR[ESUN]-1659906487135
GPR[SSUN]-1659906487135
2433571
GPR[ESUN]-1659906487359
GPR[SSUN]-1659906487359
2433571
GPR[SPVATF]-1659906487594
GPR[EPVATF]-1659906488376
GPR[SPS]-1659906488376
[121639] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1035.
GPR[EPS]-1659906488939
GPR[ESUN]-1659906488939
GPR[SSUN]-1659906488939
2433571
GPR[SPVATF]-1659906489188
GPR[EPVATF]-1659906489976
GPR[SPS]-1659906489976
[123242] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1034.
GPR[EPS]-1659906490542
GPR[ESUN]-1659906490542
GPR[SSUN]-1659906490542
2433571
GPR[SPVATF]-1659906490771
GPR[EPVATF]-1659906491560
GPR[SPS]-1659906491560
[124846] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1033.
GPR[EPS]-1659906492146
GPR[ESUN]-1659906492146
GPR[SSUN]-1659906492146
2433571
GPR[SPVATF]-1659906492377
GPR[EPVATF]-1659906493199
GPR[SPS]-1659906493199
[126458] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1030.
GPR[EPS]-1659906493758
GPR[ESUN]-1659906493758
GPR[SSUN]-1659906493758
2433571
GPR[ESUN]-1659906493989
GPR[SSUN]-1659906493989
2433571
GPR[SPVATF]-1659906494215
GPR[EPVATF]-1659906495049
GPR[SPS]-1659906495049
[128359] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659906495659
GPR[ESUN]-1659906495659
GPR[SSUN]-1659906495659
2433571
GPR[ESUN]-1659906495894
GPR[SSUN]-1659906495894
2433571
GPR[SPVATF]-1659906496118
GPR[EPVATF]-1659906496981
GPR[SPS]-1659906496981
[130280] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659906497580
GPR[ESUN]-1659906497580
GPR[SSUN]-1659906497580
2433571
GPR[ESUN]-1659906497840
GPR[SSUN]-1659906497840
2433571
GPR[ESUN]-1659906498100
GPR[SSUN]-1659906498100
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
GPR[ESUN]-1659906498101
GPR[SSUN]-1659906498101
80988634
GPR[ESUN]-1659906498273
GPR[SSUN]-1659906498273
2433571
GPR[SPVATF]-1659906498502
GPR[EPVATF]-1659906499362
GPR[SPS]-1659906499362
[132669] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:994.
GPR[EPS]-1659906499969
GPR[ESUN]-1659906499969
GPR[SSUN]-1659906499969
2433571
GPR[SPVATF]-1659906500199
GPR[EPVATF]-1659906501120
GPR[SPS]-1659906501120
[134428] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:993.
GPR[EPS]-1659906501728
GPR[ESUN]-1659906501728
GPR[SSUN]-1659906501728
2433571
GPR[SPVATF]-1659906501957
GPR[EPVATF]-1659906502811
GPR[SPS]-1659906502811
[136188] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(33).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[136188] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659906503488
GPR[SSUN]-1659906503488
2433571
GPR[SPVATF]-1659906503721
GPR[EPVATF]-1659906504580
GPR[SPS]-1659906504580
[137897] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(34).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[137898] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659906505198
GPR[SSUN]-1659906505198
2433571
GPR[SPVATF]-1659906505432
GPR[EPVATF]-1659906506287
GPR[SPS]-1659906506287
[139588] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659906506888
GPR[ESUN]-1659906506888
GPR[SSUN]-1659906506888
2433571
GPR[SPVATF]-1659906507120
GPR[EPVATF]-1659906507940
GPR[SPS]-1659906507940
[141923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659906509223
GPR[ESUN]-1659906509223
GPR[SSUN]-1659906509223
2433571
GPR[SPVATF]-1659906509466
GPR[EPVATF]-1659906510611
GPR[SPS]-1659906510611
[143915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659906511215
GPR[ESUN]-1659906511215
GPR[SSUN]-1659906511215
2433571
GPR[ESUN]-1659906511444
GPR[SSUN]-1659906511445
2433571
GPR[ESUN]-1659906511669
GPR[SSUN]-1659906511669
2433571
GPR[SPVATF]-1659906511893
GPR[EPVATF]-1659906512708
GPR[SPS]-1659906512708
[145997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:975.
GPR[EPS]-1659906513297
GPR[ESUN]-1659906513297
GPR[SSUN]-1659906513297
2433571
GPR[SPVATF]-1659906513533
GPR[EPVATF]-1659906514345
GPR[SPS]-1659906514345
[147632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659906514932
GPR[ESUN]-1659906514932
GPR[SSUN]-1659906514932
2433571
GPR[SPVATF]-1659906515163
GPR[EPVATF]-1659906515943
GPR[SPS]-1659906515943
[149254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:887.
GPR[EPS]-1659906516554
GPR[ESUN]-1659906516554
GPR[SSUN]-1659906516554
2433571
GPR[SPVATF]-1659906516783
GPR[EPVATF]-1659906517610
GPR[SPS]-1659906517610
[150888] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:886.
GPR[EPS]-1659906518188
GPR[ESUN]-1659906518188
GPR[SSUN]-1659906518188
2433571
GPR[SPVATF]-1659906518416
GPR[EPVATF]-1659906519255
GPR[SPS]-1659906519255
[152584] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:881.
GPR[EPS]-1659906519884
GPR[ESUN]-1659906519884
GPR[SSUN]-1659906519884
2433571
GPR[ESUN]-1659906520115
GPR[SSUN]-1659906520115
2433571
GPR[ESUN]-1659906520337
GPR[SSUN]-1659906520337
2433571
GPR[ESUN]-1659906520558
GPR[SSUN]-1659906520558
881600600
GPR[ESUN]-1659906520733
GPR[SSUN]-1659906520733
80988634
GPR[ESUN]-1659906520900
GPR[SSUN]-1659906520900
2433571
GPR[SPVATF]-1659906521133
GPR[EPVATF]-1659906521977
GPR[SPS]-1659906521977
[155255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659906522556
GPR[SPVATF]-1659906522556
GPR[EPVATF]-1659906523401
GPR[SPS]-1659906523401
[156723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659906524023
GPR[ESUN]-1659906524023
GPR[SSUN]-1659906524023
2433571
GPR[SPVATF]-1659906524256
GPR[EPVATF]-1659906525099
GPR[SPS]-1659906525099
[158436] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659906525736
GPR[ESUN]-1659906525736
GPR[SSUN]-1659906525736
2433571
GPR[ESUN]-1659906525964
GPR[SSUN]-1659906525964
2433571
GPR[SPVATF]-1659906526188
GPR[EPVATF]-1659906527056
GPR[SPS]-1659906527056
[160346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659906527646
GPR[SPVATF]-1659906527647
GPR[EPVATF]-1659906528524
GPR[SPS]-1659906528524
[161831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659906529131
GPR[ESUN]-1659906529131
GPR[SSUN]-1659906529131
2433571
GPR[ESUN]-1659906529362
GPR[SSUN]-1659906529362
2433571
GPR[ESUN]-1659906529585
GPR[SSUN]-1659906529585
2433571
GPR[ESUN]-1659906529809
GPR[SSUN]-1659906529809
2433571
GPR[SPVATF]-1659906530034
GPR[EPVATF]-1659906530890
GPR[SPS]-1659906530890
[164219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:890.
GPR[EPS]-1659906531519
GPR[ESUN]-1659906531519
GPR[SSUN]-1659906531519
2433571
GPR[SPVATF]-1659906531753
GPR[EPVATF]-1659906532574
GPR[SPS]-1659906532574
[165863] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:885.
GPR[EPS]-1659906533163
GPR[ESUN]-1659906533163
GPR[SSUN]-1659906533163
2433571
GPR[ESUN]-1659906533393
GPR[SSUN]-1659906533393
2433571
GPR[SPVATF]-1659906533620
GPR[EPVATF]-1659906534468
GPR[SPS]-1659906534468
[167743] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:880.
GPR[EPS]-1659906535043
GPR[ESUN]-1659906535043
GPR[SSUN]-1659906535043
2433571
GPR[ESUN]-1659906535274
GPR[SSUN]-1659906535274
2433571
GPR[SPVATF]-1659906535501
GPR[EPVATF]-1659906536358
GPR[SPS]-1659906536358
[169683] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659906536983
GPR[ESUN]-1659906536983
GPR[SSUN]-1659906536983
2433571
GPR[SPVATF]-1659906537855
GPR[EPVATF]-1659906538862
GPR[SPS]-1659906538862
[172386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659906539686
GPR[ESUN]-1659906539686
GPR[SSUN]-1659906539686
2433571
GPR[SPVATF]-1659906539918
GPR[EPVATF]-1659906540747
GPR[SPS]-1659906540747
[174043] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659906541343
GPR[SPVATF]-1659906541343
GPR[EPVATF]-1659906542177
GPR[SPS]-1659906542177
[175511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659906542811
GPR[ESUN]-1659906542811
GPR[SSUN]-1659906542811
80988634
GPR[ESUN]-1659906542985
GPR[SSUN]-1659906542985
2433571
GPR[SPVATF]-1659906543213
GPR[EPVATF]-1659906544033
GPR[SPS]-1659906544033
[177313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659906544613
GPR[SPVATF]-1659906544614
GPR[EPVATF]-1659906545456
GPR[SPS]-1659906545456
[178839] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659906546139
GPR[ESUN]-1659906546139
GPR[SSUN]-1659906546139
2433571
GPR[ESUN]-1659906546370
GPR[SSUN]-1659906546370
2433571
GPR[SPVATF]-1659906546594
GPR[EPVATF]-1659906547443
GPR[SPS]-1659906547443
[180741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659906548041
GPR[SPVATF]-1659906548041
GPR[EPVATF]-1659906548889
GPR[SPS]-1659906548889
[182173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659906549473
GPR[ESUN]-1659906549473
GPR[SSUN]-1659906549473
2433571
GPR[SPVATF]-1659906549701
GPR[EPVATF]-1659906550567
GPR[SPS]-1659906550567
[183860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659906551160
GPR[SPVATF]-1659906551160
GPR[EPVATF]-1659906552011
GPR[SPS]-1659906552011
[185303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659906552603
GPR[ESUN]-1659906552603
GPR[SSUN]-1659906552603
2433571
GPR[SPVATF]-1659906552833
GPR[EPVATF]-1659906553694
GPR[SPS]-1659906553694
[186987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659906554287
GPR[SPVATF]-1659906554287
GPR[EPVATF]-1659906555152
GPR[SPS]-1659906555152
[188452] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659906555752
GPR[ESUN]-1659906555752
GPR[SSUN]-1659906555752
2433571
GPR[SPVATF]-1659906555984
GPR[EPVATF]-1659906556821
GPR[SPS]-1659906556821
[190110] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659906557410
GPR[SPVATF]-1659906557411
GPR[EPVATF]-1659906558238
GPR[SPS]-1659906558238
[191590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659906558890
GPR[ESUN]-1659906558891
GPR[SSUN]-1659906558891
2433571
GPR[SPVATF]-1659906559115
GPR[EPVATF]-1659906559931
GPR[SPS]-1659906559931
[193214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:953.
GPR[EPS]-1659906560514
GPR[ESUN]-1659906560514
GPR[SSUN]-1659906560514
2433571
GPR[ESUN]-1659906560760
GPR[SSUN]-1659906560760
2433571
GPR[SPVATF]-1659906560983
GPR[EPVATF]-1659906561822
GPR[SPS]-1659906561822
[195131] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659906562431
GPR[ESUN]-1659906562431
GPR[SSUN]-1659906562431
2433571
GPR[ESUN]-1659906562691
GPR[SSUN]-1659906562691
GPR[ESUN]-1659906562691
GPR[SSUN]-1659906562691
GPR[ESUN]-1659906562691
GPR[SSUN]-1659906562691
GPR[ESUN]-1659906562691
GPR[SSUN]-1659906562691
GPR[ESUN]-1659906562691
GPR[SSUN]-1659906562691
GPR[ESUN]-1659906562691
GPR[SSUN]-1659906562692
-418265650
GPR[SPVATF]-1659906562967
GPR[EPVATF]-1659906563812
GPR[SPS]-1659906563812
[197399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1172.
GPR[EPS]-1659906564699
GPR[ESUN]-1659906564699
GPR[SSUN]-1659906564699
-418265650
GPR[ESUN]-1659906564976
GPR[SSUN]-1659906564976
-418265650
GPR[SPVATF]-1659906565250
GPR[EPVATF]-1659906566108
GPR[SPS]-1659906566108
[200442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1171.
GPR[EPS]-1659906567742
GPR[SPVATF]-1659906567742
GPR[EPVATF]-1659906568862
GPR[SPS]-1659906568862
[202520] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1171.
GPR[EPS]-1659906569820
GPR[ESUN]-1659906569820
GPR[SSUN]-1659906569820
-418265650
GPR[SPVATF]-1659906570096
GPR[EPVATF]-1659906570897
GPR[SPS]-1659906570897
[204466] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:810.
GPR[EPS]-1659906571766
GPR[ESUN]-1659906571766
GPR[SSUN]-1659906571766
-418265650
GPR[SPVATF]-1659906572038
GPR[EPVATF]-1659906572850
GPR[SPS]-1659906572850
[206430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:805.
GPR[EPS]-1659906573730
GPR[ESUN]-1659906573730
GPR[SSUN]-1659906573730
-1712894512
GPR[ESUN]-1659906573951
GPR[SSUN]-1659906573951
-1712894512
GPR[SPVATF]-1659906574168
GPR[EPVATF]-1659906574966
GPR[SPS]-1659906574966
[208712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:590.
GPR[EPS]-1659906576012
GPR[ESUN]-1659906576012
GPR[SSUN]-1659906576012
-1712894512
GPR[SPVATF]-1659906576270
GPR[EPVATF]-1659906577112
GPR[SPS]-1659906577112
[210690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:587.
GPR[EPS]-1659906577990
GPR[SPVATF]-1659906577990
GPR[EPVATF]-1659906578792
GPR[SPS]-1659906578792
[212388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:587.
GPR[EPS]-1659906579688
GPR[ESUN]-1659906579688
GPR[SSUN]-1659906579688
-1712894512
GPR[ESUN]-1659906579912
GPR[SSUN]-1659906579912
-1712894512
GPR[ESUN]-1659906580138
GPR[SSUN]-1659906580138
-1712894512
GPR[SPVATF]-1659906580358
GPR[EPVATF]-1659906581167
GPR[SPS]-1659906581167
[214853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CommandLineRunner:583.
GPR[EPS]-1659906582153
GPR[ESUN]-1659906582154
GPR[SSUN]-1659906582154
-1869762199
GPR[SPVATF]-1659906582353
GPR[EPVATF]-1659906583175
GPR[SPS]-1659906583175
[216325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.WarningLevel:40.
GPR[EPS]-1659906583625
GPR[ESUN]-1659906583625
GPR[SSUN]-1659906583626
-1869762199
GPR[SPVATF]-1659906583824
GPR[EPVATF]-1659906584675
GPR[SPS]-1659906584675
[217815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.WarningLevel:39.
GPR[EPS]-1659906585115
GPR[ESUN]-1659906585115
GPR[SSUN]-1659906585115
-418265650
GPR[SPVATF]-1659906585391
GPR[EPVATF]-1659906586265
GPR[SPS]-1659906586265
[219835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1374.
GPR[EPS]-1659906587135
GPR[ESUN]-1659906587135
GPR[SSUN]-1659906587135
-418265650
GPR[SPVATF]-1659906587416
GPR[EPVATF]-1659906588299
GPR[SPS]-1659906588299
[221901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1373.
GPR[EPS]-1659906589201
GPR[SPVATF]-1659906589201
GPR[EPVATF]-1659906590049
GPR[SPS]-1659906590049
[223615] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1373.
GPR[EPS]-1659906590915
GPR[ESUN]-1659906590915
GPR[SSUN]-1659906590915
-418265650
GPR[ESUN]-1659906591215
GPR[SSUN]-1659906591215
-418265650
GPR[SPVATF]-1659906591483
GPR[EPVATF]-1659906592317
GPR[SPS]-1659906592317
[225889] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1364.
GPR[EPS]-1659906593189
GPR[ESUN]-1659906593189
GPR[SSUN]-1659906593189
-418265650
GPR[ESUN]-1659906593466
GPR[SSUN]-1659906593466
-418265650
GPR[SPVATF]-1659906593738
GPR[EPVATF]-1659906594571
GPR[SPS]-1659906594571
[228184] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1360.
GPR[EPS]-1659906595484
GPR[ESUN]-1659906595484
GPR[SSUN]-1659906595484
-418265650
GPR[ESUN]-1659906595756
GPR[SSUN]-1659906595756
-418265650
GPR[SPVATF]-1659906596031
GPR[EPVATF]-1659906596870
GPR[SPS]-1659906596870
[230459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1268.
GPR[EPS]-1659906597759
GPR[SPVATF]-1659906597759
GPR[EPVATF]-1659906598601
GPR[SPS]-1659906598601
[232180] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1268.
GPR[EPS]-1659906599480
GPR[ESUN]-1659906599480
GPR[SSUN]-1659906599480
-418265650
GPR[SPVATF]-1659906599759
GPR[EPVATF]-1659906600615
GPR[SPS]-1659906600615
[234186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1262.
GPR[EPS]-1659906601486
GPR[SPVATF]-1659906601486
GPR[EPVATF]-1659906603228
GPR[SPS]-1659906603228
[236851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1262.
GPR[EPS]-1659906604151
GPR[ESUN]-1659906604151
GPR[SSUN]-1659906604151
-418265650
GPR[SPVATF]-1659906604424
GPR[EPVATF]-1659906605258
GPR[SPS]-1659906605258
[238924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1256.
GPR[EPS]-1659906606224
GPR[SPVATF]-1659906606224
GPR[EPVATF]-1659906607040
GPR[SPS]-1659906607040
[240609] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1256.
GPR[EPS]-1659906607909
GPR[ESUN]-1659906607909
GPR[SSUN]-1659906607909
-418265650
GPR[SPVATF]-1659906608187
GPR[EPVATF]-1659906608984
GPR[SPS]-1659906608984
[242555] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1246.
GPR[EPS]-1659906609855
GPR[SPVATF]-1659906609855
GPR[EPVATF]-1659906610675
GPR[SPS]-1659906610675
[244282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1246.
GPR[EPS]-1659906611582
GPR[ESUN]-1659906611582
GPR[SSUN]-1659906611582
-418265650
GPR[SPVATF]-1659906611864
GPR[EPVATF]-1659906612700
GPR[SPS]-1659906612700
[246267] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1237.
GPR[EPS]-1659906613567
GPR[SPVATF]-1659906613568
GPR[EPVATF]-1659906614436
GPR[SPS]-1659906614436
[248058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1237.
GPR[EPS]-1659906615358
GPR[ESUN]-1659906615358
GPR[SSUN]-1659906615358
-418265650
GPR[SPVATF]-1659906615632
GPR[EPVATF]-1659906616488
GPR[SPS]-1659906616488
[250084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1228.
GPR[EPS]-1659906617384
GPR[SPVATF]-1659906617385
GPR[EPVATF]-1659906618238
GPR[SPS]-1659906618238
[251826] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1228.
GPR[EPS]-1659906619126
GPR[ESUN]-1659906619126
GPR[SSUN]-1659906619126
-418265650
GPR[ESUN]-1659906619397
GPR[SSUN]-1659906619397
-418265650
GPR[ESUN]-1659906619673
GPR[SSUN]-1659906619673
-418265650
GPR[ESUN]-1659906619944
GPR[SSUN]-1659906619944
-418265650
GPR[SPVATF]-1659906620216
GPR[EPVATF]-1659906621066
GPR[SPS]-1659906621066
[254635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:871.
GPR[EPS]-1659906621935
GPR[SPVATF]-1659906621936
GPR[EPVATF]-1659906622799
GPR[SPS]-1659906622799
[256390] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:871.
GPR[EPS]-1659906623691
GPR[ESUN]-1659906623691
GPR[SSUN]-1659906623691
-418265650
GPR[SPVATF]-1659906623964
GPR[EPVATF]-1659906624809
GPR[SPS]-1659906624809
[258393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:869.
GPR[EPS]-1659906625693
GPR[ESUN]-1659906625693
GPR[SSUN]-1659906625693
-418265650
GPR[SPVATF]-1659906625972
GPR[EPVATF]-1659906626809
GPR[SPS]-1659906626809
[260401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:868.
GPR[EPS]-1659906627701
GPR[ESUN]-1659906627701
GPR[SSUN]-1659906627701
-418265650
GPR[SPVATF]-1659906627977
GPR[EPVATF]-1659906628833
GPR[SPS]-1659906628833
[262400] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:865.
GPR[EPS]-1659906629700
GPR[ESUN]-1659906629700
GPR[SSUN]-1659906629700
-418265650
GPR[SPVATF]-1659906629985
GPR[EPVATF]-1659906630813
GPR[SPS]-1659906630813
[264373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:857.
GPR[EPS]-1659906631673
GPR[SPVATF]-1659906631673
GPR[EPVATF]-1659906632544
GPR[SPS]-1659906632544
[266106] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:857.
GPR[EPS]-1659906633406
GPR[ESUN]-1659906633406
GPR[SSUN]-1659906633406
-418265650
GPR[SPVATF]-1659906633681
GPR[EPVATF]-1659906634552
GPR[SPS]-1659906634552
[268115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:804.
GPR[EPS]-1659906635415
GPR[SPVATF]-1659906635415
GPR[EPVATF]-1659906637269
GPR[SPS]-1659906637269
[270890] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:804.
GPR[EPS]-1659906638190
GPR[ESUN]-1659906638190
GPR[SSUN]-1659906638190
-418265650
GPR[ESUN]-1659906638465
GPR[SSUN]-1659906638465
-418265650
GPR[SPVATF]-1659906638732
GPR[EPVATF]-1659906639581
GPR[SPS]-1659906639581
[273164] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:680.
GPR[EPS]-1659906640464
GPR[ESUN]-1659906640464
GPR[SSUN]-1659906640464
-418265650
GPR[SPVATF]-1659906640743
GPR[EPVATF]-1659906641583
GPR[SPS]-1659906641583
[275179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:679.
GPR[EPS]-1659906642479
GPR[ESUN]-1659906642479
GPR[SSUN]-1659906642479
-418265650
GPR[SPVATF]-1659906642753
GPR[EPVATF]-1659906643595
GPR[SPS]-1659906643595
[277200] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:654.
GPR[EPS]-1659906644500
GPR[SPVATF]-1659906644501
GPR[EPVATF]-1659906645342
GPR[SPS]-1659906645342
[278915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:654.
GPR[EPS]-1659906646215
GPR[ESUN]-1659906646215
GPR[SSUN]-1659906646215
-418265650
GPR[ESUN]-1659906646510
GPR[SSUN]-1659906646510
-418265650
GPR[SPVATF]-1659906646780
GPR[EPVATF]-1659906647666
GPR[SPS]-1659906647666
[281239] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:739.
GPR[EPS]-1659906648539
GPR[ESUN]-1659906648539
GPR[SSUN]-1659906648539
-418265650
GPR[SPVATF]-1659906648813
GPR[EPVATF]-1659906649656
GPR[SPS]-1659906649656
[283218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:736.
GPR[EPS]-1659906650518
GPR[SPVATF]-1659906650518
GPR[EPVATF]-1659906651351
GPR[SPS]-1659906651351
[284958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:736.
GPR[EPS]-1659906652258
GPR[ESUN]-1659906652258
GPR[SSUN]-1659906652258
-418265650
GPR[SPVATF]-1659906652533
GPR[EPVATF]-1659906653377
GPR[SPS]-1659906653377
[286944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:448.
GPR[EPS]-1659906654244
GPR[ESUN]-1659906654244
GPR[SSUN]-1659906654244
-418265650
GPR[ESUN]-1659906654514
GPR[SSUN]-1659906654514
-418265650
GPR[SPVATF]-1659906654784
GPR[EPVATF]-1659906655630
GPR[SPS]-1659906655630
[289186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:447.
GPR[EPS]-1659906656486
GPR[SPVATF]-1659906656486
GPR[EPVATF]-1659906657339
GPR[SPS]-1659906657339
[290915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:447.
GPR[EPS]-1659906658215
GPR[ESUN]-1659906658215
GPR[SSUN]-1659906658215
-418265650
GPR[SPVATF]-1659906658513
GPR[EPVATF]-1659906659353
GPR[SPS]-1659906659353
[292925] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:300.
GPR[EPS]-1659906660225
GPR[ESUN]-1659906660225
GPR[SSUN]-1659906660225
-418265650
GPR[SPVATF]-1659906660516
GPR[EPVATF]-1659906661341
GPR[SPS]-1659906661341
[294918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:298.
GPR[EPS]-1659906662218
GPR[SPVATF]-1659906662218
GPR[EPVATF]-1659906663026
GPR[SPS]-1659906663026
[296567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:298.
GPR[EPS]-1659906663867
GPR[ESUN]-1659906663867
GPR[SSUN]-1659906663867
-418265650
GPR[SPVATF]-1659906664141
GPR[EPVATF]-1659906664984
GPR[SPS]-1659906664984
[299003] ERROR ConstraintModelBuilder - Unable to compile the change: 
abstract class AbstractCommandLineRunner<A extends com.google.javascript.jscomp.Compiler, B extends com.google.javascript.jscomp.CompilerOptions> {
    private final com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig config;

    private java.lang.Appendable jsOutput;

    private final java.io.PrintStream err;

    private A compiler;

    private java.nio.charset.Charset inputCharset;

    private java.nio.charset.Charset outputCharset2;

    private java.lang.String legacyOutputCharset;

    private boolean testMode = false;

    private com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.SourceFile>> externsSupplierForTesting = null;

    private com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.SourceFile>> inputsSupplierForTesting = null;

    private com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSModule>> modulesSupplierForTesting = null;

    private com.google.common.base.Function<java.lang.Integer, java.lang.Boolean> exitCodeReceiverForTesting = null;

    private java.util.Map<java.lang.String, java.lang.String> rootRelativePathsMap = null;

    private java.util.Map<java.lang.String, java.lang.String> parsedModuleWrappers = null;

    private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;

    private static final java.lang.String OUTPUT_WRAPPER_MARKER = "%output%";

    private final com.google.javascript.jscomp.AbstractCommandLineRunner<A, B>.RunTimeStats runTimeStats = new RunTimeStats();

    AbstractCommandLineRunner() {
        this(java.lang.System.out, java.lang.System.err);
    }

    AbstractCommandLineRunner(java.io.PrintStream out, java.io.PrintStream err) {
        this.config = new com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig();
        this.jsOutput = com.google.common.base.Preconditions.checkNotNull(out);
        this.err = com.google.common.base.Preconditions.checkNotNull(err);
    }

    @com.google.common.annotations.VisibleForTesting
    void enableTestMode(com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.SourceFile>> externsSupplier, com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.SourceFile>> inputsSupplier, com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSModule>> modulesSupplier, com.google.common.base.Function<java.lang.Integer, java.lang.Boolean> exitCodeReceiver) {
        com.google.common.base.Preconditions.checkArgument((inputsSupplier == null) ^ (modulesSupplier == null));
        testMode = true;
        this.externsSupplierForTesting = externsSupplier;
        this.inputsSupplierForTesting = inputsSupplier;
        this.modulesSupplierForTesting = modulesSupplier;
        this.exitCodeReceiverForTesting = exitCodeReceiver;
    }

    protected boolean isInTestMode() {
        return testMode;
    }

    protected com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig getCommandLineConfig() {
        return config;
    }

    protected abstract A createCompiler();

    protected abstract B createOptions();

    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {
        if (compiler == null) {
            return new com.google.javascript.jscomp.DiagnosticGroups();
        }
        return compiler.getDiagnosticGroups();
    }

    @java.lang.Deprecated
    protected void initOptionsFromFlags(com.google.javascript.jscomp.CompilerOptions options) {
    }

    protected void setRunOptions(com.google.javascript.jscomp.CompilerOptions options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups = getDiagnosticGroups();
        if (config.warningGuards != null) {
            for (com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry entry : config.warningGuards.entries) {
                diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);
            }
        }
        com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.define, options, false);
        options.setTweakProcessing(config.tweakProcessing);
        com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.tweak, options, true);
        if (config.onlyClosureDependencies) {
            if (config.closureEntryPoints.isEmpty()) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("When only_closure_dependencies is " + "on, you must specify at least one closure_entry_point");
            }
            options.setDependencyOptions(new com.google.javascript.jscomp.DependencyOptions().setDependencyPruning(true).setDependencySorting(true).setMoocherDropping(true).setEntryPoints(config.closureEntryPoints));
        } else if (config.manageClosureDependencies || (config.closureEntryPoints.size() > 0)) {
            options.setDependencyOptions(new com.google.javascript.jscomp.DependencyOptions().setDependencyPruning(true).setDependencySorting(true).setMoocherDropping(false).setEntryPoints(config.closureEntryPoints));
        }
        options.devMode = config.jscompDevMode;
        options.setCodingConvention(config.codingConvention);
        options.setSummaryDetailLevel(config.summaryDetailLevel);
        legacyOutputCharset = options.outputCharset = getLegacyOutputCharset();
        outputCharset2 = getOutputCharset2();
        inputCharset = getInputCharset();
        if (config.jsOutputFile.length() > 0) {
            if (config.skipNormalOutputs) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("skip_normal_outputs and js_output_file" + " cannot be used together.");
            }
        }
        if (config.skipNormalOutputs && config.printAst) {
            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("skip_normal_outputs and print_ast cannot" + " be used together.");
        }
        if (config.skipNormalOutputs && config.printTree) {
            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("skip_normal_outputs and print_tree cannot" + " be used together.");
        }
        if (config.createSourceMap.length() > 0) {
            options.sourceMapOutputPath = config.createSourceMap;
        }
        options.sourceMapDetailLevel = config.sourceMapDetailLevel;
        options.sourceMapFormat = config.sourceMapFormat;
        if (!config.variableMapInputFile.equals("")) {
            options.inputVariableMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.variableMapInputFile).toBytes();
        }
        if (!config.propertyMapInputFile.equals("")) {
            options.inputPropertyMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.propertyMapInputFile).toBytes();
        }
        if (config.languageIn.length() > 0) {
            if (config.languageIn.equals("ECMASCRIPT5_STRICT") || config.languageIn.equals("ES5_STRICT")) {
                options.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);
            } else if (config.languageIn.equals("ECMASCRIPT5") || config.languageIn.equals("ES5")) {
                options.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5);
            } else if (config.languageIn.equals("ECMASCRIPT3") || config.languageIn.equals("ES3")) {
                options.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3);
            } else {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(("Unknown language `" + config.languageIn) + "' specified.");
            }
        }
        if (!config.outputManifests.isEmpty()) {
            java.util.Set<java.lang.String> uniqueNames = com.google.common.collect.Sets.newHashSet();
            for (java.lang.String filename : config.outputManifests) {
                if (!uniqueNames.add(filename)) {
                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(("output_manifest flags specify " + "duplicate file names: ") + filename);
                }
            }
        }
        if (!config.outputBundles.isEmpty()) {
            java.util.Set<java.lang.String> uniqueNames = com.google.common.collect.Sets.newHashSet();
            for (java.lang.String filename : config.outputBundles) {
                if (!uniqueNames.add(filename)) {
                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(("output_bundle flags specify " + "duplicate file names: ") + filename);
                }
            }
        }
        options.acceptConstKeyword = config.acceptConstKeyword;
        options.transformAMDToCJSModules = config.transformAMDToCJSModules;
        options.processCommonJSModules = config.processCommonJSModules;
        options.commonJSModulePathPrefix = config.commonJSModulePathPrefix;
    }

    protected final A getCompiler() {
        return compiler;
    }

    public final void run() {
        int result = 0;
        int runs = 1;
        if (config.computePhaseOrdering) {
            runs = com.google.javascript.jscomp.AbstractCommandLineRunner.NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;
            com.google.javascript.jscomp.PhaseOptimizer.randomizeLoops();
        }
        try {
            for (int i = 0; (i < runs) && (result == 0); i++) {
                runTimeStats.recordStartRun();
                result = doRun();
                runTimeStats.recordEndRun();
            }
        } catch (com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException e) {
            java.lang.System.err.println(e.getMessage());
            result = -1;
        } catch (java.lang.Throwable t) {
            t.printStackTrace();
            result = -2;
        }
        if (config.computePhaseOrdering) {
            runTimeStats.outputBestPhaseOrdering();
        }
        try {
            if (jsOutput instanceof java.io.Closeable) {
                ((java.io.Closeable) (jsOutput)).close();
            }
        } catch (java.io.IOException e) {
            throw com.google.common.base.Throwables.propagate(e);
        }
        if (testMode) {
            exitCodeReceiverForTesting.apply(result);
        } else {
            java.lang.System.exit(result);
        }
    }

    protected java.io.PrintStream getErrorPrintStream() {
        return err;
    }

    public static class FlagUsageException extends java.lang.Exception {
        private static final long serialVersionUID = 1L;

        public FlagUsageException(java.lang.String message) {
            super(message);
        }
    }

    protected java.util.List<com.google.javascript.jscomp.SourceFile> createInputs(java.util.List<java.lang.String> files, boolean allowStdIn) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        java.util.List<com.google.javascript.jscomp.SourceFile> inputs = new java.util.ArrayList<com.google.javascript.jscomp.SourceFile>(files.size());
        boolean usingStdin = false;
        for (java.lang.String filename : files) {
            if (!"-".equals(filename)) {
                com.google.javascript.jscomp.SourceFile newFile = com.google.javascript.jscomp.SourceFile.fromFile(filename, inputCharset);
                inputs.add(newFile);
            } else {
                if (!allowStdIn) {
                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("Can't specify stdin.");
                }
                if (usingStdin) {
                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("Can't specify stdin twice.");
                }
                if (!config.outputManifests.isEmpty()) {
                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("Manifest files cannot be generated " + "when the input is from stdin.");
                }
                if (!config.outputBundles.isEmpty()) {
                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("Bundle files cannot be generated " + "when the input is from stdin.");
                }
                inputs.add(com.google.javascript.jscomp.SourceFile.fromInputStream("stdin", java.lang.System.in));
                usingStdin = true;
            }
        }
        return inputs;
    }

    private java.util.List<com.google.javascript.jscomp.SourceFile> createSourceInputs(java.util.List<java.lang.String> files) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        if (isInTestMode()) {
            return inputsSupplierForTesting.get();
        }
        if (files.isEmpty()) {
            files = java.util.Collections.singletonList("-");
        }
        try {
            return createInputs(files, true);
        } catch (com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException e) {
            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("Bad --js flag. " + e.getMessage());
        }
    }

    private java.util.List<com.google.javascript.jscomp.SourceFile> createExternInputs(java.util.List<java.lang.String> files) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        if (files.isEmpty()) {
            return com.google.common.collect.ImmutableList.of(com.google.javascript.jscomp.SourceFile.fromCode("/dev/null", ""));
        }
        try {
            return createInputs(files, false);
        } catch (com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException e) {
            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("Bad --externs flag. " + e.getMessage());
        }
    }

    java.util.List<com.google.javascript.jscomp.JSModule> createJsModules(java.util.List<java.lang.String> specs, java.util.List<java.lang.String> jsFiles) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        if (isInTestMode()) {
            return modulesSupplierForTesting.get();
        }
        com.google.common.base.Preconditions.checkState(specs != null);
        com.google.common.base.Preconditions.checkState(!specs.isEmpty());
        com.google.common.base.Preconditions.checkState(jsFiles != null);
        final int totalNumJsFiles = jsFiles.size();
        int nextJsFileIndex = 0;
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();
        for (java.lang.String spec : specs) {
            java.lang.String[] parts = spec.split(":");
            if ((parts.length < 2) || (parts.length > 4)) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(("Expected 2-4 colon-delimited parts in " + "module spec: ") + spec);
            }
            java.lang.String name = parts[0];
            checkModuleName(name);
            if (modulesByName.containsKey(name)) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("Duplicate module name: " + name);
            }
            com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(name);
            int numJsFiles = -1;
            try {
                numJsFiles = java.lang.Integer.parseInt(parts[1]);
            } catch (java.lang.NumberFormatException ignored) {
                numJsFiles = -1;
            }
            if (numJsFiles < 0) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((("Invalid js file count '" + parts[1]) + "' for module: ") + name);
            }
            if ((nextJsFileIndex + numJsFiles) > totalNumJsFiles) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((("Not enough js files specified. Expected " + ((nextJsFileIndex + numJsFiles) - totalNumJsFiles)) + " more in module:") + name);
            }
            java.util.List<java.lang.String> moduleJsFiles = jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);
            for (com.google.javascript.jscomp.SourceFile input : createInputs(moduleJsFiles, false)) {
                module.add(input);
            }
            nextJsFileIndex += numJsFiles;
            if (parts.length > 2) {
                java.lang.String depList = parts[2];
                if (depList.length() > 0) {
                    java.lang.String[] deps = depList.split(",");
                    for (java.lang.String dep : deps) {
                        com.google.javascript.jscomp.JSModule other = modulesByName.get(dep);
                        if (other == null) {
                            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(((("Module '" + name) + "' depends on unknown module '") + dep) + "'. Be sure to list modules in dependency order.");
                        }
                        module.addDependency(other);
                    }
                }
            }
            modulesByName.put(name, module);
        }
        if (nextJsFileIndex < totalNumJsFiles) {
            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((("Too many js files specified. Expected " + nextJsFileIndex) + " but found ") + totalNumJsFiles);
        }
        return com.google.common.collect.Lists.newArrayList(modulesByName.values());
    }

    protected void checkModuleName(java.lang.String name) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {
        if (!com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) {
            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(("Invalid module name: '" + name) + "'");
        }
    }

    static java.util.Map<java.lang.String, java.lang.String> parseModuleWrappers(java.util.List<java.lang.String> specs, java.util.List<com.google.javascript.jscomp.JSModule> modules) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {
        com.google.common.base.Preconditions.checkState(specs != null);
        java.util.Map<java.lang.String, java.lang.String> wrappers = com.google.common.collect.Maps.newHashMapWithExpectedSize(modules.size());
        for (com.google.javascript.jscomp.JSModule m : modules) {
            wrappers.put(m.getName(), "");
        }
        for (java.lang.String spec : specs) {
            int pos = spec.indexOf(':');
            if (pos == (-1)) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(("Expected module wrapper to have " + "<name>:<wrapper> format: ") + spec);
            }
            java.lang.String name = spec.substring(0, pos);
            if (!wrappers.containsKey(name)) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(("Unknown module: '" + name) + "'");
            }
            java.lang.String wrapper = spec.substring(pos + 1);
            if (!wrapper.contains("%s")) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(("No %s placeholder in module wrapper: '" + wrapper) + "'");
            }
            wrappers.put(name, wrapper);
        }
        return wrappers;
    }

    private java.lang.String getModuleOutputFileName(com.google.javascript.jscomp.JSModule m) {
        return (config.moduleOutputPathPrefix + m.getName()) + ".js";
    }

    @com.google.common.annotations.VisibleForTesting
    void writeModuleOutput(java.lang.Appendable out, com.google.javascript.jscomp.JSModule m) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        if (parsedModuleWrappers == null) {
            parsedModuleWrappers = com.google.javascript.jscomp.AbstractCommandLineRunner.parseModuleWrappers(config.moduleWrapper, com.google.common.collect.Lists.newArrayList(compiler.getDegenerateModuleGraph().getAllModules()));
        }
        java.lang.String fileName = getModuleOutputFileName(m);
        java.lang.String baseName = new java.io.File(fileName).getName();
        com.google.javascript.jscomp.AbstractCommandLineRunner.writeOutput(out, compiler, compiler.toSource(m), parsedModuleWrappers.get(m.getName()).replace("%basename%", baseName), "%s");
    }

    static void writeOutput(java.lang.Appendable out, com.google.javascript.jscomp.Compiler compiler, java.lang.String code, java.lang.String wrapper, java.lang.String codePlaceholder) throws java.io.IOException {
        int pos = wrapper.indexOf(codePlaceholder);
        if (pos != (-1)) {
            java.lang.String prefix = "";
            if (pos > 0) {
                prefix = wrapper.substring(0, pos);
                out.append(prefix);
            }
            out.append(code);
            int suffixStart = pos + codePlaceholder.length();
            if (suffixStart != wrapper.length()) {
                out.append(wrapper.substring(suffixStart));
            }
            out.append('\n');
            if ((compiler != null) && (compiler.getSourceMap() != null)) {
                compiler.getSourceMap().setWrapperPrefix(prefix);
            }
        } else {
            out.append(code);
            out.append('\n');
        }
    }

    private static void maybeCreateDirsForPath(java.lang.String pathPrefix) {
        if (pathPrefix.length() > 0) {
            java.lang.String dirName = (pathPrefix.charAt(pathPrefix.length() - 1) == java.io.File.separatorChar) ? pathPrefix.substring(0, pathPrefix.length() - 1) : new java.io.File(pathPrefix).getParent();
            if (dirName != null) {
                new java.io.File(dirName).mkdirs();
            }
        }
    }

    protected int doRun() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        com.google.javascript.jscomp.Compiler.setLoggingLevel(java.util.logging.Level.parse(config.loggingLevel));
        java.util.List<com.google.javascript.jscomp.SourceFile> externs = createExterns();
        compiler = createCompiler();
        B options = createOptions();
        java.util.List<com.google.javascript.jscomp.JSModule> modules = null;
        com.google.javascript.jscomp.Result result = null;
        setRunOptions(options);
        boolean writeOutputToFile = !config.jsOutputFile.isEmpty();
        if (writeOutputToFile) {
            jsOutput = fileNameToLegacyOutputWriter(config.jsOutputFile);
        } else if (jsOutput instanceof java.io.OutputStream) {
            jsOutput = streamToLegacyOutputWriter(((java.io.OutputStream) (jsOutput)));
        }
        java.util.List<java.lang.String> jsFiles = config.js;
        java.util.List<java.lang.String> moduleSpecs = config.module;
        if (!moduleSpecs.isEmpty()) {
            modules = createJsModules(moduleSpecs, jsFiles);
            if (config.skipNormalOutputs) {
                compiler.initModules(externs, modules, options);
            } else {
                result = compiler.compileModules(externs, modules, options);
            }
        } else {
            java.util.List<com.google.javascript.jscomp.SourceFile> inputs = createSourceInputs(jsFiles);
            if (config.skipNormalOutputs) {
                compiler.init(externs, inputs, options);
            } else {
                result = compiler.compile(externs, inputs, options);
            }
        }
        int errCode = processResults(result, modules, options);
        if (jsOutput instanceof java.io.Flushable) {
            ((java.io.Flushable) (jsOutput)).flush();
        }
        return errCode;
    }

    int processResults(com.google.javascript.jscomp.Result result, java.util.List<com.google.javascript.jscomp.JSModule> modules, B options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        if (config.computePhaseOrdering) {
            return 0;
        }
        if (config.printPassGraph) {
            if (compiler.getRoot() == null) {
                return 1;
            } else {
                jsOutput.append(com.google.javascript.jscomp.DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));
                jsOutput.append('\n');
                return 0;
            }
        }
        if (config.printAst) {
            if (compiler.getRoot() == null) {
                return 1;
            } else {
                com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg = compiler.computeCFG();
                com.google.javascript.jscomp.DotFormatter.appendDot(compiler.getRoot().getLastChild(), cfg, jsOutput);
                jsOutput.append('\n');
                return 0;
            }
        }
        if (config.printTree) {
            if (compiler.getRoot() == null) {
                jsOutput.append("Code contains errors; no tree was generated.\n");
                return 1;
            } else {
                compiler.getRoot().appendStringTree(jsOutput);
                jsOutput.append("\n");
                return 0;
            }
        }
        rootRelativePathsMap = constructRootRelativePathsMap();
        if (config.skipNormalOutputs) {
            outputManifest();
            outputBundle();
            return 0;
        } else if (result.success) {
            if (modules == null) {
                com.google.javascript.jscomp.AbstractCommandLineRunner.writeOutput(jsOutput, compiler, compiler.toSource(), config.outputWrapper, com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_WRAPPER_MARKER);
                outputSourceMap(options, config.jsOutputFile);
            } else {
                parsedModuleWrappers = com.google.javascript.jscomp.AbstractCommandLineRunner.parseModuleWrappers(config.moduleWrapper, modules);
                com.google.javascript.jscomp.AbstractCommandLineRunner.maybeCreateDirsForPath(config.moduleOutputPathPrefix);
                java.io.Writer mapOut = null;
                if (!shouldGenerateMapPerModule(options)) {
                    mapOut = fileNameToOutputWriter2(expandSourceMapPath(options, null));
                }
                for (com.google.javascript.jscomp.JSModule m : modules) {
                    if (shouldGenerateMapPerModule(options)) {
                        mapOut = fileNameToOutputWriter2(expandSourceMapPath(options, m));
                    }
                    java.io.Writer writer = fileNameToLegacyOutputWriter(getModuleOutputFileName(m));
                    if (options.sourceMapOutputPath != null) {
                        compiler.getSourceMap().reset();
                    }
                    writeModuleOutput(writer, m);
                    if (options.sourceMapOutputPath != null) {
                        compiler.getSourceMap().appendTo(mapOut, m.getName());
                    }
                    writer.close();
                    if (shouldGenerateMapPerModule(options) && (mapOut != null)) {
                        mapOut.close();
                        mapOut = null;
                    }
                }
                if (mapOut != null) {
                    mapOut.close();
                }
            }
            if (options.externExportsPath != null) {
                java.io.Writer eeOut = openExternExportsStream(options, config.jsOutputFile);
                eeOut.append(result.externExport);
                eeOut.close();
            }
            outputNameMaps(options);
            outputManifest();
            outputBundle();
            if (options.tracer.isOn()) {
                outputTracerReport();
            }
        }
        return java.lang.Math.min(result.errors.length, 0x7f);
    }

    private void outputTracerReport() {
        com.google.javascript.jscomp.JvmMetrics.maybeWriteJvmMetrics(this.err, "verbose:pretty:all");
        java.io.OutputStreamWriter output = new java.io.OutputStreamWriter(this.err);
        try {
            int runtime = 0;
            int runs = 0;
            int changes = 0;
            int diff = 0;
            int gzDiff = 0;
            output.write("Summary:\n");
            output.write("pass,runtime,runs,chancingRuns,reduction,gzReduction\n");
            java.util.Map<java.lang.String, com.google.javascript.jscomp.PerformanceTracker.Stats> runtimeMap = compiler.tracker.getStats();
            for (java.util.Map.Entry<java.lang.String, com.google.javascript.jscomp.PerformanceTracker.Stats> entry : runtimeMap.entrySet()) {
                java.lang.String key = entry.getKey();
                com.google.javascript.jscomp.PerformanceTracker.Stats stats = entry.getValue();
                output.write(key);
                output.write(",");
                output.write(java.lang.String.valueOf(stats.runtime));
                runtime += stats.runtime;
                output.write(",");
                output.write(java.lang.String.valueOf(stats.runs));
                runs += stats.runs;
                output.write(",");
                output.write(java.lang.String.valueOf(stats.changes));
                changes += stats.changes;
                output.write(",");
                output.write(java.lang.String.valueOf(stats.diff));
                diff += stats.diff;
                output.write(",");
                output.write(java.lang.String.valueOf(stats.gzDiff));
                gzDiff += stats.gzDiff;
                output.write("\n");
            }
            output.write("TOTAL");
            output.write(",");
            output.write(java.lang.String.valueOf(runtime));
            output.write(",");
            output.write(java.lang.String.valueOf(runs));
            output.write(",");
            output.write(java.lang.String.valueOf(changes));
            output.write(",");
            output.write(java.lang.String.valueOf(diff));
            output.write(",");
            output.write(java.lang.String.valueOf(gzDiff));
            output.write("\n");
            output.write("\n");
            output.write("Log:\n");
            output.write("pass,runtime,runs,chancingRuns,reduction,gzReduction,size,gzSize\n");
            java.util.List<com.google.javascript.jscomp.PerformanceTracker.Stats> runtimeLog = compiler.tracker.getLog();
            for (com.google.javascript.jscomp.PerformanceTracker.Stats stats : runtimeLog) {
                output.write(stats.pass);
                output.write(",");
                output.write(java.lang.String.valueOf(stats.runtime));
                output.write(",");
                output.write(java.lang.String.valueOf(stats.runs));
                output.write(",");
                output.write(java.lang.String.valueOf(stats.changes));
                output.write(",");
                output.write(java.lang.String.valueOf(stats.diff));
                output.write(",");
                output.write(java.lang.String.valueOf(stats.gzDiff));
                output.write(",");
                output.write(java.lang.String.valueOf(stats.size));
                output.write(",");
                output.write(java.lang.String.valueOf(stats.gzSize));
                output.write("\n");
            }
            output.write("\n");
            output.close();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }

    private java.nio.charset.Charset getInputCharset() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {
        if (!config.charset.isEmpty()) {
            if (!java.nio.charset.Charset.isSupported(config.charset)) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(config.charset + " is not a valid charset name.");
            }
            return java.nio.charset.Charset.forName(config.charset);
        }
        return com.google.common.base.Charsets.UTF_8;
    }

    private java.lang.String getLegacyOutputCharset() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {
        if (!config.charset.isEmpty()) {
            if (!java.nio.charset.Charset.isSupported(config.charset)) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(config.charset + " is not a valid charset name.");
            }
            return config.charset;
        }
        return "US-ASCII";
    }

    private java.nio.charset.Charset getOutputCharset2() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {
        if (!config.charset.isEmpty()) {
            if (!java.nio.charset.Charset.isSupported(config.charset)) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(config.charset + " is not a valid charset name.");
            }
            return java.nio.charset.Charset.forName(config.charset);
        }
        return com.google.common.base.Charsets.UTF_8;
    }

    protected java.util.List<com.google.javascript.jscomp.SourceFile> createExterns() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        return isInTestMode() ? externsSupplierForTesting.get() : createExternInputs(config.externs);
    }

    private boolean shouldGenerateMapPerModule(B options) {
        return (options.sourceMapOutputPath != null) && options.sourceMapOutputPath.contains("%outname%");
    }

    private java.io.Writer openExternExportsStream(B options, java.lang.String path) throws java.io.IOException {
        if (options.externExportsPath == null) {
            return null;
        }
        java.lang.String exPath = options.externExportsPath;
        if (!exPath.contains(java.io.File.separator)) {
            java.io.File outputFile = new java.io.File(path);
            exPath = (outputFile.getParent() + java.io.File.separatorChar) + exPath;
        }
        return fileNameToOutputWriter2(exPath);
    }

    private java.lang.String expandCommandLinePath(java.lang.String path, com.google.javascript.jscomp.JSModule forModule) {
        java.lang.String sub;
        if (forModule != null) {
            sub = (config.moduleOutputPathPrefix + forModule.getName()) + ".js";
        } else if (!config.module.isEmpty()) {
            sub = config.moduleOutputPathPrefix;
        } else {
            sub = config.jsOutputFile;
        }
        return path.replace("%outname%", sub);
    }

    @com.google.common.annotations.VisibleForTesting
    java.lang.String expandSourceMapPath(B options, com.google.javascript.jscomp.JSModule forModule) {
        if (com.google.common.base.Strings.isNullOrEmpty(options.sourceMapOutputPath)) {
            return null;
        }
        return expandCommandLinePath(options.sourceMapOutputPath, forModule);
    }

    private java.io.Writer fileNameToLegacyOutputWriter(java.lang.String fileName) throws java.io.IOException {
        if (fileName == null) {
            return null;
        }
        if (testMode) {
            return new java.io.StringWriter();
        }
        return streamToLegacyOutputWriter(filenameToOutputStream(fileName));
    }

    private java.io.Writer fileNameToOutputWriter2(java.lang.String fileName) throws java.io.IOException {
        if (fileName == null) {
            return null;
        }
        if (testMode) {
            return new java.io.StringWriter();
        }
        return streamToOutputWriter2(filenameToOutputStream(fileName));
    }

    protected java.io.OutputStream filenameToOutputStream(java.lang.String fileName) throws java.io.IOException {
        if (fileName == null) {
            return null;
        }
        return new java.io.FileOutputStream(fileName);
    }

    private java.io.Writer streamToLegacyOutputWriter(java.io.OutputStream stream) throws java.io.IOException {
        if (legacyOutputCharset == null) {
            return new java.io.BufferedWriter(new java.io.OutputStreamWriter(stream));
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(117).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.inputsSupplierForTesting",com.google.javascript.jscomp.AbstractCommandLineRunner.this.inputsSupplierForTesting);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.outputCharset2",com.google.javascript.jscomp.AbstractCommandLineRunner.this.outputCharset2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.inputCharset",com.google.javascript.jscomp.AbstractCommandLineRunner.this.inputCharset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.externsSupplierForTesting",com.google.javascript.jscomp.AbstractCommandLineRunner.this.externsSupplierForTesting);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER",com.google.javascript.jscomp.AbstractCommandLineRunner.NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.modulesSupplierForTesting",com.google.javascript.jscomp.AbstractCommandLineRunner.this.modulesSupplierForTesting);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.legacyOutputCharset",com.google.javascript.jscomp.AbstractCommandLineRunner.this.legacyOutputCharset);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.exitCodeReceiverForTesting",com.google.javascript.jscomp.AbstractCommandLineRunner.this.exitCodeReceiverForTesting);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.parsedModuleWrappers",com.google.javascript.jscomp.AbstractCommandLineRunner.this.parsedModuleWrappers);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.testMode",com.google.javascript.jscomp.AbstractCommandLineRunner.this.testMode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_WRAPPER_MARKER",com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_WRAPPER_MARKER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.err",com.google.javascript.jscomp.AbstractCommandLineRunner.this.err);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.config",com.google.javascript.jscomp.AbstractCommandLineRunner.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.jsOutput",com.google.javascript.jscomp.AbstractCommandLineRunner.this.jsOutput);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("stream",stream);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.runTimeStats",com.google.javascript.jscomp.AbstractCommandLineRunner.this.runTimeStats);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.compiler",com.google.javascript.jscomp.AbstractCommandLineRunner.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectInput("com.google.javascript.jscomp.AbstractCommandLineRunner.this.rootRelativePathsMap",com.google.javascript.jscomp.AbstractCommandLineRunner.this.rootRelativePathsMap);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(117).collectionEnds();
            }
            if (runtimeAngelicValue)
                return new java.io.BufferedWriter(new java.io.OutputStreamWriter(stream, legacyOutputCharset));

        }
    }

    private java.io.Writer streamToOutputWriter2(java.io.OutputStream stream) {
        if (outputCharset2 == null) {
            return new java.io.BufferedWriter(new java.io.OutputStreamWriter(stream));
        } else {
            return new java.io.BufferedWriter(new java.io.OutputStreamWriter(stream, outputCharset2));
        }
    }

    private void outputSourceMap(B options, java.lang.String associatedName) throws java.io.IOException {
        if (com.google.common.base.Strings.isNullOrEmpty(options.sourceMapOutputPath)) {
            return;
        }
        java.lang.String outName = expandSourceMapPath(options, null);
        java.io.Writer out = fileNameToOutputWriter2(outName);
        compiler.getSourceMap().appendTo(out, associatedName);
        out.close();
    }

    private java.lang.String getMapPath(java.lang.String outputFile) {
        java.lang.String basePath = "";
        if (outputFile.equals("")) {
            if (!config.moduleOutputPathPrefix.equals("")) {
                basePath = config.moduleOutputPathPrefix;
            } else {
                basePath = "jscompiler";
            }
        } else {
            java.io.File file = new java.io.File(outputFile);
            java.lang.String outputFileName = file.getName();
            if (outputFileName.endsWith(".js")) {
                outputFileName = outputFileName.substring(0, outputFileName.length() - 3);
            }
            basePath = (file.getParent() + java.io.File.separatorChar) + outputFileName;
        }
        return basePath;
    }

    private void outputNameMaps(B options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {
        java.lang.String propertyMapOutputPath = null;
        java.lang.String variableMapOutputPath = null;
        java.lang.String functionInformationMapOutputPath = null;
        if (config.createNameMapFiles) {
            java.lang.String basePath = getMapPath(config.jsOutputFile);
            propertyMapOutputPath = basePath + "_props_map.out";
            variableMapOutputPath = basePath + "_vars_map.out";
            functionInformationMapOutputPath = basePath + "_functions_map.out";
        }
        if (!config.variableMapOutputFile.equals("")) {
            if (variableMapOutputPath != null) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("The flags variable_map_output_file and " + "create_name_map_files cannot both be used simultaniously.");
            }
            variableMapOutputPath = config.variableMapOutputFile;
        }
        if (!config.propertyMapOutputFile.equals("")) {
            if (propertyMapOutputPath != null) {
                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException("The flags property_map_output_file and " + "create_name_map_files cannot both be used simultaniously.");
            }
            propertyMapOutputPath = config.propertyMapOutputFile;
        }
        if (variableMapOutputPath != null) {
            if (compiler.getVariableMap() != null) {
                compiler.getVariableMap().save(variableMapOutputPath);
            }
        }
        if (propertyMapOutputPath != null) {
            if (compiler.getPropertyMap() != null) {
                compiler.getPropertyMap().save(propertyMapOutputPath);
            }
        }
        if (functionInformationMapOutputPath != null) {
            if (compiler.getFunctionalInformationMap() != null) {
                java.io.OutputStream file = filenameToOutputStream(functionInformationMapOutputPath);
                com.google.protobuf.CodedOutputStream outputStream = com.google.protobuf.CodedOutputStream.newInstance(file);
                compiler.getFunctionalInformationMap().writeTo(outputStream);
                outputStream.flush();
                file.flush();
                file.close();
            }
        }
    }

    @com.google.common.annotations.VisibleForTesting
    static void createDefineOrTweakReplacements(java.util.List<java.lang.String> definitions, com.google.javascript.jscomp.CompilerOptions options, boolean tweaks) {
        for (java.lang.String override : definitions) {
            java.lang.String[] assignment = override.split("=", 2);
            java.lang.String defName = assignment[0];
            if (defName.length() > 0) {
                java.lang.String defValue = (assignment.length == 1) ? "true" : assignment[1];
                boolean isTrue = defValue.equals("true");
                boolean isFalse = defValue.equals("false");
                if (isTrue || isFalse) {
                    if (tweaks) {
                        options.setTweakToBooleanLiteral(defName, isTrue);
                    } else {
                        options.setDefineToBooleanLiteral(defName, isTrue);
                    }
                    continue;
                } else if ((defValue.length() > 1) && (((defValue.charAt(0) == '\'') && (defValue.charAt(defValue.length() - 1) == '\'')) || ((defValue.charAt(0) == '\"') && (defValue.charAt(defValue.length() - 1) == '\"')))) {
                    java.lang.String maybeStringVal = defValue.substring(1, defValue.length() - 1);
                    if (maybeStringVal.indexOf(defValue.charAt(0)) == (-1)) {
                        if (tweaks) {
                            options.setTweakToStringLiteral(defName, maybeStringVal);
                        } else {
                            options.setDefineToStringLiteral(defName, maybeStringVal);
                        }
                        continue;
                    }
                } else {
                    try {
                        double value = java.lang.Double.parseDouble(defValue);
                        if (tweaks) {
                            options.setTweakToDoubleLiteral(defName, value);
                        } else {
                            options.setDefineToDoubleLiteral(defName, value);
                        }
                        continue;
                    } catch (java.lang.NumberFormatException e) {
                    }
                }
            }
            if (tweaks) {
                throw new java.lang.RuntimeException("--tweak flag syntax invalid: " + override);
            }
            throw new java.lang.RuntimeException("--define flag syntax invalid: " + override);
        }
    }

    private boolean shouldGenerateOutputPerModule(java.lang.String output) {
        return ((!config.module.isEmpty()) && (output != null)) && output.contains("%outname%");
    }

    private void outputManifest() throws java.io.IOException {
        outputManifestOrBundle(config.outputManifests, true);
    }

    private void outputBundle() throws java.io.IOException {
        outputManifestOrBundle(config.outputBundles, false);
    }

    private void outputManifestOrBundle(java.util.List<java.lang.String> outputFiles, boolean isManifest) throws java.io.IOException {
        if (outputFiles.isEmpty()) {
            return;
        }
        for (java.lang.String output : outputFiles) {
            if (output.isEmpty()) {
                continue;
            }
            if (shouldGenerateOutputPerModule(output)) {
                com.google.javascript.jscomp.JSModuleGraph graph = compiler.getDegenerateModuleGraph();
                java.lang.Iterable<com.google.javascript.jscomp.JSModule> modules = graph.getAllModules();
                for (com.google.javascript.jscomp.JSModule module : modules) {
                    java.io.Writer out = fileNameToOutputWriter2(expandCommandLinePath(output, module));
                    if (isManifest) {
                        printManifestTo(module.getInputs(), out);
                    } else {
                        printBundleTo(module.getInputs(), out);
                    }
                    out.close();
                }
            } else {
                java.io.Writer out = fileNameToOutputWriter2(expandCommandLinePath(output, null));
                if (config.module.isEmpty()) {
                    if (isManifest) {
                        printManifestTo(compiler.getInputsInOrder(), out);
                    } else {
                        printBundleTo(compiler.getInputsInOrder(), out);
                    }
                } else {
                    printModuleGraphManifestOrBundleTo(compiler.getDegenerateModuleGraph(), out, isManifest);
                }
                out.close();
            }
        }
    }

    @com.google.common.annotations.VisibleForTesting
    void printModuleGraphManifestOrBundleTo(com.google.javascript.jscomp.JSModuleGraph graph, java.lang.Appendable out, boolean isManifest) throws java.io.IOException {
        com.google.common.base.Joiner commas = com.google.common.base.Joiner.on(",");
        boolean requiresNewline = false;
        for (com.google.javascript.jscomp.JSModule module : graph.getAllModules()) {
            if (requiresNewline) {
                out.append("\n");
            }
            if (isManifest) {
                java.lang.String dependencies = commas.join(module.getSortedDependencyNames());
                out.append(java.lang.String.format("{%s%s}\n", module.getName(), dependencies.isEmpty() ? "" : ":" + dependencies));
                printManifestTo(module.getInputs(), out);
            } else {
                printBundleTo(module.getInputs(), out);
            }
            requiresNewline = true;
        }
    }

    private void printManifestTo(java.lang.Iterable<com.google.javascript.jscomp.CompilerInput> inputs, java.lang.Appendable out) throws java.io.IOException {
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            java.lang.String rootRelativePath = rootRelativePathsMap.get(input.getName());
            java.lang.String displayName = (rootRelativePath != null) ? rootRelativePath : input.getName();
            out.append(displayName);
            out.append("\n");
        }
    }

    private void printBundleTo(java.lang.Iterable<com.google.javascript.jscomp.CompilerInput> inputs, java.lang.Appendable out) throws java.io.IOException {
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            if (input.getName().equals(com.google.javascript.jscomp.Compiler.createFillFileName(com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME))) {
                com.google.common.base.Preconditions.checkState(1 == com.google.common.collect.Iterables.size(inputs));
                return;
            }
            java.lang.String rootRelativePath = rootRelativePathsMap.get(input.getName());
            java.lang.String displayName = (rootRelativePath != null) ? rootRelativePath : input.getName();
            java.io.File file = new java.io.File(input.getName());
            out.append("//");
            out.append(displayName);
            out.append("\n");
            com.google.common.io.Files.copy(file, inputCharset, out);
            out.append("\n");
        }
    }

    private java.util.Map<java.lang.String, java.lang.String> constructRootRelativePathsMap() {
        java.util.Map<java.lang.String, java.lang.String> rootRelativePathsMap = com.google.common.collect.Maps.newLinkedHashMap();
        for (java.lang.String mapString : config.manifestMaps) {
            int colonIndex = mapString.indexOf(':');
            com.google.common.base.Preconditions.checkState(colonIndex > 0);
            java.lang.String execPath = mapString.substring(0, colonIndex);
            java.lang.String rootRelativePath = mapString.substring(colonIndex + 1);
            com.google.common.base.Preconditions.checkState(rootRelativePath.indexOf(':') == (-1));
            rootRelativePathsMap.put(execPath, rootRelativePath);
        }
        return rootRelativePathsMap;
    }

    private class RunTimeStats {
        private long bestRunTime = java.lang.Long.MAX_VALUE;

        private long worstRunTime = java.lang.Long.MIN_VALUE;

        private long lastStartTime = 0;

        private java.util.List<java.util.List<java.lang.String>> loopedPassesInBestRun = null;

        private void recordStartRun() {
            lastStartTime = java.lang.System.currentTimeMillis();
            com.google.javascript.jscomp.PhaseOptimizer.clearLoopsRun();
        }

        private void recordEndRun() {
            long endTime = java.lang.System.currentTimeMillis();
            long length = endTime - lastStartTime;
            worstRunTime = java.lang.Math.max(length, worstRunTime);
            if (length < bestRunTime) {
                loopedPassesInBestRun = com.google.javascript.jscomp.PhaseOptimizer.getLoopsRun();
                bestRunTime = length;
            }
        }

        private void outputBestPhaseOrdering() {
            try {
                jsOutput.append(("Best time: " + bestRunTime) + "\n");
                jsOutput.append(("Worst time: " + worstRunTime) + "\n");
                int i = 1;
                for (java.util.List<java.lang.String> loop : loopedPassesInBestRun) {
                    jsOutput.append(((("\nLoop " + i) + ":\n") + com.google.common.base.Joiner.on("\n").join(loop)) + "\n");
                    i++;
                }
            } catch (java.io.IOException e) {
                throw new java.lang.RuntimeException("unexpected exception", e);
            }
        }
    }

    static class CommandLineConfig {
        private boolean printTree = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {
            this.printTree = printTree;
            return this;
        }

        private boolean computePhaseOrdering = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {
            this.computePhaseOrdering = computePhaseOrdering;
            return this;
        }

        private boolean printAst = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {
            this.printAst = printAst;
            return this;
        }

        private boolean printPassGraph = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {
            this.printPassGraph = printPassGraph;
            return this;
        }

        private com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode = com.google.javascript.jscomp.CompilerOptions.DevMode.OFF;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {
            this.jscompDevMode = jscompDevMode;
            return this;
        }

        private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {
            this.loggingLevel = loggingLevel;
            return this;
        }

        private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {
            this.externs.clear();
            this.externs.addAll(externs);
            return this;
        }

        private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {
            this.js.clear();
            this.js.addAll(js);
            return this;
        }

        private java.lang.String jsOutputFile = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {
            this.jsOutputFile = jsOutputFile;
            return this;
        }

        private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {
            this.module.clear();
            this.module.addAll(module);
            return this;
        }

        private java.lang.String variableMapInputFile = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {
            this.variableMapInputFile = variableMapInputFile;
            return this;
        }

        private java.lang.String propertyMapInputFile = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {
            this.propertyMapInputFile = propertyMapInputFile;
            return this;
        }

        private java.lang.String variableMapOutputFile = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {
            this.variableMapOutputFile = variableMapOutputFile;
            return this;
        }

        private boolean createNameMapFiles = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {
            this.createNameMapFiles = createNameMapFiles;
            return this;
        }

        private java.lang.String propertyMapOutputFile = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {
            this.propertyMapOutputFile = propertyMapOutputFile;
            return this;
        }

        private com.google.javascript.jscomp.CodingConvention codingConvention = com.google.javascript.jscomp.CodingConventions.getDefault();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {
            this.codingConvention = codingConvention;
            return this;
        }

        private int summaryDetailLevel = 1;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {
            this.summaryDetailLevel = summaryDetailLevel;
            return this;
        }

        private java.lang.String outputWrapper = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {
            this.outputWrapper = outputWrapper;
            return this;
        }

        private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {
            this.moduleWrapper.clear();
            this.moduleWrapper.addAll(moduleWrapper);
            return this;
        }

        private java.lang.String moduleOutputPathPrefix = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {
            this.moduleOutputPathPrefix = moduleOutputPathPrefix;
            return this;
        }

        private java.lang.String createSourceMap = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {
            this.createSourceMap = createSourceMap;
            return this;
        }

        private com.google.javascript.jscomp.SourceMap.DetailLevel sourceMapDetailLevel = com.google.javascript.jscomp.SourceMap.DetailLevel.ALL;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {
            this.sourceMapDetailLevel = level;
            return this;
        }

        private com.google.javascript.jscomp.SourceMap.Format sourceMapFormat = com.google.javascript.jscomp.SourceMap.Format.DEFAULT;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {
            this.sourceMapFormat = format;
            return this;
        }

        private com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuards = null;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setWarningGuardSpec(com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec spec) {
            this.warningGuards = spec;
            return this;
        }

        private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {
            this.define.clear();
            this.define.addAll(define);
            return this;
        }

        private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {
            this.tweak.clear();
            this.tweak.addAll(tweak);
            return this;
        }

        private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {
            this.tweakProcessing = tweakProcessing;
            return this;
        }

        private java.lang.String charset = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {
            this.charset = charset;
            return this;
        }

        private boolean manageClosureDependencies = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {
            this.manageClosureDependencies = newVal;
            return this;
        }

        private boolean onlyClosureDependencies = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOnlyClosureDependencies(boolean newVal) {
            this.onlyClosureDependencies = newVal;
            return this;
        }

        private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {
            com.google.common.base.Preconditions.checkNotNull(entryPoints);
            this.closureEntryPoints = entryPoints;
            return this;
        }

        private java.util.List<java.lang.String> outputManifests = com.google.common.collect.ImmutableList.of();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.util.List<java.lang.String> outputManifests) {
            this.outputManifests = com.google.common.collect.Lists.newArrayList();
            for (java.lang.String manifestName : outputManifests) {
                if (!manifestName.isEmpty()) {
                    this.outputManifests.add(manifestName);
                }
            }
            this.outputManifests = com.google.common.collect.ImmutableList.copyOf(this.outputManifests);
            return this;
        }

        private java.util.List<java.lang.String> outputBundles = com.google.common.collect.ImmutableList.of();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputBundle(java.util.List<java.lang.String> outputBundles) {
            this.outputBundles = outputBundles;
            return this;
        }

        private boolean acceptConstKeyword = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {
            this.acceptConstKeyword = acceptConstKeyword;
            return this;
        }

        private java.lang.String languageIn = "";

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {
            this.languageIn = languageIn;
            return this;
        }

        private boolean skipNormalOutputs = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSkipNormalOutputs(boolean skipNormalOutputs) {
            this.skipNormalOutputs = skipNormalOutputs;
            return this;
        }

        private java.util.List<java.lang.String> manifestMaps = com.google.common.collect.ImmutableList.of();

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManifestMaps(java.util.List<java.lang.String> manifestMaps) {
            this.manifestMaps = manifestMaps;
            return this;
        }

        private boolean transformAMDToCJSModules = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTransformAMDToCJSModules(boolean transformAMDToCJSModules) {
            this.transformAMDToCJSModules = transformAMDToCJSModules;
            return this;
        }

        private boolean processCommonJSModules = false;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setProcessCommonJSModules(boolean processCommonJSModules) {
            this.processCommonJSModules = processCommonJSModules;
            return this;
        }

        private java.lang.String commonJSModulePathPrefix = com.google.javascript.jscomp.ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;

        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCommonJSModulePathPrefix(java.lang.String commonJSModulePathPrefix) {
            this.commonJSModulePathPrefix = commonJSModulePathPrefix;
            return this;
        }
    }

    protected static class WarningGuardSpec {
        private static class Entry {
            private final com.google.javascript.jscomp.CheckLevel level;

            private final java.lang.String groupName;

            private Entry(com.google.javascript.jscomp.CheckLevel level, java.lang.String groupName) {
                this.level = level;
                this.groupName = groupName;
            }
        }

        private final java.util.List<com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry> entries = com.google.common.collect.Lists.newArrayList();

        protected void add(com.google.javascript.jscomp.CheckLevel level, java.lang.String groupName) {
            entries.add(new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry(level, groupName));
        }

        protected void clear() {
            entries.clear();
        }
    }
}
[299003] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659906666303
GPR[SSUN]-1659906666303
-418265650
GPR[SPVATF]-1659906666671
GPR[EPVATF]-1659906667516
GPR[SPS]-1659906667516
[301099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1141.
GPR[EPS]-1659906668399
GPR[ESUN]-1659906668399
GPR[SSUN]-1659906668399
-418265650
GPR[SPVATF]-1659906668687
GPR[EPVATF]-1659906669545
GPR[SPS]-1659906669545
[303112] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:722.
GPR[EPS]-1659906670412
GPR[ESUN]-1659906670412
GPR[SSUN]-1659906670412
-418265650
GPR[SPVATF]-1659906670689
GPR[EPVATF]-1659906671581
GPR[SPS]-1659906671581
[305169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:721.
GPR[EPS]-1659906672469
GPR[SPVATF]-1659906672469
GPR[EPVATF]-1659906674465
GPR[SPS]-1659906674465
[308227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:721.
GPR[EPS]-1659906675527
GPR[ESUN]-1659906675527
GPR[SSUN]-1659906675527
-418265650
GPR[SPVATF]-1659906675805
GPR[EPVATF]-1659906676660
GPR[SPS]-1659906676660
[310233] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:295.
GPR[EPS]-1659906677534
GPR[SPVATF]-1659906677534
GPR[EPVATF]-1659906678381
GPR[SPS]-1659906678381
[311980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:295.
GPR[EPS]-1659906679281
GPR[ESUN]-1659906679281
GPR[SSUN]-1659906679281
-418265650
GPR[ESUN]-1659906679555
GPR[SSUN]-1659906679555
-418265650
GPR[SPVATF]-1659906679822
GPR[EPVATF]-1659906680672
GPR[SPS]-1659906680672
[314238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:1503.
GPR[EPS]-1659906681539
GPR[ESUN]-1659906681539
GPR[SSUN]-1659906681539
-418265650
GPR[ESUN]-1659906681816
GPR[SSUN]-1659906681816
-418265650
GPR[ESUN]-1659906682082
GPR[SSUN]-1659906682082
-418265650
GPR[SPVATF]-1659906682352
GPR[EPVATF]-1659906683182
GPR[SPS]-1659906683182
[316779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:803.
GPR[EPS]-1659906684079
GPR[SPVATF]-1659906684079
GPR[EPVATF]-1659906684926
GPR[SPS]-1659906684926
[318489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:803.
GPR[EPS]-1659906685789
GPR[ESUN]-1659906685789
GPR[SSUN]-1659906685789
-418265650
GPR[SPVATF]-1659906686064
GPR[EPVATF]-1659906686908
GPR[SPS]-1659906686908
[320503] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:798.
GPR[EPS]-1659906687804
GPR[SPVATF]-1659906687804
GPR[EPVATF]-1659906688661
GPR[SPS]-1659906688661
[322221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:798.
GPR[EPS]-1659906689521
GPR[ESUN]-1659906689521
GPR[SSUN]-1659906689521
-418265650
GPR[SPVATF]-1659906689809
GPR[EPVATF]-1659906690657
GPR[SPS]-1659906690657
[324230] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:796.
GPR[EPS]-1659906691530
GPR[ESUN]-1659906691530
GPR[SSUN]-1659906691530
-418265650
GPR[SPVATF]-1659906691823
GPR[EPVATF]-1659906692660
GPR[SPS]-1659906692660
[326248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:785.
GPR[EPS]-1659906693548
GPR[SPVATF]-1659906693548
GPR[EPVATF]-1659906694392
GPR[SPS]-1659906694392
[327974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:785.
GPR[EPS]-1659906695274
GPR[ESUN]-1659906695274
GPR[SSUN]-1659906695274
-1914542565
GPR[ESUN]-1659906695480
GPR[SSUN]-1659906695480
-1914542565
GPR[SPVATF]-1659906695681
GPR[EPVATF]-1659906696508
GPR[SPS]-1659906696508
[329693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PhaseOptimizer:110.
GPR[EPS]-1659906696993
GPR[ESUN]-1659906696993
GPR[SSUN]-1659906696993
-1914542565
GPR[ESUN]-1659906697207
GPR[SSUN]-1659906697207
-418265650
GPR[ESUN]-1659906697480
GPR[SSUN]-1659906697480
-418265650
GPR[ESUN]-1659906697753
GPR[SSUN]-1659906697753
-418265650
GPR[SPVATF]-1659906698031
GPR[EPVATF]-1659906698867
GPR[SPS]-1659906698867
[332437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:1537.
GPR[EPS]-1659906699737
GPR[ESUN]-1659906699738
GPR[SSUN]-1659906699738
-418265650
GPR[SPVATF]-1659906700016
GPR[EPVATF]-1659906700861
GPR[SPS]-1659906700861
[334429] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:1536.
GPR[EPS]-1659906701729
GPR[ESUN]-1659906701729
GPR[SSUN]-1659906701729
-418265650
GPR[SPVATF]-1659906702017
GPR[EPVATF]-1659906702890
GPR[SPS]-1659906702890
[336501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:1535.
GPR[EPS]-1659906703801
GPR[SPVATF]-1659906703801
GPR[EPVATF]-1659906704645
GPR[SPS]-1659906704645
[338234] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:1535.
GPR[EPS]-1659906705535
GPR[ESUN]-1659906705535
GPR[SSUN]-1659906705535
-418265650
GPR[SPVATF]-1659906705817
GPR[EPVATF]-1659906706669
GPR[SPS]-1659906706669
[340226] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:1534.
GPR[EPS]-1659906707526
GPR[ESUN]-1659906707526
GPR[SSUN]-1659906707526
-418265650
GPR[ESUN]-1659906707804
GPR[SSUN]-1659906707805
-418265650
GPR[ESUN]-1659906708076
GPR[SSUN]-1659906708076
-418265650
GPR[ESUN]-1659906708347
GPR[SSUN]-1659906708347
-418265650
GPR[SPVATF]-1659906708623
GPR[EPVATF]-1659906709505
GPR[SPS]-1659906709505
[343093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:1525.
GPR[EPS]-1659906710393
GPR[ESUN]-1659906710393
GPR[SSUN]-1659906710393
-418265650
GPR[SPVATF]-1659906710676
GPR[EPVATF]-1659906712281
GPR[SPS]-1659906712281
[345867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner$RunTimeStats:1524.
GPR[EPS]-1659906713168
GPR[ESUN]-1659906713168
GPR[SSUN]-1659906713168
-1769523821
GPR[ESUN]-1659906713345
GPR[SSUN]-1659906713345
-1769523821
GPR[SPVATF]-1659906713512
GPR[EPVATF]-1659906714739
GPR[SPS]-1659906714739
[347912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrintStreamErrorManager:67.
GPR[EPS]-1659906715213
GPR[SPVATF]-1659906715213
GPR[EPVATF]-1659906716082
GPR[SPS]-1659906716082
[349206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrintStreamErrorManager:67.
GPR[EPS]-1659906716506
GPR[ESUN]-1659906716506
GPR[SSUN]-1659906716506
-418265650
GPR[SPVATF]-1659906716774
GPR[EPVATF]-1659906717620
GPR[SPS]-1659906717620
[351203] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:773.
GPR[EPS]-1659906718503
GPR[SPVATF]-1659906718503
GPR[EPVATF]-1659906719362
GPR[SPS]-1659906719362
[352937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:773.
GPR[EPS]-1659906720237
GPR[ESUN]-1659906720237
GPR[SSUN]-1659906720237
-418265650
GPR[SPVATF]-1659906720533
GPR[EPVATF]-1659906721392
GPR[SPS]-1659906721392
[354962] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:762.
GPR[EPS]-1659906722263
GPR[SPVATF]-1659906722263
GPR[EPVATF]-1659906723126
GPR[SPS]-1659906723126
[356702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:762.
GPR[EPS]-1659906724002
GPR[ESUN]-1659906724002
GPR[SSUN]-1659906724002
-418265650
GPR[SPVATF]-1659906724291
GPR[EPVATF]-1659906725132
GPR[SPS]-1659906725132
[358705] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:758.
GPR[EPS]-1659906726006
GPR[SPVATF]-1659906726006
GPR[EPVATF]-1659906726833
GPR[SPS]-1659906726833
[360476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:758.
GPR[EPS]-1659906727776
GPR[ESUN]-1659906727786
GPR[SSUN]-1659906727786
-418265650
GPR[ESUN]-1659906728068
GPR[SSUN]-1659906728068
-418265650
GPR[SPVATF]-1659906728335
GPR[EPVATF]-1659906729176
GPR[SPS]-1659906729176
[362747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:748.
GPR[EPS]-1659906730047
GPR[ESUN]-1659906730047
GPR[SSUN]-1659906730047
-418265650
GPR[SPVATF]-1659906730325
GPR[EPVATF]-1659906731152
GPR[SPS]-1659906731152
[364718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:747.
GPR[EPS]-1659906732018
GPR[SPVATF]-1659906732018
GPR[EPVATF]-1659906732846
GPR[SPS]-1659906732846
[366408] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:747.
GPR[EPS]-1659906733708
GPR[ESUN]-1659906733708
GPR[SSUN]-1659906733708
-418265650
GPR[ESUN]-1659906733980
GPR[SSUN]-1659906733980
-418265650
GPR[ESUN]-1659906734246
GPR[SSUN]-1659906734246
-418265650
GPR[SPVATF]-1659906734511
GPR[EPVATF]-1659906735340
GPR[SPS]-1659906735340
[368910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:375.
GPR[EPS]-1659906736210
GPR[ESUN]-1659906736210
GPR[SSUN]-1659906736210
-418265650
GPR[SPVATF]-1659906736483
GPR[EPVATF]-1659906737309
GPR[SPS]-1659906737309
[370883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractCommandLineRunner:374.
GPR[EPS]-1659906738183
GPR[SPVATF]-1659906738183
GPR[EPVATF]-1659906739002
GPR[SPS]-1659906739002
\n\nNode: host-51\n
\n\nDate: Sun 07 Aug 2022 02:12:20 PM PDT\n
End running Nopol Closure/31 results at /experiment_home///results/Nopol/Closure/31/seed_263/
Removing checked out dir script/workingdir/Nopol/Closure_31
GPR[SSLE]-1659906740811
GPR[ESLE]-1659906800817
