Sleep 1m start
GPR[SSLI]-1659881158309
GPR[ESLI]-1659881218312
Running Nopol Math 69b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Math/69/seed_261/
The file script/workingdir/Nopol/Math_69 does not exist!
script/workingdir/Nopol/Math_69
script/workingdir/Nopol/Math_69
classpath:  script/workingdir/Nopol/Math_69/target/classes:script/workingdir/Nopol/Math_69/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/Nopol/Math_69/lib/junit-4.4.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659881233390
GPR[ESLB]-1659881293416
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Math_69//target/classes:script/workingdir/Nopol/Math_69//target/test-classes:script/workingdir/Nopol/Math_69/target/classes:script/workingdir/Nopol/Math_69/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/Nopol/Math_69/lib/junit-4.4.jar
Node: host-67
Date init: Sun 07 Aug 2022 07:08:13 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Math_69/src/main/java]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Math_69/target/classes/, file:script/workingdir/Nopol/Math_69/target/test-classes/, file:script/workingdir/Nopol/Math_69/target/classes/, file:script/workingdir/Nopol/Math_69/target/test-classes/, file:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.BinaryFunctionTest, org.apache.commons.math.analysis.BinaryFunctionTest, org.apache.commons.math.analysis.ComposableFunctionTest, org.apache.commons.math.analysis.ComposableFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Math_69/src/main/java], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ArgumentOutsideDomainExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.ConvergenceExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.FunctionEvaluationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathConfigurationExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MathExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.MaxIterationsExceededExceptionTest, org.apache.commons.math.analysis.BinaryFunctionTest, org.apache.commons.math.analysis.BinaryFunctionTest, org.apache.commons.math.analysis.ComposableFunctionTest, org.apache.commons.math.analysis.ComposableFunctionTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.RombergIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.MicrosphereInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunctionTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatorTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BisectionSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.BrentSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.LaguerreSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.MullerSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.NewtonSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.RiddersSolverTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFieldTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexFormatTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.ComplexUtilsTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.complex.FrenchComplexFormatTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BetaDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.BinomialDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.CauchyDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ChiSquareDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.ExponentialDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.FDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.GammaDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.HypergeometricDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.NormalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PascalDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.PoissonDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.TDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.WeibullDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.distribution.ZipfDistributionTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.EstimatedParameterTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.GaussNewtonEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.MinpackTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.estimation.WeightedMeasurementTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFieldTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionFormatTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.BigFractionTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFieldTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionFormatTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.fraction.FractionTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryChromosomeTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.BinaryMutationTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ChromosomeTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.ElitisticListPopulationTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FitnessCachingTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.FixedGenerationCountTest, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.ListPopulationTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.OnePointCrossoverTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyMutationTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.RandomKeyTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.genetics.TournamentSelectionTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.FrenchVector3DFormatTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationOrderTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.RotationTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DFormatTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.geometry.Vector3DTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.AbstractRealVectorTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.Array2DRowRealMatrixTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayFieldVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.ArrayRealVectorTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BiDiagonalTransformerTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BigMatrixImplTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockFieldMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.BlockRealMatrixTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskyDecompositionImplTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.CholeskySolverTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenDecompositionImplTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.EigenSolverTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldLUDecompositionImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FieldMatrixImplTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.FrenchRealVectorFormatTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.InvalidMatrixExceptionTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUDecompositionImplTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.LUSolverTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixIndexExceptionTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.MatrixUtilsTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRDecompositionImplTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.QRSolverTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealMatrixImplTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.RealVectorFormatTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueDecompositionImplTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SingularValueSolverTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldMatrixTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseFieldVectorTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealMatrixTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.SparseRealVectorTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.linear.TriDiagonalTransformerTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.ContinuousOutputModelTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.FirstOrderConverterTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.events.EventStateTest, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest, org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobiansTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillIntegratorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.ode.sampling.StepNormalizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.MultiDirectionalTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.direct.NelderMeadTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.CurveFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.HarmonicFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.fitting.PolynomialFitterTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.MinpackTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexSolverTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.linear.SimplexTableauTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.optimization.univariate.BrentMinimizerTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.AbstractRandomGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.EmpiricalDistributionTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.GaussianRandomGeneratorTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.MersenneTwisterTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomAdaptorTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.RandomDataTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.UniformRandomGeneratorTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.random.ValueServerTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.BetaTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.ErfTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.special.GammaTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.CertifiedDataTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.FrequencyTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.StatUtilsTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.CovarianceTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LewTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.data.LotteryTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.InteractionTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.KurtosisTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.MeanTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SemiVarianceTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.SkewnessTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MaxTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MedianTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.MinTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.rank.PercentileTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.ProductTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumLogTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumSqTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.descriptive.summary.SumTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareFactoryTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.ChiSquareTestTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.OneWayAnovaTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestFactoryTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TTestTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.inference.TestUtilsTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.ranking.NaturalRankingTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.stat.regression.SimpleRegressionTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastCosineTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastFourierTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastHadamardTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.transform.FastSineTransformerTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealFieldTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.BigRealTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.ContinuedFractionTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.DefaultTransformerTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.MathUtilsTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.OpenIntToFieldTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.ResizableDoubleArrayTest, org.apache.commons.math.util.TransformerMapTest, org.apache.commons.math.util.TransformerMapTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Math/69/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[6] INFO NoPol - Maximum memory: 7 GB
[6] INFO NoPol - Total memory available to JVM: 1 GB
[7] INFO NoPol - Java version: 1.8.0_45
[8] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[8] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659881296934
GPR[ESUP]-1659881296934
GPR[SFL]-1659881296934
GPR[EFL]-1659881306261
GPR[SFP]-1659881306261
GPR[SSUN]-1659881306300
-585881636
GPR[ESUN]-1659881306545
GPR[SSUN]-1659881306545
-585881636
GPR[SPVATF]-1659881306674
GPR[EPVATF]-1659881306725
GPR[SPS]-1659881306725
[13219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:171.
GPR[EPS]-1659881307341
GPR[ESUN]-1659881307341
GPR[SSUN]-1659881307341
-585881636
GPR[ESUN]-1659881307472
GPR[SSUN]-1659881307472
-585881636
GPR[ESUN]-1659881307596
GPR[SSUN]-1659881307596
-585881636
GPR[SPVATF]-1659881307718
GPR[EPVATF]-1659881307744
GPR[SPS]-1659881307744
[13827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:167.
GPR[EPS]-1659881307949
GPR[ESUN]-1659881307949
GPR[SSUN]-1659881307949
-585881636
GPR[SPVATF]-1659881308072
GPR[EPVATF]-1659881308097
GPR[SPS]-1659881308097
[14174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:166.
GPR[EPS]-1659881308296
GPR[SPVATF]-1659881308296
GPR[EPVATF]-1659881308321
GPR[SPS]-1659881308321
[14386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:166.
GPR[EPS]-1659881308508
GPR[ESUN]-1659881308508
GPR[SSUN]-1659881308508
-585881636
GPR[SPVATF]-1659881308626
GPR[EPVATF]-1659881308650
GPR[SPS]-1659881308650
[14708] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:165.
GPR[EPS]-1659881308830
GPR[ESUN]-1659881308830
GPR[SSUN]-1659881308830
-585881636
GPR[SPVATF]-1659881308948
GPR[EPVATF]-1659881308972
GPR[SPS]-1659881308972
[15038] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:164.
GPR[EPS]-1659881309160
GPR[ESUN]-1659881309160
GPR[SSUN]-1659881309160
-585881636
GPR[ESUN]-1659881309280
GPR[SSUN]-1659881309280
-585881636
GPR[ESUN]-1659881309398
GPR[SSUN]-1659881309398
-585881636
GPR[ESUN]-1659881309518
GPR[SSUN]-1659881309518
-585881636
GPR[ESUN]-1659881309632
GPR[SSUN]-1659881309632
-585881636
GPR[ESUN]-1659881309754
GPR[SSUN]-1659881309754
-585881636
GPR[SPVATF]-1659881309869
GPR[EPVATF]-1659881309895
GPR[SPS]-1659881309895
[15944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:195.
GPR[EPS]-1659881310066
GPR[ESUN]-1659881310066
GPR[SSUN]-1659881310066
-585881636
GPR[SPVATF]-1659881310186
GPR[EPVATF]-1659881310210
GPR[SPS]-1659881310210
GPR[EPS]-1659881310769
GPR[SPVATR]-1659881310769
[16647] INFO TestPatch - Applying patch: org.apache.commons.math.stat.correlation.PearsonsCorrelation:193: PRECONDITION (nVars) != (2)
[16812] INFO TestPatch - Running test suite to check the patch "(nVars) != (2)" is working
GPR[EPVATR]-1659881310963
[16841] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659881310963
[16849] INFO NoPol - --- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
@@ -192,3 +192,5 @@
               outMatrix.setEntry(i, j, corr);
-              outMatrix.setEntry(j, i, corr);
+              if ((nVars) != (2)) {
+                  outMatrix.setEntry(j, i, corr);
+              }
             }

Saving patch at /experiment_home///results/Nopol/Math/69/seed_261/patch_14037_1ts_1659881310971.diff
GPR[ESUN]-1659881310972
GPR[SSUN]-1659881310972
-585881636
GPR[SPVATF]-1659881311090
GPR[EPVATF]-1659881311114
GPR[SPS]-1659881311114
[17163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:192.
GPR[EPS]-1659881311285
GPR[ESUN]-1659881311285
GPR[SSUN]-1659881311285
-585881636
GPR[ESUN]-1659881311404
GPR[SSUN]-1659881311404
-585881636
GPR[SPVATF]-1659881311545
GPR[EPVATF]-1659881311570
GPR[SPS]-1659881311570
GPR[EPS]-1659881311948
GPR[SPVATR]-1659881311948
[17826] INFO TestPatch - Applying patch: org.apache.commons.math.stat.correlation.PearsonsCorrelation:190: PRECONDITION (nVars) != (2)
[17971] INFO TestPatch - Running test suite to check the patch "(nVars) != (2)" is working
GPR[EPVATR]-1659881312119
[17997] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659881312119
[17999] INFO NoPol - --- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
@@ -189,6 +189,8 @@
         for (int i = 0; i < nVars; i++) {
-            for (int j = 0; j < i; j++) {
-              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
-              outMatrix.setEntry(i, j, corr);
-              outMatrix.setEntry(j, i, corr);
+            if ((nVars) != (2)) {
+                for (int j = 0; j < i; j++) {
+                    double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
+                    outMatrix.setEntry(i, j, corr);
+                    outMatrix.setEntry(j, i, corr);
+                }
             }

Saving patch at /experiment_home///results/Nopol/Math/69/seed_261/patch_15187_2ts_1659881312121.diff
GPR[ESUN]-1659881312122
GPR[SSUN]-1659881312122
-585881636
GPR[SPVATF]-1659881312240
GPR[EPVATF]-1659881312263
GPR[SPS]-1659881312263
GPR[EPS]-1659881312601
GPR[SPVATR]-1659881312601
[18479] INFO TestPatch - Applying patch: org.apache.commons.math.stat.correlation.PearsonsCorrelation:189: PRECONDITION (nVars) != (2)
[18626] INFO TestPatch - Running test suite to check the patch "(nVars) != (2)" is working
GPR[EPVATR]-1659881312774
[18652] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659881312774
[18653] INFO NoPol - --- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
@@ -188,9 +188,11 @@
         RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);
-        for (int i = 0; i < nVars; i++) {
-            for (int j = 0; j < i; j++) {
-              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
-              outMatrix.setEntry(i, j, corr);
-              outMatrix.setEntry(j, i, corr);
+        if ((nVars) != (2)) {
+            for (int i = 0; i < nVars; i++) {
+                for (int j = 0; j < i; j++) {
+                    double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
+                    outMatrix.setEntry(i, j, corr);
+                    outMatrix.setEntry(j, i, corr);
+                }
+                outMatrix.setEntry(i, i, 1d);
             }
-            outMatrix.setEntry(i, i, 1d);
         }

Saving patch at /experiment_home///results/Nopol/Math/69/seed_261/patch_15841_3ts_1659881312775.diff
GPR[ESUN]-1659881312776
GPR[SSUN]-1659881312776
-585881636
GPR[ESUN]-1659881312890
GPR[SSUN]-1659881312890
-585881636
GPR[ESUN]-1659881313001
GPR[SSUN]-1659881313001
-585881636
GPR[SPVATF]-1659881313115
GPR[EPVATF]-1659881313137
GPR[SPS]-1659881313137
[19819] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class PearsonsCorrelation {
    private final org.apache.commons.math.linear.RealMatrix correlationMatrix;

    private final int nObs;

    public PearsonsCorrelation() {
        super();
        correlationMatrix = null;
        nObs = 0;
    }

    public PearsonsCorrelation(double[][] data) {
        this(new org.apache.commons.math.linear.BlockRealMatrix(data));
    }

    public PearsonsCorrelation(org.apache.commons.math.linear.RealMatrix matrix) {
        checkSufficientData(matrix);
        nObs = matrix.getRowDimension();
        correlationMatrix = computeCorrelationMatrix(matrix);
    }

    public PearsonsCorrelation(org.apache.commons.math.stat.correlation.Covariance covariance) {
        org.apache.commons.math.linear.RealMatrix covarianceMatrix = covariance.getCovarianceMatrix();
        if (covarianceMatrix == null) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("covariance matrix is null");
        }
        nObs = covariance.getN();
        correlationMatrix = covarianceToCorrelation(covarianceMatrix);
    }

    public PearsonsCorrelation(org.apache.commons.math.linear.RealMatrix covarianceMatrix, int numberOfObservations) {
        nObs = numberOfObservations;
        correlationMatrix = covarianceToCorrelation(covarianceMatrix);
    }

    public org.apache.commons.math.linear.RealMatrix getCorrelationMatrix() {
        return correlationMatrix;
    }

    public org.apache.commons.math.linear.RealMatrix getCorrelationStandardErrors() {
        int nVars = correlationMatrix.getColumnDimension();
        double[][] out = new double[nVars][nVars];
        for (int i = 0; i < nVars; i++) {
            for (int j = 0; j < nVars; j++) {
                double r = correlationMatrix.getEntry(i, j);
                out[i][j] = java.lang.Math.sqrt((1 - (r * r)) / (nObs - 2));
            }
        }
        return new org.apache.commons.math.linear.BlockRealMatrix(out);
    }

    public org.apache.commons.math.linear.RealMatrix getCorrelationPValues() throws org.apache.commons.math.MathException {
        org.apache.commons.math.distribution.TDistribution tDistribution = new org.apache.commons.math.distribution.TDistributionImpl(nObs - 2);
        int nVars = correlationMatrix.getColumnDimension();
        double[][] out = new double[nVars][nVars];
        for (int i = 0; i < nVars; i++) {
            for (int j = 0; j < nVars; j++) {
                if (i == j) {
                    out[i][j] = 0.0;
                } else {
                    double r = correlationMatrix.getEntry(i, j);
                    double t = java.lang.Math.abs(r * java.lang.Math.sqrt((nObs - 2) / (1 - (r * r))));
                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
                }
            }
        }
        return new org.apache.commons.math.linear.BlockRealMatrix(out);
    }

    public org.apache.commons.math.linear.RealMatrix computeCorrelationMatrix(org.apache.commons.math.linear.RealMatrix matrix) {
        int nVars = matrix.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix outMatrix = new org.apache.commons.math.linear.BlockRealMatrix(nVars, nVars);
        for (int i = 0; i < nVars; i++) {
            for (int j = 0; j < i; j++) {
                double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
                outMatrix.setEntry(i, j, corr);
                outMatrix.setEntry(j, i, corr);
            }
            outMatrix.setEntry(i, i, 1.0);
        }
        return outMatrix;
    }

    public org.apache.commons.math.linear.RealMatrix computeCorrelationMatrix(double[][] data) {
        return computeCorrelationMatrix(new org.apache.commons.math.linear.BlockRealMatrix(data));
    }

    public double correlation(final double[] xArray, final double[] yArray) throws java.lang.IllegalArgumentException {
        org.apache.commons.math.stat.regression.SimpleRegression regression = new org.apache.commons.math.stat.regression.SimpleRegression();
        if ((xArray.length == yArray.length) && (xArray.length > 1)) {
            for (int i = 0; i < xArray.length; i++) {
                regression.addData(xArray[i], yArray[i]);
            }
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(11).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.stat.correlation.PearsonsCorrelation.this.correlationMatrix",org.apache.commons.math.stat.correlation.PearsonsCorrelation.this.correlationMatrix);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("org.apache.commons.math.stat.correlation.PearsonsCorrelation.this.nObs",org.apache.commons.math.stat.correlation.PearsonsCorrelation.this.nObs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("yArray",yArray);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("regression",regression);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectInput("xArray",xArray);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(11).collectionEnds();
            }
            if (runtimeAngelicValue)
                return regression.getR();

        } else {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length);
        }
    }

    public org.apache.commons.math.linear.RealMatrix covarianceToCorrelation(org.apache.commons.math.linear.RealMatrix covarianceMatrix) {
        int nVars = covarianceMatrix.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix outMatrix = new org.apache.commons.math.linear.BlockRealMatrix(nVars, nVars);
        for (int i = 0; i < nVars; i++) {
            double sigma = java.lang.Math.sqrt(covarianceMatrix.getEntry(i, i));
            outMatrix.setEntry(i, i, 1.0);
            for (int j = 0; j < i; j++) {
                double entry = covarianceMatrix.getEntry(i, j) / (sigma * java.lang.Math.sqrt(covarianceMatrix.getEntry(j, j)));
                outMatrix.setEntry(i, j, entry);
                outMatrix.setEntry(j, i, entry);
            }
        }
        return outMatrix;
    }

    private void checkSufficientData(final org.apache.commons.math.linear.RealMatrix matrix) {
        int nRows = matrix.getRowDimension();
        int nCols = matrix.getColumnDimension();
        if ((nRows < 2) || (nCols < 2)) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("insufficient data: only {0} rows and {1} columns.", nRows, nCols);
        }
    }
}
[19819] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659881313942
GPR[SSUN]-1659881313942
-585881636
GPR[SPVATF]-1659881314062
GPR[EPVATF]-1659881314085
GPR[SPS]-1659881314085
[20728] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:228.
GPR[EPS]-1659881314850
GPR[ESUN]-1659881314850
GPR[SSUN]-1659881314850
-585881636
GPR[SPVATF]-1659881314970
GPR[EPVATF]-1659881314995
GPR[SPS]-1659881314995
[21616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:227.
GPR[EPS]-1659881315738
GPR[ESUN]-1659881315738
GPR[SSUN]-1659881315738
-585881636
GPR[SPVATF]-1659881315854
GPR[EPVATF]-1659881315877
GPR[SPS]-1659881315877
[22041] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:275.
GPR[EPS]-1659881316163
GPR[SPVATF]-1659881316164
GPR[EPVATF]-1659881316187
GPR[SPS]-1659881316187
[22239] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:275.
GPR[EPS]-1659881316361
GPR[ESUN]-1659881316361
GPR[SSUN]-1659881316361
-585881636
GPR[ESUN]-1659881316479
GPR[SSUN]-1659881316479
-585881636
GPR[ESUN]-1659881316592
GPR[SSUN]-1659881316592
-585881636
GPR[SPVATF]-1659881316709
GPR[EPVATF]-1659881316731
GPR[SPS]-1659881316731
[23319] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.correlation.PearsonsCorrelation:226.
GPR[EPS]-1659881317441
GPR[ESUN]-1659881317441
GPR[SSUN]-1659881317441
-585881636
GPR[ESUN]-1659881317557
GPR[SSUN]-1659881317557
1254153140
GPR[ESUN]-1659881317668
GPR[SSUN]-1659881317668
1254153140
GPR[SPVATF]-1659881317776
GPR[EPVATF]-1659881317798
GPR[SPS]-1659881317798
[23831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:434.
GPR[EPS]-1659881317953
GPR[SPVATF]-1659881317954
GPR[EPVATF]-1659881317976
GPR[SPS]-1659881317976
[24002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:434.
GPR[EPS]-1659881318124
GPR[ESUN]-1659881318124
GPR[SSUN]-1659881318124
1254153140
GPR[ESUN]-1659881318231
GPR[SSUN]-1659881318231
1254153140
GPR[ESUN]-1659881318339
GPR[SSUN]-1659881318339
1254153140
GPR[ESUN]-1659881318458
GPR[SSUN]-1659881318458
1254153140
GPR[ESUN]-1659881318564
GPR[SSUN]-1659881318564
1254153140
GPR[ESUN]-1659881318671
GPR[SSUN]-1659881318671
1254153140
GPR[SPVATF]-1659881318781
GPR[EPVATF]-1659881318804
GPR[SPS]-1659881318804
[24830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:351.
GPR[EPS]-1659881318952
GPR[SPVATF]-1659881318953
GPR[EPVATF]-1659881318976
GPR[SPS]-1659881318976
[25005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:351.
GPR[EPS]-1659881319127
GPR[ESUN]-1659881319127
GPR[SSUN]-1659881319127
153582413
GPR[ESUN]-1659881319271
GPR[SSUN]-1659881319271
153582413
GPR[SPVATF]-1659881319409
GPR[EPVATF]-1659881319432
GPR[SPS]-1659881319432
[25580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:1197.
GPR[EPS]-1659881319702
GPR[ESUN]-1659881319702
GPR[SSUN]-1659881319703
153582413
GPR[SPVATF]-1659881319842
GPR[EPVATF]-1659881319866
GPR[SPS]-1659881319866
[25977] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:1196.
GPR[EPS]-1659881320099
GPR[ESUN]-1659881320099
GPR[SSUN]-1659881320099
153582413
GPR[ESUN]-1659881320248
GPR[SSUN]-1659881320248
153582413
GPR[ESUN]-1659881320378
GPR[SSUN]-1659881320378
153582413
GPR[SPVATF]-1659881320507
GPR[EPVATF]-1659881320530
GPR[SPS]-1659881320530
[26627] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:1193.
GPR[EPS]-1659881320749
GPR[ESUN]-1659881320749
GPR[SSUN]-1659881320749
153582413
GPR[ESUN]-1659881320881
GPR[SSUN]-1659881320881
153582413
GPR[ESUN]-1659881321013
GPR[SSUN]-1659881321013
153582413
GPR[ESUN]-1659881321141
GPR[SSUN]-1659881321141
153582413
GPR[ESUN]-1659881321272
GPR[SSUN]-1659881321272
153582413
GPR[ESUN]-1659881321401
GPR[SSUN]-1659881321401
153582413
GPR[SPVATF]-1659881321532
GPR[EPVATF]-1659881321555
GPR[SPS]-1659881321555
[27642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:1185.
GPR[EPS]-1659881321764
GPR[ESUN]-1659881321764
GPR[SSUN]-1659881321764
366567225
GPR[SPVATF]-1659881321870
GPR[EPVATF]-1659881321895
GPR[SPS]-1659881321895
[27909] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.TDistribution , java.io.Serializable {
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1.0E-9;

    private static final long serialVersionUID = -5852615386664158222L;

    private double degreesOfFreedom;

    private final double solverAbsoluteAccuracy;

    public TDistributionImpl(double degreesOfFreedom, double inverseCumAccuracy) {
        super();
        setDegreesOfFreedomInternal(degreesOfFreedom);
        solverAbsoluteAccuracy = inverseCumAccuracy;
    }

    public TDistributionImpl(double degreesOfFreedom) {
        this(degreesOfFreedom, org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
    }

    @java.lang.Deprecated
    public void setDegreesOfFreedom(double degreesOfFreedom) {
        setDegreesOfFreedomInternal(degreesOfFreedom);
    }

    private void setDegreesOfFreedomInternal(double newDegreesOfFreedom) {
        if (newDegreesOfFreedom <= 0.0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})", newDegreesOfFreedom);
        }
        this.degreesOfFreedom = newDegreesOfFreedom;
    }

    public double getDegreesOfFreedom() {
        return degreesOfFreedom;
    }

    @java.lang.Override
    public double density(double x) {
        final double n = degreesOfFreedom;
        final double nPlus1Over2 = (n + 1) / 2;
        return java.lang.Math.exp(((org.apache.commons.math.special.Gamma.logGamma(nPlus1Over2) - (0.5 * (java.lang.Math.log(java.lang.Math.PI) + java.lang.Math.log(n)))) - org.apache.commons.math.special.Gamma.logGamma(n / 2)) - (nPlus1Over2 * java.lang.Math.log(1 + ((x * x) / n))));
    }

    public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
        double ret;
        if (x == 0.0) {
            ret = 0.5;
        } else {
            double t = org.apache.commons.math.special.Beta.regularizedBeta(degreesOfFreedom / (degreesOfFreedom + (x * x)), 0.5 * degreesOfFreedom, 0.5);
            if (x < 0.0) {
                ret = 0.5 * t;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(25).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("org.apache.commons.math.distribution.TDistributionImpl.this.degreesOfFreedom",org.apache.commons.math.distribution.TDistributionImpl.this.degreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("org.apache.commons.math.distribution.TDistributionImpl.this.solverAbsoluteAccuracy",org.apache.commons.math.distribution.TDistributionImpl.this.solverAbsoluteAccuracy);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = 1.0 - (0.5 * t);

            }
        }
        return ret;
    }

    @java.lang.Override
    public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
        if (p == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (p == 1) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return super.inverseCumulativeProbability(p);
    }

    @java.lang.Override
    protected double getDomainLowerBound(double p) {
        return -java.lang.Double.MAX_VALUE;
    }

    @java.lang.Override
    protected double getDomainUpperBound(double p) {
        return java.lang.Double.MAX_VALUE;
    }

    @java.lang.Override
    protected double getInitialDomain(double p) {
        return 0.0;
    }

    @java.lang.Override
    protected double getSolverAbsoluteAccuracy() {
        return solverAbsoluteAccuracy;
    }
}
[27909] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659881322031
GPR[SSUN]-1659881322031
1254153140
GPR[ESUN]-1659881322136
GPR[SSUN]-1659881322136
1254153140
GPR[SPVATF]-1659881322242
GPR[EPVATF]-1659881322265
GPR[SPS]-1659881322265
[28290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:301.
GPR[EPS]-1659881322412
GPR[SPVATF]-1659881322412
GPR[EPVATF]-1659881322435
GPR[SPS]-1659881322435
[28457] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:301.
GPR[EPS]-1659881322579
GPR[ESUN]-1659881322579
GPR[SSUN]-1659881322579
1254153140
GPR[SPVATF]-1659881322683
GPR[EPVATF]-1659881322706
GPR[SPS]-1659881322706
[28727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:298.
GPR[EPS]-1659881322849
GPR[SPVATF]-1659881322849
GPR[EPVATF]-1659881322870
GPR[SPS]-1659881322870
[28892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:298.
GPR[EPS]-1659881323014
GPR[ESUN]-1659881323014
GPR[SSUN]-1659881323014
1254153140
GPR[ESUN]-1659881323120
GPR[SSUN]-1659881323120
1254153140
GPR[SPVATF]-1659881323225
GPR[EPVATF]-1659881323248
GPR[SPS]-1659881323248
[29274] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:139.
GPR[EPS]-1659881323396
GPR[ESUN]-1659881323396
GPR[SSUN]-1659881323396
153582413
GPR[ESUN]-1659881323537
GPR[SSUN]-1659881323537
153582413
GPR[ESUN]-1659881323670
GPR[SSUN]-1659881323670
153582413
GPR[SPVATF]-1659881323803
GPR[EPVATF]-1659881323825
GPR[SPS]-1659881323825
GPR[EPS]-1659881971466
GPR[SPVATR]-1659881971466
[677344] INFO TestPatch - Applying patch: org.apache.commons.math.linear.BlockRealMatrix:1259: PRECONDITION (org.apache.commons.math.linear.BlockRealMatrix.this.columns) != (2)
[677587] INFO TestPatch - Running test suite to check the patch "(org.apache.commons.math.linear.BlockRealMatrix.this.columns) != (2)" is working
GPR[EPVATR]-1659881971990
[677868] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659881971990
[677877] INFO NoPol - --- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
@@ -1258,3 +1258,5 @@
                                (column - jBlock * BLOCK_SIZE);
-            blocks[iBlock * blockColumns + jBlock][k] = value;
+            if ((org.apache.commons.math.linear.BlockRealMatrix.this.columns) != (2)) {
+                blocks[iBlock * blockColumns + jBlock][k] = value;
+            }
         } catch (ArrayIndexOutOfBoundsException e) {

Saving patch at /experiment_home///results/Nopol/Math/69/seed_261/patch_675065_4ts_1659881971999.diff
GPR[ESUN]-1659881972000
GPR[SSUN]-1659881972000
153582413
GPR[ESUN]-1659881972133
GPR[SSUN]-1659881972133
153582413
GPR[ESUN]-1659881972263
GPR[SSUN]-1659881972263
153582413
GPR[ESUN]-1659881972392
GPR[SSUN]-1659881972392
1254153140
GPR[SPVATF]-1659881972500
GPR[EPVATF]-1659881972523
GPR[SPS]-1659881972523
[678546] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:132.
GPR[EPS]-1659881972668
GPR[ESUN]-1659881972668
GPR[SSUN]-1659881972668
1254153140
GPR[SPVATF]-1659881972773
GPR[EPVATF]-1659881972794
GPR[SPS]-1659881972794
[678819] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:131.
GPR[EPS]-1659881972941
GPR[ESUN]-1659881972941
GPR[SSUN]-1659881972941
1254153140
GPR[SPVATF]-1659881973048
GPR[EPVATF]-1659881973071
GPR[SPS]-1659881973071
[2478930] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659883773054
GPR[SSUN]-1659883773054
1254153140
GPR[SPVATF]-1659883773211
GPR[EPVATF]-1659883773234
GPR[SPS]-1659883773234
[2479255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:129.
GPR[EPS]-1659883773377
GPR[ESUN]-1659883773377
GPR[SSUN]-1659883773377
1254153140
GPR[SPVATF]-1659883773484
GPR[EPVATF]-1659883773506
GPR[SPS]-1659883773506
[2479535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:128.
GPR[EPS]-1659883773657
GPR[ESUN]-1659883773657
GPR[SSUN]-1659883773657
1254153140
GPR[ESUN]-1659883773772
GPR[SSUN]-1659883773772
1254153140
GPR[ESUN]-1659883773878
GPR[SSUN]-1659883773878
1254153140
GPR[ESUN]-1659883773983
GPR[SSUN]-1659883773983
1254153140
GPR[SPVATF]-1659883774086
GPR[EPVATF]-1659883774108
GPR[SPS]-1659883774108
[2480132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:138.
GPR[EPS]-1659883774254
GPR[SPVATF]-1659883774254
GPR[EPVATF]-1659883774277
GPR[SPS]-1659883774277
[2480302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:138.
GPR[EPS]-1659883774425
GPR[ESUN]-1659883774425
GPR[SSUN]-1659883774425
1254153140
GPR[SPVATF]-1659883774529
GPR[EPVATF]-1659883774552
GPR[SPS]-1659883774552
[2480575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:136.
GPR[EPS]-1659883774697
GPR[ESUN]-1659883774697
GPR[SSUN]-1659883774697
1254153140
GPR[SPVATF]-1659883774804
GPR[EPVATF]-1659883774826
GPR[SPS]-1659883774826
[2480848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:135.
GPR[EPS]-1659883774970
GPR[ESUN]-1659883774970
GPR[SSUN]-1659883774970
1254153140
GPR[SPVATF]-1659883775086
GPR[EPVATF]-1659883775110
GPR[SPS]-1659883775110
[2481139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:134.
GPR[EPS]-1659883775261
GPR[ESUN]-1659883775261
GPR[SSUN]-1659883775261
1254153140
GPR[SPVATF]-1659883775375
GPR[EPVATF]-1659883775405
GPR[SPS]-1659883775405
[2481430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:124.
GPR[EPS]-1659883775552
GPR[ESUN]-1659883775552
GPR[SSUN]-1659883775552
1254153140
GPR[SPVATF]-1659883775662
GPR[EPVATF]-1659883775684
GPR[SPS]-1659883775684
[2481710] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:123.
GPR[EPS]-1659883775832
GPR[ESUN]-1659883775832
GPR[SSUN]-1659883775833
1254153140
GPR[SPVATF]-1659883775942
GPR[EPVATF]-1659883775989
GPR[SPS]-1659883775989
[2482011] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:122.
GPR[EPS]-1659883776133
GPR[SPVATF]-1659883776133
GPR[EPVATF]-1659883776155
GPR[SPS]-1659883776155
[2482179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:122.
GPR[EPS]-1659883776301
GPR[ESUN]-1659883776301
GPR[SSUN]-1659883776301
1254153140
GPR[ESUN]-1659883776408
GPR[SSUN]-1659883776408
1254153140
GPR[SPVATF]-1659883776515
GPR[EPVATF]-1659883776538
GPR[SPS]-1659883776538
[2482561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:617.
GPR[EPS]-1659883776683
GPR[SPVATF]-1659883776684
GPR[EPVATF]-1659883776732
GPR[SPS]-1659883776732
[2482757] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:617.
GPR[EPS]-1659883776879
GPR[ESUN]-1659883776879
GPR[SSUN]-1659883776879
1254153140
GPR[SPVATF]-1659883776986
GPR[EPVATF]-1659883777008
GPR[SPS]-1659883777008
[2483025] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.stat.regression.SimpleRegression:614.
GPR[EPS]-1659883777147
GPR[ESUN]-1659883777147
GPR[SSUN]-1659883777148
366567225
GPR[ESUN]-1659883777251
GPR[SSUN]-1659883777251
366567225
GPR[SPVATF]-1659883777352
GPR[EPVATF]-1659883777373
GPR[SPS]-1659883777373
[2483382] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.TDistribution , java.io.Serializable {
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1.0E-9;

    private static final long serialVersionUID = -5852615386664158222L;

    private double degreesOfFreedom;

    private final double solverAbsoluteAccuracy;

    public TDistributionImpl(double degreesOfFreedom, double inverseCumAccuracy) {
        super();
        setDegreesOfFreedomInternal(degreesOfFreedom);
        solverAbsoluteAccuracy = inverseCumAccuracy;
    }

    public TDistributionImpl(double degreesOfFreedom) {
        this(degreesOfFreedom, org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
    }

    @java.lang.Deprecated
    public void setDegreesOfFreedom(double degreesOfFreedom) {
        setDegreesOfFreedomInternal(degreesOfFreedom);
    }

    private void setDegreesOfFreedomInternal(double newDegreesOfFreedom) {
        if (newDegreesOfFreedom <= 0.0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})", newDegreesOfFreedom);
        }
        this.degreesOfFreedom = newDegreesOfFreedom;
    }

    public double getDegreesOfFreedom() {
        return degreesOfFreedom;
    }

    @java.lang.Override
    public double density(double x) {
        final double n = degreesOfFreedom;
        final double nPlus1Over2 = (n + 1) / 2;
        return java.lang.Math.exp(((org.apache.commons.math.special.Gamma.logGamma(nPlus1Over2) - (0.5 * (java.lang.Math.log(java.lang.Math.PI) + java.lang.Math.log(n)))) - org.apache.commons.math.special.Gamma.logGamma(n / 2)) - (nPlus1Over2 * java.lang.Math.log(1 + ((x * x) / n))));
    }

    public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
        double ret;
        if (x == 0.0) {
            ret = 0.5;
        } else {
            double t = org.apache.commons.math.special.Beta.regularizedBeta(degreesOfFreedom / (degreesOfFreedom + (x * x)), 0.5 * degreesOfFreedom, 0.5);
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(49).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("org.apache.commons.math.distribution.TDistributionImpl.this.degreesOfFreedom",org.apache.commons.math.distribution.TDistributionImpl.this.degreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("x < 0.0",x < 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectInput("org.apache.commons.math.distribution.TDistributionImpl.this.solverAbsoluteAccuracy",org.apache.commons.math.distribution.TDistributionImpl.this.solverAbsoluteAccuracy);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(49).collectionEnds();
            }
            if (runtimeAngelicValue) if (x < 0.0) {
                ret = 0.5 * t;
            } else {
                ret = 1.0 - (0.5 * t);
            }
        }
        return ret;
    }

    @java.lang.Override
    public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
        if (p == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (p == 1) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return super.inverseCumulativeProbability(p);
    }

    @java.lang.Override
    protected double getDomainLowerBound(double p) {
        return -java.lang.Double.MAX_VALUE;
    }

    @java.lang.Override
    protected double getDomainUpperBound(double p) {
        return java.lang.Double.MAX_VALUE;
    }

    @java.lang.Override
    protected double getInitialDomain(double p) {
        return 0.0;
    }

    @java.lang.Override
    protected double getSolverAbsoluteAccuracy() {
        return solverAbsoluteAccuracy;
    }
}
[2483382] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659883777504
GPR[EPVATF]-1659883777526
GPR[SPS]-1659883777526
[2683568] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659883977690
GPR[SSUN]-1659883977690
366567225
GPR[ESUN]-1659883977858
GPR[SSUN]-1659883977858
366567225
GPR[SPVATF]-1659883977966
GPR[EPVATF]-1659883977988
GPR[SPS]-1659883977988
[2684004] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.TDistribution , java.io.Serializable {
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1.0E-9;

    private static final long serialVersionUID = -5852615386664158222L;

    private double degreesOfFreedom;

    private final double solverAbsoluteAccuracy;

    public TDistributionImpl(double degreesOfFreedom, double inverseCumAccuracy) {
        super();
        setDegreesOfFreedomInternal(degreesOfFreedom);
        solverAbsoluteAccuracy = inverseCumAccuracy;
    }

    public TDistributionImpl(double degreesOfFreedom) {
        this(degreesOfFreedom, org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
    }

    @java.lang.Deprecated
    public void setDegreesOfFreedom(double degreesOfFreedom) {
        setDegreesOfFreedomInternal(degreesOfFreedom);
    }

    private void setDegreesOfFreedomInternal(double newDegreesOfFreedom) {
        if (newDegreesOfFreedom <= 0.0) {
            throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})", newDegreesOfFreedom);
        }
        this.degreesOfFreedom = newDegreesOfFreedom;
    }

    public double getDegreesOfFreedom() {
        return degreesOfFreedom;
    }

    @java.lang.Override
    public double density(double x) {
        final double n = degreesOfFreedom;
        final double nPlus1Over2 = (n + 1) / 2;
        return java.lang.Math.exp(((org.apache.commons.math.special.Gamma.logGamma(nPlus1Over2) - (0.5 * (java.lang.Math.log(java.lang.Math.PI) + java.lang.Math.log(n)))) - org.apache.commons.math.special.Gamma.logGamma(n / 2)) - (nPlus1Over2 * java.lang.Math.log(1 + ((x * x) / n))));
    }

    public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(51).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.math.distribution.TDistributionImpl.this.degreesOfFreedom",org.apache.commons.math.distribution.TDistributionImpl.this.degreesOfFreedom);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("x == 0.0",x == 0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY",org.apache.commons.math.distribution.TDistributionImpl.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectInput("org.apache.commons.math.distribution.TDistributionImpl.this.solverAbsoluteAccuracy",org.apache.commons.math.distribution.TDistributionImpl.this.solverAbsoluteAccuracy);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(51).collectionEnds();
        }
        if (runtimeAngelicValue) if (x == 0.0) {
            ret = 0.5;
        } else {
            double t = org.apache.commons.math.special.Beta.regularizedBeta(degreesOfFreedom / (degreesOfFreedom + (x * x)), 0.5 * degreesOfFreedom, 0.5);
            if (x < 0.0) {
                ret = 0.5 * t;
            } else {
                ret = 1.0 - (0.5 * t);
            }
        }
        return ret;
    }

    @java.lang.Override
    public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
        if (p == 0) {
            return java.lang.Double.NEGATIVE_INFINITY;
        }
        if (p == 1) {
            return java.lang.Double.POSITIVE_INFINITY;
        }
        return super.inverseCumulativeProbability(p);
    }

    @java.lang.Override
    protected double getDomainLowerBound(double p) {
        return -java.lang.Double.MAX_VALUE;
    }

    @java.lang.Override
    protected double getDomainUpperBound(double p) {
        return java.lang.Double.MAX_VALUE;
    }

    @java.lang.Override
    protected double getInitialDomain(double p) {
        return 0.0;
    }

    @java.lang.Override
    protected double getSolverAbsoluteAccuracy() {
        return solverAbsoluteAccuracy;
    }
}
[2684004] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659883978127
GPR[EPVATF]-1659883978150
GPR[SPS]-1659883978150
GPR[EPS]-1659884399371
GPR[ESUN]-1659884399371
GPR[SSUN]-1659884399371
153582413
GPR[ESUN]-1659884399502
GPR[SSUN]-1659884399502
153582413
GPR[ESUN]-1659884399628
GPR[SSUN]-1659884399628
153582413
GPR[ESUN]-1659884399755
GPR[SSUN]-1659884399755
153582413
GPR[ESUN]-1659884399886
GPR[SSUN]-1659884399886
366567225
GPR[ESUN]-1659884399988
GPR[SSUN]-1659884399988
366567225
GPR[SPVATF]-1659884400092
GPR[EPVATF]-1659884400114
GPR[SPS]-1659884400114
[3106141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.TDistributionImpl:81.
GPR[EPS]-1659884400263
GPR[ESUN]-1659884400263
GPR[SSUN]-1659884400263
2066961
GPR[SPVATF]-1659884400366
GPR[EPVATF]-1659884400387
GPR[SPS]-1659884400387
[3106394] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    if ((n % 2) == 0) {
                        m = n / 2.0;
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(54).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));

                    } else {
                        m = (n - 1.0) / 2.0;
                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3106394] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659884400516
GPR[SSUN]-1659884400516
2066961
GPR[SPVATF]-1659884400615
GPR[EPVATF]-1659884400636
GPR[SPS]-1659884400636
[3106645] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    if ((n % 2) == 0) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(55).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            m = n / 2.0;

                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                    } else {
                        m = (n - 1.0) / 2.0;
                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3106645] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659884400767
GPR[SSUN]-1659884400767
366567225
GPR[ESUN]-1659884400875
GPR[SSUN]-1659884400875
366567225
GPR[SPVATF]-1659884400980
GPR[EPVATF]-1659884401003
GPR[SPS]-1659884401003
[3107023] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.TDistributionImpl:93.
GPR[EPS]-1659884401145
GPR[ESUN]-1659884401145
GPR[SSUN]-1659884401145
366567225
GPR[SPVATF]-1659884401250
GPR[EPVATF]-1659884401272
GPR[SPS]-1659884401272
[3107295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.TDistributionImpl:88.
GPR[EPS]-1659884401417
GPR[SPVATF]-1659884401418
GPR[EPVATF]-1659884401440
GPR[SPS]-1659884401440
[3107461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.distribution.TDistributionImpl:88.
GPR[EPS]-1659884401583
GPR[ESUN]-1659884401583
GPR[SSUN]-1659884401583
2066961
GPR[SPVATF]-1659884401688
GPR[EPVATF]-1659884401710
GPR[SPS]-1659884401710
[3107719] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    if ((n % 2) == 0) {
                        m = n / 2.0;
                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                    } else {
                        m = (n - 1.0) / 2.0;
                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(59).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("fraction",fraction);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectionEnds();
            }
            if (runtimeAngelicValue)
                ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);

        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3107719] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659884401842
GPR[SSUN]-1659884401842
2066961
GPR[ESUN]-1659884401945
GPR[SSUN]-1659884401945
2066961
GPR[SPVATF]-1659884402044
GPR[EPVATF]-1659884402067
GPR[SPS]-1659884402067
[3108077] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(60).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("((a + 1.0) / ((a + b) + 2.0))",((a + 1.0) / ((a + b) + 2.0)));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("((a + b) + 2.0)",((a + b) + 2.0));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("1.0",1.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("x > ((a + 1.0) / ((a + b) + 2.0))",x > ((a + 1.0) / ((a + b) + 2.0)));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("2.0",2.0);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("(a + b)",(a + b));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("(a + 1.0)",(a + 1.0));} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectionEnds();
            }
            if (runtimeAngelicValue) if (x > ((a + 1.0) / ((a + b) + 2.0))) {
                ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
            } else {
                org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                    @java.lang.Override
                    protected double getB(int n, double x) {
                        double ret;
                        double m;
                        if ((n % 2) == 0) {
                            m = n / 2.0;
                            ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                        } else {
                            m = (n - 1.0) / 2.0;
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                        }
                        return ret;
                    }

                    @java.lang.Override
                    protected double getA(int n, double x) {
                        return 1.0;
                    }
                };
                ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
            }
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3108077] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659884402200
GPR[EPVATF]-1659884402222
GPR[SPS]-1659884402223
[3108258] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Beta:125.
GPR[EPS]-1659884402380
GPR[ESUN]-1659884402380
GPR[SSUN]-1659884402380
2066961
GPR[ESUN]-1659884402480
GPR[SSUN]-1659884402480
2066961
GPR[ESUN]-1659884402578
GPR[SSUN]-1659884402578
2066961
GPR[SPVATF]-1659884402678
GPR[EPVATF]-1659884402700
GPR[SPS]-1659884402700
[3108725] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    if ((n % 2) == 0) {
                        m = n / 2.0;
                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                    } else {
                        m = (n - 1.0) / 2.0;
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(62).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));

                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3108725] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659884402847
GPR[SSUN]-1659884402847
2066961
GPR[SPVATF]-1659884402946
GPR[EPVATF]-1659884402969
GPR[SPS]-1659884402969
[3108972] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    if ((n % 2) == 0) {
                        m = n / 2.0;
                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                    } else {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(63).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            m = (n - 1.0) / 2.0;

                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3108972] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659884403094
GPR[SSUN]-1659884403094
2066961
GPR[SPVATF]-1659884403197
GPR[EPVATF]-1659884403219
GPR[SPS]-1659884403219
[3109223] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(64).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("(n % 2) == 0",(n % 2) == 0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("2",2);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("(n % 2)",(n % 2));} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectionEnds();
                    }
                    if (runtimeAngelicValue) if ((n % 2) == 0) {
                        m = n / 2.0;
                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                    } else {
                        m = (n - 1.0) / 2.0;
                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3109224] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659884403346
GPR[EPVATF]-1659884403368
GPR[SPS]-1659884403368
[3109385] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Beta$1:134.
GPR[EPS]-1659884403507
GPR[ESUN]-1659884403507
GPR[SSUN]-1659884403507
2066961
GPR[SPVATF]-1659884403609
GPR[EPVATF]-1659884403632
GPR[SPS]-1659884403632
[3109639] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    if ((n % 2) == 0) {
                        m = n / 2.0;
                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                    } else {
                        m = (n - 1.0) / 2.0;
                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(66).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionEnds();
            }
            if (runtimeAngelicValue)
                ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);

        }
        return ret;
    }
}
[3109639] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659884403761
GPR[SSUN]-1659884403761
2066961
GPR[ESUN]-1659884403860
GPR[SSUN]-1659884403860
2066961
GPR[SPVATF]-1659884403960
GPR[EPVATF]-1659884403982
GPR[SPS]-1659884403982
[3109983] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    if ((n % 2) == 0) {
                        m = n / 2.0;
                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                    } else {
                        m = (n - 1.0) / 2.0;
                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(67).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("(b <= 0.0)",(b <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("(a <= 0.0)",(a <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionEnds();
        }
        if (runtimeAngelicValue) if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3109984] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659884404106
GPR[EPVATF]-1659884404128
GPR[SPS]-1659884404128
[3110138] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Beta:192.
GPR[EPS]-1659884404261
GPR[ESUN]-1659884404261
GPR[SSUN]-1659884404261
2066961
GPR[ESUN]-1659884404359
GPR[SSUN]-1659884404359
2066961
GPR[SPVATF]-1659884404461
GPR[EPVATF]-1659884404482
GPR[SPS]-1659884404482
[3110489] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Beta {
    private static final double DEFAULT_EPSILON = 1.0E-14;

    private Beta() {
        super();
    }

    public static double regularizedBeta(double x, double a, double b) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, double epsilon) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, epsilon, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedBeta(double x, double a, double b, int maxIterations) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Beta.regularizedBeta(x, a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, maxIterations);
    }

    public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(69).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("a",a);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("b",b);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("maxIterations",maxIterations);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("(b <= 0.0)",(b <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("epsilon",epsilon);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("(x < 0)",(x < 0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("0",0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("1",1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("(x > 1)",(x > 1));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("org.apache.commons.math.special.Beta.DEFAULT_EPSILON",org.apache.commons.math.special.Beta.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("(a <= 0.0)",(a <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectionEnds();
        }
        if (runtimeAngelicValue) if ((((((java.lang.Double.isNaN(x) || java.lang.Double.isNaN(a)) || java.lang.Double.isNaN(b)) || (x < 0)) || (x > 1)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x > ((a + 1.0) / ((a + b) + 2.0))) {
            ret = 1.0 - org.apache.commons.math.special.Beta.regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction fraction = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    if ((n % 2) == 0) {
                        m = n / 2.0;
                        ret = ((m * (b - m)) * x) / (((a + (2 * m)) - 1) * (a + (2 * m)));
                    } else {
                        m = (n - 1.0) / 2.0;
                        ret = (-(((a + m) * ((a + b) + m)) * x)) / ((a + (2 * m)) * ((a + (2 * m)) + 1.0));
                    }
                    return ret;
                }

                @java.lang.Override
                protected double getA(int n, double x) {
                    return 1.0;
                }
            };
            ret = (java.lang.Math.exp((((a * java.lang.Math.log(x)) + (b * java.lang.Math.log(1.0 - x))) - java.lang.Math.log(a)) - org.apache.commons.math.special.Beta.logBeta(a, b, epsilon, maxIterations)) * 1.0) / fraction.evaluate(x, epsilon, maxIterations);
        }
        return ret;
    }

    public static double logBeta(double a, double b) {
        return org.apache.commons.math.special.Beta.logBeta(a, b, org.apache.commons.math.special.Beta.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double logBeta(double a, double b, double epsilon, int maxIterations) {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(b)) || (a <= 0.0)) || (b <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            ret = (org.apache.commons.math.special.Gamma.logGamma(a) + org.apache.commons.math.special.Gamma.logGamma(b)) - org.apache.commons.math.special.Gamma.logGamma(a + b);
        }
        return ret;
    }
}
[3110489] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659884404611
GPR[EPVATF]-1659884404633
GPR[SPS]-1659884404633
[3110643] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Beta:121.
GPR[EPS]-1659884404766
GPR[ESUN]-1659884404766
GPR[SSUN]-1659884404766
2066961
GPR[ESUN]-1659884404865
GPR[SSUN]-1659884404865
153582413
GPR[ESUN]-1659884404987
GPR[SSUN]-1659884404987
153582413
GPR[SPVATF]-1659884405112
GPR[EPVATF]-1659884405135
GPR[SPS]-1659884405135
[3111221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:281.
GPR[EPS]-1659884405343
GPR[ESUN]-1659884405343
GPR[SSUN]-1659884405343
153582413
GPR[SPVATF]-1659884405473
GPR[EPVATF]-1659884405495
GPR[SPS]-1659884405495
[3111566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:280.
GPR[EPS]-1659884405688
GPR[ESUN]-1659884405689
GPR[SSUN]-1659884405689
153582413
GPR[ESUN]-1659884405813
GPR[SSUN]-1659884405813
153582413
GPR[ESUN]-1659884405938
GPR[SSUN]-1659884405938
153582413
GPR[ESUN]-1659884406063
GPR[SSUN]-1659884406063
153582413
GPR[SPVATF]-1659884406188
GPR[EPVATF]-1659884406210
GPR[SPS]-1659884406210
[3112282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:276.
GPR[EPS]-1659884406404
GPR[ESUN]-1659884406405
GPR[SSUN]-1659884406405
153582413
GPR[ESUN]-1659884406531
GPR[SSUN]-1659884406531
153582413
GPR[ESUN]-1659884406660
GPR[SSUN]-1659884406660
153582413
GPR[ESUN]-1659884406786
GPR[SSUN]-1659884406786
153582413
GPR[SPVATF]-1659884406911
GPR[EPVATF]-1659884406933
GPR[SPS]-1659884406933
[3113005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:272.
GPR[EPS]-1659884407127
GPR[ESUN]-1659884407127
GPR[SSUN]-1659884407127
153582413
GPR[ESUN]-1659884407251
GPR[SSUN]-1659884407251
153582413
GPR[ESUN]-1659884407373
GPR[SSUN]-1659884407374
153582413
GPR[ESUN]-1659884407499
GPR[SSUN]-1659884407499
153582413
GPR[ESUN]-1659884407627
GPR[SSUN]-1659884407627
153582413
GPR[ESUN]-1659884407755
GPR[SSUN]-1659884407755
153582413
GPR[SPVATF]-1659884407880
GPR[EPVATF]-1659884407902
GPR[SPS]-1659884407902
[3114319] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:244.
GPR[EPS]-1659884408441
GPR[ESUN]-1659884408441
GPR[SSUN]-1659884408441
153582413
GPR[SPVATF]-1659884408569
GPR[EPVATF]-1659884408591
GPR[SPS]-1659884408591
[3114962] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:241.
GPR[EPS]-1659884409084
GPR[ESUN]-1659884409084
GPR[SSUN]-1659884409084
153582413
GPR[SPVATF]-1659884409207
GPR[EPVATF]-1659884409230
GPR[SPS]-1659884409230
[3115578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:240.
GPR[EPS]-1659884409700
GPR[ESUN]-1659884409700
GPR[SSUN]-1659884409700
153582413
GPR[SPVATF]-1659884409827
GPR[EPVATF]-1659884409849
GPR[SPS]-1659884409849
[3116194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:239.
GPR[EPS]-1659884410316
GPR[ESUN]-1659884410316
GPR[SSUN]-1659884410316
153582413
GPR[ESUN]-1659884410441
GPR[SSUN]-1659884410441
153582413
GPR[SPVATF]-1659884410565
GPR[EPVATF]-1659884410587
GPR[SPS]-1659884410587
[3116937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:235.
GPR[EPS]-1659884411059
GPR[ESUN]-1659884411059
GPR[SSUN]-1659884411059
153582413
GPR[ESUN]-1659884411183
GPR[SSUN]-1659884411183
153582413
GPR[ESUN]-1659884411304
GPR[SSUN]-1659884411304
153582413
GPR[ESUN]-1659884411426
GPR[SSUN]-1659884411426
153582413
GPR[ESUN]-1659884411546
GPR[SSUN]-1659884411546
153582413
GPR[SPVATF]-1659884411667
GPR[EPVATF]-1659884411690
GPR[SPS]-1659884411690
[3118036] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:228.
GPR[EPS]-1659884412158
GPR[ESUN]-1659884412158
GPR[SSUN]-1659884412158
153582413
GPR[ESUN]-1659884412287
GPR[SSUN]-1659884412287
153582413
GPR[ESUN]-1659884412411
GPR[SSUN]-1659884412411
153582413
GPR[ESUN]-1659884412533
GPR[SSUN]-1659884412533
153582413
GPR[SPVATF]-1659884412654
GPR[EPVATF]-1659884412676
GPR[SPS]-1659884412676
[3119042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:224.
GPR[EPS]-1659884413164
GPR[ESUN]-1659884413164
GPR[SSUN]-1659884413164
153582413
GPR[ESUN]-1659884413286
GPR[SSUN]-1659884413286
153582413
GPR[ESUN]-1659884413406
GPR[SSUN]-1659884413406
153582413
GPR[SPVATF]-1659884413526
GPR[EPVATF]-1659884413548
GPR[SPS]-1659884413548
[3119884] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:214.
GPR[EPS]-1659884414006
GPR[SPVATF]-1659884414007
GPR[EPVATF]-1659884414028
GPR[SPS]-1659884414028
[3120379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:214.
GPR[EPS]-1659884414501
GPR[ESUN]-1659884414501
GPR[SSUN]-1659884414501
153582413
GPR[ESUN]-1659884414624
GPR[SSUN]-1659884414624
153582413
GPR[SPVATF]-1659884414748
GPR[EPVATF]-1659884414770
GPR[SPS]-1659884414770
[3121112] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.BlockRealMatrix:212.
GPR[EPS]-1659884415234
GPR[ESUN]-1659884415234
GPR[SSUN]-1659884415234
153582413
GPR[ESUN]-1659884415359
GPR[SSUN]-1659884415359
153582413
GPR[ESUN]-1659884415482
GPR[SSUN]-1659884415482
153582413
GPR[ESUN]-1659884415603
GPR[SSUN]-1659884415603
153582413
GPR[ESUN]-1659884415725
GPR[SSUN]-1659884415725
-82779744
GPR[ESUN]-1659884415823
GPR[SSUN]-1659884415823
-82779744
GPR[SPVATF]-1659884415920
GPR[EPVATF]-1659884415942
GPR[SPS]-1659884415942
[3121945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:199.
GPR[EPS]-1659884416067
GPR[SPVATF]-1659884416067
GPR[EPVATF]-1659884416088
GPR[SPS]-1659884416088
[3122091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:199.
GPR[EPS]-1659884416213
GPR[ESUN]-1659884416213
GPR[SSUN]-1659884416213
-82779744
GPR[ESUN]-1659884416314
GPR[SSUN]-1659884416314
-82779744
GPR[SPVATF]-1659884416415
GPR[EPVATF]-1659884416436
GPR[SPS]-1659884416436
[3122439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:196.
GPR[EPS]-1659884416561
GPR[ESUN]-1659884416561
GPR[SSUN]-1659884416561
-82779744
GPR[SPVATF]-1659884416660
GPR[EPVATF]-1659884416681
GPR[SPS]-1659884416681
[3430320] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659884724442
GPR[SSUN]-1659884724442
-82779744
GPR[SPVATF]-1659884780309
GPR[EPVATF]-1659884827791
GPR[SPS]-1659884827791
[3555520] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659884849642
GPR[SSUN]-1659884849642
-82779744
GPR[SPVATF]-1659884883602
GPR[EPVATF]-1659884899022
GPR[SPS]-1659884899022
[3638414] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659884932536
GPR[SSUN]-1659884932536
-82779744
GPR[SPVATF]-1659884954557
GPR[EPVATF]-1659884969930
GPR[SPS]-1659884969930
[3710627] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659885004749
GPR[SSUN]-1659885004749
-82779744
GPR[SPVATF]-1659885018121
GPR[EPVATF]-1659885035761
GPR[SPS]-1659885035761
[3774144] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659885068266
GPR[SSUN]-1659885068266
-82779744
GPR[SPVATF]-1659885091658
GPR[EPVATF]-1659885111999
GPR[SPS]-1659885111999
[3850381] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[SPVATF]-1659885144504
GPR[EPVATF]-1659885144527
GPR[SPS]-1659885144527
[3915510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:184.
GPR[EPS]-1659885209632
GPR[ESUN]-1659885209633
GPR[SSUN]-1659885209633
-82779744
GPR[ESUN]-1659885215536
GPR[SSUN]-1659885215536
-82779744
GPR[SPVATF]-1659885220676
GPR[EPVATF]-1659885220697
GPR[SPS]-1659885220697
[3959184] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:175.
GPR[EPS]-1659885253306
GPR[SPVATF]-1659885253306
GPR[EPVATF]-1659885271346
GPR[SPS]-1659885271346
[4017948] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:175.
GPR[EPS]-1659885312070
GPR[ESUN]-1659885312070
GPR[SSUN]-1659885312070
-82779744
GPR[SPVATF]-1659885319646
GPR[EPVATF]-1659885319668
GPR[SPS]-1659885319668
[4042896] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:142.
GPR[EPS]-1659885337018
GPR[SPVATF]-1659885345638
GPR[EPVATF]-1659885345660
GPR[SPS]-1659885345660
[4075597] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:142.
GPR[EPS]-1659885369720
GPR[ESUN]-1659885369720
GPR[SSUN]-1659885369720
-82779744
GPR[ESUN]-1659885376355
GPR[SSUN]-1659885376356
-82779744
GPR[ESUN]-1659885376453
GPR[SSUN]-1659885376453
-82779744
GPR[ESUN]-1659885398310
GPR[SSUN]-1659885398310
-82779744
GPR[ESUN]-1659885414512
GPR[SSUN]-1659885414512
-82779744
GPR[ESUN]-1659885423288
GPR[SSUN]-1659885423288
-82779744
GPR[SPVATF]-1659885428389
GPR[EPVATF]-1659885428412
GPR[SPS]-1659885428412
[4165413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:136.
GPR[EPS]-1659885459535
GPR[ESUN]-1659885459535
GPR[SSUN]-1659885459535
-82779744
GPR[SPVATF]-1659885465286
GPR[EPVATF]-1659885482404
GPR[SPS]-1659885482404
[4205613] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.util.ContinuedFraction:135.
GPR[EPS]-1659885499735
GPR[ESUN]-1659885511053
GPR[SSUN]-1659885511053
-82779744
GPR[ESUN]-1659885511157
GPR[SSUN]-1659885511157
-82779744
GPR[ESUN]-1659885527277
GPR[SSUN]-1659885527277
-82779744
GPR[ESUN]-1659885532353
GPR[SSUN]-1659885532353
-82779744
GPR[ESUN]-1659885547758
GPR[SSUN]-1659885547758
-82779744
GPR[ESUN]-1659885563362
GPR[SSUN]-1659885563362
-82779744
GPR[ESUN]-1659885569437
GPR[SSUN]-1659885569437
-82779744
GPR[ESUN]-1659885578170
GPR[SSUN]-1659885578170
153582413
GPR[ESUN]-1659885600019
GPR[SSUN]-1659885600019
153582413
GPR[ESUN]-1659885631103
GPR[SSUN]-1659885631103
153582413
GPR[ESUN]-1659885647096
GPR[SSUN]-1659885647096
68567944
GPR[SPVATF]-1659885652750
GPR[EPVATF]-1659885668730
GPR[SPS]-1659885668730
[4390161] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * java.lang.Math.log(2.0 * java.lang.Math.PI);

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        if (java.lang.Double.isNaN(x) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = org.apache.commons.math.special.Gamma.LANCZOS.length - 1; i > 0; --i) {
                sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[i] / (x + i));
            }
            sum = sum + org.apache.commons.math.special.Gamma.LANCZOS[0];
            double tmp = (x + g) + 0.5;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(101).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("tmp",tmp);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("g",g);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("sum",sum);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectionEnds();
            }
            if (runtimeAngelicValue)
                ret = ((((x + 0.5) * java.lang.Math.log(tmp)) - tmp) + org.apache.commons.math.special.Gamma.HALF_LOG_2_PI) + java.lang.Math.log(sum / x);

        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x == 0.0) {
            ret = 0.0;
        } else if (x >= (a + 1)) {
            ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations);
        } else {
            double n = 0.0;
            double an = 1.0 / a;
            double sum = an;
            while (((java.lang.Math.abs(an / sum) > epsilon) && (n < maxIterations)) && (sum < java.lang.Double.POSITIVE_INFINITY)) {
                n = n + 1.0;
                an = an * (x / (a + n));
                sum = sum + an;
            } 
            if (n >= maxIterations) {
                throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
            } else if (java.lang.Double.isInfinite(sum)) {
                ret = 1.0;
            } else {
                ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * sum;
            }
        }
        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x == 0.0) {
            ret = 1.0;
        } else if (x < (a + 1.0)) {
            ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getA(int n, double x) {
                    return (((2.0 * n) + 1.0) - a) + x;
                }

                @java.lang.Override
                protected double getB(int n, double x) {
                    return n * (a - n);
                }
            };
            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);
            ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;
        }
        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) {
            return (-org.apache.commons.math.special.Gamma.GAMMA) - (1 / x);
        }
        if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) {
            double inv = 1 / (x * x);
            return (java.lang.Math.log(x) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return org.apache.commons.math.special.Gamma.digamma(x + 1) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) {
            return 1 / (x * x);
        }
        if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));
    }
}
[4390161] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659885684283
GPR[SSUN]-1659885684283
68567944
GPR[ESUN]-1659885707695
GPR[SSUN]-1659885707695
68567944
GPR[SPVATF]-1659885724164
GPR[EPVATF]-1659885724184
GPR[SPS]-1659885724184
[4451002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:106.
GPR[EPS]-1659885745124
GPR[ESUN]-1659885745124
GPR[SSUN]-1659885745124
68567944
GPR[SPVATF]-1659885762147
GPR[EPVATF]-1659885762168
GPR[SPS]-1659885762168
[4491918] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:104.
GPR[EPS]-1659885786040
GPR[ESUN]-1659885786040
GPR[SSUN]-1659885786040
68567944
GPR[SPVATF]-1659885801518
GPR[EPVATF]-1659885801539
GPR[SPS]-1659885801539
[4530641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:103.
GPR[EPS]-1659885824763
GPR[ESUN]-1659885824763
GPR[SSUN]-1659885824763
68567944
GPR[ESUN]-1659885833191
GPR[SSUN]-1659885833191
68567944
GPR[ESUN]-1659885850512
GPR[SSUN]-1659885850512
68567944
GPR[ESUN]-1659885850646
GPR[SSUN]-1659885850646
68567944
GPR[SPVATF]-1659885856577
GPR[EPVATF]-1659885873923
GPR[SPS]-1659885873923
[4595913] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Gamma {
    public static final double GAMMA = 0.5772156649015329;

    private static final double DEFAULT_EPSILON = 1.0E-14;

    private static final double[] LANCZOS = new double[]{ 0.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -0.4919138160976202, 3.399464998481189E-5, 4.652362892704858E-5, -9.837447530487956E-5, 1.580887032249125E-4, -2.1026444172410488E-4, 2.1743961811521265E-4, -1.643181065367639E-4, 8.441822398385275E-5, -2.6190838401581408E-5, 3.6899182659531625E-6 };

    private static final double HALF_LOG_2_PI = 0.5 * java.lang.Math.log(2.0 * java.lang.Math.PI);

    private static final double C_LIMIT = 49;

    private static final double S_LIMIT = 1.0E-5;

    private Gamma() {
        super();
    }

    public static double logGamma(double x) {
        double ret;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(105).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("org.apache.commons.math.special.Gamma.GAMMA",org.apache.commons.math.special.Gamma.GAMMA);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("0.0",0.0);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("org.apache.commons.math.special.Gamma.C_LIMIT",org.apache.commons.math.special.Gamma.C_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("org.apache.commons.math.special.Gamma.S_LIMIT",org.apache.commons.math.special.Gamma.S_LIMIT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("org.apache.commons.math.special.Gamma.LANCZOS",org.apache.commons.math.special.Gamma.LANCZOS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("org.apache.commons.math.special.Gamma.HALF_LOG_2_PI",org.apache.commons.math.special.Gamma.HALF_LOG_2_PI);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("(x <= 0.0)",(x <= 0.0));} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("org.apache.commons.math.special.Gamma.DEFAULT_EPSILON",org.apache.commons.math.special.Gamma.DEFAULT_EPSILON);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectionEnds();
        }
        if (runtimeAngelicValue) if (java.lang.Double.isNaN(x) || (x <= 0.0)) {
            ret = java.lang.Double.NaN;
        } else {
            double g = 607.0 / 128.0;
            double sum = 0.0;
            for (int i = org.apache.commons.math.special.Gamma.LANCZOS.length - 1; i > 0; --i) {
                sum = sum + (org.apache.commons.math.special.Gamma.LANCZOS[i] / (x + i));
            }
            sum = sum + org.apache.commons.math.special.Gamma.LANCZOS[0];
            double tmp = (x + g) + 0.5;
            ret = ((((x + 0.5) * java.lang.Math.log(tmp)) - tmp) + org.apache.commons.math.special.Gamma.HALF_LOG_2_PI) + java.lang.Math.log(sum / x);
        }
        return ret;
    }

    public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x == 0.0) {
            ret = 0.0;
        } else if (x >= (a + 1)) {
            ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations);
        } else {
            double n = 0.0;
            double an = 1.0 / a;
            double sum = an;
            while (((java.lang.Math.abs(an / sum) > epsilon) && (n < maxIterations)) && (sum < java.lang.Double.POSITIVE_INFINITY)) {
                n = n + 1.0;
                an = an * (x / (a + n));
                sum = sum + an;
            } 
            if (n >= maxIterations) {
                throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
            } else if (java.lang.Double.isInfinite(sum)) {
                ret = 1.0;
            } else {
                ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * sum;
            }
        }
        return ret;
    }

    public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
        return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
    }

    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
        double ret;
        if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) {
            ret = java.lang.Double.NaN;
        } else if (x == 0.0) {
            ret = 1.0;
        } else if (x < (a + 1.0)) {
            ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);
        } else {
            org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
                @java.lang.Override
                protected double getA(int n, double x) {
                    return (((2.0 * n) + 1.0) - a) + x;
                }

                @java.lang.Override
                protected double getB(int n, double x) {
                    return n * (a - n);
                }
            };
            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);
            ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;
        }
        return ret;
    }

    public static double digamma(double x) {
        if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) {
            return (-org.apache.commons.math.special.Gamma.GAMMA) - (1 / x);
        }
        if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) {
            double inv = 1 / (x * x);
            return (java.lang.Math.log(x) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
        }
        return org.apache.commons.math.special.Gamma.digamma(x + 1) - (1 / x);
    }

    public static double trigamma(double x) {
        if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) {
            return 1 / (x * x);
        }
        if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) {
            double inv = 1 / (x * x);
            return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
        }
        return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));
    }
}
[4595914] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659885890036
GPR[EPVATF]-1659885890057
GPR[SPS]-1659885890057
[4618659] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.special.Gamma:97.
GPR[EPS]-1659885912781
GPR[ESUN]-1659885912781
GPR[SSUN]-1659885912781
153582413
GPR[ESUN]-1659885924747
GPR[SSUN]-1659885924747
1308483921
GPR[ESUN]-1659885944974
GPR[SSUN]-1659885944974
1308483921
GPR[SPVATF]-1659885955941
GPR[EPVATF]-1659885955963
GPR[SPS]-1659885955963
[4711515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.MatrixUtils:544.
GPR[EPS]-1659886005637
GPR[SPVATF]-1659886011411
GPR[EPVATF]-1659886011434
GPR[SPS]-1659886011434
[4758944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.apache.commons.math.linear.MatrixUtils:544.
GPR[EPS]-1659886053066
GPR[ESUN]-1659886053066
[4758950] INFO NoPol - ----INFORMATION----
[4773527] INFO NoPol - Nb classes : 416
[4773527] INFO NoPol - Nb methods : 3017
[4773527] INFO NoPol - Nb Statements Analyzed : 109
[4773527] INFO NoPol - Nb Statements with Angelic Value Found : 6
[4773527] INFO NoPol - Nb inputs in SMT : 20168
[4773527] INFO NoPol - Nb SMT level: 5
[4773527] INFO NoPol - Nb SMT components: [14] [== of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2, ! of arity: 1, || of arity: 2, && of arity: 2, == of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2, ! of arity: 1, || of arity: 2, && of arity: 2]
[4773527] INFO NoPol -                   class java.lang.Boolean: 14
[4773527] INFO NoPol - Nb variables in SMT : 22
[4773527] INFO NoPol - NoPol Execution time : 4758951ms
[4773527] INFO NoPol - 
[4773527] INFO NoPol - ----PATCH FOUND----
[4773527] INFO NoPol - (nVars) != (2)
[4773545] INFO NoPol - Nb test that executes the patch: 11
[4773545] INFO NoPol - org.apache.commons.math.stat.correlation.PearsonsCorrelation:193: PRECONDITION
[4773547] INFO NoPol - --- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
@@ -192,3 +192,5 @@
               outMatrix.setEntry(i, j, corr);
-              outMatrix.setEntry(j, i, corr);
+              if ((nVars) != (2)) {
+                  outMatrix.setEntry(j, i, corr);
+              }
             }

[4773548] INFO NoPol - (nVars) != (2)
[4791736] INFO NoPol - Nb test that executes the patch: 11
[4791736] INFO NoPol - org.apache.commons.math.stat.correlation.PearsonsCorrelation:190: PRECONDITION
[4791738] INFO NoPol - --- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
@@ -189,6 +189,8 @@
         for (int i = 0; i < nVars; i++) {
-            for (int j = 0; j < i; j++) {
-              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
-              outMatrix.setEntry(i, j, corr);
-              outMatrix.setEntry(j, i, corr);
+            if ((nVars) != (2)) {
+                for (int j = 0; j < i; j++) {
+                    double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
+                    outMatrix.setEntry(i, j, corr);
+                    outMatrix.setEntry(j, i, corr);
+                }
             }

[4791739] INFO NoPol - (nVars) != (2)
[4791760] INFO NoPol - Nb test that executes the patch: 11
[4791760] INFO NoPol - org.apache.commons.math.stat.correlation.PearsonsCorrelation:189: PRECONDITION
[4791761] INFO NoPol - --- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
@@ -188,9 +188,11 @@
         RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);
-        for (int i = 0; i < nVars; i++) {
-            for (int j = 0; j < i; j++) {
-              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
-              outMatrix.setEntry(i, j, corr);
-              outMatrix.setEntry(j, i, corr);
+        if ((nVars) != (2)) {
+            for (int i = 0; i < nVars; i++) {
+                for (int j = 0; j < i; j++) {
+                    double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
+                    outMatrix.setEntry(i, j, corr);
+                    outMatrix.setEntry(j, i, corr);
+                }
+                outMatrix.setEntry(i, i, 1d);
             }
-            outMatrix.setEntry(i, i, 1d);
         }

[4791762] INFO NoPol - (org.apache.commons.math.linear.BlockRealMatrix.this.columns) != (2)
[4791783] INFO NoPol - Nb test that executes the patch: 25
[4791783] INFO NoPol - org.apache.commons.math.linear.BlockRealMatrix:1259: PRECONDITION
[4823918] INFO NoPol - --- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
@@ -1258,3 +1258,5 @@
                                (column - jBlock * BLOCK_SIZE);
-            blocks[iBlock * blockColumns + jBlock][k] = value;
+            if ((org.apache.commons.math.linear.BlockRealMatrix.this.columns) != (2)) {
+                blocks[iBlock * blockColumns + jBlock][k] = value;
+            }
         } catch (ArrayIndexOutOfBoundsException e) {

GPR[EFP]-1659886142624
PATCH
\n\nNode: host-67\n
\n\nDate: Sun 07 Aug 2022 08:29:11 AM PDT\n
End running Nopol Math/69 results at /experiment_home///results/Nopol/Math/69/seed_261/
Removing checked out dir script/workingdir/Nopol/Math_69
GPR[SSLE]-1659886151883
GPR[ESLE]-1659886211889
