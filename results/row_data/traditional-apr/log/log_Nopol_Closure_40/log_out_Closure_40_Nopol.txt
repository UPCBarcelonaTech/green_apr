Sleep 1m start
GPR[SSLI]-1659852097298
GPR[ESLI]-1659852157303
Running Nopol Closure 40b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/40/seed_261/
The file script/workingdir/Nopol/Closure_40 does not exist!
script/workingdir/Nopol/Closure_40
script/workingdir/Nopol/Closure_40
classpath:  script/workingdir/Nopol/Closure_40/build/classes:script/workingdir/Nopol/Closure_40/lib/args4j.jar:script/workingdir/Nopol/Closure_40/lib/guava.jar:script/workingdir/Nopol/Closure_40/lib/json.jar:script/workingdir/Nopol/Closure_40/lib/jsr305.jar:script/workingdir/Nopol/Closure_40/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_40/build/lib/rhino.jar:script/workingdir/Nopol/Closure_40/lib/ant.jar:script/workingdir/Nopol/Closure_40/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_40/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_40/lib/jarjar.jar:script/workingdir/Nopol/Closure_40/lib/junit.jar:script/workingdir/Nopol/Closure_40/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659852176681
GPR[ESLB]-1659852236686
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_40//build/classes:script/workingdir/Nopol/Closure_40//build/test:script/workingdir/Nopol/Closure_40/build/classes:script/workingdir/Nopol/Closure_40/lib/args4j.jar:script/workingdir/Nopol/Closure_40/lib/guava.jar:script/workingdir/Nopol/Closure_40/lib/json.jar:script/workingdir/Nopol/Closure_40/lib/jsr305.jar:script/workingdir/Nopol/Closure_40/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_40/build/lib/rhino.jar:script/workingdir/Nopol/Closure_40/lib/ant.jar:script/workingdir/Nopol/Closure_40/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_40/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_40/lib/jarjar.jar:script/workingdir/Nopol/Closure_40/lib/junit.jar:script/workingdir/Nopol/Closure_40/build/test
Node: host-52
Date init: Sat 06 Aug 2022 11:03:56 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_40/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_40/build/classes/, file:script/workingdir/Nopol/Closure_40/build/test/, file:script/workingdir/Nopol/Closure_40/build/classes/, file:script/workingdir/Nopol/Closure_40/lib/args4j.jar, file:script/workingdir/Nopol/Closure_40/lib/guava.jar, file:script/workingdir/Nopol/Closure_40/lib/json.jar, file:script/workingdir/Nopol/Closure_40/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_40/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_40/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_40/lib/ant.jar, file:script/workingdir/Nopol/Closure_40/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_40/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_40/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_40/lib/junit.jar, file:script/workingdir/Nopol/Closure_40/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_40/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/40/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659852241846
GPR[ESUP]-1659852241847
GPR[SFL]-1659852241847
GPR[EFL]-1659852280985
GPR[SFP]-1659852280985
GPR[SSUN]-1659852282566
-283827935
GPR[SPVATF]-1659852283049
GPR[EPVATF]-1659852283085
[45625] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852283086
GPR[SSUN]-1659852283086
-1966087783
GPR[ESUN]-1659852283286
GPR[SSUN]-1659852283286
-1966087783
GPR[SPVATF]-1659852283480
GPR[EPVATF]-1659852283508
[46047] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852283508
GPR[SSUN]-1659852283508
-534884160
GPR[SPVATF]-1659852283883
GPR[EPVATF]-1659852285171
GPR[SPS]-1659852285171
[49189] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:639.
GPR[EPS]-1659852286650
GPR[ESUN]-1659852286650
GPR[SSUN]-1659852286650
-534884160
GPR[ESUN]-1659852287004
GPR[SSUN]-1659852287004
-534884160
GPR[SPVATF]-1659852287353
GPR[EPVATF]-1659852291371
GPR[SPS]-1659852291371
[54830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:561.
GPR[EPS]-1659852292291
GPR[ESUN]-1659852292291
GPR[SSUN]-1659852292291
-534884160
GPR[SPVATF]-1659852292633
GPR[EPVATF]-1659852293455
GPR[SPS]-1659852293455
[56857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:560.
GPR[EPS]-1659852294318
GPR[ESUN]-1659852294318
GPR[SSUN]-1659852294318
-534884160
GPR[SPVATF]-1659852294656
GPR[EPVATF]-1659852295663
GPR[SPS]-1659852295663
[60100] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler$2:615.
GPR[EPS]-1659852297561
GPR[SPVATF]-1659852297561
GPR[EPVATF]-1659852298393
GPR[SPS]-1659852298393
[63384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler$2:615.
GPR[EPS]-1659852300845
GPR[ESUN]-1659852300845
GPR[SSUN]-1659852300845
-534884160
GPR[SPVATF]-1659852301185
GPR[EPVATF]-1659852301986
GPR[SPS]-1659852301986
[65318] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler$2:613.
GPR[EPS]-1659852302779
GPR[ESUN]-1659852302779
GPR[SSUN]-1659852302779
-1966087783
GPR[SPVATF]-1659852302967
GPR[EPVATF]-1659852302987
[65526] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852302987
GPR[SSUN]-1659852302987
-1966087783
GPR[SPVATF]-1659852303173
GPR[EPVATF]-1659852303192
[65731] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852303192
GPR[SSUN]-1659852303192
-1659631726
GPR[ESUN]-1659852303384
GPR[SSUN]-1659852303384
130004992
GPR[ESUN]-1659852303556
GPR[SSUN]-1659852303556
130004992
GPR[SPVATF]-1659852303727
GPR[EPVATF]-1659852303749
[66289] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852303750
GPR[SSUN]-1659852303750
130004992
GPR[ESUN]-1659852303924
GPR[SSUN]-1659852303924
-1219825086
GPR[SPVATF]-1659852304137
GPR[EPVATF]-1659852304944
GPR[SPS]-1659852304944
[67990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:159.
GPR[EPS]-1659852305451
GPR[ESUN]-1659852305451
GPR[SSUN]-1659852305451
890942016
GPR[ESUN]-1659852305644
GPR[SSUN]-1659852305644
890942016
GPR[SPVATF]-1659852305826
GPR[EPVATF]-1659852305844
[68384] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852305845
GPR[SSUN]-1659852305845
890942016
GPR[SPVATF]-1659852306032
GPR[EPVATF]-1659852306049
[68589] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852306050
GPR[EPVATF]-1659852306067
[68606] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852306067
GPR[SSUN]-1659852306067
890942016
GPR[ESUN]-1659852306255
GPR[SSUN]-1659852306255
890942016
GPR[ESUN]-1659852306436
GPR[SSUN]-1659852306436
-1966087783
GPR[ESUN]-1659852306619
GPR[SSUN]-1659852306619
-1966087783
GPR[SPVATF]-1659852306901
GPR[EPVATF]-1659852306920
[69460] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852306921
GPR[EPVATF]-1659852306939
[69478] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852306939
GPR[SSUN]-1659852306940
-1966087783
GPR[ESUN]-1659852307130
GPR[SSUN]-1659852307130
-1966087783
GPR[SPVATF]-1659852307320
GPR[EPVATF]-1659852307339
[69878] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852307340
GPR[EPVATF]-1659852307358
[69897] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852307358
GPR[SSUN]-1659852307358
-1966087783
GPR[ESUN]-1659852307559
GPR[SSUN]-1659852307559
-1966087783
GPR[ESUN]-1659852307744
GPR[SSUN]-1659852307744
-1966087783
GPR[ESUN]-1659852307941
GPR[SSUN]-1659852307941
2433571
GPR[SPVATF]-1659852308191
GPR[EPVATF]-1659852308736
GPR[SPS]-1659852308736
[71988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1441.
GPR[EPS]-1659852309449
GPR[ESUN]-1659852309449
GPR[SSUN]-1659852309449
2433571
GPR[SPVATF]-1659852309680
GPR[EPVATF]-1659852310224
GPR[SPS]-1659852310224
GPR[EPS]-1659852311349
GPR[SPVATR]-1659852311349
[73888] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1412: PRECONDITION node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP
[74266] INFO TestPatch - Running test suite to check the patch "node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP" is working
GPR[EPVATR]-1659852311907
[74446] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659852311908
[74474] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1411,7 +1411,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type <= com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/40/seed_261/patch_70088_1ts_1659852311935.diff
GPR[ESUN]-1659852311936
GPR[SSUN]-1659852311936
1613130706
GPR[ESUN]-1659852312139
GPR[SSUN]-1659852312139
1613130706
GPR[ESUN]-1659852312339
GPR[SSUN]-1659852312339
1613130706
GPR[SPVATF]-1659852312537
GPR[EPVATF]-1659852312711
[75250] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852312711
GPR[SSUN]-1659852312711
1884422692
GPR[SPVATF]-1659852312920
GPR[EPVATF]-1659852314113
GPR[SPS]-1659852314113
[77774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:322.
GPR[EPS]-1659852315235
GPR[ESUN]-1659852315235
GPR[SSUN]-1659852315235
198689906
GPR[SPVATF]-1659852315511
GPR[EPVATF]-1659852316744
GPR[SPS]-1659852316744
[80040] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1372.
GPR[EPS]-1659852317501
GPR[ESUN]-1659852317501
GPR[SSUN]-1659852317501
198689906
GPR[SPVATF]-1659852317763
GPR[EPVATF]-1659852318897
GPR[SPS]-1659852318897
[82158] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1371.
GPR[EPS]-1659852319620
GPR[ESUN]-1659852319620
GPR[SSUN]-1659852319620
198689906
GPR[SPVATF]-1659852319874
GPR[EPVATF]-1659852321011
GPR[SPS]-1659852321011
[84288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1370.
GPR[EPS]-1659852321749
GPR[ESUN]-1659852321749
GPR[SSUN]-1659852321749
198689906
GPR[SPVATF]-1659852322020
GPR[EPVATF]-1659852323131
GPR[SPS]-1659852323131
[86379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1369.
GPR[EPS]-1659852323840
GPR[ESUN]-1659852323840
GPR[SSUN]-1659852323840
198689906
GPR[ESUN]-1659852324103
GPR[SSUN]-1659852324103
198689906
GPR[SPVATF]-1659852324353
GPR[EPVATF]-1659852325480
GPR[SPS]-1659852325480
[88760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:548.
GPR[EPS]-1659852326221
GPR[ESUN]-1659852326221
GPR[SSUN]-1659852326221
198689906
GPR[SPVATF]-1659852326485
GPR[EPVATF]-1659852327615
GPR[SPS]-1659852327615
[90855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:833.
GPR[EPS]-1659852328316
GPR[ESUN]-1659852328316
GPR[SSUN]-1659852328316
-1966087783
GPR[SPVATF]-1659852328499
GPR[EPVATF]-1659852328521
[91060] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852328521
GPR[EPVATF]-1659852328542
[91081] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852328542
GPR[SSUN]-1659852328542
-1966087783
GPR[SPVATF]-1659852328719
GPR[EPVATF]-1659852328739
[91278] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852328739
GPR[EPVATF]-1659852328760
[91299] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852328760
GPR[SSUN]-1659852328760
-1966087783
GPR[SPVATF]-1659852328937
GPR[EPVATF]-1659852328959
[91498] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852328959
GPR[EPVATF]-1659852328980
[91519] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852328980
GPR[SSUN]-1659852328980
-1966087783
GPR[ESUN]-1659852329163
GPR[SSUN]-1659852329163
-1966087783
GPR[ESUN]-1659852329345
GPR[SSUN]-1659852329345
-1966087783
GPR[SPVATF]-1659852329567
GPR[EPVATF]-1659852329589
[92128] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852329589
GPR[EPVATF]-1659852329610
[92149] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852329610
GPR[SSUN]-1659852329610
-1966087783
GPR[SPVATF]-1659852329793
GPR[EPVATF]-1659852329813
[92352] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852329813
GPR[EPVATF]-1659852329834
[92373] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852329834
GPR[SSUN]-1659852329834
-1966087783
GPR[ESUN]-1659852330015
GPR[SSUN]-1659852330015
-1966087783
GPR[SPVATF]-1659852330193
GPR[EPVATF]-1659852330216
[92755] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852330216
GPR[SSUN]-1659852330216
-1966087783
GPR[SPVATF]-1659852330403
GPR[EPVATF]-1659852330423
[92962] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852330423
GPR[SSUN]-1659852330423
-1966087783
GPR[ESUN]-1659852330604
GPR[SSUN]-1659852330604
-1966087783
GPR[SPVATF]-1659852330797
GPR[EPVATF]-1659852330818
[93357] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852330818
GPR[SSUN]-1659852330818
-1966087783
GPR[ESUN]-1659852331001
GPR[SSUN]-1659852331002
-1966087783
GPR[ESUN]-1659852331191
GPR[SSUN]-1659852331191
-1966087783
GPR[SPVATF]-1659852331375
GPR[EPVATF]-1659852331396
[93935] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852331396
GPR[SSUN]-1659852331396
-1966087783
GPR[SPVATF]-1659852331581
GPR[EPVATF]-1659852331600
[94140] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852331601
GPR[SSUN]-1659852331601
1331276989
GPR[SPVATF]-1659852331803
GPR[EPVATF]-1659852332642
GPR[SPS]-1659852332642
[95703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:309.
GPR[EPS]-1659852333164
GPR[ESUN]-1659852333164
GPR[SSUN]-1659852333164
234947553
GPR[ESUN]-1659852333355
GPR[SSUN]-1659852333355
234947553
GPR[SPVATF]-1659852333559
GPR[EPVATF]-1659852333576
[96115] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852333576
GPR[EPVATF]-1659852333590
[96129] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852333590
GPR[SSUN]-1659852333590
234947553
GPR[ESUN]-1659852333777
GPR[SSUN]-1659852333777
234947553
GPR[SPVATF]-1659852334003
GPR[EPVATF]-1659852334018
[96558] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852334019
GPR[EPVATF]-1659852334034
[96573] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852334034
GPR[SSUN]-1659852334034
234947553
GPR[SPVATF]-1659852334234
GPR[EPVATF]-1659852334250
[96789] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852334250
GPR[SSUN]-1659852334250
234947553
GPR[ESUN]-1659852334439
GPR[SSUN]-1659852334440
234947553
GPR[ESUN]-1659852334623
GPR[SSUN]-1659852334623
234947553
GPR[SPVATF]-1659852334814
GPR[EPVATF]-1659852334830
[97369] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852334830
GPR[SSUN]-1659852334830
234947553
GPR[SPVATF]-1659852335019
GPR[EPVATF]-1659852335034
[97573] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852335034
GPR[SSUN]-1659852335034
234947553
GPR[SPVATF]-1659852335222
GPR[EPVATF]-1659852335239
[97778] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852335239
GPR[SSUN]-1659852335239
234947553
GPR[ESUN]-1659852335423
GPR[SSUN]-1659852335423
234947553
GPR[ESUN]-1659852335612
GPR[SSUN]-1659852335612
234947553
GPR[SPVATF]-1659852335800
GPR[EPVATF]-1659852335816
[98355] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852335816
GPR[SSUN]-1659852335816
234947553
GPR[SPVATF]-1659852336004
GPR[EPVATF]-1659852336020
[98559] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852336020
GPR[SSUN]-1659852336020
234947553
GPR[ESUN]-1659852336230
GPR[SSUN]-1659852336230
234947553
GPR[SPVATF]-1659852336416
GPR[EPVATF]-1659852336431
[98970] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852336431
GPR[SSUN]-1659852336431
234947553
GPR[SPVATF]-1659852336618
GPR[EPVATF]-1659852336635
[99174] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852336635
GPR[SSUN]-1659852336635
234947553
GPR[ESUN]-1659852336823
GPR[SSUN]-1659852336823
890942016
GPR[SPVATF]-1659852337013
GPR[EPVATF]-1659852337031
[99570] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852337031
GPR[EPVATF]-1659852337048
[99587] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852337049
GPR[SSUN]-1659852337049
890942016
GPR[SPVATF]-1659852337238
GPR[EPVATF]-1659852337257
[99796] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852337257
GPR[SSUN]-1659852337257
890942016
GPR[ESUN]-1659852337443
GPR[SSUN]-1659852337443
890942016
GPR[SPVATF]-1659852337668
GPR[EPVATF]-1659852337688
[100227] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852337688
GPR[SSUN]-1659852337688
890942016
GPR[SPVATF]-1659852337878
GPR[EPVATF]-1659852337896
[100435] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852337896
GPR[EPVATF]-1659852337913
[100453] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852337914
GPR[SSUN]-1659852337914
890942016
GPR[SPVATF]-1659852338097
GPR[EPVATF]-1659852338116
[100655] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852338116
GPR[SSUN]-1659852338116
890942016
GPR[SPVATF]-1659852338307
GPR[EPVATF]-1659852338325
[100864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852338326
GPR[EPVATF]-1659852338342
[100882] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852338343
GPR[SSUN]-1659852338343
890942016
GPR[ESUN]-1659852338526
GPR[SSUN]-1659852338526
890942016
GPR[SPVATF]-1659852338712
GPR[EPVATF]-1659852338731
[101270] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852338731
GPR[SSUN]-1659852338731
890942016
GPR[SPVATF]-1659852338925
GPR[EPVATF]-1659852338943
[101482] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852338943
GPR[SSUN]-1659852338943
890942016
GPR[SPVATF]-1659852339127
GPR[EPVATF]-1659852339147
[101686] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852339147
GPR[SSUN]-1659852339147
890942016
GPR[ESUN]-1659852339334
GPR[SSUN]-1659852339334
1613130706
GPR[SPVATF]-1659852339538
GPR[EPVATF]-1659852342119
[104658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852342119
GPR[EPVATF]-1659852342294
[104833] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852342294
GPR[SSUN]-1659852342294
1613130706
GPR[SPVATF]-1659852342506
GPR[EPVATF]-1659852342703
[105242] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852342703
GPR[SSUN]-1659852342703
1613130706
GPR[SPVATF]-1659852342923
GPR[EPVATF]-1659852343213
[105752] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852343214
GPR[EPVATF]-1659852343436
[105975] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852343436
GPR[SSUN]-1659852343436
198689906
GPR[ESUN]-1659852343696
GPR[SSUN]-1659852343696
198689906
GPR[SPVATF]-1659852343955
GPR[EPVATF]-1659852345084
GPR[SPS]-1659852345084
[108370] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:698.
GPR[EPS]-1659852345831
GPR[ESUN]-1659852345831
GPR[SSUN]-1659852345831
198689906
GPR[SPVATF]-1659852346091
GPR[EPVATF]-1659852347204
GPR[SPS]-1659852347204
[110442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:636.
GPR[EPS]-1659852347903
GPR[SPVATF]-1659852347903
GPR[EPVATF]-1659852349082
GPR[SPS]-1659852349082
[112318] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:636.
GPR[EPS]-1659852349779
GPR[ESUN]-1659852349779
GPR[SSUN]-1659852349779
198689906
GPR[ESUN]-1659852350041
GPR[SSUN]-1659852350041
198689906
GPR[SPVATF]-1659852350294
GPR[EPVATF]-1659852351471
GPR[SPS]-1659852351471
[114724] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:846.
GPR[EPS]-1659852352185
GPR[ESUN]-1659852352185
GPR[SSUN]-1659852352185
198689906
GPR[SPVATF]-1659852352471
GPR[EPVATF]-1659852353655
GPR[SPS]-1659852353655
[116909] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:842.
GPR[EPS]-1659852354370
GPR[ESUN]-1659852354370
GPR[SSUN]-1659852354370
198689906
GPR[SPVATF]-1659852354630
GPR[EPVATF]-1659852355772
GPR[SPS]-1659852355772
[119137] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:841.
GPR[EPS]-1659852356598
GPR[SPVATF]-1659852356598
GPR[EPVATF]-1659852357776
GPR[SPS]-1659852357776
[121017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:841.
GPR[EPS]-1659852358478
GPR[ESUN]-1659852358479
GPR[SSUN]-1659852358479
198689906
GPR[ESUN]-1659852358742
GPR[SSUN]-1659852358742
198689906
GPR[SPVATF]-1659852358999
GPR[EPVATF]-1659852360220
GPR[SPS]-1659852360220
[123522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:832.
GPR[EPS]-1659852360983
GPR[SPVATF]-1659852360983
GPR[EPVATF]-1659852362191
GPR[SPS]-1659852362191
[125432] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:832.
GPR[EPS]-1659852362893
GPR[ESUN]-1659852362893
GPR[SSUN]-1659852362893
198689906
GPR[SPVATF]-1659852363150
GPR[EPVATF]-1659852365297
GPR[SPS]-1659852365297
[128567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:690.
GPR[EPS]-1659852366028
GPR[ESUN]-1659852366028
GPR[SSUN]-1659852366028
-534884160
GPR[SPVATF]-1659852366348
GPR[EPVATF]-1659852367303
GPR[SPS]-1659852367303
[132139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1969.
GPR[EPS]-1659852369600
GPR[ESUN]-1659852369600
GPR[SSUN]-1659852369600
1331276989
GPR[ESUN]-1659852369805
GPR[SSUN]-1659852369805
1331276989
GPR[SPVATF]-1659852370007
GPR[EPVATF]-1659852370825
GPR[SPS]-1659852370825
[133861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:323.
GPR[EPS]-1659852371322
GPR[SPVATF]-1659852371322
GPR[EPVATF]-1659852372190
GPR[SPS]-1659852372190
[135215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:323.
GPR[EPS]-1659852372676
GPR[ESUN]-1659852372676
GPR[SSUN]-1659852372676
1331276989
GPR[ESUN]-1659852372878
GPR[SSUN]-1659852372878
1331276989
GPR[ESUN]-1659852373077
GPR[SSUN]-1659852373077
1331276989
GPR[ESUN]-1659852373278
GPR[SSUN]-1659852373278
1331276989
GPR[SPVATF]-1659852373476
GPR[EPVATF]-1659852374333
GPR[SPS]-1659852374333
[137386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:316.
GPR[EPS]-1659852374847
GPR[SPVATF]-1659852374847
GPR[EPVATF]-1659852375702
GPR[SPS]-1659852375702
[138747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:316.
GPR[EPS]-1659852376208
GPR[ESUN]-1659852376208
GPR[SSUN]-1659852376208
1331276989
GPR[ESUN]-1659852376451
GPR[SSUN]-1659852376451
1331276989
GPR[SPVATF]-1659852376654
GPR[EPVATF]-1659852377524
GPR[SPS]-1659852377524
[140624] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:261.
GPR[EPS]-1659852378085
GPR[SPVATF]-1659852378085
GPR[EPVATF]-1659852378942
GPR[SPS]-1659852378942
[141978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:261.
GPR[EPS]-1659852379439
GPR[ESUN]-1659852379439
GPR[SSUN]-1659852379439
1331276989
GPR[SPVATF]-1659852379643
GPR[EPVATF]-1659852380535
GPR[SPS]-1659852380535
[143580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:257.
GPR[EPS]-1659852381041
GPR[ESUN]-1659852381042
GPR[SSUN]-1659852381042
1331276989
GPR[SPVATF]-1659852381245
GPR[EPVATF]-1659852382107
GPR[SPS]-1659852382107
[145145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:250.
GPR[EPS]-1659852382606
GPR[ESUN]-1659852382606
GPR[SSUN]-1659852382606
1331276989
GPR[SPVATF]-1659852382810
GPR[EPVATF]-1659852383712
GPR[SPS]-1659852383712
[146767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:249.
GPR[EPS]-1659852384228
GPR[SPVATF]-1659852384228
GPR[EPVATF]-1659852385143
GPR[SPS]-1659852385143
[148172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:249.
GPR[EPS]-1659852385633
GPR[ESUN]-1659852385633
GPR[SSUN]-1659852385633
1331276989
GPR[ESUN]-1659852385831
GPR[SSUN]-1659852385831
2433571
GPR[SPVATF]-1659852386065
GPR[EPVATF]-1659852386612
GPR[SPS]-1659852386612
GPR[EPS]-1659852387676
GPR[SPVATR]-1659852387676
[150215] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1428: PRECONDITION node2.sourcePosition <= -1
[150579] INFO TestPatch - Running test suite to check the patch "node2.sourcePosition <= -1" is working
GPR[EPVATR]-1659852388220
[150759] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659852388220
[150776] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1427,3 +1427,5 @@
     if (!isEquivalentTo(node2, false, false)) {
-      return new NodeMismatch(this, node2);
+      if (node2.sourcePosition <= -1) {
+        return new NodeMismatch(this, node2);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/40/seed_261/patch_146390_2ts_1659852388237.diff
GPR[ESUN]-1659852388238
GPR[SSUN]-1659852388238
1613130706
GPR[SPVATF]-1659852388443
GPR[EPVATF]-1659852388621
[151160] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852388621
GPR[EPVATF]-1659852389419
[151958] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852389419
GPR[SSUN]-1659852389419
1613130706
GPR[SPVATF]-1659852389628
GPR[EPVATF]-1659852389800
[152339] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852389800
GPR[EPVATF]-1659852389970
[152509] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852389970
GPR[SSUN]-1659852389970
1613130706
GPR[ESUN]-1659852390170
GPR[SSUN]-1659852390170
1613130706
GPR[ESUN]-1659852390362
GPR[SSUN]-1659852390362
1613130706
GPR[ESUN]-1659852390560
GPR[SSUN]-1659852390560
1613130706
GPR[ESUN]-1659852390761
GPR[SSUN]-1659852390761
1613130706
GPR[SPVATF]-1659852390960
GPR[EPVATF]-1659852391187
[153726] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852391187
GPR[EPVATF]-1659852391474
[154013] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852391474
GPR[SSUN]-1659852391474
-534884160
GPR[SPVATF]-1659852391796
GPR[EPVATF]-1659852392667
GPR[SPS]-1659852392667
[155974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1971.
GPR[EPS]-1659852393435
GPR[ESUN]-1659852393435
GPR[SSUN]-1659852393435
-534884160
GPR[SPVATF]-1659852393780
GPR[EPVATF]-1659852394635
GPR[SPS]-1659852394635
[157989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1968.
GPR[EPS]-1659852395450
GPR[SPVATF]-1659852395451
GPR[EPVATF]-1659852396295
GPR[SPS]-1659852396295
[159593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1968.
GPR[EPS]-1659852397054
GPR[ESUN]-1659852397054
GPR[SSUN]-1659852397054
-534884160
GPR[ESUN]-1659852397394
GPR[SSUN]-1659852397394
-534884160
GPR[ESUN]-1659852397719
GPR[SSUN]-1659852397719
1613130706
GPR[SPVATF]-1659852397917
GPR[EPVATF]-1659852398084
[160623] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852398085
GPR[SSUN]-1659852398085
1613130706
GPR[ESUN]-1659852398287
GPR[SSUN]-1659852398287
1613130706
GPR[SPVATF]-1659852398484
GPR[EPVATF]-1659852398658
[161197] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852398658
GPR[EPVATF]-1659852398832
[161371] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852398832
GPR[SSUN]-1659852398832
1613130706
GPR[ESUN]-1659852399032
GPR[SSUN]-1659852399033
1613130706
GPR[SPVATF]-1659852399238
GPR[EPVATF]-1659852399412
[161951] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852399413
GPR[EPVATF]-1659852399588
[162127] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852399588
GPR[SSUN]-1659852399588
198689906
GPR[SPVATF]-1659852399845
GPR[EPVATF]-1659852400997
GPR[SPS]-1659852400997
[164242] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:325.
GPR[EPS]-1659852401703
GPR[ESUN]-1659852401703
GPR[SSUN]-1659852401703
198689906
GPR[ESUN]-1659852401963
GPR[SSUN]-1659852401963
2433571
GPR[SPVATF]-1659852402189
GPR[EPVATF]-1659852403375
GPR[SPS]-1659852403375
[166585] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:943.
GPR[EPS]-1659852404046
GPR[ESUN]-1659852404046
GPR[SSUN]-1659852404046
2433571
GPR[SPVATF]-1659852404278
GPR[EPVATF]-1659852405461
GPR[SPS]-1659852405461
[168677] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:942.
GPR[EPS]-1659852406138
GPR[ESUN]-1659852406138
GPR[SSUN]-1659852406138
2433571
GPR[SPVATF]-1659852406364
GPR[EPVATF]-1659852407548
GPR[SPS]-1659852407548
[170779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659852408240
GPR[SPVATF]-1659852408241
GPR[EPVATF]-1659852409441
GPR[SPS]-1659852409442
[372659] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659852610120
GPR[SSUN]-1659852610120
2433571
GPR[SPVATF]-1659852610492
GPR[EPVATF]-1659852611709
GPR[SPS]-1659852611709
[374887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659852612348
GPR[SPVATF]-1659852612348
GPR[EPVATF]-1659852613568
GPR[SPS]-1659852613569
[376781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659852614242
GPR[ESUN]-1659852614242
GPR[SSUN]-1659852614242
2433571
GPR[ESUN]-1659852614471
GPR[SSUN]-1659852614471
2433571
GPR[SPVATF]-1659852614694
GPR[EPVATF]-1659852615931
GPR[SPS]-1659852615931
[379153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659852616614
GPR[SPVATF]-1659852616614
GPR[EPVATF]-1659852619050
GPR[SPS]-1659852619050
[382268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659852619729
GPR[ESUN]-1659852619729
GPR[SSUN]-1659852619729
2433571
GPR[SPVATF]-1659852619959
GPR[EPVATF]-1659852621120
GPR[SPS]-1659852621120
[384325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:966.
GPR[EPS]-1659852621786
GPR[SPVATF]-1659852621787
GPR[EPVATF]-1659852622914
GPR[SPS]-1659852622914
[386103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:966.
GPR[EPS]-1659852623564
GPR[ESUN]-1659852623564
GPR[SSUN]-1659852623564
2433571
GPR[SPVATF]-1659852623791
GPR[EPVATF]-1659852624924
GPR[SPS]-1659852624924
[388114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659852625575
GPR[SPVATF]-1659852625576
GPR[EPVATF]-1659852626710
GPR[SPS]-1659852626711
[389906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659852627367
GPR[ESUN]-1659852627367
GPR[SSUN]-1659852627367
2433571
GPR[SPVATF]-1659852627604
GPR[EPVATF]-1659852628762
GPR[SPS]-1659852628762
[391931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:941.
GPR[EPS]-1659852629392
GPR[SPVATF]-1659852629393
GPR[EPVATF]-1659852630550
GPR[SPS]-1659852630550
[593769] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659852831230
GPR[SSUN]-1659852831230
2433571
GPR[SPVATF]-1659852831602
GPR[EPVATF]-1659852832789
GPR[SPS]-1659852832789
[595987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:940.
GPR[EPS]-1659852833448
GPR[ESUN]-1659852833448
GPR[SSUN]-1659852833448
2433571
GPR[ESUN]-1659852833681
GPR[SSUN]-1659852833681
2433571
GPR[SPVATF]-1659852833911
GPR[EPVATF]-1659852835168
GPR[SPS]-1659852835168
[598357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:931.
GPR[EPS]-1659852835818
GPR[ESUN]-1659852835818
GPR[SSUN]-1659852835819
2433571
GPR[ESUN]-1659852836050
GPR[SSUN]-1659852836050
198689906
GPR[ESUN]-1659852836310
GPR[SSUN]-1659852836310
198689906
GPR[ESUN]-1659852836569
GPR[SSUN]-1659852836569
198689906
GPR[ESUN]-1659852836827
GPR[SSUN]-1659852836827
1051872951
GPR[SPVATF]-1659852837036
GPR[EPVATF]-1659852838322
GPR[SPS]-1659852838322
[601413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:96.
GPR[EPS]-1659852838874
GPR[ESUN]-1659852838874
GPR[SSUN]-1659852838874
198689906
GPR[SPVATF]-1659852839133
GPR[EPVATF]-1659852840351
GPR[SPS]-1659852840351
[603596] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:324.
GPR[EPS]-1659852841057
GPR[SPVATF]-1659852841057
GPR[EPVATF]-1659852842345
GPR[SPS]-1659852842345
[605581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:324.
GPR[EPS]-1659852843042
GPR[ESUN]-1659852843042
GPR[SSUN]-1659852843042
-240150603
GPR[ESUN]-1659852843419
GPR[SSUN]-1659852843419
-240150603
GPR[ESUN]-1659852843728
GPR[SSUN]-1659852843728
-240150603
GPR[ESUN]-1659852844027
GPR[SSUN]-1659852844027
-240150603
GPR[SPVATF]-1659852844378
GPR[EPVATF]-1659852845324
GPR[SPS]-1659852845324
[608842] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(62).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("na",na);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        na.removeUnreferenced();

                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[608843] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852846304
GPR[SSUN]-1659852846304
-240150603
GPR[SPVATF]-1659852846602
GPR[EPVATF]-1659852847527
GPR[SPS]-1659852847527
[611013] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(63).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("na",na);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(63).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        na.process(externs, root);

                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[611014] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852848475
GPR[SSUN]-1659852848475
-240150603
GPR[ESUN]-1659852848771
GPR[SSUN]-1659852848771
-240150603
GPR[SPVATF]-1659852849120
GPR[EPVATF]-1659852850080
GPR[SPS]-1659852850080
[613606] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(64).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.flowSensitiveInlineVariables",com.google.javascript.jscomp.DefaultPassConfig.this.flowSensitiveInlineVariables);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineVariables",com.google.javascript.jscomp.DefaultPassConfig.this.inlineVariables);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkSideEffects",com.google.javascript.jscomp.DefaultPassConfig.this.checkSideEffects);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inferTypes",com.google.javascript.jscomp.DefaultPassConfig.this.inferTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineConstants",com.google.javascript.jscomp.DefaultPassConfig.this.inlineConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPreprocess",com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPreprocess);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR",com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.devirtualizePrototypeMethods",com.google.javascript.jscomp.DefaultPassConfig.this.devirtualizePrototypeMethods);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineSimpleMethods",com.google.javascript.jscomp.DefaultPassConfig.this.inlineSimpleMethods);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN",com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.optimizeArgumentsArray",com.google.javascript.jscomp.DefaultPassConfig.this.optimizeArgumentsArray);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkControlFlow",com.google.javascript.jscomp.DefaultPassConfig.this.checkControlFlow);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR",com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckAst",com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckAst);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.computeFunctionNames",com.google.javascript.jscomp.DefaultPassConfig.this.computeFunctionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.collapseAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markNoSideEffectCalls",com.google.javascript.jscomp.DefaultPassConfig.this.markNoSideEffectCalls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inferJsDocInfo",com.google.javascript.jscomp.DefaultPassConfig.this.inferJsDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.peepholeOptimizations",com.google.javascript.jscomp.DefaultPassConfig.this.peepholeOptimizations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.variableMap",com.google.javascript.jscomp.DefaultPassConfig.this.variableMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.anonymousFunctionNameMap",com.google.javascript.jscomp.DefaultPassConfig.this.anonymousFunctionNameMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkGlobalNames",com.google.javascript.jscomp.DefaultPassConfig.this.checkGlobalNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkVariableReferences",com.google.javascript.jscomp.DefaultPassConfig.this.checkVariableReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnreachableCode",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnreachableCode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.optimizeCallsAndRemoveUnusedVars",com.google.javascript.jscomp.DefaultPassConfig.this.optimizeCallsAndRemoveUnusedVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.instrumentFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.instrumentFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exportedNames",com.google.javascript.jscomp.DefaultPassConfig.this.exportedNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markUnnormalized",com.google.javascript.jscomp.DefaultPassConfig.this.markUnnormalized);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.denormalize",com.google.javascript.jscomp.DefaultPassConfig.this.denormalize);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.ambiguateProperties",com.google.javascript.jscomp.DefaultPassConfig.this.ambiguateProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.invertContextualRenaming",com.google.javascript.jscomp.DefaultPassConfig.this.invertContextualRenaming);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkVars",com.google.javascript.jscomp.DefaultPassConfig.this.checkVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleIdGenerator",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleIdGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.disambiguateProperties",com.google.javascript.jscomp.DefaultPassConfig.this.disambiguateProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.suspiciousCode",com.google.javascript.jscomp.DefaultPassConfig.this.suspiciousCode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.processTweaks",com.google.javascript.jscomp.DefaultPassConfig.this.processTweaks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.convertToDottedProperties",com.google.javascript.jscomp.DefaultPassConfig.this.convertToDottedProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.latePeepholeOptimizations",com.google.javascript.jscomp.DefaultPassConfig.this.latePeepholeOptimizations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPostprocess",com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPostprocess);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR",com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE",com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkRegExp",com.google.javascript.jscomp.DefaultPassConfig.this.checkRegExp);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.namespaceForChecks",com.google.javascript.jscomp.DefaultPassConfig.this.namespaceForChecks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR",com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkControlStructures",com.google.javascript.jscomp.DefaultPassConfig.this.checkControlStructures);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.runtimeTypeCheck",com.google.javascript.jscomp.DefaultPassConfig.this.runtimeTypeCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.minimizeExitPoints",com.google.javascript.jscomp.DefaultPassConfig.this.minimizeExitPoints);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.stripSideEffectProtection",com.google.javascript.jscomp.DefaultPassConfig.this.stripSideEffectProtection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.idGeneratorMap",com.google.javascript.jscomp.DefaultPassConfig.this.idGeneratorMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseProperties",com.google.javascript.jscomp.DefaultPassConfig.this.collapseProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.moveFunctionDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.moveFunctionDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureOptimizePrimitives",com.google.javascript.jscomp.DefaultPassConfig.this.closureOptimizePrimitives);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.nameUnmappedAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.nameUnmappedAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceMessages",com.google.javascript.jscomp.DefaultPassConfig.this.replaceMessages);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.functionNames",com.google.javascript.jscomp.DefaultPassConfig.this.functionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleMethodMotion",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleMethodMotion);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureCheckGetCssName",com.google.javascript.jscomp.DefaultPassConfig.this.closureCheckGetCssName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.propertyMap",com.google.javascript.jscomp.DefaultPassConfig.this.propertyMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.preprocessorSymbolTable",com.google.javascript.jscomp.DefaultPassConfig.this.preprocessorSymbolTable);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedVars",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleCodeMotion",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleCodeMotion);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.extractPrototypeMemberDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.extractPrototypeMemberDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE",com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.stringMap",com.google.javascript.jscomp.DefaultPassConfig.this.stringMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureGoogScopeAliases",com.google.javascript.jscomp.DefaultPassConfig.this.closureGoogScopeAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedClassProperties",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedClassProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.generateExports",com.google.javascript.jscomp.DefaultPassConfig.this.generateExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkAccessControls",com.google.javascript.jscomp.DefaultPassConfig.this.checkAccessControls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseObjectLiterals",com.google.javascript.jscomp.DefaultPassConfig.this.collapseObjectLiterals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceStrings",com.google.javascript.jscomp.DefaultPassConfig.this.replaceStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkStrictMode",com.google.javascript.jscomp.DefaultPassConfig.this.checkStrictMode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceGraph",com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureCodeRemoval",com.google.javascript.jscomp.DefaultPassConfig.this.closureCodeRemoval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypes",com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceReport",com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceReport);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameLabels",com.google.javascript.jscomp.DefaultPassConfig.this.renameLabels);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.deadAssignmentsElimination",com.google.javascript.jscomp.DefaultPassConfig.this.deadAssignmentsElimination);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.groupVariableDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.groupVariableDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.ignoreCajaProperties",com.google.javascript.jscomp.DefaultPassConfig.this.ignoreCajaProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkTypes",com.google.javascript.jscomp.DefaultPassConfig.this.checkTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass",com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.inlineFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseVariableDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.collapseVariableDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameProperties",com.google.javascript.jscomp.DefaultPassConfig.this.renameProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closurePrimitives",com.google.javascript.jscomp.DefaultPassConfig.this.closurePrimitives);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasStrings",com.google.javascript.jscomp.DefaultPassConfig.this.aliasStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.specializeInitialModule",com.google.javascript.jscomp.DefaultPassConfig.this.specializeInitialModule);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.rewriteFunctionExpressions",com.google.javascript.jscomp.DefaultPassConfig.this.rewriteFunctionExpressions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.rescopeGlobalSymbols",com.google.javascript.jscomp.DefaultPassConfig.this.rescopeGlobalSymbols);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass2",com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.gatherRawExports",com.google.javascript.jscomp.DefaultPassConfig.this.gatherRawExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameVars",com.google.javascript.jscomp.DefaultPassConfig.this.renameVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.cssNames",com.google.javascript.jscomp.DefaultPassConfig.this.cssNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasExternals",com.google.javascript.jscomp.DefaultPassConfig.this.aliasExternals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.processDefines",com.google.javascript.jscomp.DefaultPassConfig.this.processDefines);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasKeywords",com.google.javascript.jscomp.DefaultPassConfig.this.aliasKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypesBuilder",com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypesBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("passes",passes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.nameMappedAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.nameMappedAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.createSyntheticBlocks",com.google.javascript.jscomp.DefaultPassConfig.this.createSyntheticBlocks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exportTestFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.exportTestFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkConsts",com.google.javascript.jscomp.DefaultPassConfig.this.checkConsts);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkProvides",com.google.javascript.jscomp.DefaultPassConfig.this.checkProvides);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exploitAssign",com.google.javascript.jscomp.DefaultPassConfig.this.exploitAssign);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckVars",com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.chainCalls",com.google.javascript.jscomp.DefaultPassConfig.this.chainCalls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.resolveTypes",com.google.javascript.jscomp.DefaultPassConfig.this.resolveTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME",com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkRequires",com.google.javascript.jscomp.DefaultPassConfig.this.checkRequires);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR",com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markPureFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.markPureFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.garbageCollectChecks",com.google.javascript.jscomp.DefaultPassConfig.this.garbageCollectChecks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureReplaceGetCssName",com.google.javascript.jscomp.DefaultPassConfig.this.closureReplaceGetCssName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedPrototypeProperties",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedPrototypeProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.jqueryAliases",com.google.javascript.jscomp.DefaultPassConfig.this.jqueryAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME",com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.coalesceVariableNames",com.google.javascript.jscomp.DefaultPassConfig.this.coalesceVariableNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceIdGenerators",com.google.javascript.jscomp.DefaultPassConfig.this.replaceIdGenerators);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectionEnds();
            }
            if (runtimeAngelicValue)
                passes.add(smartNamePass2);

        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[613607] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852851068
GPR[SSUN]-1659852851068
-240150603
GPR[SPVATF]-1659852851355
GPR[EPVATF]-1659852852328
GPR[SPS]-1659852852328
[615857] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(65).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.flowSensitiveInlineVariables",com.google.javascript.jscomp.DefaultPassConfig.this.flowSensitiveInlineVariables);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineVariables",com.google.javascript.jscomp.DefaultPassConfig.this.inlineVariables);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkSideEffects",com.google.javascript.jscomp.DefaultPassConfig.this.checkSideEffects);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inferTypes",com.google.javascript.jscomp.DefaultPassConfig.this.inferTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineConstants",com.google.javascript.jscomp.DefaultPassConfig.this.inlineConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPreprocess",com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPreprocess);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR",com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.devirtualizePrototypeMethods",com.google.javascript.jscomp.DefaultPassConfig.this.devirtualizePrototypeMethods);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineSimpleMethods",com.google.javascript.jscomp.DefaultPassConfig.this.inlineSimpleMethods);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN",com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.optimizeArgumentsArray",com.google.javascript.jscomp.DefaultPassConfig.this.optimizeArgumentsArray);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkControlFlow",com.google.javascript.jscomp.DefaultPassConfig.this.checkControlFlow);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR",com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckAst",com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckAst);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.computeFunctionNames",com.google.javascript.jscomp.DefaultPassConfig.this.computeFunctionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.collapseAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markNoSideEffectCalls",com.google.javascript.jscomp.DefaultPassConfig.this.markNoSideEffectCalls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inferJsDocInfo",com.google.javascript.jscomp.DefaultPassConfig.this.inferJsDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.peepholeOptimizations",com.google.javascript.jscomp.DefaultPassConfig.this.peepholeOptimizations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.variableMap",com.google.javascript.jscomp.DefaultPassConfig.this.variableMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.anonymousFunctionNameMap",com.google.javascript.jscomp.DefaultPassConfig.this.anonymousFunctionNameMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkGlobalNames",com.google.javascript.jscomp.DefaultPassConfig.this.checkGlobalNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkVariableReferences",com.google.javascript.jscomp.DefaultPassConfig.this.checkVariableReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnreachableCode",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnreachableCode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.optimizeCallsAndRemoveUnusedVars",com.google.javascript.jscomp.DefaultPassConfig.this.optimizeCallsAndRemoveUnusedVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.instrumentFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.instrumentFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exportedNames",com.google.javascript.jscomp.DefaultPassConfig.this.exportedNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markUnnormalized",com.google.javascript.jscomp.DefaultPassConfig.this.markUnnormalized);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.denormalize",com.google.javascript.jscomp.DefaultPassConfig.this.denormalize);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.ambiguateProperties",com.google.javascript.jscomp.DefaultPassConfig.this.ambiguateProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.invertContextualRenaming",com.google.javascript.jscomp.DefaultPassConfig.this.invertContextualRenaming);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkVars",com.google.javascript.jscomp.DefaultPassConfig.this.checkVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleIdGenerator",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleIdGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.disambiguateProperties",com.google.javascript.jscomp.DefaultPassConfig.this.disambiguateProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.suspiciousCode",com.google.javascript.jscomp.DefaultPassConfig.this.suspiciousCode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.processTweaks",com.google.javascript.jscomp.DefaultPassConfig.this.processTweaks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.convertToDottedProperties",com.google.javascript.jscomp.DefaultPassConfig.this.convertToDottedProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.latePeepholeOptimizations",com.google.javascript.jscomp.DefaultPassConfig.this.latePeepholeOptimizations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPostprocess",com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPostprocess);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR",com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE",com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkRegExp",com.google.javascript.jscomp.DefaultPassConfig.this.checkRegExp);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.namespaceForChecks",com.google.javascript.jscomp.DefaultPassConfig.this.namespaceForChecks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR",com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkControlStructures",com.google.javascript.jscomp.DefaultPassConfig.this.checkControlStructures);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.runtimeTypeCheck",com.google.javascript.jscomp.DefaultPassConfig.this.runtimeTypeCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.minimizeExitPoints",com.google.javascript.jscomp.DefaultPassConfig.this.minimizeExitPoints);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.stripSideEffectProtection",com.google.javascript.jscomp.DefaultPassConfig.this.stripSideEffectProtection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.idGeneratorMap",com.google.javascript.jscomp.DefaultPassConfig.this.idGeneratorMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseProperties",com.google.javascript.jscomp.DefaultPassConfig.this.collapseProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.moveFunctionDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.moveFunctionDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureOptimizePrimitives",com.google.javascript.jscomp.DefaultPassConfig.this.closureOptimizePrimitives);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.nameUnmappedAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.nameUnmappedAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceMessages",com.google.javascript.jscomp.DefaultPassConfig.this.replaceMessages);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.functionNames",com.google.javascript.jscomp.DefaultPassConfig.this.functionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleMethodMotion",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleMethodMotion);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureCheckGetCssName",com.google.javascript.jscomp.DefaultPassConfig.this.closureCheckGetCssName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.propertyMap",com.google.javascript.jscomp.DefaultPassConfig.this.propertyMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.preprocessorSymbolTable",com.google.javascript.jscomp.DefaultPassConfig.this.preprocessorSymbolTable);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedVars",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleCodeMotion",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleCodeMotion);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.extractPrototypeMemberDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.extractPrototypeMemberDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE",com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.stringMap",com.google.javascript.jscomp.DefaultPassConfig.this.stringMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureGoogScopeAliases",com.google.javascript.jscomp.DefaultPassConfig.this.closureGoogScopeAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedClassProperties",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedClassProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.generateExports",com.google.javascript.jscomp.DefaultPassConfig.this.generateExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkAccessControls",com.google.javascript.jscomp.DefaultPassConfig.this.checkAccessControls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseObjectLiterals",com.google.javascript.jscomp.DefaultPassConfig.this.collapseObjectLiterals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceStrings",com.google.javascript.jscomp.DefaultPassConfig.this.replaceStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkStrictMode",com.google.javascript.jscomp.DefaultPassConfig.this.checkStrictMode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceGraph",com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureCodeRemoval",com.google.javascript.jscomp.DefaultPassConfig.this.closureCodeRemoval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypes",com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceReport",com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceReport);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameLabels",com.google.javascript.jscomp.DefaultPassConfig.this.renameLabels);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.deadAssignmentsElimination",com.google.javascript.jscomp.DefaultPassConfig.this.deadAssignmentsElimination);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.groupVariableDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.groupVariableDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.ignoreCajaProperties",com.google.javascript.jscomp.DefaultPassConfig.this.ignoreCajaProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkTypes",com.google.javascript.jscomp.DefaultPassConfig.this.checkTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass",com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.inlineFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseVariableDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.collapseVariableDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameProperties",com.google.javascript.jscomp.DefaultPassConfig.this.renameProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closurePrimitives",com.google.javascript.jscomp.DefaultPassConfig.this.closurePrimitives);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasStrings",com.google.javascript.jscomp.DefaultPassConfig.this.aliasStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.specializeInitialModule",com.google.javascript.jscomp.DefaultPassConfig.this.specializeInitialModule);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.rewriteFunctionExpressions",com.google.javascript.jscomp.DefaultPassConfig.this.rewriteFunctionExpressions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.rescopeGlobalSymbols",com.google.javascript.jscomp.DefaultPassConfig.this.rescopeGlobalSymbols);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass2",com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.gatherRawExports",com.google.javascript.jscomp.DefaultPassConfig.this.gatherRawExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameVars",com.google.javascript.jscomp.DefaultPassConfig.this.renameVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.cssNames",com.google.javascript.jscomp.DefaultPassConfig.this.cssNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasExternals",com.google.javascript.jscomp.DefaultPassConfig.this.aliasExternals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.processDefines",com.google.javascript.jscomp.DefaultPassConfig.this.processDefines);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasKeywords",com.google.javascript.jscomp.DefaultPassConfig.this.aliasKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypesBuilder",com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypesBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("passes",passes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.nameMappedAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.nameMappedAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.createSyntheticBlocks",com.google.javascript.jscomp.DefaultPassConfig.this.createSyntheticBlocks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exportTestFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.exportTestFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkConsts",com.google.javascript.jscomp.DefaultPassConfig.this.checkConsts);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkProvides",com.google.javascript.jscomp.DefaultPassConfig.this.checkProvides);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exploitAssign",com.google.javascript.jscomp.DefaultPassConfig.this.exploitAssign);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckVars",com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.chainCalls",com.google.javascript.jscomp.DefaultPassConfig.this.chainCalls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.resolveTypes",com.google.javascript.jscomp.DefaultPassConfig.this.resolveTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME",com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkRequires",com.google.javascript.jscomp.DefaultPassConfig.this.checkRequires);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR",com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markPureFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.markPureFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.garbageCollectChecks",com.google.javascript.jscomp.DefaultPassConfig.this.garbageCollectChecks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureReplaceGetCssName",com.google.javascript.jscomp.DefaultPassConfig.this.closureReplaceGetCssName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedPrototypeProperties",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedPrototypeProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.jqueryAliases",com.google.javascript.jscomp.DefaultPassConfig.this.jqueryAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME",com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.coalesceVariableNames",com.google.javascript.jscomp.DefaultPassConfig.this.coalesceVariableNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceIdGenerators",com.google.javascript.jscomp.DefaultPassConfig.this.replaceIdGenerators);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(65).collectionEnds();
            }
            if (runtimeAngelicValue)
                passes.add(smartNamePass);

        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[615858] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852853319
GPR[SSUN]-1659852853319
-240150603
GPR[SPVATF]-1659852853634
GPR[EPVATF]-1659852854657
GPR[SPS]-1659852854657
[618179] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(66).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.flowSensitiveInlineVariables",com.google.javascript.jscomp.DefaultPassConfig.this.flowSensitiveInlineVariables);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineVariables",com.google.javascript.jscomp.DefaultPassConfig.this.inlineVariables);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkSideEffects",com.google.javascript.jscomp.DefaultPassConfig.this.checkSideEffects);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inferTypes",com.google.javascript.jscomp.DefaultPassConfig.this.inferTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineConstants",com.google.javascript.jscomp.DefaultPassConfig.this.inlineConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPreprocess",com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPreprocess);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR",com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.devirtualizePrototypeMethods",com.google.javascript.jscomp.DefaultPassConfig.this.devirtualizePrototypeMethods);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineSimpleMethods",com.google.javascript.jscomp.DefaultPassConfig.this.inlineSimpleMethods);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN",com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.optimizeArgumentsArray",com.google.javascript.jscomp.DefaultPassConfig.this.optimizeArgumentsArray);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkControlFlow",com.google.javascript.jscomp.DefaultPassConfig.this.checkControlFlow);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR",com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckAst",com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckAst);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.computeFunctionNames",com.google.javascript.jscomp.DefaultPassConfig.this.computeFunctionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.collapseAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markNoSideEffectCalls",com.google.javascript.jscomp.DefaultPassConfig.this.markNoSideEffectCalls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inferJsDocInfo",com.google.javascript.jscomp.DefaultPassConfig.this.inferJsDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.peepholeOptimizations",com.google.javascript.jscomp.DefaultPassConfig.this.peepholeOptimizations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.variableMap",com.google.javascript.jscomp.DefaultPassConfig.this.variableMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.anonymousFunctionNameMap",com.google.javascript.jscomp.DefaultPassConfig.this.anonymousFunctionNameMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkGlobalNames",com.google.javascript.jscomp.DefaultPassConfig.this.checkGlobalNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkVariableReferences",com.google.javascript.jscomp.DefaultPassConfig.this.checkVariableReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnreachableCode",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnreachableCode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.optimizeCallsAndRemoveUnusedVars",com.google.javascript.jscomp.DefaultPassConfig.this.optimizeCallsAndRemoveUnusedVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.instrumentFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.instrumentFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exportedNames",com.google.javascript.jscomp.DefaultPassConfig.this.exportedNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markUnnormalized",com.google.javascript.jscomp.DefaultPassConfig.this.markUnnormalized);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.denormalize",com.google.javascript.jscomp.DefaultPassConfig.this.denormalize);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.ambiguateProperties",com.google.javascript.jscomp.DefaultPassConfig.this.ambiguateProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.invertContextualRenaming",com.google.javascript.jscomp.DefaultPassConfig.this.invertContextualRenaming);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkVars",com.google.javascript.jscomp.DefaultPassConfig.this.checkVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleIdGenerator",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleIdGenerator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.disambiguateProperties",com.google.javascript.jscomp.DefaultPassConfig.this.disambiguateProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.suspiciousCode",com.google.javascript.jscomp.DefaultPassConfig.this.suspiciousCode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.processTweaks",com.google.javascript.jscomp.DefaultPassConfig.this.processTweaks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.convertToDottedProperties",com.google.javascript.jscomp.DefaultPassConfig.this.convertToDottedProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.latePeepholeOptimizations",com.google.javascript.jscomp.DefaultPassConfig.this.latePeepholeOptimizations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPostprocess",com.google.javascript.jscomp.DefaultPassConfig.this.objectPropertyStringPostprocess);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR",com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE",com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkRegExp",com.google.javascript.jscomp.DefaultPassConfig.this.checkRegExp);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.namespaceForChecks",com.google.javascript.jscomp.DefaultPassConfig.this.namespaceForChecks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR",com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkControlStructures",com.google.javascript.jscomp.DefaultPassConfig.this.checkControlStructures);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.runtimeTypeCheck",com.google.javascript.jscomp.DefaultPassConfig.this.runtimeTypeCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.minimizeExitPoints",com.google.javascript.jscomp.DefaultPassConfig.this.minimizeExitPoints);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.stripSideEffectProtection",com.google.javascript.jscomp.DefaultPassConfig.this.stripSideEffectProtection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.idGeneratorMap",com.google.javascript.jscomp.DefaultPassConfig.this.idGeneratorMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseProperties",com.google.javascript.jscomp.DefaultPassConfig.this.collapseProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.moveFunctionDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.moveFunctionDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureOptimizePrimitives",com.google.javascript.jscomp.DefaultPassConfig.this.closureOptimizePrimitives);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.nameUnmappedAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.nameUnmappedAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceMessages",com.google.javascript.jscomp.DefaultPassConfig.this.replaceMessages);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.functionNames",com.google.javascript.jscomp.DefaultPassConfig.this.functionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleMethodMotion",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleMethodMotion);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureCheckGetCssName",com.google.javascript.jscomp.DefaultPassConfig.this.closureCheckGetCssName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.propertyMap",com.google.javascript.jscomp.DefaultPassConfig.this.propertyMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.preprocessorSymbolTable",com.google.javascript.jscomp.DefaultPassConfig.this.preprocessorSymbolTable);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedVars",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleCodeMotion",com.google.javascript.jscomp.DefaultPassConfig.this.crossModuleCodeMotion);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.extractPrototypeMemberDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.extractPrototypeMemberDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE",com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.stringMap",com.google.javascript.jscomp.DefaultPassConfig.this.stringMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureGoogScopeAliases",com.google.javascript.jscomp.DefaultPassConfig.this.closureGoogScopeAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedClassProperties",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedClassProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.generateExports",com.google.javascript.jscomp.DefaultPassConfig.this.generateExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkAccessControls",com.google.javascript.jscomp.DefaultPassConfig.this.checkAccessControls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseObjectLiterals",com.google.javascript.jscomp.DefaultPassConfig.this.collapseObjectLiterals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceStrings",com.google.javascript.jscomp.DefaultPassConfig.this.replaceStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkStrictMode",com.google.javascript.jscomp.DefaultPassConfig.this.checkStrictMode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceGraph",com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureCodeRemoval",com.google.javascript.jscomp.DefaultPassConfig.this.closureCodeRemoval);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypes",com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceReport",com.google.javascript.jscomp.DefaultPassConfig.this.printNameReferenceReport);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameLabels",com.google.javascript.jscomp.DefaultPassConfig.this.renameLabels);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.deadAssignmentsElimination",com.google.javascript.jscomp.DefaultPassConfig.this.deadAssignmentsElimination);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.groupVariableDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.groupVariableDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.ignoreCajaProperties",com.google.javascript.jscomp.DefaultPassConfig.this.ignoreCajaProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkTypes",com.google.javascript.jscomp.DefaultPassConfig.this.checkTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass",com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.inlineFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.inlineFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.collapseVariableDeclarations",com.google.javascript.jscomp.DefaultPassConfig.this.collapseVariableDeclarations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameProperties",com.google.javascript.jscomp.DefaultPassConfig.this.renameProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closurePrimitives",com.google.javascript.jscomp.DefaultPassConfig.this.closurePrimitives);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasStrings",com.google.javascript.jscomp.DefaultPassConfig.this.aliasStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.specializeInitialModule",com.google.javascript.jscomp.DefaultPassConfig.this.specializeInitialModule);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.rewriteFunctionExpressions",com.google.javascript.jscomp.DefaultPassConfig.this.rewriteFunctionExpressions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.rescopeGlobalSymbols",com.google.javascript.jscomp.DefaultPassConfig.this.rescopeGlobalSymbols);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass2",com.google.javascript.jscomp.DefaultPassConfig.this.smartNamePass2);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.gatherRawExports",com.google.javascript.jscomp.DefaultPassConfig.this.gatherRawExports);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.renameVars",com.google.javascript.jscomp.DefaultPassConfig.this.renameVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.cssNames",com.google.javascript.jscomp.DefaultPassConfig.this.cssNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasExternals",com.google.javascript.jscomp.DefaultPassConfig.this.aliasExternals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.processDefines",com.google.javascript.jscomp.DefaultPassConfig.this.processDefines);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.aliasKeywords",com.google.javascript.jscomp.DefaultPassConfig.this.aliasKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypesBuilder",com.google.javascript.jscomp.DefaultPassConfig.this.tightenTypesBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("passes",passes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.nameMappedAnonymousFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.nameMappedAnonymousFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.createSyntheticBlocks",com.google.javascript.jscomp.DefaultPassConfig.this.createSyntheticBlocks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exportTestFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.exportTestFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkConsts",com.google.javascript.jscomp.DefaultPassConfig.this.checkConsts);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkProvides",com.google.javascript.jscomp.DefaultPassConfig.this.checkProvides);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.exploitAssign",com.google.javascript.jscomp.DefaultPassConfig.this.exploitAssign);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckVars",com.google.javascript.jscomp.DefaultPassConfig.this.sanityCheckVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.chainCalls",com.google.javascript.jscomp.DefaultPassConfig.this.chainCalls);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.resolveTypes",com.google.javascript.jscomp.DefaultPassConfig.this.resolveTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME",com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.checkRequires",com.google.javascript.jscomp.DefaultPassConfig.this.checkRequires);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR",com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.markPureFunctions",com.google.javascript.jscomp.DefaultPassConfig.this.markPureFunctions);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.garbageCollectChecks",com.google.javascript.jscomp.DefaultPassConfig.this.garbageCollectChecks);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.closureReplaceGetCssName",com.google.javascript.jscomp.DefaultPassConfig.this.closureReplaceGetCssName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedPrototypeProperties",com.google.javascript.jscomp.DefaultPassConfig.this.removeUnusedPrototypeProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.jqueryAliases",com.google.javascript.jscomp.DefaultPassConfig.this.jqueryAliases);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME",com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.coalesceVariableNames",com.google.javascript.jscomp.DefaultPassConfig.this.coalesceVariableNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectInput("com.google.javascript.jscomp.DefaultPassConfig.this.replaceIdGenerators",com.google.javascript.jscomp.DefaultPassConfig.this.replaceIdGenerators);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(66).collectionEnds();
            }
            if (runtimeAngelicValue)
                passes.addAll(getCodeRemovingPasses());

            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[618179] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852855640
GPR[SSUN]-1659852855640
-240150603
GPR[ESUN]-1659852855931
GPR[SSUN]-1659852855931
-240150603
GPR[SPVATF]-1659852856219
GPR[EPVATF]-1659852858068
GPR[SPS]-1659852858068
[621601] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(67).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("na",na);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("reportPath",reportPath);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(67).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            na.removeUnreferenced();

                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[621602] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852859063
GPR[SSUN]-1659852859063
-240150603
GPR[SPVATF]-1659852859353
GPR[EPVATF]-1659852860232
GPR[SPS]-1659852860232
[623690] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(68).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("na",na);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("reportPath",reportPath);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(68).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[623691] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659852861152
GPR[EPVATF]-1659852862002
GPR[SPS]-1659852862002
[625447] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = com.google.javascript.jscomp.PassConfig.options.smartNameRemoval;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(69).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("na",na);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("reportPath",reportPath);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(69).collectionEnds();
                    }
                    if (runtimeAngelicValue) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[625448] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852862909
GPR[SSUN]-1659852862909
-240150603
GPR[SPVATF]-1659852863195
GPR[EPVATF]-1659852864059
GPR[SPS]-1659852864059
[627500] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(70).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectInput("na",na);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectInput("reportPath",reportPath);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectInput("reportPath != null",reportPath != null);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(70).collectionEnds();
                    }
                    if (runtimeAngelicValue) if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[627500] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659852864962
GPR[EPVATF]-1659852865818
GPR[SPS]-1659852865818
[629267] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = reportPath != null;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(71).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("na",na);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("reportPath",reportPath);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("reportPath != null",reportPath != null);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectionEnds();
                    }
                    if (runtimeAngelicValue) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[629267] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852866728
GPR[SSUN]-1659852866728
-240150603
GPR[ESUN]-1659852867015
GPR[SSUN]-1659852867015
-240150603
GPR[SPVATF]-1659852867303
GPR[EPVATF]-1659852868204
GPR[SPS]-1659852868204
[631659] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class DefaultPassConfig extends com.google.javascript.jscomp.PassConfig {
    private static final java.lang.String COMPILED_CONSTANT_NAME = "COMPILED";

    private static final java.lang.String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";

    static final com.google.javascript.jscomp.DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK = com.google.javascript.jscomp.DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", "TightenTypes requires type checking. Please use --check_types.");

    static final com.google.javascript.jscomp.DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR = com.google.javascript.jscomp.DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR", "Rename prototypes and inline variables cannot be used together");

    static final com.google.javascript.jscomp.DiagnosticType REPORT_PATH_IO_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR", "Error writing compiler report to {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_PROP_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE", "Input property map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType INPUT_MAP_VAR_PARSE = com.google.javascript.jscomp.DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE", "Input variable map parse error: {0}");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_GRAPH_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR", "Error \"{1}\" writing name reference graph to \"{0}\".");

    private static final com.google.javascript.jscomp.DiagnosticType NAME_REF_REPORT_FILE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR", "Error \"{1}\" writing name reference report to \"{0}\".");

    private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN = java.util.regex.Pattern.compile("^[a-zA-Z0-9$_]+$");

    private com.google.javascript.jscomp.GlobalNamespace namespaceForChecks = null;

    private com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = null;

    private com.google.javascript.jscomp.TightenTypes tightenTypes = null;

    private java.util.Set<java.lang.String> exportedNames = null;

    private com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator = new com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator();

    private java.util.Map<java.lang.String, java.lang.Integer> cssNames = null;

    private com.google.javascript.jscomp.VariableMap variableMap = null;

    private com.google.javascript.jscomp.VariableMap propertyMap = null;

    private com.google.javascript.jscomp.VariableMap anonymousFunctionNameMap = null;

    private com.google.javascript.jscomp.FunctionNames functionNames = null;

    private com.google.javascript.jscomp.VariableMap stringMap = null;

    private java.lang.String idGeneratorMap = null;

    public DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions options) {
        super(options);
    }

    @java.lang.Override
    com.google.javascript.jscomp.PassConfig.State getIntermediateState() {
        return new com.google.javascript.jscomp.PassConfig.State(cssNames == null ? null : com.google.common.collect.Maps.newHashMap(cssNames), exportedNames == null ? null : java.util.Collections.unmodifiableSet(exportedNames), crossModuleIdGenerator, variableMap, propertyMap, anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);
    }

    @java.lang.Override
    void setIntermediateState(com.google.javascript.jscomp.PassConfig.State state) {
        this.cssNames = (state.cssNames == null) ? null : com.google.common.collect.Maps.newHashMap(state.cssNames);
        this.exportedNames = (state.exportedNames == null) ? null : com.google.common.collect.Sets.newHashSet(state.exportedNames);
        this.crossModuleIdGenerator = state.crossModuleIdGenerator;
        this.variableMap = state.variableMap;
        this.propertyMap = state.propertyMap;
        this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
        this.stringMap = state.stringMap;
        this.functionNames = state.functionNames;
        this.idGeneratorMap = state.idGeneratorMap;
    }

    com.google.javascript.jscomp.GlobalNamespace getGlobalNamespace() {
        return namespaceForChecks;
    }

    com.google.javascript.jscomp.PreprocessorSymbolTable getPreprocessorSymbolTable() {
        return preprocessorSymbolTable;
    }

    void maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.PassConfig.options.ideMode) {
            com.google.javascript.rhino.Node root = compiler.getRoot();
            if ((preprocessorSymbolTable == null) || (preprocessorSymbolTable.getRootNode() != root)) {
                preprocessorSymbolTable = new com.google.javascript.jscomp.PreprocessorSymbolTable(root);
            }
        }
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getChecks() {
        java.util.List<com.google.javascript.jscomp.PassFactory> checks = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureGoogScopeAliases);
        }
        if (com.google.javascript.jscomp.PassConfig.options.nameAnonymousFunctionsOnly) {
            if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
                checks.add(nameMappedAnonymousFunctions);
            } else if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
                checks.add(nameUnmappedAnonymousFunctions);
            }
            return checks;
        }
        checks.add(checkSideEffects);
        if ((com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode || options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
            checks.add(suspiciousCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkControlStructures || options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT)) {
            checks.add(checkControlStructures);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkRequires.isOn()) {
            checks.add(checkRequires);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkProvides.isOn()) {
            checks.add(checkProvides);
        }
        if (com.google.javascript.jscomp.PassConfig.options.generateExports) {
            checks.add(generateExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.exportTestFunctions) {
            checks.add(exportTestFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closurePrimitives.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.jqueryPass) {
            checks.add(jqueryAliases.makeOneTimePass());
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel.isOn()) {
            checks.add(closureCheckGetCssName);
        }
        if (com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker != null) {
            checks.add(createSyntheticBlocks);
        }
        checks.add(checkVars);
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            checks.add(checkRegExp);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck.isOn()) {
            checks.add(checkVariableReferences);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            checks.add(objectPropertyStringPreprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes || com.google.javascript.jscomp.PassConfig.options.inferTypes) {
            checks.add(resolveTypes.makeOneTimePass());
            checks.add(inferTypes.makeOneTimePass());
            if (com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                checks.add(checkTypes.makeOneTimePass());
            } else {
                checks.add(inferJsDocInfo.makeOneTimePass());
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn() || (com.google.javascript.jscomp.PassConfig.options.checkTypes && com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn())) {
            checks.add(checkControlFlow);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkTypes && (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS) || options.enables(com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY))) {
            checks.add(checkAccessControls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel.isOn()) {
            checks.add(checkGlobalNames);
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT) || com.google.javascript.jscomp.PassConfig.options.checkCaja) {
            checks.add(checkStrictMode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            checks.add(closureReplaceGetCssName);
        }
        checks.add(com.google.javascript.jscomp.PassConfig.options.messageBundle != null ? replaceMessages : com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("replaceMessages"));
        if (options.getTweakProcessing().isOn()) {
            checks.add(processTweaks);
        }
        checks.add(processDefines);
        if ((com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) || com.google.javascript.jscomp.PassConfig.options.recordFunctionInformation) {
            checks.add(computeFunctionNames);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath.isEmpty())) {
            checks.add(printNameReferenceGraph);
        }
        if ((com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath != null) && (!com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath.isEmpty())) {
            checks.add(printNameReferenceReport);
        }
        assertAllOneTimePasses(checks);
        return checks;
    }

    @java.lang.Override
    protected java.util.List<com.google.javascript.jscomp.PassFactory> getOptimizations() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        passes.add(garbageCollectChecks);
        if (com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheck) {
            passes.add(runtimeTypeCheck);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeStandardOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.replaceIdGenerators) {
            passes.add(replaceIdGenerators);
        }
        if (com.google.javascript.jscomp.PassConfig.options.optimizeArgumentsArray) {
            passes.add(optimizeArgumentsArray);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass && (com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods || com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts)) {
            passes.add(closureCodeRemoval);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseProperties) {
            passes.add(collapseProperties);
        }
        if (!com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions.isEmpty()) {
            passes.add(replaceStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.tightenTypes) {
            passes.add(tightenTypesBuilder);
        }
        if (com.google.javascript.jscomp.PassConfig.options.disambiguateProperties) {
            passes.add(disambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.computeFunctionSideEffects) {
            passes.add(markPureFunctions);
        } else if (com.google.javascript.jscomp.PassConfig.options.markNoSideEffectCalls) {
            passes.add(markNoSideEffectCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.chainCalls) {
            passes.add(chainCalls);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(checkConsts);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ignoreCajaProperties) {
            passes.add(ignoreCajaProperties);
        }
        assertAllOneTimePasses(passes);
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval || (com.google.javascript.jscomp.PassConfig.options.reportPath != null)) {
            passes.addAll(getCodeRemovingPasses());
            passes.add(smartNamePass);
        }
        if (com.google.javascript.jscomp.PassConfig.options.closurePass) {
            passes.add(closureOptimizePrimitives);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.devirtualizePrototypeMethods) {
            passes.add(devirtualizePrototypeMethods);
        }
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeMainOptimizations"));
        if (com.google.javascript.jscomp.PassConfig.options.specializeInitialModule) {
            passes.addAll(getMainOptimizationLoop());
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
                passes.add(crossModuleCodeMotion);
            }
            if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
                passes.add(crossModuleMethodMotion);
            }
            passes.add(specializeInitialModule.makeOneTimePass());
        }
        passes.addAll(getMainOptimizationLoop());
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("beforeModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleCodeMotion) {
            passes.add(crossModuleCodeMotion);
        }
        if (com.google.javascript.jscomp.PassConfig.options.crossModuleMethodMotion) {
            passes.add(crossModuleMethodMotion);
        }
        passes.add(com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass("afterModuleMotion"));
        if (com.google.javascript.jscomp.PassConfig.options.customPasses != null) {
            passes.add(getCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
        }
        if (com.google.javascript.jscomp.PassConfig.options.flowSensitiveInlineVariables) {
            passes.add(flowSensitiveInlineVariables);
            if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
                passes.add(removeUnusedVars);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
            passes.add(smartNamePass2);
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseAnonymousFunctions) {
            passes.add(collapseAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.moveFunctionDeclarations || (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null)) {
            passes.add(moveFunctionDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED) {
            passes.add(nameMappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.extractPrototypeMemberDeclarations && ((com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC))) {
            passes.add(extractPrototypeMemberDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.ambiguateProperties && (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED)) {
            passes.add(ambiguateProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.propertyRenaming != com.google.javascript.jscomp.PropertyRenamingPolicy.OFF) {
            passes.add(renameProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.reserveRawExports) {
            passes.add(gatherRawExports);
        }
        if (com.google.javascript.jscomp.PassConfig.options.convertToDottedProperties) {
            passes.add(convertToDottedProperties);
        }
        if (com.google.javascript.jscomp.PassConfig.options.rewriteFunctionExpressions) {
            passes.add(rewriteFunctionExpressions);
        }
        if ((!com.google.javascript.jscomp.PassConfig.options.aliasableStrings.isEmpty()) || com.google.javascript.jscomp.PassConfig.options.aliasAllStrings) {
            passes.add(aliasStrings);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasExternals) {
            passes.add(aliasExternals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.aliasKeywords) {
            passes.add(aliasKeywords);
        }
        passes.add(markUnnormalized);
        if (com.google.javascript.jscomp.PassConfig.options.coalesceVariableNames) {
            passes.add(coalesceVariableNames);
            if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
                passes.add(peepholeOptimizations);
            }
        }
        if (com.google.javascript.jscomp.PassConfig.options.collapseVariableDeclarations) {
            passes.add(exploitAssign);
            passes.add(collapseVariableDeclarations);
        }
        passes.add(denormalize);
        if (com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate != null) {
            passes.add(instrumentFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.ALL) {
            passes.add(invertContextualRenaming);
        }
        if (com.google.javascript.jscomp.PassConfig.options.variableRenaming != com.google.javascript.jscomp.VariableRenamingPolicy.OFF) {
            passes.add(renameVars);
        }
        if (com.google.javascript.jscomp.PassConfig.options.groupVariableDeclarations) {
            passes.add(groupVariableDeclarations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.processObjectPropertyString) {
            passes.add(objectPropertyStringPostprocess);
        }
        if (com.google.javascript.jscomp.PassConfig.options.labelRenaming) {
            passes.add(renameLabels);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(latePeepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming == com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.UNMAPPED) {
            passes.add(nameUnmappedAnonymousFunctions);
        }
        if (com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace != null) {
            if (!com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN.matcher(com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace).matches()) {
                throw new java.lang.IllegalArgumentException("Illegal character in renamePrefixNamespace name: " + com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
            }
            passes.add(rescopeGlobalSymbols);
        }
        passes.add(stripSideEffectProtection);
        passes.add(sanityCheckAst);
        passes.add(sanityCheckVars);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getMainOptimizationLoop() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.inlineGetters) {
            passes.add(inlineSimpleMethods);
        }
        passes.addAll(getCodeRemovingPasses());
        if (com.google.javascript.jscomp.PassConfig.options.inlineFunctions || com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions) {
            passes.add(inlineFunctions);
        }
        boolean runOptimizeCalls = (com.google.javascript.jscomp.PassConfig.options.optimizeCalls || com.google.javascript.jscomp.PassConfig.options.optimizeParameters) || com.google.javascript.jscomp.PassConfig.options.optimizeReturns;
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedVars || com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars) {
            if (com.google.javascript.jscomp.PassConfig.options.deadAssignmentElimination) {
                passes.add(deadAssignmentsElimination);
            }
            if (!runOptimizeCalls) {
                passes.add(removeUnusedVars);
            }
        }
        if (runOptimizeCalls) {
            passes.add(optimizeCallsAndRemoveUnusedVars);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    private java.util.List<com.google.javascript.jscomp.PassFactory> getCodeRemovingPasses() {
        java.util.List<com.google.javascript.jscomp.PassFactory> passes = com.google.common.collect.Lists.newArrayList();
        if (com.google.javascript.jscomp.PassConfig.options.collapseObjectLiterals && (!isInliningForbidden())) {
            passes.add(collapseObjectLiterals);
        }
        if (com.google.javascript.jscomp.PassConfig.options.inlineVariables || com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
            passes.add(inlineVariables);
        } else if (com.google.javascript.jscomp.PassConfig.options.inlineConstantVars) {
            passes.add(inlineConstants);
        }
        if (com.google.javascript.jscomp.PassConfig.options.foldConstants) {
            passes.add(minimizeExitPoints);
            passes.add(peepholeOptimizations);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeDeadCode) {
            passes.add(removeUnreachableCode);
        }
        if (com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypeProperties) {
            passes.add(removeUnusedPrototypeProperties);
            passes.add(removeUnusedClassProperties);
        }
        assertAllLoopablePasses(passes);
        return passes;
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkSideEffects = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkSideEffects", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean protectHiddenSideEffects = com.google.javascript.jscomp.PassConfig.options.protectHiddenSideEffects && (!com.google.javascript.jscomp.PassConfig.options.ideMode);
            return new com.google.javascript.jscomp.CheckSideEffects(compiler, com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode ? com.google.javascript.jscomp.CheckLevel.WARNING : com.google.javascript.jscomp.CheckLevel.OFF, protectHiddenSideEffects);
        }
    };

    final com.google.javascript.jscomp.PassFactory stripSideEffectProtection = new com.google.javascript.jscomp.PassFactory("stripSideEffectProtection", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckSideEffects.StripProtection(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory suspiciousCode = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("suspiciousCode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> sharedCallbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkSuspiciousCode) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckAccidentalSemicolon(com.google.javascript.jscomp.CheckLevel.WARNING));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckGlobalThis(compiler));
            }
            if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
                sharedCallbacks.add(new com.google.javascript.jscomp.CheckDebuggerStatement(compiler));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, sharedCallbacks);
        }
    };

    private void assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(pass.isOneTimePass());
        }
    }

    private void assertAllLoopablePasses(java.util.List<com.google.javascript.jscomp.PassFactory> passes) {
        for (com.google.javascript.jscomp.PassFactory pass : passes) {
            com.google.common.base.Preconditions.checkState(!pass.isOneTimePass());
        }
    }

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlStructures = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlStructures", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ControlStructureCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkRequires = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkRequires", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckRequiresForConstructors(compiler, com.google.javascript.jscomp.PassConfig.options.checkRequires);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkProvides = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkProvides", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckProvides(compiler, com.google.javascript.jscomp.PassConfig.options.checkProvides);
        }
    };

    private static final com.google.javascript.jscomp.DiagnosticType GENERATE_EXPORTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_GENERATE_EXPORTS_ERROR", "Exports can only be generated if export symbol/property " + "functions are set.");

    final com.google.javascript.jscomp.PassFactory generateExports = new com.google.javascript.jscomp.PassFactory("generateExports", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if ((convention.getExportSymbolFunction() != null) && (convention.getExportPropertyFunction() != null)) {
                return new com.google.javascript.jscomp.GenerateExports(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory exportTestFunctions = new com.google.javascript.jscomp.PassFactory("exportTestFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
            if (convention.getExportSymbolFunction() != null) {
                return new com.google.javascript.jscomp.ExportTestFunctions(compiler, convention.getExportSymbolFunction(), convention.getExportPropertyFunction());
            } else {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory gatherRawExports = new com.google.javascript.jscomp.PassFactory("gatherRawExports", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.GatherRawExports pass = new com.google.javascript.jscomp.GatherRawExports(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    if (exportedNames == null) {
                        exportedNames = com.google.common.collect.Sets.newHashSet();
                    }
                    exportedNames.addAll(pass.getExportedVariableNames());
                }
            };
        }
    };

    @java.lang.SuppressWarnings("deprecation")
    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closurePrimitives = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processProvidesAndRequires", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            final com.google.javascript.jscomp.ProcessClosurePrimitives pass = new com.google.javascript.jscomp.ProcessClosurePrimitives(compiler, preprocessorSymbolTable, com.google.javascript.jscomp.PassConfig.options.brokenClosureRequiresLevel, com.google.javascript.jscomp.PassConfig.options.rewriteNewDateGoogNow);
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    exportedNames = pass.getExportedVariableNames();
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    pass.hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory jqueryAliases = new com.google.javascript.jscomp.PassFactory("jqueryAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExpandJqueryAliases(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceMessages = new com.google.javascript.jscomp.PassFactory("replaceMessages", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ReplaceMessages(compiler, com.google.javascript.jscomp.PassConfig.options.messageBundle, true, com.google.javascript.jscomp.JsMessage.Style.getFromParams(true, false), false);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory closureGoogScopeAliases = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("processGoogScopeAliases", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            maybeInitializePreprocessorSymbolTable(compiler);
            return new com.google.javascript.jscomp.ScopedAliases(compiler, preprocessorSymbolTable, options.getAliasTransformationHandler());
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCheckGetCssName = new com.google.javascript.jscomp.PassFactory("checkMissingGetCssName", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.lang.String blacklist = com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameBlacklist;
            com.google.common.base.Preconditions.checkState((blacklist != null) && (!blacklist.isEmpty()), "Not checking use of goog.getCssName because of empty blacklist.");
            return new com.google.javascript.jscomp.CheckMissingGetCssName(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingGetCssNameLevel, blacklist);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureReplaceGetCssName = new com.google.javascript.jscomp.PassFactory("renameCssNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, java.lang.Integer> newCssNames = null;
                    if (com.google.javascript.jscomp.PassConfig.options.gatherCssNames) {
                        newCssNames = com.google.common.collect.Maps.newHashMap();
                    }
                    new com.google.javascript.jscomp.ReplaceCssNames(compiler, newCssNames).process(externs, jsRoot);
                    cssNames = newCssNames;
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory createSyntheticBlocks = new com.google.javascript.jscomp.PassFactory("createSyntheticBlocks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CreateSyntheticBlocks(compiler, com.google.javascript.jscomp.PassConfig.options.syntheticBlockStartMarker, com.google.javascript.jscomp.PassConfig.options.syntheticBlockEndMarker);
        }
    };

    final com.google.javascript.jscomp.PassFactory peepholeOptimizations = new com.google.javascript.jscomp.PassFactory("peepholeOptimizations", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = false;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.PeepholeCollectPropertyAssignments());
        }
    };

    final com.google.javascript.jscomp.PassFactory latePeepholeOptimizations = new com.google.javascript.jscomp.PassFactory("latePeepholeOptimizations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            final boolean late = true;
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.StatementFusion(), new com.google.javascript.jscomp.PeepholeRemoveDeadCode(), new com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax(late), new com.google.javascript.jscomp.PeepholeReplaceKnownMethods(late), new com.google.javascript.jscomp.PeepholeFoldConstants(late), new com.google.javascript.jscomp.ReorderConstantExpression());
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVars = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory checkRegExp = new com.google.javascript.jscomp.PassFactory("checkRegExp", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            final com.google.javascript.jscomp.CheckRegExp pass = new com.google.javascript.jscomp.CheckRegExp(compiler);
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    pass.process(externs, root);
                    compiler.setHasRegExpGlobalReferences(pass.isGlobalRegExpPropertiesUsed());
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkVariableReferences = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkVariableReferences", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VariableReferenceCheck(compiler, com.google.javascript.jscomp.PassConfig.options.aggressiveVarCheck);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPreprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPreprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPreprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory resolveTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("resolveTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DefaultPassConfig.GlobalTypeResolver(compiler);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeTypeInference(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeInference(compiler).inferTypes(scriptRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory inferJsDocInfo = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("inferJsDocInfo", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    makeInferJsDocInfo(compiler).process(externs, root);
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkTypes = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkTypes", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.common.base.Preconditions.checkNotNull(topScope);
                    com.google.common.base.Preconditions.checkNotNull(getTypedScopeCreator());
                    com.google.javascript.jscomp.TypeCheck check = makeTypeCheck(compiler);
                    check.process(externs, root);
                    compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    makeTypeCheck(compiler).check(scriptRoot, false);
                }
            };
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkControlFlow = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkControlFlow", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks = com.google.common.collect.Lists.newArrayList();
            if (com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode.isOn()) {
                callbacks.add(new com.google.javascript.jscomp.CheckUnreachableCode(compiler, com.google.javascript.jscomp.PassConfig.options.checkUnreachableCode));
            }
            if (com.google.javascript.jscomp.PassConfig.options.checkMissingReturn.isOn() && com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                callbacks.add(new com.google.javascript.jscomp.CheckMissingReturn(compiler, com.google.javascript.jscomp.PassConfig.options.checkMissingReturn));
            }
            return com.google.javascript.jscomp.DefaultPassConfig.combineChecks(compiler, callbacks);
        }
    };

    final com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory checkAccessControls = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("checkAccessControls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CheckAccessControls(compiler);
        }
    };

    private static com.google.javascript.jscomp.HotSwapCompilerPass combineChecks(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback> callbacks) {
        com.google.common.base.Preconditions.checkArgument(callbacks.size() > 0);
        com.google.javascript.jscomp.NodeTraversal.Callback[] array = callbacks.toArray(new com.google.javascript.jscomp.NodeTraversal.Callback[callbacks.size()]);
        return new com.google.javascript.jscomp.CombinedCompilerPass(compiler, array);
    }

    class GlobalTypeResolver implements com.google.javascript.jscomp.HotSwapCompilerPass {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        GlobalTypeResolver(com.google.javascript.jscomp.AbstractCompiler compiler) {
            this.compiler = compiler;
        }

        @java.lang.Override
        public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
            if (topScope == null) {
                regenerateGlobalTypedScope(compiler, root.getParent());
            } else {
                compiler.getTypeRegistry().resolveTypesInScope(topScope);
            }
        }

        @java.lang.Override
        public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
            patchGlobalTypedScope(compiler, scriptRoot);
        }
    }

    final com.google.javascript.jscomp.PassFactory checkGlobalNames = new com.google.javascript.jscomp.PassFactory("checkGlobalNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = new com.google.javascript.jscomp.GlobalNamespace(compiler, jsRoot);
                    new com.google.javascript.jscomp.CheckGlobalNames(compiler, com.google.javascript.jscomp.PassConfig.options.checkGlobalNamesLevel).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkStrictMode = new com.google.javascript.jscomp.PassFactory("checkStrictMode", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.StrictModeCheck(compiler, !com.google.javascript.jscomp.PassConfig.options.checkSymbols, !com.google.javascript.jscomp.PassConfig.options.checkCaja);
        }
    };

    final com.google.javascript.jscomp.PassFactory processTweaks = new com.google.javascript.jscomp.PassFactory("processTweaks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    new com.google.javascript.jscomp.ProcessTweaks(compiler, options.getTweakProcessing().shouldStrip(), options.getTweakReplacements()).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory processDefines = new com.google.javascript.jscomp.PassFactory("processDefines", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    java.util.Map<java.lang.String, com.google.javascript.rhino.Node> replacements = com.google.javascript.jscomp.DefaultPassConfig.getAdditionalReplacements(options);
                    replacements.putAll(options.getDefineReplacements());
                    new com.google.javascript.jscomp.ProcessDefines(compiler, replacements).injectNamespace(namespaceForChecks).process(externs, jsRoot);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory garbageCollectChecks = new com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory("garbageCollectChecks", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.HotSwapCompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.HotSwapCompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    namespaceForChecks = null;
                }

                @java.lang.Override
                public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
                    process(null, null);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory checkConsts = new com.google.javascript.jscomp.PassFactory("checkConsts", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConstCheck(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory computeFunctionNames = new com.google.javascript.jscomp.PassFactory("computeFunctionNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return functionNames = new com.google.javascript.jscomp.FunctionNames(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ignoreCajaProperties = new com.google.javascript.jscomp.PassFactory("ignoreCajaProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.IgnoreCajaProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory runtimeTypeCheck = new com.google.javascript.jscomp.PassFactory("runtimeTypeCheck", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RuntimeTypeCheck(compiler, com.google.javascript.jscomp.PassConfig.options.runtimeTypeCheckLogFunction);
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceIdGenerators = new com.google.javascript.jscomp.PassFactory("replaceIdGenerators", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceIdGenerators pass = new com.google.javascript.jscomp.ReplaceIdGenerators(compiler, com.google.javascript.jscomp.PassConfig.options.idGenerators);
                    pass.process(externs, root);
                    idGeneratorMap = pass.getIdGeneratorMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory replaceStrings = new com.google.javascript.jscomp.PassFactory("replaceStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.ReplaceStrings pass = new com.google.javascript.jscomp.ReplaceStrings(compiler, com.google.javascript.jscomp.PassConfig.options.replaceStringsPlaceholderToken, com.google.javascript.jscomp.PassConfig.options.replaceStringsFunctionDescriptions, com.google.javascript.jscomp.PassConfig.options.replaceStringsReservedStrings);
                    pass.process(externs, root);
                    stringMap = pass.getStringMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeArgumentsArray = new com.google.javascript.jscomp.PassFactory("optimizeArgumentsArray", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.OptimizeArgumentsArray(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureCodeRemoval = new com.google.javascript.jscomp.PassFactory("closureCodeRemoval", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureCodeRemoval(compiler, com.google.javascript.jscomp.PassConfig.options.removeAbstractMethods, com.google.javascript.jscomp.PassConfig.options.removeClosureAsserts);
        }
    };

    final com.google.javascript.jscomp.PassFactory closureOptimizePrimitives = new com.google.javascript.jscomp.PassFactory("closureOptimizePrimitives", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ClosureOptimizePrimitives(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory rescopeGlobalSymbols = new com.google.javascript.jscomp.PassFactory("rescopeGlobalSymbols", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RescopeGlobalSymbols(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefixNamespace);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseProperties = new com.google.javascript.jscomp.PassFactory("collapseProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseProperties(compiler, com.google.javascript.jscomp.PassConfig.options.collapsePropertiesOnExternTypes, !isInliningForbidden());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseObjectLiterals = new com.google.javascript.jscomp.PassFactory("collapseObjectLiterals", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineObjectLiterals(compiler, compiler.getUniqueNameIdSupplier());
        }
    };

    final com.google.javascript.jscomp.PassFactory tightenTypesBuilder = new com.google.javascript.jscomp.PassFactory("tightenTypes", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (!com.google.javascript.jscomp.PassConfig.options.checkTypes) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
            }
            tightenTypes = new com.google.javascript.jscomp.TightenTypes(compiler);
            return tightenTypes;
        }
    };

    final com.google.javascript.jscomp.PassFactory disambiguateProperties = new com.google.javascript.jscomp.PassFactory("disambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (tightenTypes == null) {
                return com.google.javascript.jscomp.DisambiguateProperties.forJSTypeSystem(compiler, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            } else {
                return com.google.javascript.jscomp.DisambiguateProperties.forConcreteTypeSystem(compiler, tightenTypes, com.google.javascript.jscomp.PassConfig.options.propertyInvalidationErrors);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory chainCalls = new com.google.javascript.jscomp.PassFactory("chainCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ChainCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory devirtualizePrototypeMethods = new com.google.javascript.jscomp.PassFactory("devirtualizePrototypeMethods", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DevirtualizePrototypeMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory optimizeCallsAndRemoveUnusedVars = new com.google.javascript.jscomp.PassFactory("optimizeCalls_and_removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.OptimizeCalls passes = new com.google.javascript.jscomp.OptimizeCalls(compiler);
            if (com.google.javascript.jscomp.PassConfig.options.optimizeReturns) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeReturns(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeParameters) {
                passes.addPass(new com.google.javascript.jscomp.OptimizeParameters(compiler));
            }
            if (com.google.javascript.jscomp.PassConfig.options.optimizeCalls) {
                boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
                boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
                passes.addPass(new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, true));
            }
            return passes;
        }
    };

    final com.google.javascript.jscomp.PassFactory markPureFunctions = new com.google.javascript.jscomp.PassFactory("markPureFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PureFunctionIdentifier.Driver(compiler, com.google.javascript.jscomp.PassConfig.options.debugFunctionSideEffectsPath, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory markNoSideEffectCalls = new com.google.javascript.jscomp.PassFactory("markNoSideEffectCalls", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MarkNoSideEffectCalls(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineVariables = new com.google.javascript.jscomp.PassFactory("inlineVariables", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            if (isInliningForbidden()) {
                return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);
            } else {
                com.google.javascript.jscomp.InlineVariables.Mode mode;
                if (com.google.javascript.jscomp.PassConfig.options.inlineVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.ALL;
                } else if (com.google.javascript.jscomp.PassConfig.options.inlineLocalVariables) {
                    mode = com.google.javascript.jscomp.InlineVariables.Mode.LOCALS_ONLY;
                } else {
                    throw new java.lang.IllegalStateException("No variable inlining option set.");
                }
                return new com.google.javascript.jscomp.InlineVariables(compiler, mode, true);
            }
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineConstants = new com.google.javascript.jscomp.PassFactory("inlineConstants", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineVariables(compiler, com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory minimizeExitPoints = new com.google.javascript.jscomp.PassFactory("minimizeExitPoints", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MinimizeExitPoints(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnreachableCode = new com.google.javascript.jscomp.PassFactory("removeUnreachableCode", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.UnreachableCodeElimination(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedPrototypeProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedPrototypeProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedPrototypeProperties(compiler, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns, !com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedClassProperties = new com.google.javascript.jscomp.PassFactory("removeUnusedClassProperties", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RemoveUnusedClassProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(72).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(72).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(72).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(72).collectInput("na",na);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(72).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(72).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(72).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        na.process(externs, root);

                    java.lang.String reportPath = com.google.javascript.jscomp.PassConfig.options.reportPath;
                    if (reportPath != null) {
                        try {
                            com.google.common.io.Files.write(na.getHtmlReport(), new java.io.File(reportPath), com.google.common.base.Charsets.UTF_8);
                        } catch (java.io.IOException e) {
                            compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR, reportPath));
                        }
                    }
                    if (com.google.javascript.jscomp.PassConfig.options.smartNameRemoval) {
                        na.removeUnreferenced();
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory smartNamePass2 = new com.google.javascript.jscomp.PassFactory("smartNamePass", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnalyzer na = new com.google.javascript.jscomp.NameAnalyzer(compiler, false);
                    na.process(externs, root);
                    na.removeUnreferenced();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineSimpleMethods = new com.google.javascript.jscomp.PassFactory("inlineSimpleMethods", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.InlineSimpleMethods(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory deadAssignmentsElimination = new com.google.javascript.jscomp.PassFactory("deadAssignmentsElimination", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.DeadAssignmentsElimination(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory inlineFunctions = new com.google.javascript.jscomp.PassFactory("inlineFunctions", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean enableBlockInlining = !isInliningForbidden();
            return new com.google.javascript.jscomp.InlineFunctions(compiler, compiler.getUniqueNameIdSupplier(), com.google.javascript.jscomp.PassConfig.options.inlineFunctions, com.google.javascript.jscomp.PassConfig.options.inlineLocalFunctions, enableBlockInlining, options.assumeStrictThis() || (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT), com.google.javascript.jscomp.PassConfig.options.assumeClosuresOnlyCaptureReferences);
        }
    };

    final com.google.javascript.jscomp.PassFactory removeUnusedVars = new com.google.javascript.jscomp.PassFactory("removeUnusedVars", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            boolean removeOnlyLocals = com.google.javascript.jscomp.PassConfig.options.removeUnusedLocalVars && (!com.google.javascript.jscomp.PassConfig.options.removeUnusedVars);
            boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
            return new com.google.javascript.jscomp.RemoveUnusedVars(compiler, !removeOnlyLocals, preserveAnonymousFunctionNames, false);
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleCodeMotion = new com.google.javascript.jscomp.PassFactory("crossModuleCodeMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
        }
    };

    final com.google.javascript.jscomp.PassFactory crossModuleMethodMotion = new com.google.javascript.jscomp.PassFactory("crossModuleMethodMotion", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CrossModuleMethodMotion(compiler, crossModuleIdGenerator, com.google.javascript.jscomp.PassConfig.options.removeUnusedPrototypePropertiesInExterns);
        }
    };

    final com.google.javascript.jscomp.PassFactory specializeInitialModule = new com.google.javascript.jscomp.PassFactory("specializeInitialModule", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SpecializeModule(compiler, devirtualizePrototypeMethods, inlineFunctions, removeUnusedPrototypeProperties);
        }
    };

    final com.google.javascript.jscomp.PassFactory flowSensitiveInlineVariables = new com.google.javascript.jscomp.PassFactory("flowSensitiveInlineVariables", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FlowSensitiveInlineVariables(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory coalesceVariableNames = new com.google.javascript.jscomp.PassFactory("coalesceVariableNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CoalesceVariableNames(compiler, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames);
        }
    };

    final com.google.javascript.jscomp.PassFactory exploitAssign = new com.google.javascript.jscomp.PassFactory("exploitAssign", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.PeepholeOptimizationsPass(compiler, new com.google.javascript.jscomp.ExploitAssigns());
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseVariableDeclarations = new com.google.javascript.jscomp.PassFactory("collapseVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory groupVariableDeclarations = new com.google.javascript.jscomp.PassFactory("groupVariableDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.GroupVariableDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory extractPrototypeMemberDeclarations = new com.google.javascript.jscomp.PassFactory("extractPrototypeMemberDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations(compiler, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.Pattern.USE_GLOBAL_TEMP);
        }
    };

    final com.google.javascript.jscomp.PassFactory rewriteFunctionExpressions = new com.google.javascript.jscomp.PassFactory("rewriteFunctionExpressions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.FunctionRewriter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory collapseAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("collapseAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CollapseAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory moveFunctionDeclarations = new com.google.javascript.jscomp.PassFactory("moveFunctionDeclarations", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.MoveFunctionDeclarations(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameUnmappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.NameAnonymousFunctions(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory nameMappedAnonymousFunctions = new com.google.javascript.jscomp.PassFactory("nameAnonymousFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    com.google.javascript.jscomp.NameAnonymousFunctionsMapped naf = new com.google.javascript.jscomp.NameAnonymousFunctionsMapped(compiler);
                    naf.process(externs, root);
                    anonymousFunctionNameMap = naf.getFunctionMap();
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasExternals = new com.google.javascript.jscomp.PassFactory("aliasExternals", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasExternals(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.unaliasableGlobals, com.google.javascript.jscomp.PassConfig.options.aliasableGlobals);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasStrings = new com.google.javascript.jscomp.PassFactory("aliasStrings", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasStrings(compiler, compiler.getModuleGraph(), com.google.javascript.jscomp.PassConfig.options.aliasAllStrings ? null : com.google.javascript.jscomp.PassConfig.options.aliasableStrings, com.google.javascript.jscomp.PassConfig.options.aliasStringsBlacklist, com.google.javascript.jscomp.PassConfig.options.outputJsStringUsage);
        }
    };

    final com.google.javascript.jscomp.PassFactory aliasKeywords = new com.google.javascript.jscomp.PassFactory("aliasKeywords", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AliasKeywords(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory objectPropertyStringPostprocess = new com.google.javascript.jscomp.PassFactory("ObjectPropertyStringPostprocess", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ObjectPropertyStringPostprocess(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory ambiguateProperties = new com.google.javascript.jscomp.PassFactory("ambiguateProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AmbiguateProperties(compiler, com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters());
        }
    };

    final com.google.javascript.jscomp.PassFactory markUnnormalized = new com.google.javascript.jscomp.PassFactory("markUnnormalized", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    compiler.setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage.RAW);
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory denormalize = new com.google.javascript.jscomp.PassFactory("denormalize", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.Denormalize(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory invertContextualRenaming = new com.google.javascript.jscomp.PassFactory("invertNames", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return com.google.javascript.jscomp.MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory renameProperties = new com.google.javascript.jscomp.PassFactory("renameProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputPropertyMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevPropertyMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    propertyMap = runPropertyRenaming(compiler, prevPropertyMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runPropertyRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevPropertyMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        switch (com.google.javascript.jscomp.PassConfig.options.propertyRenaming) {
            case HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto = new com.google.javascript.jscomp.RenamePrototypes(compiler, false, reservedChars, prevPropertyMap);
                rproto.process(externs, root);
                return rproto.getPropertyMap();
            case AGGRESSIVE_HEURISTIC :
                com.google.javascript.jscomp.RenamePrototypes rproto2 = new com.google.javascript.jscomp.RenamePrototypes(compiler, true, reservedChars, prevPropertyMap);
                rproto2.process(externs, root);
                return rproto2.getPropertyMap();
            case ALL_UNQUOTED :
                com.google.javascript.jscomp.RenameProperties rprop = new com.google.javascript.jscomp.RenameProperties(compiler, com.google.javascript.jscomp.PassConfig.options.propertyAffinity, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, prevPropertyMap, reservedChars);
                rprop.process(externs, root);
                return rprop.getPropertyMap();
            default :
                throw new java.lang.IllegalStateException("Unrecognized property renaming policy");
        }
    }

    final com.google.javascript.jscomp.PassFactory renameVars = new com.google.javascript.jscomp.PassFactory("renameVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            com.google.javascript.jscomp.VariableMap map = null;
            if (com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized != null) {
                try {
                    map = com.google.javascript.jscomp.VariableMap.fromBytes(com.google.javascript.jscomp.PassConfig.options.inputVariableMapSerialized);
                } catch (java.text.ParseException e) {
                    return new com.google.javascript.jscomp.ErrorPass(compiler, com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE, e.getMessage()));
                }
            }
            final com.google.javascript.jscomp.VariableMap prevVariableMap = map;
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    variableMap = runVariableRenaming(compiler, prevVariableMap, externs, root);
                }
            };
        }
    };

    private com.google.javascript.jscomp.VariableMap runVariableRenaming(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.VariableMap prevVariableMap, com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        char[] reservedChars = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming.getReservedCharacters();
        boolean preserveAnonymousFunctionNames = com.google.javascript.jscomp.PassConfig.options.anonymousFunctionNaming != com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        com.google.javascript.jscomp.RenameVars rn = new com.google.javascript.jscomp.RenameVars(compiler, com.google.javascript.jscomp.PassConfig.options.renamePrefix, com.google.javascript.jscomp.PassConfig.options.variableRenaming == com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL, preserveAnonymousFunctionNames, com.google.javascript.jscomp.PassConfig.options.generatePseudoNames, com.google.javascript.jscomp.PassConfig.options.shadowVariables, prevVariableMap, reservedChars, exportedNames);
        rn.process(externs, root);
        return rn.getVariableMap();
    }

    final com.google.javascript.jscomp.PassFactory renameLabels = new com.google.javascript.jscomp.PassFactory("renameLabels", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.RenameLabels(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory convertToDottedProperties = new com.google.javascript.jscomp.PassFactory("convertToDottedProperties", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.ConvertToDottedProperties(compiler);
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckAst = new com.google.javascript.jscomp.PassFactory("sanityCheckAst", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.AstValidator();
        }
    };

    final com.google.javascript.jscomp.PassFactory sanityCheckVars = new com.google.javascript.jscomp.PassFactory("sanityCheckVars", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.VarCheck(compiler, true);
        }
    };

    final com.google.javascript.jscomp.PassFactory instrumentFunctions = new com.google.javascript.jscomp.PassFactory("instrumentFunctions", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                    try {
                        java.io.FileReader templateFile = new java.io.FileReader(com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate);
                        new com.google.javascript.jscomp.InstrumentFunctions(compiler, functionNames, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate, com.google.javascript.jscomp.PassConfig.options.appNameStr, templateFile).process(externs, root);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.AbstractCompiler.READ_ERROR, com.google.javascript.jscomp.PassConfig.options.instrumentationTemplate));
                    }
                }
            };
        }
    };

    static com.google.javascript.jscomp.PassFactory createEmptyPass(java.lang.String name) {
        return new com.google.javascript.jscomp.PassFactory(name, true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial();
            }
        };
    }

    private com.google.javascript.jscomp.PassFactory getCustomPasses(final com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        return new com.google.javascript.jscomp.PassFactory("runCustomPasses", true) {
            @java.lang.Override
            protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
                return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.PassConfig.options.customPasses.get(executionTime));
            }
        };
    }

    private boolean isInliningForbidden() {
        return (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (com.google.javascript.jscomp.PassConfig.options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final com.google.javascript.jscomp.CompilerPass... passes) {
        return com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.common.collect.Lists.newArrayList(passes));
    }

    private static com.google.javascript.jscomp.CompilerPass runInSerial(final java.util.Collection<com.google.javascript.jscomp.CompilerPass> passes) {
        return new com.google.javascript.jscomp.CompilerPass() {
            @java.lang.Override
            public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
                for (com.google.javascript.jscomp.CompilerPass pass : passes) {
                    pass.process(externs, root);
                }
            }
        };
    }

    @com.google.common.annotations.VisibleForTesting
    static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getAdditionalReplacements(com.google.javascript.jscomp.CompilerOptions options) {
        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> additionalReplacements = com.google.common.collect.Maps.newHashMap();
        if (options.markAsCompiled || options.closurePass) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME, com.google.javascript.rhino.IR.trueNode());
        }
        if (options.closurePass && (options.locale != null)) {
            additionalReplacements.put(com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME, com.google.javascript.rhino.IR.string(options.locale));
        }
        return additionalReplacements;
    }

    final com.google.javascript.jscomp.PassFactory printNameReferenceGraph = new com.google.javascript.jscomp.PassFactory("printNameReferenceGraph", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    gc.process(externs, jsRoot);
                    java.lang.String graphFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceGraphPath;
                    try {
                        com.google.common.io.Files.write(com.google.javascript.jscomp.DotFormatter.toDot(gc.getNameReferenceGraph()), new java.io.File(graphFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
                    }
                }
            };
        }
    };

    final com.google.javascript.jscomp.PassFactory printNameReferenceReport = new com.google.javascript.jscomp.PassFactory("printNameReferenceReport", true) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(final com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.CompilerPass() {
                @java.lang.Override
                public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node jsRoot) {
                    com.google.javascript.jscomp.NameReferenceGraphConstruction gc = new com.google.javascript.jscomp.NameReferenceGraphConstruction(compiler);
                    java.lang.String reportFileName = com.google.javascript.jscomp.PassConfig.options.nameReferenceReportPath;
                    try {
                        com.google.javascript.jscomp.NameReferenceGraphReport report = new com.google.javascript.jscomp.NameReferenceGraphReport(gc.getNameReferenceGraph());
                        com.google.common.io.Files.write(report.getHtmlReport(), new java.io.File(reportFileName), com.google.common.base.Charsets.UTF_8);
                    } catch (java.io.IOException e) {
                        compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
                    }
                }
            };
        }
    };

    abstract static class HotSwapPassFactory extends com.google.javascript.jscomp.PassFactory {
        HotSwapPassFactory(java.lang.String name, boolean isOneTimePass) {
            super(name, isOneTimePass);
        }

        @java.lang.Override
        protected abstract com.google.javascript.jscomp.HotSwapCompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler);

        @java.lang.Override
        com.google.javascript.jscomp.HotSwapCompilerPass getHotSwapPass(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return this.createInternal(compiler);
        }
    }
}
[631660] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659852869121
GPR[SSUN]-1659852869121
-240150603
GPR[ESUN]-1659852869410
GPR[SSUN]-1659852869410
1051872951
GPR[SPVATF]-1659852869621
GPR[EPVATF]-1659852870844
GPR[SPS]-1659852870844
[633923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:94.
GPR[EPS]-1659852871384
GPR[SPVATF]-1659852871385
GPR[EPVATF]-1659852872573
GPR[SPS]-1659852872573
[635658] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:94.
GPR[EPS]-1659852873119
GPR[ESUN]-1659852873119
GPR[SSUN]-1659852873119
1051872951
GPR[SPVATF]-1659852873336
GPR[EPVATF]-1659852874545
GPR[SPS]-1659852874545
[637636] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:151.
GPR[EPS]-1659852875097
GPR[ESUN]-1659852875097
GPR[SSUN]-1659852875097
80988634
GPR[ESUN]-1659852875271
GPR[SSUN]-1659852875271
2433571
GPR[ESUN]-1659852875537
GPR[SSUN]-1659852875537
2433571
GPR[ESUN]-1659852875764
GPR[SSUN]-1659852875764
-675467674
GPR[ESUN]-1659852875934
GPR[SSUN]-1659852875934
1051872951
GPR[SPVATF]-1659852876332
GPR[EPVATF]-1659852878600
GPR[SPS]-1659852878600
[641684] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:124.
GPR[EPS]-1659852879145
GPR[ESUN]-1659852879145
GPR[SSUN]-1659852879145
198689906
GPR[SPVATF]-1659852879405
GPR[EPVATF]-1659852880308
GPR[SPS]-1659852880308
[643498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$ProcessExternals:476.
GPR[EPS]-1659852880959
GPR[ESUN]-1659852880959
GPR[SSUN]-1659852880959
198689906
GPR[SPVATF]-1659852881218
GPR[EPVATF]-1659852882467
GPR[SPS]-1659852882467
[645706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:661.
GPR[EPS]-1659852883167
GPR[ESUN]-1659852883167
GPR[SSUN]-1659852883167
1051872951
GPR[SPVATF]-1659852883430
GPR[EPVATF]-1659852884723
GPR[SPS]-1659852884723
[647822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:121.
GPR[EPS]-1659852885283
GPR[SPVATF]-1659852885284
GPR[EPVATF]-1659852886554
GPR[SPS]-1659852886554
[649629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:121.
GPR[EPS]-1659852887090
GPR[ESUN]-1659852887090
GPR[SSUN]-1659852887090
1051872951
GPR[SPVATF]-1659852887303
GPR[EPVATF]-1659852888585
GPR[SPS]-1659852888585
[651711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:101.
GPR[EPS]-1659852889172
GPR[SPVATF]-1659852889173
GPR[EPVATF]-1659852890498
GPR[SPS]-1659852890498
[653584] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:101.
GPR[EPS]-1659852891045
GPR[ESUN]-1659852891045
GPR[SSUN]-1659852891045
-132053243
GPR[ESUN]-1659852891233
GPR[SSUN]-1659852891233
-132053243
GPR[SPVATF]-1659852891521
GPR[EPVATF]-1659852891540
[654079] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852891540
GPR[EPVATF]-1659852891557
[654096] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852891557
GPR[SSUN]-1659852891557
-132053243
GPR[ESUN]-1659852891745
GPR[SSUN]-1659852891745
-132053243
GPR[SPVATF]-1659852891931
GPR[EPVATF]-1659852891949
[654488] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852891949
GPR[SSUN]-1659852891949
-132053243
GPR[SPVATF]-1659852892135
GPR[EPVATF]-1659852892152
[654692] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852892153
GPR[SSUN]-1659852892153
-132053243
GPR[SPVATF]-1659852892337
GPR[EPVATF]-1659852892354
[654893] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852892354
GPR[SSUN]-1659852892354
-132053243
GPR[SPVATF]-1659852892539
GPR[EPVATF]-1659852892557
[655096] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852892557
GPR[SSUN]-1659852892557
-132053243
GPR[ESUN]-1659852892742
GPR[SSUN]-1659852892742
1051872951
GPR[SPVATF]-1659852892951
GPR[EPVATF]-1659852894331
GPR[SPS]-1659852894331
[657459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ClosureCodingConvention:91.
GPR[EPS]-1659852894920
GPR[SPVATF]-1659852894920
GPR[EPVATF]-1659852896352
GPR[SPS]-1659852896353
GPR[EPS]-1659852907358
GPR[ESUN]-1659852907358
GPR[SSUN]-1659852907358
1051872951
GPR[ESUN]-1659852907571
GPR[SSUN]-1659852907571
1051872951
GPR[ESUN]-1659852907781
GPR[SSUN]-1659852907781
1051872951
GPR[ESUN]-1659852907995
GPR[SSUN]-1659852907995
198689906
GPR[SPVATF]-1659852908254
GPR[EPVATF]-1659852909490
GPR[SPS]-1659852909490
[672749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:547.
GPR[EPS]-1659852910210
GPR[SPVATF]-1659852910210
GPR[EPVATF]-1659852911395
GPR[SPS]-1659852911395
[674634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:547.
GPR[EPS]-1659852912095
GPR[ESUN]-1659852912095
GPR[SSUN]-1659852912095
198689906
GPR[ESUN]-1659852912354
GPR[SSUN]-1659852912354
198689906
GPR[ESUN]-1659852912607
GPR[SSUN]-1659852912607
198689906
GPR[ESUN]-1659852912860
GPR[SSUN]-1659852912860
-1966087783
GPR[ESUN]-1659852913044
GPR[SSUN]-1659852913044
-1966087783
GPR[SPVATF]-1659852913227
GPR[EPVATF]-1659852913245
[675784] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659852913246
GPR[EPVATF]-1659852913263
[675802] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852913263
GPR[SSUN]-1659852913263
-1966087783
GPR[SPVATF]-1659852913448
GPR[EPVATF]-1659852913465
[676004] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659852913465
GPR[SSUN]-1659852913465
1884422692
GPR[SPVATF]-1659852913674
GPR[EPVATF]-1659852914851
GPR[SPS]-1659852914851
[677972] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:232.
GPR[EPS]-1659852915433
GPR[ESUN]-1659852915433
GPR[SSUN]-1659852915433
198689906
GPR[SPVATF]-1659852915691
GPR[EPVATF]-1659852916872
GPR[SPS]-1659852916872
[680140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:762.
GPR[EPS]-1659852917601
GPR[ESUN]-1659852917601
GPR[SSUN]-1659852917602
198689906
GPR[SPVATF]-1659852917861
GPR[EPVATF]-1659852919071
GPR[SPS]-1659852919071
[682310] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:696.
GPR[EPS]-1659852919771
GPR[ESUN]-1659852919771
GPR[SSUN]-1659852919771
198689906
GPR[SPVATF]-1659852920031
GPR[EPVATF]-1659852921294
GPR[SPS]-1659852921294
[684530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:695.
GPR[EPS]-1659852921991
GPR[SPVATF]-1659852921992
GPR[EPVATF]-1659852923216
GPR[SPS]-1659852923216
[686455] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:695.
GPR[EPS]-1659852923916
GPR[ESUN]-1659852923916
GPR[SSUN]-1659852923916
198689906
GPR[SPVATF]-1659852924176
GPR[EPVATF]-1659852925395
GPR[SPS]-1659852925395
[688633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:692.
GPR[EPS]-1659852926094
GPR[ESUN]-1659852926094
GPR[SSUN]-1659852926094
198689906
GPR[SPVATF]-1659852926353
GPR[EPVATF]-1659852927564
GPR[SPS]-1659852927564
[690840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:687.
GPR[EPS]-1659852928301
GPR[SPVATF]-1659852928301
GPR[EPVATF]-1659852929547
GPR[SPS]-1659852929547
[692790] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:687.
GPR[EPS]-1659852930251
GPR[ESUN]-1659852930251
GPR[SSUN]-1659852930251
198689906
GPR[ESUN]-1659852930512
GPR[SSUN]-1659852930512
1965452846
GPR[SPVATF]-1659852930721
GPR[EPVATF]-1659852931980
GPR[SPS]-1659852931980
[695115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:210.
GPR[EPS]-1659852932576
GPR[ESUN]-1659852932576
GPR[SSUN]-1659852932576
198689906
GPR[SPVATF]-1659852932837
GPR[EPVATF]-1659852934116
GPR[SPS]-1659852934116
[697367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1304.
GPR[EPS]-1659852934828
GPR[ESUN]-1659852934828
GPR[SSUN]-1659852934828
198689906
GPR[SPVATF]-1659852935088
GPR[EPVATF]-1659852936426
GPR[SPS]-1659852936426
[699661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1302.
GPR[EPS]-1659852937122
GPR[ESUN]-1659852937122
GPR[SSUN]-1659852937122
198689906
GPR[SPVATF]-1659852937389
GPR[EPVATF]-1659852938749
GPR[SPS]-1659852938749
[702030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1301.
GPR[EPS]-1659852939491
GPR[ESUN]-1659852939491
GPR[SSUN]-1659852939491
198689906
GPR[ESUN]-1659852939753
GPR[SSUN]-1659852939753
198689906
GPR[SPVATF]-1659852940013
GPR[EPVATF]-1659852941393
GPR[SPS]-1659852941393
[704634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1779.
GPR[EPS]-1659852942095
GPR[ESUN]-1659852942095
GPR[SSUN]-1659852942095
2433571
GPR[SPVATF]-1659852942327
GPR[EPVATF]-1659852943019
GPR[SPS]-1659852943019
[706113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659852943574
GPR[ESUN]-1659852943574
GPR[SSUN]-1659852943575
2433571
GPR[SPVATF]-1659852943805
GPR[EPVATF]-1659852944513
GPR[SPS]-1659852944513
[707625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1018.
GPR[EPS]-1659852945086
GPR[ESUN]-1659852945086
GPR[SSUN]-1659852945086
2433571
GPR[ESUN]-1659852945315
GPR[SSUN]-1659852945315
198689906
GPR[SPVATF]-1659852945573
GPR[EPVATF]-1659852947106
GPR[SPS]-1659852947106
[711754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:895.
GPR[EPS]-1659852949215
GPR[ESUN]-1659852949215
GPR[SSUN]-1659852949215
198689906
GPR[ESUN]-1659852949967
GPR[SSUN]-1659852949967
198689906
GPR[SPVATF]-1659852950497
GPR[EPVATF]-1659852952320
GPR[SPS]-1659852952320
[715701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1684.
GPR[EPS]-1659852953162
GPR[ESUN]-1659852953162
GPR[SSUN]-1659852953162
2433571
GPR[ESUN]-1659852953396
GPR[SSUN]-1659852953396
2433571
GPR[ESUN]-1659852953628
GPR[SSUN]-1659852953628
2433571
GPR[SPVATF]-1659852953857
GPR[EPVATF]-1659852954426
GPR[SPS]-1659852954426
[717530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1022.
GPR[EPS]-1659852954991
GPR[ESUN]-1659852954991
GPR[SSUN]-1659852954991
2433571
GPR[SPVATF]-1659852955238
GPR[EPVATF]-1659852955826
GPR[SPS]-1659852955826
[718934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1021.
GPR[EPS]-1659852956396
GPR[ESUN]-1659852956396
GPR[SSUN]-1659852956396
2433571
GPR[SPVATF]-1659852956626
GPR[EPVATF]-1659852957234
GPR[SPS]-1659852957234
[720334] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1020.
GPR[EPS]-1659852957795
GPR[ESUN]-1659852957795
GPR[SSUN]-1659852957795
2433571
GPR[SPVATF]-1659852958029
GPR[EPVATF]-1659852958613
GPR[SPS]-1659852958613
[721714] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659852959176
GPR[ESUN]-1659852959176
GPR[SSUN]-1659852959176
2433571
GPR[ESUN]-1659852959406
GPR[SSUN]-1659852959406
2433571
GPR[SPVATF]-1659852959633
GPR[EPVATF]-1659852960197
GPR[SPS]-1659852960197
[723336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1012.
GPR[EPS]-1659852960797
GPR[ESUN]-1659852960797
GPR[SSUN]-1659852960797
2433571
GPR[ESUN]-1659852961027
GPR[SSUN]-1659852961027
2433571
GPR[SPVATF]-1659852961254
GPR[EPVATF]-1659852961815
GPR[SPS]-1659852961815
[724949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1004.
GPR[EPS]-1659852962410
GPR[ESUN]-1659852962410
GPR[SSUN]-1659852962410
2433571
GPR[ESUN]-1659852962673
GPR[SSUN]-1659852962673
2433571
GPR[ESUN]-1659852962901
GPR[SSUN]-1659852962901
198689906
GPR[ESUN]-1659852963157
GPR[SSUN]-1659852963157
198689906
GPR[SPVATF]-1659852963411
GPR[EPVATF]-1659852964626
GPR[SPS]-1659852964626
[1093592] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659853331053
GPR[SSUN]-1659853331053
198689906
GPR[SPVATF]-1659853331478
GPR[EPVATF]-1659853332971
GPR[SPS]-1659853332971
[1096235] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1297.
GPR[EPS]-1659853333696
GPR[SPVATF]-1659853333696
GPR[EPVATF]-1659853334881
GPR[SPS]-1659853334881
[1098133] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1297.
GPR[EPS]-1659853335594
GPR[ESUN]-1659853335594
GPR[SSUN]-1659853335594
198689906
GPR[ESUN]-1659853335858
GPR[SSUN]-1659853335858
198689906
GPR[SPVATF]-1659853336115
GPR[EPVATF]-1659853337331
GPR[SPS]-1659853337331
[1100592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:319.
GPR[EPS]-1659853338053
GPR[ESUN]-1659853338053
GPR[SSUN]-1659853338053
198689906
GPR[SPVATF]-1659853338312
GPR[EPVATF]-1659853339524
GPR[SPS]-1659853339524
[1102779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:318.
GPR[EPS]-1659853340240
GPR[ESUN]-1659853340240
GPR[SSUN]-1659853340240
198689906
GPR[SPVATF]-1659853340516
GPR[EPVATF]-1659853341680
GPR[SPS]-1659853341680
[1104922] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:317.
GPR[EPS]-1659853342383
GPR[ESUN]-1659853342383
GPR[SSUN]-1659853342383
198689906
GPR[ESUN]-1659853342642
GPR[SSUN]-1659853342642
198689906
GPR[ESUN]-1659853342911
GPR[SSUN]-1659853342911
198689906
GPR[SPVATF]-1659853343171
GPR[EPVATF]-1659853344340
GPR[SPS]-1659853344340
[1107648] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1796.
GPR[EPS]-1659853345109
GPR[ESUN]-1659853345109
GPR[SSUN]-1659853345109
198689906
GPR[SPVATF]-1659853345370
GPR[EPVATF]-1659853346587
GPR[SPS]-1659853346587
[1109829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1795.
GPR[EPS]-1659853347290
GPR[ESUN]-1659853347290
GPR[SSUN]-1659853347290
198689906
GPR[ESUN]-1659853347551
GPR[SSUN]-1659853347551
198689906
GPR[SPVATF]-1659853347809
GPR[EPVATF]-1659853349010
GPR[SPS]-1659853349010
[1112292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1778.
GPR[EPS]-1659853349753
GPR[SPVATF]-1659853349753
GPR[EPVATF]-1659853350990
GPR[SPS]-1659853350990
[1114235] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1778.
GPR[EPS]-1659853351696
GPR[ESUN]-1659853351696
GPR[SSUN]-1659853351696
198689906
GPR[ESUN]-1659853351960
GPR[SSUN]-1659853351960
198689906
GPR[ESUN]-1659853352219
GPR[SSUN]-1659853352219
198689906
GPR[SPVATF]-1659853352481
GPR[EPVATF]-1659853353743
GPR[SPS]-1659853353743
[1116986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1607.
GPR[EPS]-1659853354447
GPR[ESUN]-1659853354447
GPR[SSUN]-1659853354447
198689906
GPR[ESUN]-1659853354728
GPR[SSUN]-1659853354728
198689906
GPR[SPVATF]-1659853354988
GPR[EPVATF]-1659853356236
GPR[SPS]-1659853356236
[1119485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1599.
GPR[EPS]-1659853356946
GPR[ESUN]-1659853356946
GPR[SSUN]-1659853356946
198689906
GPR[ESUN]-1659853357210
GPR[SSUN]-1659853357210
80988634
GPR[ESUN]-1659853357383
GPR[SSUN]-1659853357384
198689906
GPR[ESUN]-1659853357642
GPR[SSUN]-1659853357642
198689906
GPR[SPVATF]-1659853357921
GPR[EPVATF]-1659853359190
GPR[SPS]-1659853359190
[1122446] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$JsNameRefNode:315.
GPR[EPS]-1659853359907
GPR[ESUN]-1659853359907
GPR[SSUN]-1659853359907
198689906
GPR[ESUN]-1659853360167
GPR[SSUN]-1659853360167
-89962275
GPR[ESUN]-1659853360361
GPR[SSUN]-1659853360362
-89962275
GPR[SPVATF]-1659853360555
GPR[EPVATF]-1659853361849
GPR[SPS]-1659853361850
[1124941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:130.
GPR[EPS]-1659853362402
GPR[ESUN]-1659853362402
GPR[SSUN]-1659853362402
-89962275
GPR[SPVATF]-1659853362602
GPR[EPVATF]-1659853363963
GPR[SPS]-1659853363963
[1127017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:127.
GPR[EPS]-1659853364478
GPR[ESUN]-1659853364478
GPR[SSUN]-1659853364478
-89962275
GPR[SPVATF]-1659853364679
GPR[EPVATF]-1659853366027
GPR[SPS]-1659853366027
[1129085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:122.
GPR[EPS]-1659853366546
GPR[ESUN]-1659853366546
GPR[SSUN]-1659853366546
-89962275
GPR[SPVATF]-1659853366752
GPR[EPVATF]-1659853368102
GPR[SPS]-1659853368102
[1131181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:111.
GPR[EPS]-1659853368642
GPR[SPVATF]-1659853368642
GPR[EPVATF]-1659853370032
GPR[SPS]-1659853370032
[1133085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:111.
GPR[EPS]-1659853370546
GPR[ESUN]-1659853370546
GPR[SSUN]-1659853370546
-89962275
GPR[SPVATF]-1659853370743
GPR[EPVATF]-1659853372278
GPR[SPS]-1659853372278
[1135319] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:106.
GPR[EPS]-1659853372780
GPR[ESUN]-1659853372780
GPR[SSUN]-1659853372780
-89962275
GPR[ESUN]-1659853372977
GPR[SSUN]-1659853372977
-89962275
GPR[SPVATF]-1659853373170
GPR[EPVATF]-1659853374696
GPR[SPS]-1659853374696
[1146635] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:99.
GPR[EPS]-1659853384096
GPR[SPVATF]-1659853384096
GPR[EPVATF]-1659853386457
GPR[SPS]-1659853386457
[1150431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:99.
GPR[EPS]-1659853387892
GPR[ESUN]-1659853387892
GPR[SSUN]-1659853387892
-89962275
GPR[ESUN]-1659853388102
GPR[SSUN]-1659853388102
-89962275
GPR[SPVATF]-1659853388296
GPR[EPVATF]-1659853389596
GPR[SPS]-1659853389596
[1152666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:95.
GPR[EPS]-1659853390127
GPR[ESUN]-1659853390127
GPR[SSUN]-1659853390127
-89962275
GPR[ESUN]-1659853390327
GPR[SSUN]-1659853390327
-89962275
GPR[ESUN]-1659853390522
GPR[SSUN]-1659853390522
-89962275
GPR[SPVATF]-1659853390715
GPR[EPVATF]-1659853391960
GPR[SPS]-1659853391960
[1155124] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:71.
GPR[EPS]-1659853392585
GPR[ESUN]-1659853392585
GPR[SSUN]-1659853392585
-89962275
GPR[SPVATF]-1659853392806
GPR[EPVATF]-1659853394034
GPR[SPS]-1659853394034
[1157089] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstChangeProxy:70.
GPR[EPS]-1659853394550
GPR[ESUN]-1659853394550
GPR[SSUN]-1659853394550
198689906
GPR[ESUN]-1659853394819
GPR[SSUN]-1659853394819
198689906
GPR[ESUN]-1659853395077
GPR[SSUN]-1659853395077
198689906
GPR[ESUN]-1659853395362
GPR[SSUN]-1659853395362
198689906
GPR[ESUN]-1659853395620
GPR[SSUN]-1659853395620
198689906
GPR[SPVATF]-1659853395878
GPR[EPVATF]-1659853397089
GPR[SPS]-1659853397089
[1160378] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1717.
GPR[EPS]-1659853397839
GPR[SPVATF]-1659853397839
GPR[EPVATF]-1659853399088
GPR[SPS]-1659853399088
[1162361] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1717.
GPR[EPS]-1659853399822
GPR[ESUN]-1659853399822
GPR[SSUN]-1659853399822
198689906
GPR[ESUN]-1659853400086
GPR[SSUN]-1659853400086
198689906
GPR[SPVATF]-1659853400344
GPR[EPVATF]-1659853401601
GPR[SPS]-1659853401601
[1164886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1698.
GPR[EPS]-1659853402347
GPR[ESUN]-1659853402347
GPR[SSUN]-1659853402347
198689906
GPR[SPVATF]-1659853402610
GPR[EPVATF]-1659853403893
GPR[SPS]-1659853403893
[1167180] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1687.
GPR[EPS]-1659853404641
GPR[SPVATF]-1659853404642
GPR[EPVATF]-1659853405897
GPR[SPS]-1659853405897
[1169136] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1687.
GPR[EPS]-1659853406597
GPR[ESUN]-1659853406597
GPR[SSUN]-1659853406597
198689906
GPR[SPVATF]-1659853406892
GPR[EPVATF]-1659853408153
GPR[SPS]-1659853408153
[1171387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1683.
GPR[EPS]-1659853408848
GPR[ESUN]-1659853408848
GPR[SSUN]-1659853408848
198689906
GPR[ESUN]-1659853409108
GPR[SSUN]-1659853409108
198689906
GPR[SPVATF]-1659853409399
GPR[EPVATF]-1659853410723
GPR[SPS]-1659853410723
[1173953] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1670.
GPR[EPS]-1659853411414
GPR[ESUN]-1659853411414
GPR[SSUN]-1659853411414
198689906
GPR[SPVATF]-1659853411702
GPR[EPVATF]-1659853413064
GPR[SPS]-1659853413064
[1176334] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1666.
GPR[EPS]-1659853413795
GPR[ESUN]-1659853413795
GPR[SSUN]-1659853413795
198689906
GPR[SPVATF]-1659853414057
GPR[EPVATF]-1659853415440
GPR[SPS]-1659853415440
[1178673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1659.
GPR[EPS]-1659853416134
GPR[ESUN]-1659853416134
GPR[SSUN]-1659853416134
198689906
GPR[SPVATF]-1659853416419
GPR[EPVATF]-1659853417840
GPR[SPS]-1659853417840
[1181085] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1654.
GPR[EPS]-1659853418546
GPR[ESUN]-1659853418546
GPR[SSUN]-1659853418546
198689906
GPR[ESUN]-1659853418826
GPR[SSUN]-1659853418826
198689906
GPR[SPVATF]-1659853419089
GPR[EPVATF]-1659853420550
GPR[SPS]-1659853420550
[1183800] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1644.
GPR[EPS]-1659853421261
GPR[ESUN]-1659853421261
GPR[SSUN]-1659853421261
198689906
GPR[SPVATF]-1659853421526
GPR[EPVATF]-1659853423017
GPR[SPS]-1659853423017
[1186267] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1621.
GPR[EPS]-1659853423728
GPR[SPVATF]-1659853423728
GPR[EPVATF]-1659853426345
GPR[SPS]-1659853426345
[1189726] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1621.
GPR[EPS]-1659853427187
GPR[ESUN]-1659853427187
GPR[SSUN]-1659853427187
198689906
GPR[SPVATF]-1659853427483
GPR[EPVATF]-1659853428749
GPR[SPS]-1659853428750
[1192044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1120.
GPR[EPS]-1659853429505
GPR[ESUN]-1659853429505
GPR[SSUN]-1659853429505
198689906
GPR[ESUN]-1659853429767
GPR[SSUN]-1659853429767
198689906
GPR[SPVATF]-1659853430022
GPR[EPVATF]-1659853431290
GPR[SPS]-1659853431290
[1194530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$RemoveListener:1007.
GPR[EPS]-1659853431991
GPR[ESUN]-1659853431991
GPR[SSUN]-1659853431991
2433571
GPR[ESUN]-1659853432251
GPR[SSUN]-1659853432251
881600600
GPR[ESUN]-1659853432437
GPR[SSUN]-1659853432437
2433571
GPR[SPVATF]-1659853432666
GPR[EPVATF]-1659853433260
GPR[SPS]-1659853433260
[1196424] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659853433885
GPR[ESUN]-1659853433885
GPR[SSUN]-1659853433885
2433571
GPR[SPVATF]-1659853434116
GPR[EPVATF]-1659853434717
GPR[SPS]-1659853434717
[1197930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:980.
GPR[EPS]-1659853435391
GPR[ESUN]-1659853435391
GPR[SSUN]-1659853435391
2433571
GPR[SPVATF]-1659853435624
GPR[EPVATF]-1659853436192
GPR[SPS]-1659853436192
[1199317] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(151).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(151).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[1199317] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659853436778
GPR[SSUN]-1659853436778
2433571
GPR[SPVATF]-1659853437007
GPR[EPVATF]-1659853437573
GPR[SPS]-1659853437573
[1200711] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        if (last != null) {
            last.next = children;
        }
        last = children.getLastSibling();
        if (first == null) {
            first = children;
        }
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node != null, "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.parent = this;
        newChild.next = node.next;
        node.next = newChild;
        if (last == node) {
            last = newChild;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(152).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(152).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        int lineOffset = (file == null) ? java.lang.Integer.MIN_VALUE : file.getLineOffset(getLineno());
        return lineOffset + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.STRING) {
            int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
            if (quoted1 != quoted2) {
                return false;
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[1200711] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659853438172
GPR[SSUN]-1659853438172
2433571
GPR[SPVATF]-1659853438403
GPR[EPVATF]-1659853438967
GPR[SPS]-1659853438967
[1202111] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659853439572
GPR[ESUN]-1659853439572
GPR[SSUN]-1659853439572
2433571
GPR[SPVATF]-1659853439802
GPR[EPVATF]-1659853440374
GPR[SPS]-1659853440374
[1203544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:972.
GPR[EPS]-1659853441005
GPR[ESUN]-1659853441005
GPR[SSUN]-1659853441005
2433571
GPR[SPVATF]-1659853441239
GPR[EPVATF]-1659853441809
GPR[SPS]-1659853441809
[1204955] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659853442416
GPR[ESUN]-1659853442416
GPR[SSUN]-1659853442416
2433571
GPR[ESUN]-1659853442649
GPR[SSUN]-1659853442649
2433571
GPR[ESUN]-1659853442879
GPR[SSUN]-1659853442879
2433571
GPR[SPVATF]-1659853443108
GPR[EPVATF]-1659853443702
GPR[SPS]-1659853443702
[1206891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659853444352
GPR[ESUN]-1659853444352
GPR[SSUN]-1659853444352
2433571
GPR[SPVATF]-1659853444588
GPR[EPVATF]-1659853445173
GPR[SPS]-1659853445173
[1208326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:961.
GPR[EPS]-1659853445787
GPR[ESUN]-1659853445787
GPR[SSUN]-1659853445787
2433571
GPR[SPVATF]-1659853446019
GPR[EPVATF]-1659853446597
GPR[SPS]-1659853446597
[1209779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:874.
GPR[EPS]-1659853447240
GPR[ESUN]-1659853447240
GPR[SSUN]-1659853447240
2433571
GPR[SPVATF]-1659853447474
GPR[EPVATF]-1659853448060
GPR[SPS]-1659853448060
[1211238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:873.
GPR[EPS]-1659853448699
GPR[ESUN]-1659853448699
GPR[SSUN]-1659853448699
2433571
GPR[SPVATF]-1659853448998
GPR[EPVATF]-1659853449603
GPR[SPS]-1659853449603
[1212795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:868.
GPR[EPS]-1659853450256
GPR[ESUN]-1659853450256
GPR[SSUN]-1659853450256
2433571
GPR[ESUN]-1659853450490
GPR[SSUN]-1659853450490
2433571
GPR[ESUN]-1659853450722
GPR[SSUN]-1659853450722
-1966087783
GPR[ESUN]-1659853450908
GPR[SSUN]-1659853450908
198689906
GPR[ESUN]-1659853451165
GPR[SSUN]-1659853451165
1884422692
GPR[SPVATF]-1659853451375
GPR[EPVATF]-1659853452678
GPR[SPS]-1659853452678
[1215913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:320.
GPR[EPS]-1659853453374
GPR[SPVATF]-1659853453375
GPR[EPVATF]-1659853454699
GPR[SPS]-1659853454699
[1217783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:320.
GPR[EPS]-1659853455244
GPR[ESUN]-1659853455244
GPR[SSUN]-1659853455244
1884422692
GPR[ESUN]-1659853455459
GPR[SSUN]-1659853455459
1884422692
GPR[ESUN]-1659853455670
GPR[SSUN]-1659853455670
198689906
GPR[SPVATF]-1659853455927
GPR[EPVATF]-1659853457326
GPR[SPS]-1659853457326
[1220582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:534.
GPR[EPS]-1659853458043
GPR[ESUN]-1659853458043
GPR[SSUN]-1659853458043
198689906
GPR[SPVATF]-1659853458802
GPR[EPVATF]-1659853461027
GPR[SPS]-1659853461027
[1224356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1331.
GPR[EPS]-1659853461817
GPR[ESUN]-1659853461817
GPR[SSUN]-1659853461817
198689906
GPR[SPVATF]-1659853462079
GPR[EPVATF]-1659853463504
GPR[SPS]-1659853463504
[1226798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:628.
GPR[EPS]-1659853464259
GPR[ESUN]-1659853464259
GPR[SSUN]-1659853464259
-1966087783
GPR[SPVATF]-1659853464451
GPR[EPVATF]-1659853464471
[1227010] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659853464471
GPR[EPVATF]-1659853464490
[1227029] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659853464490
GPR[SSUN]-1659853464490
80988634
GPR[ESUN]-1659853464665
GPR[SSUN]-1659853464665
2433571
GPR[SPVATF]-1659853464894
GPR[EPVATF]-1659853465570
GPR[SPS]-1659853465570
[1228702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659853466163
GPR[SPVATF]-1659853466163
GPR[EPVATF]-1659853466848
GPR[SPS]-1659853466848
[1229980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659853467441
GPR[ESUN]-1659853467441
GPR[SSUN]-1659853467441
2433571
GPR[SPVATF]-1659853467722
GPR[EPVATF]-1659853468461
GPR[SPS]-1659853468461
[1236313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659853473774
GPR[ESUN]-1659853473774
GPR[SSUN]-1659853473774
2433571
GPR[ESUN]-1659853474015
GPR[SSUN]-1659853474015
2433571
GPR[SPVATF]-1659853474245
GPR[EPVATF]-1659853475037
GPR[SPS]-1659853475037
[1238445] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659853475906
GPR[SPVATF]-1659853475906
GPR[EPVATF]-1659853476557
GPR[SPS]-1659853476557
[1239744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659853477205
GPR[ESUN]-1659853477205
GPR[SSUN]-1659853477205
2433571
GPR[ESUN]-1659853477451
GPR[SSUN]-1659853477451
2433571
GPR[ESUN]-1659853477684
GPR[SSUN]-1659853477684
2433571
GPR[ESUN]-1659853477914
GPR[SSUN]-1659853477914
2433571
GPR[SPVATF]-1659853478143
GPR[EPVATF]-1659853478750
GPR[SPS]-1659853478751
[1241888] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:877.
GPR[EPS]-1659853479349
GPR[ESUN]-1659853479349
GPR[SSUN]-1659853479349
2433571
GPR[SPVATF]-1659853479581
GPR[EPVATF]-1659853480156
GPR[SPS]-1659853480156
[1243293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:872.
GPR[EPS]-1659853480754
GPR[ESUN]-1659853480754
GPR[SSUN]-1659853480754
2433571
GPR[ESUN]-1659853480985
GPR[SSUN]-1659853480985
2433571
GPR[SPVATF]-1659853481213
GPR[EPVATF]-1659853481796
GPR[SPS]-1659853481796
[1244931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:867.
GPR[EPS]-1659853482392
GPR[ESUN]-1659853482392
GPR[SSUN]-1659853482392
2433571
GPR[ESUN]-1659853482622
GPR[SSUN]-1659853482622
1884422692
GPR[SPVATF]-1659853482831
GPR[EPVATF]-1659853484108
GPR[SPS]-1659853484108
[1247217] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:319.
GPR[EPS]-1659853484678
GPR[SPVATF]-1659853484679
GPR[EPVATF]-1659853485968
GPR[SPS]-1659853485968
[1249067] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:319.
GPR[EPS]-1659853486528
GPR[ESUN]-1659853486528
GPR[SSUN]-1659853486528
1884422692
GPR[ESUN]-1659853486740
GPR[SSUN]-1659853486740
1884422692
GPR[SPVATF]-1659853486949
GPR[EPVATF]-1659853488193
GPR[SPS]-1659853488193
[1251311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:313.
GPR[EPS]-1659853488772
GPR[ESUN]-1659853488772
GPR[SSUN]-1659853488772
1884422692
GPR[SPVATF]-1659853488991
GPR[EPVATF]-1659853490301
GPR[SPS]-1659853490301
[1253169] ERROR ConstraintModelBuilder - Unable to compile the change: 
class GatherSideEffectSubexpressionsCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
    interface SideEffectAccumulator {
        public abstract boolean classDefiningCallsHaveSideEffects();

        public abstract void keepSubTree(com.google.javascript.rhino.Node original);

        public abstract void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original);

        public abstract void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects);
    }

    static final class CopySideEffectSubexpressions implements com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        private final java.util.List<com.google.javascript.rhino.Node> replacements;

        CopySideEffectSubexpressions(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> replacements) {
            this.compiler = compiler;
            this.replacements = replacements;
        }

        @java.lang.Override
        public boolean classDefiningCallsHaveSideEffects() {
            return true;
        }

        @java.lang.Override
        public void keepSubTree(com.google.javascript.rhino.Node original) {
            replacements.add(original.cloneTree());
        }

        @java.lang.Override
        public void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original) {
            com.google.common.base.Preconditions.checkArgument(original.isAnd() || original.isOr(), "Expected: AND or OR, Got: %s", com.google.javascript.rhino.Token.name(original.getType()));
            com.google.javascript.rhino.Node left = original.getFirstChild();
            com.google.javascript.rhino.Node right = left.getNext();
            com.google.javascript.rhino.Node simplifiedRight = simplifyShortCircuitBranch(right);
            com.google.javascript.rhino.Node simplified = original.cloneNode();
            simplified.addChildToBack(left.cloneTree());
            simplified.addChildToBack(simplifiedRight);
            replacements.add(simplified);
        }

        @java.lang.Override
        public void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects) {
            com.google.common.base.Preconditions.checkArgument(hook.isHook(), "Expected: HOOK, Got: %s", com.google.javascript.rhino.Token.name(hook.getType()));
            com.google.javascript.rhino.Node condition = hook.getFirstChild();
            com.google.javascript.rhino.Node thenBranch = condition.getNext();
            com.google.javascript.rhino.Node elseBranch = thenBranch.getNext();
            if (thenHasSideEffects && elseHasSideEffects) {
                com.google.javascript.rhino.Node simplified = hook.cloneNode();
                simplified.addChildToBack(condition.cloneTree());
                simplified.addChildToBack(simplifyShortCircuitBranch(thenBranch));
                simplified.addChildToBack(simplifyShortCircuitBranch(elseBranch));
                replacements.add(simplified);
            } else if (thenHasSideEffects || elseHasSideEffects) {
                int type = (thenHasSideEffects) ? com.google.javascript.rhino.Token.AND : com.google.javascript.rhino.Token.OR;
                com.google.javascript.rhino.Node body = (thenHasSideEffects) ? thenBranch : elseBranch;
                com.google.javascript.rhino.Node simplified = new com.google.javascript.rhino.Node(type, condition.cloneTree(), simplifyShortCircuitBranch(body)).copyInformationFrom(hook);
                replacements.add(simplified);
            } else {
                throw new java.lang.IllegalArgumentException("keepSimplifiedHookExpression must keep at least 1 branch");
            }
        }

        private com.google.javascript.rhino.Node simplifyShortCircuitBranch(com.google.javascript.rhino.Node node) {
            java.util.List<com.google.javascript.rhino.Node> parts = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, node, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback(compiler, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler, parts)));
            com.google.javascript.rhino.Node ret = null;
            for (com.google.javascript.rhino.Node part : parts) {
                if (ret != null) {
                    ret = com.google.javascript.rhino.IR.comma(ret, part).srcref(node);
                } else {
                    ret = part;
                }
            }
            if (ret == null) {
                throw new java.lang.IllegalArgumentException("expected at least one side effect subexpression in short " + "circuit branch.");
            }
            return ret;
        }
    }

    private static final java.util.Set<java.lang.Integer> FORBIDDEN_TYPES = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.BLOCK, com.google.javascript.rhino.Token.SCRIPT, com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Token.RETURN);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator accumulator;

    GatherSideEffectSubexpressionsCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator accumulator) {
        this.compiler = compiler;
        this.accumulator = accumulator;
    }

    private boolean isClassDefiningCall(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship classes = compiler.getCodingConvention().getClassesDefinedByCall(callNode);
        return classes != null;
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES.contains(node.getType()) || com.google.javascript.jscomp.NodeUtil.isControlStructure(node)) {
            throw new java.lang.IllegalArgumentException(com.google.javascript.rhino.Token.name(node.getType()) + " nodes are not supported.");
        }
        if (node.isFunction()) {
            return false;
        }
        if (node.isHook()) {
            return processHook(node);
        }
        if (node.isAnd() || node.isOr()) {
            return processShortCircuitExpression(node);
        }
        if (!com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(node)) {
            return true;
        } else if (node.isCall()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(177).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.accumulator",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.accumulator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.compiler",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("traversal",traversal);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(177).collectionEnds();
            }
            if (runtimeAngelicValue)
                return processFunctionCall(node);

        } else if (node.isNew()) {
            return processConstructorCall(node);
        } else {
            accumulator.keepSubTree(node);
            return false;
        }
    }

    boolean processShortCircuitExpression(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isAnd() || node.isOr(), "Expected: AND or OR, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node left = node.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(right)) {
            accumulator.keepSimplifiedShortCircuitExpression(node);
            return false;
        } else {
            return true;
        }
    }

    boolean processHook(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isHook(), "Expected: HOOK, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node condition = node.getFirstChild();
        com.google.javascript.rhino.Node ifBranch = condition.getNext();
        com.google.javascript.rhino.Node elseBranch = ifBranch.getNext();
        boolean thenHasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(ifBranch);
        boolean elseHasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(elseBranch);
        if (thenHasSideEffects || elseHasSideEffects) {
            accumulator.keepSimplifiedHookExpression(node, thenHasSideEffects, elseHasSideEffects);
            return false;
        } else {
            return true;
        }
    }

    boolean processFunctionCall(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isCall(), "Expected: CALL, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node functionName = node.getFirstChild();
        if (functionName.isName() || functionName.isGetProp()) {
            if ((!accumulator.classDefiningCallsHaveSideEffects()) && isClassDefiningCall(node)) {
                return true;
            }
        }
        if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(node)) {
            return true;
        }
        accumulator.keepSubTree(node);
        return false;
    }

    boolean processConstructorCall(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isNew(), "Expected: NEW, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(node)) {
            return true;
        }
        accumulator.keepSubTree(node);
        return false;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
    }
}
[1253169] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659853490630
GPR[SSUN]-1659853490630
198689906
GPR[SPVATF]-1659853490930
GPR[EPVATF]-1659853492194
GPR[SPS]-1659853492194
[1255450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:511.
GPR[EPS]-1659853492911
GPR[ESUN]-1659853492911
GPR[SSUN]-1659853492911
1151247408
GPR[SPVATF]-1659853493186
GPR[EPVATF]-1659853494115
GPR[SPS]-1659853494115
[1257165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReplaceIdGenerators$GatherGenerators:86.
GPR[EPS]-1659853494626
GPR[ESUN]-1659853494626
GPR[SSUN]-1659853494626
198689906
GPR[SPVATF]-1659853494889
GPR[EPVATF]-1659853496173
GPR[SPS]-1659853496173
[1259421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1367.
GPR[EPS]-1659853496882
GPR[SPVATF]-1659853496883
GPR[EPVATF]-1659853498230
GPR[SPS]-1659853498230
[1261512] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer:1367.
GPR[EPS]-1659853498973
GPR[ESUN]-1659853498973
GPR[SSUN]-1659853498974
198689906
GPR[ESUN]-1659853499236
GPR[SSUN]-1659853499236
198689906
GPR[ESUN]-1659853499493
GPR[SSUN]-1659853499493
198689906
GPR[SPVATF]-1659853499750
GPR[EPVATF]-1659853501099
GPR[SPS]-1659853501099
[1264369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:518.
GPR[EPS]-1659853501830
GPR[SPVATF]-1659853501831
GPR[EPVATF]-1659853503165
GPR[SPS]-1659853503165
[1266484] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:518.
GPR[EPS]-1659853503945
GPR[ESUN]-1659853503945
GPR[SSUN]-1659853503945
198689906
GPR[ESUN]-1659853504212
GPR[SSUN]-1659853504212
198689906
GPR[SPVATF]-1659853504468
GPR[EPVATF]-1659853505818
GPR[SPS]-1659853505818
[1269097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:911.
GPR[EPS]-1659853506558
GPR[ESUN]-1659853506558
GPR[SSUN]-1659853506558
198689906
GPR[ESUN]-1659853506820
GPR[SSUN]-1659853506820
1187751237
GPR[SPVATF]-1659853507090
GPR[EPVATF]-1659853508481
GPR[SPS]-1659853508481
[1271799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1022.
GPR[EPS]-1659853509260
GPR[SPVATF]-1659853509260
GPR[EPVATF]-1659853510671
GPR[SPS]-1659853510671
[1273929] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1022.
GPR[EPS]-1659853511390
GPR[ESUN]-1659853511390
GPR[SSUN]-1659853511390
1187751237
GPR[ESUN]-1659853511664
GPR[SSUN]-1659853511664
198689906
GPR[ESUN]-1659853511923
GPR[SSUN]-1659853511923
198689906
GPR[SPVATF]-1659853512181
GPR[EPVATF]-1659853513677
GPR[SPS]-1659853513678
[1277006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:758.
GPR[EPS]-1659853514467
GPR[ESUN]-1659853514467
GPR[SSUN]-1659853514467
198689906
GPR[SPVATF]-1659853514726
GPR[EPVATF]-1659853523483
GPR[SPS]-1659853523483
[1286776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:757.
GPR[EPS]-1659853524237
GPR[ESUN]-1659853524237
GPR[SSUN]-1659853524237
198689906
GPR[SPVATF]-1659853524499
GPR[EPVATF]-1659853526790
GPR[SPS]-1659853526790
[1290058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:537.
GPR[EPS]-1659853527519
GPR[SPVATF]-1659853527519
GPR[EPVATF]-1659853528775
GPR[SPS]-1659853528775
[1292083] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:537.
GPR[EPS]-1659853529544
GPR[ESUN]-1659853529544
GPR[SSUN]-1659853529544
198689906
GPR[SPVATF]-1659853529803
GPR[EPVATF]-1659853532043
GPR[SPS]-1659853532043
[1295460] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:517.
GPR[EPS]-1659853532921
GPR[SPVATF]-1659853532921
GPR[EPVATF]-1659853534200
GPR[SPS]-1659853534200
[1297481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDependencyScopes:517.
GPR[EPS]-1659853534942
GPR[ESUN]-1659853534942
GPR[SSUN]-1659853534942
198689906
GPR[ESUN]-1659853535204
GPR[SSUN]-1659853535204
198689906
GPR[ESUN]-1659853535463
GPR[SSUN]-1659853535463
1884422692
GPR[SPVATF]-1659853535675
GPR[EPVATF]-1659853536946
GPR[SPS]-1659853536946
[1299815] ERROR ConstraintModelBuilder - Unable to compile the change: 
class GatherSideEffectSubexpressionsCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
    interface SideEffectAccumulator {
        public abstract boolean classDefiningCallsHaveSideEffects();

        public abstract void keepSubTree(com.google.javascript.rhino.Node original);

        public abstract void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original);

        public abstract void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects);
    }

    static final class CopySideEffectSubexpressions implements com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator {
        private final com.google.javascript.jscomp.AbstractCompiler compiler;

        private final java.util.List<com.google.javascript.rhino.Node> replacements;

        CopySideEffectSubexpressions(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> replacements) {
            this.compiler = compiler;
            this.replacements = replacements;
        }

        @java.lang.Override
        public boolean classDefiningCallsHaveSideEffects() {
            return true;
        }

        @java.lang.Override
        public void keepSubTree(com.google.javascript.rhino.Node original) {
            replacements.add(original.cloneTree());
        }

        @java.lang.Override
        public void keepSimplifiedShortCircuitExpression(com.google.javascript.rhino.Node original) {
            com.google.common.base.Preconditions.checkArgument(original.isAnd() || original.isOr(), "Expected: AND or OR, Got: %s", com.google.javascript.rhino.Token.name(original.getType()));
            com.google.javascript.rhino.Node left = original.getFirstChild();
            com.google.javascript.rhino.Node right = left.getNext();
            com.google.javascript.rhino.Node simplifiedRight = simplifyShortCircuitBranch(right);
            com.google.javascript.rhino.Node simplified = original.cloneNode();
            simplified.addChildToBack(left.cloneTree());
            simplified.addChildToBack(simplifiedRight);
            replacements.add(simplified);
        }

        @java.lang.Override
        public void keepSimplifiedHookExpression(com.google.javascript.rhino.Node hook, boolean thenHasSideEffects, boolean elseHasSideEffects) {
            com.google.common.base.Preconditions.checkArgument(hook.isHook(), "Expected: HOOK, Got: %s", com.google.javascript.rhino.Token.name(hook.getType()));
            com.google.javascript.rhino.Node condition = hook.getFirstChild();
            com.google.javascript.rhino.Node thenBranch = condition.getNext();
            com.google.javascript.rhino.Node elseBranch = thenBranch.getNext();
            if (thenHasSideEffects && elseHasSideEffects) {
                com.google.javascript.rhino.Node simplified = hook.cloneNode();
                simplified.addChildToBack(condition.cloneTree());
                simplified.addChildToBack(simplifyShortCircuitBranch(thenBranch));
                simplified.addChildToBack(simplifyShortCircuitBranch(elseBranch));
                replacements.add(simplified);
            } else if (thenHasSideEffects || elseHasSideEffects) {
                int type = (thenHasSideEffects) ? com.google.javascript.rhino.Token.AND : com.google.javascript.rhino.Token.OR;
                com.google.javascript.rhino.Node body = (thenHasSideEffects) ? thenBranch : elseBranch;
                com.google.javascript.rhino.Node simplified = new com.google.javascript.rhino.Node(type, condition.cloneTree(), simplifyShortCircuitBranch(body)).copyInformationFrom(hook);
                replacements.add(simplified);
            } else {
                throw new java.lang.IllegalArgumentException("keepSimplifiedHookExpression must keep at least 1 branch");
            }
        }

        private com.google.javascript.rhino.Node simplifyShortCircuitBranch(com.google.javascript.rhino.Node node) {
            java.util.List<com.google.javascript.rhino.Node> parts = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, node, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback(compiler, new com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.CopySideEffectSubexpressions(compiler, parts)));
            com.google.javascript.rhino.Node ret = null;
            for (com.google.javascript.rhino.Node part : parts) {
                if (ret != null) {
                    ret = com.google.javascript.rhino.IR.comma(ret, part).srcref(node);
                } else {
                    ret = part;
                }
            }
            if (ret == null) {
                throw new java.lang.IllegalArgumentException("expected at least one side effect subexpression in short " + "circuit branch.");
            }
            return ret;
        }
    }

    private static final java.util.Set<java.lang.Integer> FORBIDDEN_TYPES = com.google.common.collect.ImmutableSet.of(com.google.javascript.rhino.Token.BLOCK, com.google.javascript.rhino.Token.SCRIPT, com.google.javascript.rhino.Token.VAR, com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Token.RETURN);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator accumulator;

    GatherSideEffectSubexpressionsCallback(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.SideEffectAccumulator accumulator) {
        this.compiler = compiler;
        this.accumulator = accumulator;
    }

    private boolean isClassDefiningCall(com.google.javascript.rhino.Node callNode) {
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship classes = compiler.getCodingConvention().getClassesDefinedByCall(callNode);
        return classes != null;
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        if (com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES.contains(node.getType()) || com.google.javascript.jscomp.NodeUtil.isControlStructure(node)) {
            throw new java.lang.IllegalArgumentException(com.google.javascript.rhino.Token.name(node.getType()) + " nodes are not supported.");
        }
        if (node.isFunction()) {
            return false;
        }
        if (node.isHook()) {
            return processHook(node);
        }
        if (node.isAnd() || node.isOr()) {
            return processShortCircuitExpression(node);
        }
        if (!com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(node)) {
            return true;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(193).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.accumulator",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.accumulator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectInput("node",node);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.compiler",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectInput("traversal",traversal);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectInput("com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES",com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback.FORBIDDEN_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(193).collectionEnds();
            }
            if (runtimeAngelicValue) if (node.isCall()) {
                return processFunctionCall(node);
            } else if (node.isNew()) {
                return processConstructorCall(node);
            } else {
                accumulator.keepSubTree(node);
                return false;
            }
        }
    }

    boolean processShortCircuitExpression(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isAnd() || node.isOr(), "Expected: AND or OR, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node left = node.getFirstChild();
        com.google.javascript.rhino.Node right = left.getNext();
        if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(right)) {
            accumulator.keepSimplifiedShortCircuitExpression(node);
            return false;
        } else {
            return true;
        }
    }

    boolean processHook(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isHook(), "Expected: HOOK, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node condition = node.getFirstChild();
        com.google.javascript.rhino.Node ifBranch = condition.getNext();
        com.google.javascript.rhino.Node elseBranch = ifBranch.getNext();
        boolean thenHasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(ifBranch);
        boolean elseHasSideEffects = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(elseBranch);
        if (thenHasSideEffects || elseHasSideEffects) {
            accumulator.keepSimplifiedHookExpression(node, thenHasSideEffects, elseHasSideEffects);
            return false;
        } else {
            return true;
        }
    }

    boolean processFunctionCall(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isCall(), "Expected: CALL, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        com.google.javascript.rhino.Node functionName = node.getFirstChild();
        if (functionName.isName() || functionName.isGetProp()) {
            if ((!accumulator.classDefiningCallsHaveSideEffects()) && isClassDefiningCall(node)) {
                return true;
            }
        }
        if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(node)) {
            return true;
        }
        accumulator.keepSubTree(node);
        return false;
    }

    boolean processConstructorCall(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(node.isNew(), "Expected: NEW, Got: %s", com.google.javascript.rhino.Token.name(node.getType()));
        if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(node)) {
            return true;
        }
        accumulator.keepSubTree(node);
        return false;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal traversal, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
    }
}
[1299815] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659853537277
GPR[EPVATF]-1659853538538
GPR[SPS]-1659853538538
[1301625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallback:251.
GPR[EPS]-1659853539086
GPR[ESUN]-1659853539086
GPR[SSUN]-1659853539086
198689906
GPR[SPVATF]-1659853539346
GPR[EPVATF]-1659853540664
GPR[SPS]-1659853540664
[1303921] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:634.
GPR[EPS]-1659853541382
GPR[SPVATF]-1659853541382
GPR[EPVATF]-1659853542676
GPR[SPS]-1659853542676
[1305917] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:634.
GPR[EPS]-1659853543378
GPR[ESUN]-1659853543378
GPR[SSUN]-1659853543378
198689906
GPR[ESUN]-1659853543637
GPR[SSUN]-1659853543637
198689906
GPR[ESUN]-1659853543892
GPR[SSUN]-1659853543892
198689906
GPR[SPVATF]-1659853544198
GPR[EPVATF]-1659853545476
GPR[SPS]-1659853545476
[1308703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:908.
GPR[EPS]-1659853546164
GPR[SPVATF]-1659853546164
GPR[EPVATF]-1659853547472
GPR[SPS]-1659853547472
[1310716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:908.
GPR[EPS]-1659853548177
GPR[ESUN]-1659853548177
GPR[SSUN]-1659853548177
198689906
GPR[SPVATF]-1659853548438
GPR[EPVATF]-1659853549767
GPR[SPS]-1659853549767
[1313015] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:760.
GPR[EPS]-1659853550476
GPR[SPVATF]-1659853550476
GPR[EPVATF]-1659853551836
GPR[SPS]-1659853551836
[1315087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindReferences:760.
GPR[EPS]-1659853552548
GPR[ESUN]-1659853552548
GPR[SSUN]-1659853552548
198689906
GPR[SPVATF]-1659853552811
GPR[EPVATF]-1659853554182
GPR[SPS]-1659853554182
[1317417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:625.
GPR[EPS]-1659853554878
GPR[SPVATF]-1659853554879
GPR[EPVATF]-1659853556275
GPR[SPS]-1659853556275
[1319511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NameAnalyzer$FindDeclarationsAndSetters:625.
GPR[EPS]-1659853556972
GPR[ESUN]-1659853556972
GPR[SSUN]-1659853556972
198689906
GPR[SPVATF]-1659853557284
GPR[EPVATF]-1659853558630
GPR[SPS]-1659853558630
[1464612] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[SPVATF]-1659853710553
[1488607] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659853726068
GPR[SSUN]-1659853732629
\n\nNode: host-52\n
\n\nDate: Sat 06 Aug 2022 11:29:10 PM PDT\n
End running Nopol Closure/40 results at /experiment_home///results/Nopol/Closure/40/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_40
GPR[SSLE]-1659853751517
GPR[ESLE]-1659853811523
